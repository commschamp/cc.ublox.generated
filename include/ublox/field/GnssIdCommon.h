// Generated by commsdsl2comms v3.6.4

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref ublox::field::GnssId field.

#pragma once

#include <cstdint>
#include <type_traits>

namespace ublox
{

namespace field
{

/// @brief Common types and functions for
///     @ref ublox::field::GnssId field.
struct GnssIdCommon
{
    /// @brief Values enumerator for
    ///     @ref ublox::field::GnssId field.
    enum class ValueType : std::uint8_t
    {
        GPS = 0, ///< value @b GPS.
        SBAS = 1, ///< value @b SBAS.
        Galileo = 2, ///< value @b Galileo.
        BeiDou = 3, ///< value @b BeiDou.
        IMES = 4, ///< value @b IMES.
        QZSS = 5, ///< value @b QZSS.
        GLONASS = 6, ///< value @b GLONASS.
        
        // --- Extra values generated for convenience ---
        FirstValue = 0, ///< First defined value.
        LastValue = 6, ///< Last defined value.
        ValuesLimit = 7, ///< Upper limit for defined values.
        
    };
    
    /// @brief Name of the @ref ublox::field::GnssId field.
    static const char* name()
    {
        return "gnssId";
    }
    
    /// @brief Retrieve name of the enum value
    static const char* valueName(ValueType val)
    {
        static const char* Map[] = {
            "GPS",
            "SBAS",
            "Galileo",
            "BeiDou",
            "IMES",
            "QZSS",
            "GLONASS"
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;
        
        if (MapSize <= static_cast<std::size_t>(val)) {
            return nullptr;
        }
        
        return Map[static_cast<std::size_t>(val)];
    }
    
};

/// @brief Values enumerator for
///     @ref ublox::field::GnssId field.
using GnssIdVal = GnssIdCommon::ValueType;

} // namespace field

} // namespace ublox


