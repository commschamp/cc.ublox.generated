// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains definition of <b>"CfgValPair"</b> field.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/Assert.h"
#include "comms/CompileControl.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/FloatValue.h"
#include "comms/field/IntValue.h"
#include "comms/field/Variant.h"
#include "comms/options.h"
#include "ublox/field/Alt.h"
#include "ublox/field/AltHP.h"
#include "ublox/field/CfgValData8.h"
#include "ublox/field/CfgValL.h"
#include "ublox/field/CfgValPairCommon.h"
#include "ublox/field/CfgValR4.h"
#include "ublox/field/CfgValR8.h"
#include "ublox/field/CfgValSat.h"
#include "ublox/field/CfgValU1.h"
#include "ublox/field/CfgValU2.h"
#include "ublox/field/CfgValU4.h"
#include "ublox/field/CfgValU8.h"
#include "ublox/field/CfgValUartDataBits.h"
#include "ublox/field/CfgValUartParity.h"
#include "ublox/field/CfgValUartStopBits.h"
#include "ublox/field/EcefHP.h"
#include "ublox/field/EcefX.h"
#include "ublox/field/EcefY.h"
#include "ublox/field/EcefZ.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/FixedPosAcc.h"
#include "ublox/field/GeofenceRadius.h"
#include "ublox/field/InfMask.h"
#include "ublox/field/Lat.h"
#include "ublox/field/LatHP.h"
#include "ublox/field/Lon.h"
#include "ublox/field/LonHP.h"
#include "ublox/field/NmeaVersion.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref CfgValPair field.
/// @tparam TOpt Protocol options.
template <typename TOpt = ublox::options::DefaultOptions>
struct CfgValPairMembers
{
    /// @brief Scope for all the member fields of
    ///     @ref BdsUsePrn1to5 field.
    struct BdsUsePrn1to5Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271843348L>,
                comms::option::def::ValidNumValue<271843348L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271843348L>,
                    comms::option::def::ValidNumValue<271843348L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::BdsUsePrn1to5MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::BdsUsePrn1to5MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271843348L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-BDS-USE_PRN_1_TO_5"</b> field.
    class BdsUsePrn1to5 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename BdsUsePrn1to5Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename BdsUsePrn1to5Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::BdsUsePrn1to5Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::BdsUsePrn1to5Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::BdsUsePrn1to5Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceConflvl field.
    struct GeofenceConflvlMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539230225L>,
                comms::option::def::ValidNumValue<539230225L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539230225L>,
                    comms::option::def::ValidNumValue<539230225L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539230225L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 5>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 5>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceConflvlMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-CONFLVL"</b> field.
    class GeofenceConflvl : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceConflvlMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceConflvlMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceConflvlMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceConflvlMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceConflvlCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceUsePio field.
    struct GeofenceUsePioMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270794770L>,
                comms::option::def::ValidNumValue<270794770L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270794770L>,
                    comms::option::def::ValidNumValue<270794770L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUsePioMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUsePioMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270794770L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-USE_PIO"</b> field.
    class GeofenceUsePio : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceUsePioMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceUsePioMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUsePioMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUsePioMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceUsePioCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofencePinpol field.
    struct GeofencePinpolMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539230227L>,
                comms::option::def::ValidNumValue<539230227L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539230227L>,
                    comms::option::def::ValidNumValue<539230227L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539230227L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofencePinpolMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-PINPOL"</b> field.
    class GeofencePinpol : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofencePinpolMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofencePinpolMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofencePinpolMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofencePinpolMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofencePinpolCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceUseFence1 field.
    struct GeofenceUseFence1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270794784L>,
                comms::option::def::ValidNumValue<270794784L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270794784L>,
                    comms::option::def::ValidNumValue<270794784L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUseFence1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUseFence1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270794784L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-USE_FENCE1"</b> field.
    class GeofenceUseFence1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceUseFence1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceUseFence1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUseFence1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUseFence1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceUseFence1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence1Lat field.
    struct GeofenceFence1LatMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101153L>,
                comms::option::def::ValidNumValue<1076101153L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101153L>,
                    comms::option::def::ValidNumValue<1076101153L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1LatMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1LatMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101153L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lat<
                TOpt
            >
        {
            using Base =
                ublox::field::Lat<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1LatMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE1_LAT"</b> field.
    class GeofenceFence1Lat : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence1LatMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence1LatMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence1LatMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence1LatMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence1LatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence1Lon field.
    struct GeofenceFence1LonMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101154L>,
                comms::option::def::ValidNumValue<1076101154L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101154L>,
                    comms::option::def::ValidNumValue<1076101154L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1LonMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1LonMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101154L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lon<
                TOpt
            >
        {
            using Base =
                ublox::field::Lon<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1LonMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE1_LON"</b> field.
    class GeofenceFence1Lon : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence1LonMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence1LonMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence1LonMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence1LonMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence1LonCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence1Rad field.
    struct GeofenceFence1RadMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101155L>,
                comms::option::def::ValidNumValue<1076101155L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101155L>,
                    comms::option::def::ValidNumValue<1076101155L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1RadMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1RadMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101155L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::GeofenceRadius<
                TOpt
            >
        {
            using Base =
                ublox::field::GeofenceRadius<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence1RadMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE1_RAD"</b> field.
    class GeofenceFence1Rad : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence1RadMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence1RadMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence1RadMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence1RadMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence1RadCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceUseFence2 field.
    struct GeofenceUseFence2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270794800L>,
                comms::option::def::ValidNumValue<270794800L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270794800L>,
                    comms::option::def::ValidNumValue<270794800L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUseFence2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUseFence2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270794800L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-USE_FENCE2"</b> field.
    class GeofenceUseFence2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceUseFence2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceUseFence2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUseFence2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUseFence2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceUseFence2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence2Lat field.
    struct GeofenceFence2LatMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101169L>,
                comms::option::def::ValidNumValue<1076101169L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101169L>,
                    comms::option::def::ValidNumValue<1076101169L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2LatMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2LatMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101169L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lat<
                TOpt
            >
        {
            using Base =
                ublox::field::Lat<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2LatMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE2_LAT"</b> field.
    class GeofenceFence2Lat : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence2LatMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence2LatMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence2LatMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence2LatMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence2LatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence2Lon field.
    struct GeofenceFence2LonMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101170L>,
                comms::option::def::ValidNumValue<1076101170L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101170L>,
                    comms::option::def::ValidNumValue<1076101170L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2LonMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2LonMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101170L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lon<
                TOpt
            >
        {
            using Base =
                ublox::field::Lon<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2LonMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE2_LON"</b> field.
    class GeofenceFence2Lon : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence2LonMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence2LonMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence2LonMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence2LonMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence2LonCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence2Rad field.
    struct GeofenceFence2RadMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101171L>,
                comms::option::def::ValidNumValue<1076101171L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101171L>,
                    comms::option::def::ValidNumValue<1076101171L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2RadMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2RadMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101171L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::GeofenceRadius<
                TOpt
            >
        {
            using Base =
                ublox::field::GeofenceRadius<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence2RadMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE2_RAD"</b> field.
    class GeofenceFence2Rad : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence2RadMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence2RadMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence2RadMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence2RadMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence2RadCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceUseFence3 field.
    struct GeofenceUseFence3Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270794816L>,
                comms::option::def::ValidNumValue<270794816L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270794816L>,
                    comms::option::def::ValidNumValue<270794816L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUseFence3MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUseFence3MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270794816L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-USE_FENCE3"</b> field.
    class GeofenceUseFence3 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceUseFence3Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceUseFence3Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUseFence3Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUseFence3Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceUseFence3Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence3Lat field.
    struct GeofenceFence3LatMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101185L>,
                comms::option::def::ValidNumValue<1076101185L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101185L>,
                    comms::option::def::ValidNumValue<1076101185L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3LatMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3LatMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101185L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lat<
                TOpt
            >
        {
            using Base =
                ublox::field::Lat<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3LatMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE3_LAT"</b> field.
    class GeofenceFence3Lat : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence3LatMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence3LatMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence3LatMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence3LatMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence3LatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence3Lon field.
    struct GeofenceFence3LonMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101186L>,
                comms::option::def::ValidNumValue<1076101186L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101186L>,
                    comms::option::def::ValidNumValue<1076101186L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3LonMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3LonMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101186L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lon<
                TOpt
            >
        {
            using Base =
                ublox::field::Lon<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3LonMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE3_LON"</b> field.
    class GeofenceFence3Lon : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence3LonMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence3LonMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence3LonMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence3LonMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence3LonCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence3Rad field.
    struct GeofenceFence3RadMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101187L>,
                comms::option::def::ValidNumValue<1076101187L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101187L>,
                    comms::option::def::ValidNumValue<1076101187L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3RadMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3RadMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101187L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::GeofenceRadius<
                TOpt
            >
        {
            using Base =
                ublox::field::GeofenceRadius<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence3RadMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE3_RAD"</b> field.
    class GeofenceFence3Rad : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence3RadMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence3RadMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence3RadMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence3RadMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence3RadCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceUseFence4 field.
    struct GeofenceUseFence4Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270794832L>,
                comms::option::def::ValidNumValue<270794832L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270794832L>,
                    comms::option::def::ValidNumValue<270794832L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUseFence4MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceUseFence4MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270794832L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-USE_FENCE4"</b> field.
    class GeofenceUseFence4 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceUseFence4Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceUseFence4Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUseFence4Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceUseFence4Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceUseFence4Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence4Lat field.
    struct GeofenceFence4LatMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101201L>,
                comms::option::def::ValidNumValue<1076101201L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101201L>,
                    comms::option::def::ValidNumValue<1076101201L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4LatMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4LatMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101201L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lat<
                TOpt
            >
        {
            using Base =
                ublox::field::Lat<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4LatMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE4_LAT"</b> field.
    class GeofenceFence4Lat : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence4LatMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence4LatMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence4LatMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence4LatMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence4LatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence4Lon field.
    struct GeofenceFence4LonMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101202L>,
                comms::option::def::ValidNumValue<1076101202L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101202L>,
                    comms::option::def::ValidNumValue<1076101202L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4LonMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4LonMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101202L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lon<
                TOpt
            >
        {
            using Base =
                ublox::field::Lon<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4LonMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE4_LON"</b> field.
    class GeofenceFence4Lon : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence4LonMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence4LonMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence4LonMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence4LonMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence4LonCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref GeofenceFence4Rad field.
    struct GeofenceFence4RadMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1076101203L>,
                comms::option::def::ValidNumValue<1076101203L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1076101203L>,
                    comms::option::def::ValidNumValue<1076101203L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4RadMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4RadMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1076101203L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::GeofenceRadius<
                TOpt
            >
        {
            using Base =
                ublox::field::GeofenceRadius<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::GeofenceFence4RadMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-GEOFENCE-FENCE4_RAD"</b> field.
    class GeofenceFence4Rad : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename GeofenceFence4RadMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename GeofenceFence4RadMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence4RadMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::GeofenceFence4RadMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::GeofenceFence4RadCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntCfgValctrl field.
    struct HwAntCfgValctrlMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279117870L>,
                comms::option::def::ValidNumValue<279117870L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279117870L>,
                    comms::option::def::ValidNumValue<279117870L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgValctrlMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgValctrlMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279117870L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_CFG_VOLTCTRL"</b> field.
    class HwAntCfgValctrl : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntCfgValctrlMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntCfgValctrlMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgValctrlMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgValctrlMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntCfgValctrlCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntCfgShortdet field.
    struct HwAntCfgShortdetMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279117871L>,
                comms::option::def::ValidNumValue<279117871L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279117871L>,
                    comms::option::def::ValidNumValue<279117871L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgShortdetMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgShortdetMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279117871L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_CFG_SHORTDET"</b> field.
    class HwAntCfgShortdet : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntCfgShortdetMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntCfgShortdetMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgShortdetMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgShortdetMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntCfgShortdetCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntCfgShortdetPol field.
    struct HwAntCfgShortdetPolMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279117872L>,
                comms::option::def::ValidNumValue<279117872L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279117872L>,
                    comms::option::def::ValidNumValue<279117872L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgShortdetPolMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgShortdetPolMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279117872L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_CFG_SHORTDET_POL"</b> field.
    class HwAntCfgShortdetPol : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntCfgShortdetPolMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntCfgShortdetPolMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgShortdetPolMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgShortdetPolMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntCfgShortdetPolCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntCfgOpendet field.
    struct HwAntCfgOpendetMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279117873L>,
                comms::option::def::ValidNumValue<279117873L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279117873L>,
                    comms::option::def::ValidNumValue<279117873L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgOpendetMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgOpendetMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279117873L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_CFG_OPENDET"</b> field.
    class HwAntCfgOpendet : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntCfgOpendetMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntCfgOpendetMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgOpendetMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgOpendetMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntCfgOpendetCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntCfgOpendetPol field.
    struct HwAntCfgOpendetPolMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279117874L>,
                comms::option::def::ValidNumValue<279117874L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279117874L>,
                    comms::option::def::ValidNumValue<279117874L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgOpendetPolMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgOpendetPolMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279117874L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_CFG_OPENDET_POL"</b> field.
    class HwAntCfgOpendetPol : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntCfgOpendetPolMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntCfgOpendetPolMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgOpendetPolMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgOpendetPolMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntCfgOpendetPolCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntCfgPwrdown field.
    struct HwAntCfgPwrdownMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279117875L>,
                comms::option::def::ValidNumValue<279117875L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279117875L>,
                    comms::option::def::ValidNumValue<279117875L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgPwrdownMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgPwrdownMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279117875L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_CFG_PWRDOWN"</b> field.
    class HwAntCfgPwrdown : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntCfgPwrdownMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntCfgPwrdownMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgPwrdownMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgPwrdownMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntCfgPwrdownCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntCfgPwrdownPol field.
    struct HwAntCfgPwrdownPolMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279117876L>,
                comms::option::def::ValidNumValue<279117876L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279117876L>,
                    comms::option::def::ValidNumValue<279117876L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgPwrdownPolMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgPwrdownPolMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279117876L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_CFG_PWRDOWN_POL"</b> field.
    class HwAntCfgPwrdownPol : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntCfgPwrdownPolMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntCfgPwrdownPolMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgPwrdownPolMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgPwrdownPolMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntCfgPwrdownPolCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntCfgRecover field.
    struct HwAntCfgRecoverMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279117877L>,
                comms::option::def::ValidNumValue<279117877L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279117877L>,
                    comms::option::def::ValidNumValue<279117877L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgRecoverMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntCfgRecoverMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279117877L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_CFG_RECOVER"</b> field.
    class HwAntCfgRecover : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntCfgRecoverMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntCfgRecoverMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgRecoverMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntCfgRecoverMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntCfgRecoverCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntSupSwitchPin field.
    struct HwAntSupSwitchPinMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<547553334L>,
                comms::option::def::ValidNumValue<547553334L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<547553334L>,
                    comms::option::def::ValidNumValue<547553334L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupSwitchPinMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupSwitchPinMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(547553334L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_SUP_SWITCH_PIN"</b> field.
    class HwAntSupSwitchPin : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntSupSwitchPinMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntSupSwitchPinMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupSwitchPinMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupSwitchPinMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntSupSwitchPinCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntSupShortPin field.
    struct HwAntSupShortPinMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<547553335L>,
                comms::option::def::ValidNumValue<547553335L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<547553335L>,
                    comms::option::def::ValidNumValue<547553335L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupShortPinMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupShortPinMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(547553335L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_SUP_SHORT_PIN"</b> field.
    class HwAntSupShortPin : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntSupShortPinMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntSupShortPinMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupShortPinMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupShortPinMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntSupShortPinCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntSupOpenPin field.
    struct HwAntSupOpenPinMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<547553336L>,
                comms::option::def::ValidNumValue<547553336L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<547553336L>,
                    comms::option::def::ValidNumValue<547553336L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupOpenPinMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupOpenPinMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(547553336L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_SUP_OPEN_PIN"</b> field.
    class HwAntSupOpenPin : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntSupOpenPinMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntSupOpenPinMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupOpenPinMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupOpenPinMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntSupOpenPinCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntSupEngine field.
    struct HwAntSupEngineMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<547553364L>,
                comms::option::def::ValidNumValue<547553364L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<547553364L>,
                    comms::option::def::ValidNumValue<547553364L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(547553364L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupEngineMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_SUP_ENGINE"</b> field.
    class HwAntSupEngine : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntSupEngineMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntSupEngineMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupEngineMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupEngineMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntSupEngineCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntSupShortThr field.
    struct HwAntSupShortThrMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<547553365L>,
                comms::option::def::ValidNumValue<547553365L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<547553365L>,
                    comms::option::def::ValidNumValue<547553365L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupShortThrMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupShortThrMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(547553365L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_SUP_SHORT_THR"</b> field.
    class HwAntSupShortThr : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntSupShortThrMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntSupShortThrMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupShortThrMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupShortThrMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntSupShortThrCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref HwAntSupOpenThr field.
    struct HwAntSupOpenThrMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<547553366L>,
                comms::option::def::ValidNumValue<547553366L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<547553366L>,
                    comms::option::def::ValidNumValue<547553366L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupOpenThrMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::HwAntSupOpenThrMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(547553366L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-HW-ANT_SUP_OPEN_THR"</b> field.
    class HwAntSupOpenThr : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename HwAntSupOpenThrMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename HwAntSupOpenThrMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupOpenThrMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::HwAntSupOpenThrMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::HwAntSupOpenThrCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cAddress field.
    struct I2cAddressMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<542179329L>,
                comms::option::def::ValidNumValue<542179329L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<542179329L>,
                    comms::option::def::ValidNumValue<542179329L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cAddressMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cAddressMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(542179329L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2C-ADDRESS"</b> field.
    class I2cAddress : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cAddressMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cAddressMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cAddressMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cAddressMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cAddressCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cExtendedtimeout field.
    struct I2cExtendedtimeoutMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<273743874L>,
                comms::option::def::ValidNumValue<273743874L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<273743874L>,
                    comms::option::def::ValidNumValue<273743874L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cExtendedtimeoutMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cExtendedtimeoutMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(273743874L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2C-EXTENDEDTIMEOUT"</b> field.
    class I2cExtendedtimeout : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cExtendedtimeoutMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cExtendedtimeoutMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cExtendedtimeoutMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cExtendedtimeoutMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cExtendedtimeoutCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cEnabled field.
    struct I2cEnabledMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<542179331L>,
                comms::option::def::ValidNumValue<542179331L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<542179331L>,
                    comms::option::def::ValidNumValue<542179331L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cEnabledMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cEnabledMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(542179331L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2C-ENABLED"</b> field.
    class I2cEnabled : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cEnabledMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cEnabledMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cEnabledMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cEnabledMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cEnabledCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cInprotUbx field.
    struct I2cInprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275841025L>,
                comms::option::def::ValidNumValue<275841025L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275841025L>,
                    comms::option::def::ValidNumValue<275841025L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cInprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cInprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275841025L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2CINPROT-UBX"</b> field.
    class I2cInprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cInprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cInprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cInprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cInprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cInprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cInprotNmea field.
    struct I2cInprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275841026L>,
                comms::option::def::ValidNumValue<275841026L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275841026L>,
                    comms::option::def::ValidNumValue<275841026L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cInprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cInprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275841026L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2CINPROT-NMEA"</b> field.
    class I2cInprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cInprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cInprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cInprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cInprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cInprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cInprotRtcm3x field.
    struct I2cInprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275841028L>,
                comms::option::def::ValidNumValue<275841028L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275841028L>,
                    comms::option::def::ValidNumValue<275841028L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cInprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cInprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275841028L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2CINPROT-RTCM3X"</b> field.
    class I2cInprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cInprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cInprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cInprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cInprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cInprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cOutprotUbx field.
    struct I2cOutprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275906561L>,
                comms::option::def::ValidNumValue<275906561L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275906561L>,
                    comms::option::def::ValidNumValue<275906561L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cOutprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cOutprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275906561L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2COUTPROT-UBX"</b> field.
    class I2cOutprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cOutprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cOutprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cOutprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cOutprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cOutprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cOutprotNmea field.
    struct I2cOutprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275906562L>,
                comms::option::def::ValidNumValue<275906562L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275906562L>,
                    comms::option::def::ValidNumValue<275906562L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cOutprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cOutprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275906562L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2COUTPROT-NMEA"</b> field.
    class I2cOutprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cOutprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cOutprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cOutprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cOutprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cOutprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref I2cOutprotRtcm3x field.
    struct I2cOutprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275906564L>,
                comms::option::def::ValidNumValue<275906564L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275906564L>,
                    comms::option::def::ValidNumValue<275906564L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::I2cOutprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::I2cOutprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275906564L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-I2COUTPROT-RTCM3X"</b> field.
    class I2cOutprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename I2cOutprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename I2cOutprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::I2cOutprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::I2cOutprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::I2cOutprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgUbxI2c field.
    struct InfmsgUbxI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439169L>,
                comms::option::def::ValidNumValue<546439169L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439169L>,
                    comms::option::def::ValidNumValue<546439169L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439169L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxI2cMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-UBX_I2C"</b> field.
    class InfmsgUbxI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgUbxI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgUbxI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgUbxI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgUbxUart1 field.
    struct InfmsgUbxUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439170L>,
                comms::option::def::ValidNumValue<546439170L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439170L>,
                    comms::option::def::ValidNumValue<546439170L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439170L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUart1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-UBX_UART1"</b> field.
    class InfmsgUbxUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgUbxUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgUbxUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgUbxUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgUbxUart2 field.
    struct InfmsgUbxUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439171L>,
                comms::option::def::ValidNumValue<546439171L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439171L>,
                    comms::option::def::ValidNumValue<546439171L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439171L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUart2MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-UBX_UART2"</b> field.
    class InfmsgUbxUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgUbxUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgUbxUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgUbxUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgUbxUsb field.
    struct InfmsgUbxUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439172L>,
                comms::option::def::ValidNumValue<546439172L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439172L>,
                    comms::option::def::ValidNumValue<546439172L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439172L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxUsbMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-UBX_USB"</b> field.
    class InfmsgUbxUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgUbxUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgUbxUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgUbxUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgUbxSpi field.
    struct InfmsgUbxSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439173L>,
                comms::option::def::ValidNumValue<546439173L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439173L>,
                    comms::option::def::ValidNumValue<546439173L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439173L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgUbxSpiMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-UBX_SPI"</b> field.
    class InfmsgUbxSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgUbxSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgUbxSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgUbxSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgUbxSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgNmeaI2c field.
    struct InfmsgNmeaI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439174L>,
                comms::option::def::ValidNumValue<546439174L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439174L>,
                    comms::option::def::ValidNumValue<546439174L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439174L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaI2cMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-NMEA_I2C"</b> field.
    class InfmsgNmeaI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgNmeaI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgNmeaI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgNmeaI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgNmeaUart1 field.
    struct InfmsgNmeaUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439175L>,
                comms::option::def::ValidNumValue<546439175L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439175L>,
                    comms::option::def::ValidNumValue<546439175L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439175L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUart1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-NMEA_UART1"</b> field.
    class InfmsgNmeaUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgNmeaUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgNmeaUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgNmeaUart2 field.
    struct InfmsgNmeaUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439176L>,
                comms::option::def::ValidNumValue<546439176L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439176L>,
                    comms::option::def::ValidNumValue<546439176L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439176L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUart2MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-NMEA_UART2"</b> field.
    class InfmsgNmeaUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgNmeaUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgNmeaUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgNmeaUsb field.
    struct InfmsgNmeaUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439177L>,
                comms::option::def::ValidNumValue<546439177L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439177L>,
                    comms::option::def::ValidNumValue<546439177L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439177L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUsbMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-NMEA_USB"</b> field.
    class InfmsgNmeaUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgNmeaUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgNmeaUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgNmeaUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref InfmsgNmeaSpi field.
    struct InfmsgNmeaSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546439178L>,
                comms::option::def::ValidNumValue<546439178L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546439178L>,
                    comms::option::def::ValidNumValue<546439178L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546439178L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::InfMask<
                TOpt
            >
        {
            using Base =
                ublox::field::InfMask<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::InfmsgNmeaSpiMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-INFMSG-NMEA_SPI"</b> field.
    class InfmsgNmeaSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename InfmsgNmeaSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename InfmsgNmeaSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::InfmsgNmeaSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::InfmsgNmeaSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ItfmBbThreshold field.
    struct ItfmBbThresholdMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<541130753L>,
                comms::option::def::ValidNumValue<541130753L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<541130753L>,
                    comms::option::def::ValidNumValue<541130753L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmBbThresholdMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmBbThresholdMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(541130753L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ITFM-BBTHRESHOLD"</b> field.
    class ItfmBbThreshold : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename ItfmBbThresholdMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ItfmBbThresholdMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::ItfmBbThresholdMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::ItfmBbThresholdMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::ItfmBbThresholdCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ItfmCwThreshold field.
    struct ItfmCwThresholdMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<541130754L>,
                comms::option::def::ValidNumValue<541130754L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<541130754L>,
                    comms::option::def::ValidNumValue<541130754L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmCwThresholdMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmCwThresholdMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(541130754L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ITFM-CWTHRESHOLD"</b> field.
    class ItfmCwThreshold : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename ItfmCwThresholdMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ItfmCwThresholdMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::ItfmCwThresholdMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::ItfmCwThresholdMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::ItfmCwThresholdCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ItfmEnable field.
    struct ItfmEnableMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<272695309L>,
                comms::option::def::ValidNumValue<272695309L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<272695309L>,
                    comms::option::def::ValidNumValue<272695309L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmEnableMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmEnableMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(272695309L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ITFM-ENABLE"</b> field.
    class ItfmEnable : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename ItfmEnableMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ItfmEnableMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::ItfmEnableMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::ItfmEnableMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::ItfmEnableCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ItfmAntSetting field.
    struct ItfmAntSettingMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<541130768L>,
                comms::option::def::ValidNumValue<541130768L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<541130768L>,
                    comms::option::def::ValidNumValue<541130768L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(541130768L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::ItfmAntSettingMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ITFM-ANTSETTING"</b> field.
    class ItfmAntSetting : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename ItfmAntSettingMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ItfmAntSettingMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::ItfmAntSettingMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::ItfmAntSettingMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::ItfmAntSettingCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref LogfilterRecordEna field.
    struct LogfilterRecordEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<282984450L>,
                comms::option::def::ValidNumValue<282984450L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<282984450L>,
                    comms::option::def::ValidNumValue<282984450L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterRecordEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterRecordEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(282984450L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-LOGFILTER-RECORD_ENA"</b> field.
    class LogfilterRecordEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename LogfilterRecordEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename LogfilterRecordEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterRecordEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterRecordEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::LogfilterRecordEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref LogfilterOncePerWakeUpEna field.
    struct LogfilterOncePerWakeUpEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<282984451L>,
                comms::option::def::ValidNumValue<282984451L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<282984451L>,
                    comms::option::def::ValidNumValue<282984451L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterOncePerWakeUpEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterOncePerWakeUpEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(282984451L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-LOGFILTER-ONCE_PER_WAKE_UP_ENA"</b> field.
    class LogfilterOncePerWakeUpEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename LogfilterOncePerWakeUpEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename LogfilterOncePerWakeUpEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterOncePerWakeUpEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterOncePerWakeUpEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::LogfilterOncePerWakeUpEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref LogfilterApplyAllFilters field.
    struct LogfilterApplyAllFiltersMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<282984452L>,
                comms::option::def::ValidNumValue<282984452L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<282984452L>,
                    comms::option::def::ValidNumValue<282984452L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterApplyAllFiltersMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterApplyAllFiltersMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(282984452L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-LOGFILTER-APPLY_ALL_FILTERS"</b> field.
    class LogfilterApplyAllFilters : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename LogfilterApplyAllFiltersMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename LogfilterApplyAllFiltersMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterApplyAllFiltersMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterApplyAllFiltersMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::LogfilterApplyAllFiltersCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref LogfilterMinInterval field.
    struct LogfilterMinIntervalMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<819855365L>,
                comms::option::def::ValidNumValue<819855365L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<819855365L>,
                    comms::option::def::ValidNumValue<819855365L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterMinIntervalMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterMinIntervalMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(819855365L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterMinIntervalMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterMinIntervalMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-LOGFILTER-MIN_INTERVAL"</b> field.
    class LogfilterMinInterval : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename LogfilterMinIntervalMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename LogfilterMinIntervalMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterMinIntervalMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterMinIntervalMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::LogfilterMinIntervalCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref LogfilterTimeThrs field.
    struct LogfilterTimeThrsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<819855366L>,
                comms::option::def::ValidNumValue<819855366L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<819855366L>,
                    comms::option::def::ValidNumValue<819855366L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterTimeThrsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterTimeThrsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(819855366L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterTimeThrsMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterTimeThrsMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-LOGFILTER-TIME_THRS"</b> field.
    class LogfilterTimeThrs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename LogfilterTimeThrsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename LogfilterTimeThrsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterTimeThrsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterTimeThrsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::LogfilterTimeThrsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref LogfilterSpeedThrs field.
    struct LogfilterSpeedThrsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<819855367L>,
                comms::option::def::ValidNumValue<819855367L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<819855367L>,
                    comms::option::def::ValidNumValue<819855367L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterSpeedThrsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterSpeedThrsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(819855367L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsMetersPerSecond
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsMetersPerSecond
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterSpeedThrsMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterSpeedThrsMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-LOGFILTER-SPEED_THRS"</b> field.
    class LogfilterSpeedThrs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename LogfilterSpeedThrsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename LogfilterSpeedThrsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterSpeedThrsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterSpeedThrsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::LogfilterSpeedThrsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref LogfilterPositionThrs field.
    struct LogfilterPositionThrsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1088290824L>,
                comms::option::def::ValidNumValue<1088290824L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1088290824L>,
                    comms::option::def::ValidNumValue<1088290824L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterPositionThrsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterPositionThrsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1088290824L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMeters
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsMeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterPositionThrsMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::LogfilterPositionThrsMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-LOGFILTER-POSITION_THRS"</b> field.
    class LogfilterPositionThrs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename LogfilterPositionThrsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename LogfilterPositionThrsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterPositionThrsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::LogfilterPositionThrsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::LogfilterPositionThrsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MotGnssSpeedThrs field.
    struct MotGnssSpeedThrsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539295800L>,
                comms::option::def::ValidNumValue<539295800L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539295800L>,
                    comms::option::def::ValidNumValue<539295800L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssSpeedThrsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssSpeedThrsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539295800L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ScalingRatio<1, 100>,
                comms::option::def::UnitsMetersPerSecond
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::ScalingRatio<1, 100>,
                    comms::option::def::UnitsMetersPerSecond
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssSpeedThrsMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 2U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssSpeedThrsMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MOT-GNSSSPEED_THRS"</b> field.
    class MotGnssSpeedThrs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MotGnssSpeedThrsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MotGnssSpeedThrsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MotGnssSpeedThrsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MotGnssSpeedThrsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MotGnssSpeedThrsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MotGnssDistThrs field.
    struct MotGnssDistThrsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<807731259L>,
                comms::option::def::ValidNumValue<807731259L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<807731259L>,
                    comms::option::def::ValidNumValue<807731259L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(807731259L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single special value name info entry.
            using SpecialNameInfo = ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::ValCommon::SpecialNameInfo;

            /// @brief Type returned from @ref specialNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using SpecialNamesMapInfo = ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::ValCommon::SpecialNamesMapInfo;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Special value <b>"Default"</b>.
            /// @see @ref ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::ValCommon::valueDefault().
            static constexpr ValueType valueDefault()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::ValCommon::valueDefault();
            }

            /// @brief Check the value is equal to special @ref valueDefault().
            bool isDefault() const
            {
                return Base::getValue() == valueDefault();
            }

            /// @brief Assign special value @ref valueDefault() to the field.
            void setDefault()
            {
                Base::setValue(valueDefault());
            }

            /// @brief Retrieve map of special value names
            static SpecialNamesMapInfo specialNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::ValCommon::specialNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MotGnssDistThrsMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MOT-GNSSDIST_THRS"</b> field.
    class MotGnssDistThrs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MotGnssDistThrsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MotGnssDistThrsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MotGnssDistThrsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MotGnssDistThrsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MotGnssDistThrsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdDtmI2c field.
    struct MsgoutNmeaIdDtmI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373798L>,
                comms::option::def::ValidNumValue<546373798L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373798L>,
                    comms::option::def::ValidNumValue<546373798L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373798L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_DTM_I2C"</b> field.
    class MsgoutNmeaIdDtmI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdDtmI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdDtmI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdDtmSpi field.
    struct MsgoutNmeaIdDtmSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373802L>,
                comms::option::def::ValidNumValue<546373802L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373802L>,
                    comms::option::def::ValidNumValue<546373802L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373802L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_DTM_SPI"</b> field.
    class MsgoutNmeaIdDtmSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdDtmSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdDtmSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdDtmUart1 field.
    struct MsgoutNmeaIdDtmUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373799L>,
                comms::option::def::ValidNumValue<546373799L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373799L>,
                    comms::option::def::ValidNumValue<546373799L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373799L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_DTM_UART1"</b> field.
    class MsgoutNmeaIdDtmUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdDtmUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdDtmUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdDtmUart2 field.
    struct MsgoutNmeaIdDtmUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373800L>,
                comms::option::def::ValidNumValue<546373800L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373800L>,
                    comms::option::def::ValidNumValue<546373800L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373800L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_DTM_UART2"</b> field.
    class MsgoutNmeaIdDtmUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdDtmUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdDtmUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdDtmUsb field.
    struct MsgoutNmeaIdDtmUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373801L>,
                comms::option::def::ValidNumValue<546373801L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373801L>,
                    comms::option::def::ValidNumValue<546373801L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373801L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_DTM_USB"</b> field.
    class MsgoutNmeaIdDtmUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdDtmUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdDtmUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdDtmUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdDtmUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGbsI2c field.
    struct MsgoutNmeaIdGbsI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373853L>,
                comms::option::def::ValidNumValue<546373853L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373853L>,
                    comms::option::def::ValidNumValue<546373853L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373853L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GBS_I2C"</b> field.
    class MsgoutNmeaIdGbsI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGbsI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGbsI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGbsSpi field.
    struct MsgoutNmeaIdGbsSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373857L>,
                comms::option::def::ValidNumValue<546373857L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373857L>,
                    comms::option::def::ValidNumValue<546373857L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373857L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GBS_SPI"</b> field.
    class MsgoutNmeaIdGbsSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGbsSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGbsSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGbsUart1 field.
    struct MsgoutNmeaIdGbsUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373854L>,
                comms::option::def::ValidNumValue<546373854L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373854L>,
                    comms::option::def::ValidNumValue<546373854L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373854L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GBS_UART1"</b> field.
    class MsgoutNmeaIdGbsUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGbsUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGbsUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGbsUart2 field.
    struct MsgoutNmeaIdGbsUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373855L>,
                comms::option::def::ValidNumValue<546373855L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373855L>,
                    comms::option::def::ValidNumValue<546373855L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373855L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GBS_UART2"</b> field.
    class MsgoutNmeaIdGbsUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGbsUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGbsUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGbsUsb field.
    struct MsgoutNmeaIdGbsUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373856L>,
                comms::option::def::ValidNumValue<546373856L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373856L>,
                    comms::option::def::ValidNumValue<546373856L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373856L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GBS_USB"</b> field.
    class MsgoutNmeaIdGbsUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGbsUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGbsUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGbsUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGbsUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGgaI2c field.
    struct MsgoutNmeaIdGgaI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373818L>,
                comms::option::def::ValidNumValue<546373818L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373818L>,
                    comms::option::def::ValidNumValue<546373818L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373818L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GGA_I2C"</b> field.
    class MsgoutNmeaIdGgaI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGgaI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGgaI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGgaSpi field.
    struct MsgoutNmeaIdGgaSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373822L>,
                comms::option::def::ValidNumValue<546373822L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373822L>,
                    comms::option::def::ValidNumValue<546373822L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373822L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GGA_SPI"</b> field.
    class MsgoutNmeaIdGgaSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGgaSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGgaSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGgaUart1 field.
    struct MsgoutNmeaIdGgaUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373819L>,
                comms::option::def::ValidNumValue<546373819L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373819L>,
                    comms::option::def::ValidNumValue<546373819L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373819L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GGA_UART1"</b> field.
    class MsgoutNmeaIdGgaUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGgaUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGgaUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGgaUart2 field.
    struct MsgoutNmeaIdGgaUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373820L>,
                comms::option::def::ValidNumValue<546373820L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373820L>,
                    comms::option::def::ValidNumValue<546373820L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373820L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GGA_UART2"</b> field.
    class MsgoutNmeaIdGgaUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGgaUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGgaUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGgaUsb field.
    struct MsgoutNmeaIdGgaUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373821L>,
                comms::option::def::ValidNumValue<546373821L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373821L>,
                    comms::option::def::ValidNumValue<546373821L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373821L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GGA_USB"</b> field.
    class MsgoutNmeaIdGgaUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGgaUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGgaUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGgaUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGgaUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGllI2c field.
    struct MsgoutNmeaIdGllI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373833L>,
                comms::option::def::ValidNumValue<546373833L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373833L>,
                    comms::option::def::ValidNumValue<546373833L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373833L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GLL_I2C"</b> field.
    class MsgoutNmeaIdGllI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGllI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGllI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGllSpi field.
    struct MsgoutNmeaIdGllSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373837L>,
                comms::option::def::ValidNumValue<546373837L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373837L>,
                    comms::option::def::ValidNumValue<546373837L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373837L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GLL_SPI"</b> field.
    class MsgoutNmeaIdGllSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGllSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGllSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGllUart1 field.
    struct MsgoutNmeaIdGllUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373834L>,
                comms::option::def::ValidNumValue<546373834L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373834L>,
                    comms::option::def::ValidNumValue<546373834L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373834L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GLL_UART1"</b> field.
    class MsgoutNmeaIdGllUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGllUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGllUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGllUart2 field.
    struct MsgoutNmeaIdGllUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373835L>,
                comms::option::def::ValidNumValue<546373835L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373835L>,
                    comms::option::def::ValidNumValue<546373835L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373835L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GLL_UART2"</b> field.
    class MsgoutNmeaIdGllUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGllUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGllUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGllUsb field.
    struct MsgoutNmeaIdGllUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373836L>,
                comms::option::def::ValidNumValue<546373836L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373836L>,
                    comms::option::def::ValidNumValue<546373836L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373836L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GLL_USB"</b> field.
    class MsgoutNmeaIdGllUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGllUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGllUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGllUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGllUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGnsI2c field.
    struct MsgoutNmeaIdGnsI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373813L>,
                comms::option::def::ValidNumValue<546373813L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373813L>,
                    comms::option::def::ValidNumValue<546373813L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373813L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GNS_I2C"</b> field.
    class MsgoutNmeaIdGnsI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGnsI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGnsI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGnsSpi field.
    struct MsgoutNmeaIdGnsSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373817L>,
                comms::option::def::ValidNumValue<546373817L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373817L>,
                    comms::option::def::ValidNumValue<546373817L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373817L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GNS_SPI"</b> field.
    class MsgoutNmeaIdGnsSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGnsSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGnsSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGnsUart1 field.
    struct MsgoutNmeaIdGnsUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373814L>,
                comms::option::def::ValidNumValue<546373814L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373814L>,
                    comms::option::def::ValidNumValue<546373814L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373814L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GNS_UART1"</b> field.
    class MsgoutNmeaIdGnsUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGnsUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGnsUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGnsUart2 field.
    struct MsgoutNmeaIdGnsUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373815L>,
                comms::option::def::ValidNumValue<546373815L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373815L>,
                    comms::option::def::ValidNumValue<546373815L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373815L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GNS_UART2"</b> field.
    class MsgoutNmeaIdGnsUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGnsUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGnsUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGnsUsb field.
    struct MsgoutNmeaIdGnsUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373816L>,
                comms::option::def::ValidNumValue<546373816L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373816L>,
                    comms::option::def::ValidNumValue<546373816L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373816L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GNS_USB"</b> field.
    class MsgoutNmeaIdGnsUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGnsUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGnsUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGnsUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGnsUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGrsI2c field.
    struct MsgoutNmeaIdGrsI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373838L>,
                comms::option::def::ValidNumValue<546373838L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373838L>,
                    comms::option::def::ValidNumValue<546373838L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373838L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GRS_I2C"</b> field.
    class MsgoutNmeaIdGrsI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGrsI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGrsI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGrsSpi field.
    struct MsgoutNmeaIdGrsSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373842L>,
                comms::option::def::ValidNumValue<546373842L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373842L>,
                    comms::option::def::ValidNumValue<546373842L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373842L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GRS_SPI"</b> field.
    class MsgoutNmeaIdGrsSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGrsSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGrsSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGrsUart1 field.
    struct MsgoutNmeaIdGrsUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373839L>,
                comms::option::def::ValidNumValue<546373839L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373839L>,
                    comms::option::def::ValidNumValue<546373839L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373839L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GRS_UART1"</b> field.
    class MsgoutNmeaIdGrsUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGrsUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGrsUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGrsUart2 field.
    struct MsgoutNmeaIdGrsUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373840L>,
                comms::option::def::ValidNumValue<546373840L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373840L>,
                    comms::option::def::ValidNumValue<546373840L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373840L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GRS_UART2"</b> field.
    class MsgoutNmeaIdGrsUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGrsUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGrsUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGrsUsb field.
    struct MsgoutNmeaIdGrsUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373841L>,
                comms::option::def::ValidNumValue<546373841L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373841L>,
                    comms::option::def::ValidNumValue<546373841L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373841L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GRS_USB"</b> field.
    class MsgoutNmeaIdGrsUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGrsUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGrsUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGrsUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGrsUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsaI2c field.
    struct MsgoutNmeaIdGsaI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373823L>,
                comms::option::def::ValidNumValue<546373823L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373823L>,
                    comms::option::def::ValidNumValue<546373823L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373823L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSA_I2C"</b> field.
    class MsgoutNmeaIdGsaI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsaI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsaI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsaSpi field.
    struct MsgoutNmeaIdGsaSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373827L>,
                comms::option::def::ValidNumValue<546373827L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373827L>,
                    comms::option::def::ValidNumValue<546373827L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373827L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSA_SPI"</b> field.
    class MsgoutNmeaIdGsaSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsaSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsaSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsaUart1 field.
    struct MsgoutNmeaIdGsaUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373824L>,
                comms::option::def::ValidNumValue<546373824L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373824L>,
                    comms::option::def::ValidNumValue<546373824L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373824L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSA_UART1"</b> field.
    class MsgoutNmeaIdGsaUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsaUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsaUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsaUart2 field.
    struct MsgoutNmeaIdGsaUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373825L>,
                comms::option::def::ValidNumValue<546373825L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373825L>,
                    comms::option::def::ValidNumValue<546373825L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373825L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSA_UART2"</b> field.
    class MsgoutNmeaIdGsaUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsaUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsaUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsaUsb field.
    struct MsgoutNmeaIdGsaUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373826L>,
                comms::option::def::ValidNumValue<546373826L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373826L>,
                    comms::option::def::ValidNumValue<546373826L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373826L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSA_USB"</b> field.
    class MsgoutNmeaIdGsaUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsaUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsaUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsaUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsaUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGstI2c field.
    struct MsgoutNmeaIdGstI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373843L>,
                comms::option::def::ValidNumValue<546373843L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373843L>,
                    comms::option::def::ValidNumValue<546373843L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373843L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GST_I2C"</b> field.
    class MsgoutNmeaIdGstI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGstI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGstI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGstSpi field.
    struct MsgoutNmeaIdGstSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373847L>,
                comms::option::def::ValidNumValue<546373847L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373847L>,
                    comms::option::def::ValidNumValue<546373847L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373847L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GST_SPI"</b> field.
    class MsgoutNmeaIdGstSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGstSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGstSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGstUart1 field.
    struct MsgoutNmeaIdGstUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373844L>,
                comms::option::def::ValidNumValue<546373844L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373844L>,
                    comms::option::def::ValidNumValue<546373844L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373844L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GST_UART1"</b> field.
    class MsgoutNmeaIdGstUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGstUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGstUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGstUart2 field.
    struct MsgoutNmeaIdGstUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373845L>,
                comms::option::def::ValidNumValue<546373845L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373845L>,
                    comms::option::def::ValidNumValue<546373845L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373845L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GST_UART2"</b> field.
    class MsgoutNmeaIdGstUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGstUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGstUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGstUsb field.
    struct MsgoutNmeaIdGstUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373846L>,
                comms::option::def::ValidNumValue<546373846L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373846L>,
                    comms::option::def::ValidNumValue<546373846L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373846L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GST_USB"</b> field.
    class MsgoutNmeaIdGstUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGstUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGstUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGstUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGstUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsvI2c field.
    struct MsgoutNmeaIdGsvI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373828L>,
                comms::option::def::ValidNumValue<546373828L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373828L>,
                    comms::option::def::ValidNumValue<546373828L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373828L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSV_I2C"</b> field.
    class MsgoutNmeaIdGsvI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsvI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsvI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsvSpi field.
    struct MsgoutNmeaIdGsvSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373832L>,
                comms::option::def::ValidNumValue<546373832L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373832L>,
                    comms::option::def::ValidNumValue<546373832L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373832L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSV_SPI"</b> field.
    class MsgoutNmeaIdGsvSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsvSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsvSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsvUart1 field.
    struct MsgoutNmeaIdGsvUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373829L>,
                comms::option::def::ValidNumValue<546373829L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373829L>,
                    comms::option::def::ValidNumValue<546373829L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373829L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSV_UART1"</b> field.
    class MsgoutNmeaIdGsvUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsvUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsvUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsvUart2 field.
    struct MsgoutNmeaIdGsvUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373830L>,
                comms::option::def::ValidNumValue<546373830L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373830L>,
                    comms::option::def::ValidNumValue<546373830L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373830L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSV_UART2"</b> field.
    class MsgoutNmeaIdGsvUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsvUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsvUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdGsvUsb field.
    struct MsgoutNmeaIdGsvUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373831L>,
                comms::option::def::ValidNumValue<546373831L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373831L>,
                    comms::option::def::ValidNumValue<546373831L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373831L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_GSV_USB"</b> field.
    class MsgoutNmeaIdGsvUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdGsvUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdGsvUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdGsvUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdGsvUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRlmI2c field.
    struct MsgoutNmeaIdRlmI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374656L>,
                comms::option::def::ValidNumValue<546374656L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374656L>,
                    comms::option::def::ValidNumValue<546374656L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374656L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RLM_I2C"</b> field.
    class MsgoutNmeaIdRlmI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRlmI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRlmI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRlmSpi field.
    struct MsgoutNmeaIdRlmSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374660L>,
                comms::option::def::ValidNumValue<546374660L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374660L>,
                    comms::option::def::ValidNumValue<546374660L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374660L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RLM_SPI"</b> field.
    class MsgoutNmeaIdRlmSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRlmSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRlmSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRlmUart1 field.
    struct MsgoutNmeaIdRlmUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374657L>,
                comms::option::def::ValidNumValue<546374657L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374657L>,
                    comms::option::def::ValidNumValue<546374657L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374657L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RLM_UART1"</b> field.
    class MsgoutNmeaIdRlmUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRlmUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRlmUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRlmUart2 field.
    struct MsgoutNmeaIdRlmUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374658L>,
                comms::option::def::ValidNumValue<546374658L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374658L>,
                    comms::option::def::ValidNumValue<546374658L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374658L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RLM_UART2"</b> field.
    class MsgoutNmeaIdRlmUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRlmUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRlmUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRlmUsb field.
    struct MsgoutNmeaIdRlmUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374659L>,
                comms::option::def::ValidNumValue<546374659L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374659L>,
                    comms::option::def::ValidNumValue<546374659L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374659L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RLM_USB"</b> field.
    class MsgoutNmeaIdRlmUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRlmUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRlmUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRlmUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRlmUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRmcI2c field.
    struct MsgoutNmeaIdRmcI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373803L>,
                comms::option::def::ValidNumValue<546373803L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373803L>,
                    comms::option::def::ValidNumValue<546373803L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373803L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RMC_I2C"</b> field.
    class MsgoutNmeaIdRmcI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRmcI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRmcI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRmcSpi field.
    struct MsgoutNmeaIdRmcSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373807L>,
                comms::option::def::ValidNumValue<546373807L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373807L>,
                    comms::option::def::ValidNumValue<546373807L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373807L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RMC_SPI"</b> field.
    class MsgoutNmeaIdRmcSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRmcSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRmcSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRmcUart1 field.
    struct MsgoutNmeaIdRmcUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373804L>,
                comms::option::def::ValidNumValue<546373804L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373804L>,
                    comms::option::def::ValidNumValue<546373804L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373804L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RMC_UART1"</b> field.
    class MsgoutNmeaIdRmcUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRmcUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRmcUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRmcUart2 field.
    struct MsgoutNmeaIdRmcUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373805L>,
                comms::option::def::ValidNumValue<546373805L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373805L>,
                    comms::option::def::ValidNumValue<546373805L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373805L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RMC_UART2"</b> field.
    class MsgoutNmeaIdRmcUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRmcUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRmcUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdRmcUsb field.
    struct MsgoutNmeaIdRmcUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373806L>,
                comms::option::def::ValidNumValue<546373806L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373806L>,
                    comms::option::def::ValidNumValue<546373806L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373806L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_RMC_USB"</b> field.
    class MsgoutNmeaIdRmcUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdRmcUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdRmcUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdRmcUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdRmcUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVlwI2c field.
    struct MsgoutNmeaIdVlwI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373863L>,
                comms::option::def::ValidNumValue<546373863L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373863L>,
                    comms::option::def::ValidNumValue<546373863L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373863L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VLW_I2C"</b> field.
    class MsgoutNmeaIdVlwI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVlwI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVlwI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVlwSpi field.
    struct MsgoutNmeaIdVlwSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373867L>,
                comms::option::def::ValidNumValue<546373867L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373867L>,
                    comms::option::def::ValidNumValue<546373867L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373867L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VLW_SPI"</b> field.
    class MsgoutNmeaIdVlwSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVlwSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVlwSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVlwUart1 field.
    struct MsgoutNmeaIdVlwUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373864L>,
                comms::option::def::ValidNumValue<546373864L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373864L>,
                    comms::option::def::ValidNumValue<546373864L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373864L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VLW_UART1"</b> field.
    class MsgoutNmeaIdVlwUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVlwUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVlwUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVlwUart2 field.
    struct MsgoutNmeaIdVlwUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373865L>,
                comms::option::def::ValidNumValue<546373865L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373865L>,
                    comms::option::def::ValidNumValue<546373865L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373865L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VLW_UART2"</b> field.
    class MsgoutNmeaIdVlwUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVlwUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVlwUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVlwUsb field.
    struct MsgoutNmeaIdVlwUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373866L>,
                comms::option::def::ValidNumValue<546373866L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373866L>,
                    comms::option::def::ValidNumValue<546373866L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373866L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VLW_USB"</b> field.
    class MsgoutNmeaIdVlwUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVlwUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVlwUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVlwUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVlwUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVtgI2c field.
    struct MsgoutNmeaIdVtgI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373808L>,
                comms::option::def::ValidNumValue<546373808L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373808L>,
                    comms::option::def::ValidNumValue<546373808L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373808L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VTG_I2C"</b> field.
    class MsgoutNmeaIdVtgI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVtgI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVtgI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVtgSpi field.
    struct MsgoutNmeaIdVtgSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373812L>,
                comms::option::def::ValidNumValue<546373812L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373812L>,
                    comms::option::def::ValidNumValue<546373812L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373812L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VTG_SPI"</b> field.
    class MsgoutNmeaIdVtgSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVtgSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVtgSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVtgUart1 field.
    struct MsgoutNmeaIdVtgUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373809L>,
                comms::option::def::ValidNumValue<546373809L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373809L>,
                    comms::option::def::ValidNumValue<546373809L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373809L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VTG_UART1"</b> field.
    class MsgoutNmeaIdVtgUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVtgUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVtgUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVtgUart2 field.
    struct MsgoutNmeaIdVtgUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373810L>,
                comms::option::def::ValidNumValue<546373810L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373810L>,
                    comms::option::def::ValidNumValue<546373810L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373810L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VTG_UART2"</b> field.
    class MsgoutNmeaIdVtgUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVtgUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVtgUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdVtgUsb field.
    struct MsgoutNmeaIdVtgUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373811L>,
                comms::option::def::ValidNumValue<546373811L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373811L>,
                    comms::option::def::ValidNumValue<546373811L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373811L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_VTG_USB"</b> field.
    class MsgoutNmeaIdVtgUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdVtgUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdVtgUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdVtgUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdVtgUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdZdaI2c field.
    struct MsgoutNmeaIdZdaI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373848L>,
                comms::option::def::ValidNumValue<546373848L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373848L>,
                    comms::option::def::ValidNumValue<546373848L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373848L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_ZDA_I2C"</b> field.
    class MsgoutNmeaIdZdaI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdZdaI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdZdaI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdZdaSpi field.
    struct MsgoutNmeaIdZdaSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373852L>,
                comms::option::def::ValidNumValue<546373852L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373852L>,
                    comms::option::def::ValidNumValue<546373852L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373852L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_ZDA_SPI"</b> field.
    class MsgoutNmeaIdZdaSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdZdaSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdZdaSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdZdaUart1 field.
    struct MsgoutNmeaIdZdaUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373849L>,
                comms::option::def::ValidNumValue<546373849L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373849L>,
                    comms::option::def::ValidNumValue<546373849L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373849L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_ZDA_UART1"</b> field.
    class MsgoutNmeaIdZdaUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdZdaUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdZdaUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdZdaUart2 field.
    struct MsgoutNmeaIdZdaUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373850L>,
                comms::option::def::ValidNumValue<546373850L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373850L>,
                    comms::option::def::ValidNumValue<546373850L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373850L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_ZDA_UART2"</b> field.
    class MsgoutNmeaIdZdaUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdZdaUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdZdaUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutNmeaIdZdaUsb field.
    struct MsgoutNmeaIdZdaUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373851L>,
                comms::option::def::ValidNumValue<546373851L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373851L>,
                    comms::option::def::ValidNumValue<546373851L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373851L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-NMEA_ID_ZDA_USB"</b> field.
    class MsgoutNmeaIdZdaUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutNmeaIdZdaUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutNmeaIdZdaUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutNmeaIdZdaUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutNmeaIdZdaUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolypI2c field.
    struct MsgoutPubxIdPolypI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373868L>,
                comms::option::def::ValidNumValue<546373868L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373868L>,
                    comms::option::def::ValidNumValue<546373868L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373868L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYP_I2C"</b> field.
    class MsgoutPubxIdPolypI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolypI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolypI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolypSpi field.
    struct MsgoutPubxIdPolypSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373872L>,
                comms::option::def::ValidNumValue<546373872L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373872L>,
                    comms::option::def::ValidNumValue<546373872L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373872L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYP_SPI"</b> field.
    class MsgoutPubxIdPolypSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolypSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolypSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolypUart1 field.
    struct MsgoutPubxIdPolypUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373869L>,
                comms::option::def::ValidNumValue<546373869L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373869L>,
                    comms::option::def::ValidNumValue<546373869L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373869L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYP_UART1"</b> field.
    class MsgoutPubxIdPolypUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolypUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolypUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolypUart2 field.
    struct MsgoutPubxIdPolypUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373870L>,
                comms::option::def::ValidNumValue<546373870L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373870L>,
                    comms::option::def::ValidNumValue<546373870L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373870L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYP_UART2"</b> field.
    class MsgoutPubxIdPolypUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolypUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolypUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolypUsb field.
    struct MsgoutPubxIdPolypUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373871L>,
                comms::option::def::ValidNumValue<546373871L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373871L>,
                    comms::option::def::ValidNumValue<546373871L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373871L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYP_USB"</b> field.
    class MsgoutPubxIdPolypUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolypUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolypUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolypUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolypUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolysI2c field.
    struct MsgoutPubxIdPolysI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373873L>,
                comms::option::def::ValidNumValue<546373873L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373873L>,
                    comms::option::def::ValidNumValue<546373873L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373873L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYS_I2C"</b> field.
    class MsgoutPubxIdPolysI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolysI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolysI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolysSpi field.
    struct MsgoutPubxIdPolysSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373877L>,
                comms::option::def::ValidNumValue<546373877L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373877L>,
                    comms::option::def::ValidNumValue<546373877L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373877L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYS_SPI"</b> field.
    class MsgoutPubxIdPolysSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolysSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolysSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolysUart1 field.
    struct MsgoutPubxIdPolysUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373874L>,
                comms::option::def::ValidNumValue<546373874L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373874L>,
                    comms::option::def::ValidNumValue<546373874L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373874L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYS_UART1"</b> field.
    class MsgoutPubxIdPolysUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolysUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolysUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolysUart2 field.
    struct MsgoutPubxIdPolysUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373875L>,
                comms::option::def::ValidNumValue<546373875L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373875L>,
                    comms::option::def::ValidNumValue<546373875L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373875L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYS_UART2"</b> field.
    class MsgoutPubxIdPolysUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolysUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolysUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolysUsb field.
    struct MsgoutPubxIdPolysUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373876L>,
                comms::option::def::ValidNumValue<546373876L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373876L>,
                    comms::option::def::ValidNumValue<546373876L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373876L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYS_USB"</b> field.
    class MsgoutPubxIdPolysUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolysUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolysUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolysUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolysUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolytI2c field.
    struct MsgoutPubxIdPolytI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373878L>,
                comms::option::def::ValidNumValue<546373878L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373878L>,
                    comms::option::def::ValidNumValue<546373878L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373878L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYT_I2C"</b> field.
    class MsgoutPubxIdPolytI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolytI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolytI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolytSpi field.
    struct MsgoutPubxIdPolytSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373882L>,
                comms::option::def::ValidNumValue<546373882L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373882L>,
                    comms::option::def::ValidNumValue<546373882L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373882L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYT_SPI"</b> field.
    class MsgoutPubxIdPolytSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolytSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolytSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolytUart1 field.
    struct MsgoutPubxIdPolytUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373879L>,
                comms::option::def::ValidNumValue<546373879L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373879L>,
                    comms::option::def::ValidNumValue<546373879L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373879L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYT_UART1"</b> field.
    class MsgoutPubxIdPolytUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolytUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolytUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolytUart2 field.
    struct MsgoutPubxIdPolytUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373880L>,
                comms::option::def::ValidNumValue<546373880L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373880L>,
                    comms::option::def::ValidNumValue<546373880L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373880L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYT_UART2"</b> field.
    class MsgoutPubxIdPolytUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolytUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolytUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutPubxIdPolytUsb field.
    struct MsgoutPubxIdPolytUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373881L>,
                comms::option::def::ValidNumValue<546373881L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373881L>,
                    comms::option::def::ValidNumValue<546373881L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373881L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-PUBX_ID_POLYT_USB"</b> field.
    class MsgoutPubxIdPolytUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutPubxIdPolytUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutPubxIdPolytUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutPubxIdPolytUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutPubxIdPolytUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1005I2c field.
    struct MsgoutRtcm3xType1005I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374333L>,
                comms::option::def::ValidNumValue<546374333L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374333L>,
                    comms::option::def::ValidNumValue<546374333L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374333L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1005_I2C"</b> field.
    class MsgoutRtcm3xType1005I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1005I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1005I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1005Spi field.
    struct MsgoutRtcm3xType1005SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374337L>,
                comms::option::def::ValidNumValue<546374337L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374337L>,
                    comms::option::def::ValidNumValue<546374337L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374337L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1005_SPI"</b> field.
    class MsgoutRtcm3xType1005Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1005SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1005SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1005Uart1 field.
    struct MsgoutRtcm3xType1005Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374334L>,
                comms::option::def::ValidNumValue<546374334L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374334L>,
                    comms::option::def::ValidNumValue<546374334L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374334L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1005_UART1"</b> field.
    class MsgoutRtcm3xType1005Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1005Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1005Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1005Uart2 field.
    struct MsgoutRtcm3xType1005Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374335L>,
                comms::option::def::ValidNumValue<546374335L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374335L>,
                    comms::option::def::ValidNumValue<546374335L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374335L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1005_UART2"</b> field.
    class MsgoutRtcm3xType1005Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1005Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1005Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1005Usb field.
    struct MsgoutRtcm3xType1005UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374336L>,
                comms::option::def::ValidNumValue<546374336L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374336L>,
                    comms::option::def::ValidNumValue<546374336L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374336L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1005_USB"</b> field.
    class MsgoutRtcm3xType1005Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1005UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1005UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1005UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1005UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1074I2c field.
    struct MsgoutRtcm3xType1074I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374494L>,
                comms::option::def::ValidNumValue<546374494L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374494L>,
                    comms::option::def::ValidNumValue<546374494L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374494L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1074_I2C"</b> field.
    class MsgoutRtcm3xType1074I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1074I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1074I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1074Spi field.
    struct MsgoutRtcm3xType1074SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374498L>,
                comms::option::def::ValidNumValue<546374498L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374498L>,
                    comms::option::def::ValidNumValue<546374498L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374498L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1074_SPI"</b> field.
    class MsgoutRtcm3xType1074Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1074SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1074SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1074Uart1 field.
    struct MsgoutRtcm3xType1074Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374495L>,
                comms::option::def::ValidNumValue<546374495L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374495L>,
                    comms::option::def::ValidNumValue<546374495L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374495L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1074_UART1"</b> field.
    class MsgoutRtcm3xType1074Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1074Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1074Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1074Uart2 field.
    struct MsgoutRtcm3xType1074Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374496L>,
                comms::option::def::ValidNumValue<546374496L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374496L>,
                    comms::option::def::ValidNumValue<546374496L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374496L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1074_UART2"</b> field.
    class MsgoutRtcm3xType1074Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1074Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1074Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1074Usb field.
    struct MsgoutRtcm3xType1074UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374497L>,
                comms::option::def::ValidNumValue<546374497L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374497L>,
                    comms::option::def::ValidNumValue<546374497L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374497L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1074_USB"</b> field.
    class MsgoutRtcm3xType1074Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1074UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1074UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1074UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1074UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1077I2c field.
    struct MsgoutRtcm3xType1077I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374348L>,
                comms::option::def::ValidNumValue<546374348L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374348L>,
                    comms::option::def::ValidNumValue<546374348L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374348L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1077_I2C"</b> field.
    class MsgoutRtcm3xType1077I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1077I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1077I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1077Spi field.
    struct MsgoutRtcm3xType1077SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374352L>,
                comms::option::def::ValidNumValue<546374352L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374352L>,
                    comms::option::def::ValidNumValue<546374352L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374352L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1077_SPI"</b> field.
    class MsgoutRtcm3xType1077Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1077SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1077SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1077Uart1 field.
    struct MsgoutRtcm3xType1077Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374349L>,
                comms::option::def::ValidNumValue<546374349L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374349L>,
                    comms::option::def::ValidNumValue<546374349L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374349L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1077_UART1"</b> field.
    class MsgoutRtcm3xType1077Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1077Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1077Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1077Uart2 field.
    struct MsgoutRtcm3xType1077Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374350L>,
                comms::option::def::ValidNumValue<546374350L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374350L>,
                    comms::option::def::ValidNumValue<546374350L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374350L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1077_UART2"</b> field.
    class MsgoutRtcm3xType1077Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1077Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1077Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1077Usb field.
    struct MsgoutRtcm3xType1077UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374351L>,
                comms::option::def::ValidNumValue<546374351L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374351L>,
                    comms::option::def::ValidNumValue<546374351L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374351L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1077_USB"</b> field.
    class MsgoutRtcm3xType1077Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1077UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1077UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1077UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1077UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1084I2c field.
    struct MsgoutRtcm3xType1084I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374499L>,
                comms::option::def::ValidNumValue<546374499L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374499L>,
                    comms::option::def::ValidNumValue<546374499L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374499L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1084_I2C"</b> field.
    class MsgoutRtcm3xType1084I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1084I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1084I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1084Spi field.
    struct MsgoutRtcm3xType1084SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374503L>,
                comms::option::def::ValidNumValue<546374503L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374503L>,
                    comms::option::def::ValidNumValue<546374503L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374503L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1084_SPI"</b> field.
    class MsgoutRtcm3xType1084Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1084SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1084SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1084Uart1 field.
    struct MsgoutRtcm3xType1084Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374500L>,
                comms::option::def::ValidNumValue<546374500L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374500L>,
                    comms::option::def::ValidNumValue<546374500L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374500L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1084_UART1"</b> field.
    class MsgoutRtcm3xType1084Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1084Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1084Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1084Uart2 field.
    struct MsgoutRtcm3xType1084Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374501L>,
                comms::option::def::ValidNumValue<546374501L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374501L>,
                    comms::option::def::ValidNumValue<546374501L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374501L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1084_UART2"</b> field.
    class MsgoutRtcm3xType1084Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1084Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1084Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1084Usb field.
    struct MsgoutRtcm3xType1084UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374502L>,
                comms::option::def::ValidNumValue<546374502L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374502L>,
                    comms::option::def::ValidNumValue<546374502L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374502L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1084_USB"</b> field.
    class MsgoutRtcm3xType1084Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1084UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1084UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1084UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1084UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1087I2c field.
    struct MsgoutRtcm3xType1087I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374353L>,
                comms::option::def::ValidNumValue<546374353L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374353L>,
                    comms::option::def::ValidNumValue<546374353L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374353L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1087_I2C"</b> field.
    class MsgoutRtcm3xType1087I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1087I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1087I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1087Spi field.
    struct MsgoutRtcm3xType1087SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374357L>,
                comms::option::def::ValidNumValue<546374357L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374357L>,
                    comms::option::def::ValidNumValue<546374357L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374357L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1087_SPI"</b> field.
    class MsgoutRtcm3xType1087Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1087SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1087SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1087Uart1 field.
    struct MsgoutRtcm3xType1087Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374354L>,
                comms::option::def::ValidNumValue<546374354L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374354L>,
                    comms::option::def::ValidNumValue<546374354L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374354L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1087_UART1"</b> field.
    class MsgoutRtcm3xType1087Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1087Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1087Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1087Uart2 field.
    struct MsgoutRtcm3xType1087Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374355L>,
                comms::option::def::ValidNumValue<546374355L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374355L>,
                    comms::option::def::ValidNumValue<546374355L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374355L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1087_UART2"</b> field.
    class MsgoutRtcm3xType1087Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1087Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1087Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1087Usb field.
    struct MsgoutRtcm3xType1087UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374356L>,
                comms::option::def::ValidNumValue<546374356L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374356L>,
                    comms::option::def::ValidNumValue<546374356L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374356L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1087_USB"</b> field.
    class MsgoutRtcm3xType1087Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1087UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1087UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1087UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1087UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1094I2c field.
    struct MsgoutRtcm3xType1094I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374504L>,
                comms::option::def::ValidNumValue<546374504L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374504L>,
                    comms::option::def::ValidNumValue<546374504L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374504L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1094_I2C"</b> field.
    class MsgoutRtcm3xType1094I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1094I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1094I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1094Spi field.
    struct MsgoutRtcm3xType1094SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374508L>,
                comms::option::def::ValidNumValue<546374508L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374508L>,
                    comms::option::def::ValidNumValue<546374508L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374508L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1094_SPI"</b> field.
    class MsgoutRtcm3xType1094Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1094SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1094SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1094Uart1 field.
    struct MsgoutRtcm3xType1094Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374505L>,
                comms::option::def::ValidNumValue<546374505L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374505L>,
                    comms::option::def::ValidNumValue<546374505L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374505L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1094_UART1"</b> field.
    class MsgoutRtcm3xType1094Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1094Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1094Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1094Uart2 field.
    struct MsgoutRtcm3xType1094Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374506L>,
                comms::option::def::ValidNumValue<546374506L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374506L>,
                    comms::option::def::ValidNumValue<546374506L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374506L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1094_UART2"</b> field.
    class MsgoutRtcm3xType1094Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1094Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1094Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1094Usb field.
    struct MsgoutRtcm3xType1094UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374507L>,
                comms::option::def::ValidNumValue<546374507L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374507L>,
                    comms::option::def::ValidNumValue<546374507L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374507L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1094_USB"</b> field.
    class MsgoutRtcm3xType1094Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1094UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1094UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1094UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1094UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1097I2c field.
    struct MsgoutRtcm3xType1097I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374424L>,
                comms::option::def::ValidNumValue<546374424L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374424L>,
                    comms::option::def::ValidNumValue<546374424L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374424L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1097_I2C"</b> field.
    class MsgoutRtcm3xType1097I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1097I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1097I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1097Spi field.
    struct MsgoutRtcm3xType1097SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374428L>,
                comms::option::def::ValidNumValue<546374428L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374428L>,
                    comms::option::def::ValidNumValue<546374428L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374428L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1097_SPI"</b> field.
    class MsgoutRtcm3xType1097Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1097SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1097SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1097Uart1 field.
    struct MsgoutRtcm3xType1097Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374425L>,
                comms::option::def::ValidNumValue<546374425L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374425L>,
                    comms::option::def::ValidNumValue<546374425L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374425L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1097_UART1"</b> field.
    class MsgoutRtcm3xType1097Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1097Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1097Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1097Uart2 field.
    struct MsgoutRtcm3xType1097Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374426L>,
                comms::option::def::ValidNumValue<546374426L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374426L>,
                    comms::option::def::ValidNumValue<546374426L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374426L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1097_UART2"</b> field.
    class MsgoutRtcm3xType1097Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1097Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1097Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1097Usb field.
    struct MsgoutRtcm3xType1097UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374427L>,
                comms::option::def::ValidNumValue<546374427L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374427L>,
                    comms::option::def::ValidNumValue<546374427L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374427L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1097_USB"</b> field.
    class MsgoutRtcm3xType1097Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1097UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1097UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1097UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1097UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1124I2c field.
    struct MsgoutRtcm3xType1124I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374509L>,
                comms::option::def::ValidNumValue<546374509L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374509L>,
                    comms::option::def::ValidNumValue<546374509L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374509L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1124_I2C"</b> field.
    class MsgoutRtcm3xType1124I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1124I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1124I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1124Spi field.
    struct MsgoutRtcm3xType1124SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374513L>,
                comms::option::def::ValidNumValue<546374513L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374513L>,
                    comms::option::def::ValidNumValue<546374513L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374513L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1124_SPI"</b> field.
    class MsgoutRtcm3xType1124Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1124SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1124SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1124Uart1 field.
    struct MsgoutRtcm3xType1124Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374510L>,
                comms::option::def::ValidNumValue<546374510L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374510L>,
                    comms::option::def::ValidNumValue<546374510L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374510L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1124_UART1"</b> field.
    class MsgoutRtcm3xType1124Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1124Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1124Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1124Uart2 field.
    struct MsgoutRtcm3xType1124Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374511L>,
                comms::option::def::ValidNumValue<546374511L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374511L>,
                    comms::option::def::ValidNumValue<546374511L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374511L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1124_UART2"</b> field.
    class MsgoutRtcm3xType1124Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1124Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1124Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1124Usb field.
    struct MsgoutRtcm3xType1124UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374512L>,
                comms::option::def::ValidNumValue<546374512L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374512L>,
                    comms::option::def::ValidNumValue<546374512L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374512L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1124_USB"</b> field.
    class MsgoutRtcm3xType1124Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1124UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1124UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1124UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1124UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1127I2c field.
    struct MsgoutRtcm3xType1127I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374358L>,
                comms::option::def::ValidNumValue<546374358L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374358L>,
                    comms::option::def::ValidNumValue<546374358L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374358L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1127_I2C"</b> field.
    class MsgoutRtcm3xType1127I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1127I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1127I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1127Spi field.
    struct MsgoutRtcm3xType1127SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374362L>,
                comms::option::def::ValidNumValue<546374362L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374362L>,
                    comms::option::def::ValidNumValue<546374362L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374362L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1127_SPI"</b> field.
    class MsgoutRtcm3xType1127Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1127SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1127SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1127Uart1 field.
    struct MsgoutRtcm3xType1127Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374359L>,
                comms::option::def::ValidNumValue<546374359L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374359L>,
                    comms::option::def::ValidNumValue<546374359L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374359L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1127_UART1"</b> field.
    class MsgoutRtcm3xType1127Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1127Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1127Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1127Uart2 field.
    struct MsgoutRtcm3xType1127Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374360L>,
                comms::option::def::ValidNumValue<546374360L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374360L>,
                    comms::option::def::ValidNumValue<546374360L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374360L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1127_UART2"</b> field.
    class MsgoutRtcm3xType1127Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1127Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1127Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1127Usb field.
    struct MsgoutRtcm3xType1127UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374361L>,
                comms::option::def::ValidNumValue<546374361L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374361L>,
                    comms::option::def::ValidNumValue<546374361L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374361L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1127_USB"</b> field.
    class MsgoutRtcm3xType1127Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1127UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1127UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1127UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1127UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1230I2c field.
    struct MsgoutRtcm3xType1230I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374403L>,
                comms::option::def::ValidNumValue<546374403L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374403L>,
                    comms::option::def::ValidNumValue<546374403L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374403L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1230_I2C"</b> field.
    class MsgoutRtcm3xType1230I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1230I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1230I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1230Spi field.
    struct MsgoutRtcm3xType1230SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374407L>,
                comms::option::def::ValidNumValue<546374407L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374407L>,
                    comms::option::def::ValidNumValue<546374407L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374407L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1230_SPI"</b> field.
    class MsgoutRtcm3xType1230Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1230SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1230SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1230Uart1 field.
    struct MsgoutRtcm3xType1230Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374404L>,
                comms::option::def::ValidNumValue<546374404L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374404L>,
                    comms::option::def::ValidNumValue<546374404L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374404L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1230_UART1"</b> field.
    class MsgoutRtcm3xType1230Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1230Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1230Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1230Uart2 field.
    struct MsgoutRtcm3xType1230Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374405L>,
                comms::option::def::ValidNumValue<546374405L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374405L>,
                    comms::option::def::ValidNumValue<546374405L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374405L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1230_UART2"</b> field.
    class MsgoutRtcm3xType1230Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1230Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1230Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType1230Usb field.
    struct MsgoutRtcm3xType1230UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374406L>,
                comms::option::def::ValidNumValue<546374406L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374406L>,
                    comms::option::def::ValidNumValue<546374406L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374406L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE1230_USB"</b> field.
    class MsgoutRtcm3xType1230Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType1230UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType1230UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType1230UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType1230UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_0I2c field.
    struct MsgoutRtcm3xType4072_0I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374398L>,
                comms::option::def::ValidNumValue<546374398L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374398L>,
                    comms::option::def::ValidNumValue<546374398L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374398L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_0_I2C"</b> field.
    class MsgoutRtcm3xType4072_0I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_0I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_0I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_0Spi field.
    struct MsgoutRtcm3xType4072_0SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374402L>,
                comms::option::def::ValidNumValue<546374402L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374402L>,
                    comms::option::def::ValidNumValue<546374402L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374402L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_0_SPI"</b> field.
    class MsgoutRtcm3xType4072_0Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_0SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_0SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_0Uart1 field.
    struct MsgoutRtcm3xType4072_0Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374399L>,
                comms::option::def::ValidNumValue<546374399L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374399L>,
                    comms::option::def::ValidNumValue<546374399L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374399L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_0_UART1"</b> field.
    class MsgoutRtcm3xType4072_0Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_0Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_0Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_0Uart2 field.
    struct MsgoutRtcm3xType4072_0Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374400L>,
                comms::option::def::ValidNumValue<546374400L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374400L>,
                    comms::option::def::ValidNumValue<546374400L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374400L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_0_UART2"</b> field.
    class MsgoutRtcm3xType4072_0Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_0Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_0Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_0Usb field.
    struct MsgoutRtcm3xType4072_0UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374401L>,
                comms::option::def::ValidNumValue<546374401L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374401L>,
                    comms::option::def::ValidNumValue<546374401L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374401L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_0_USB"</b> field.
    class MsgoutRtcm3xType4072_0Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_0UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_0UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_0UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_0UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_1I2c field.
    struct MsgoutRtcm3xType4072_1I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374529L>,
                comms::option::def::ValidNumValue<546374529L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374529L>,
                    comms::option::def::ValidNumValue<546374529L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374529L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_1_I2C"</b> field.
    class MsgoutRtcm3xType4072_1I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_1I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_1I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_1Spi field.
    struct MsgoutRtcm3xType4072_1SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374533L>,
                comms::option::def::ValidNumValue<546374533L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374533L>,
                    comms::option::def::ValidNumValue<546374533L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374533L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_1_SPI"</b> field.
    class MsgoutRtcm3xType4072_1Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_1SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_1SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_1Uart1 field.
    struct MsgoutRtcm3xType4072_1Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374530L>,
                comms::option::def::ValidNumValue<546374530L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374530L>,
                    comms::option::def::ValidNumValue<546374530L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374530L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_1_UART1"</b> field.
    class MsgoutRtcm3xType4072_1Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_1Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_1Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_1Uart2 field.
    struct MsgoutRtcm3xType4072_1Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374531L>,
                comms::option::def::ValidNumValue<546374531L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374531L>,
                    comms::option::def::ValidNumValue<546374531L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374531L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_1_UART2"</b> field.
    class MsgoutRtcm3xType4072_1Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_1Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_1Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutRtcm3xType4072_1Usb field.
    struct MsgoutRtcm3xType4072_1UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374532L>,
                comms::option::def::ValidNumValue<546374532L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374532L>,
                    comms::option::def::ValidNumValue<546374532L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374532L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-RTCM_3X_TYPE4072_1_USB"</b> field.
    class MsgoutRtcm3xType4072_1Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutRtcm3xType4072_1UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutRtcm3xType4072_1UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutRtcm3xType4072_1UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutRtcm3xType4072_1UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxLogInfoI2c field.
    struct MsgoutUbxLogInfoI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374233L>,
                comms::option::def::ValidNumValue<546374233L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374233L>,
                    comms::option::def::ValidNumValue<546374233L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374233L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_LOG_INFO_I2C"</b> field.
    class MsgoutUbxLogInfoI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxLogInfoI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxLogInfoI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxLogInfoSpi field.
    struct MsgoutUbxLogInfoSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374237L>,
                comms::option::def::ValidNumValue<546374237L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374237L>,
                    comms::option::def::ValidNumValue<546374237L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374237L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_LOG_INFO_SPI"</b> field.
    class MsgoutUbxLogInfoSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxLogInfoSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxLogInfoSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxLogInfoUart1 field.
    struct MsgoutUbxLogInfoUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374234L>,
                comms::option::def::ValidNumValue<546374234L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374234L>,
                    comms::option::def::ValidNumValue<546374234L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374234L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_LOG_INFO_UART1"</b> field.
    class MsgoutUbxLogInfoUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxLogInfoUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxLogInfoUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxLogInfoUart2 field.
    struct MsgoutUbxLogInfoUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374235L>,
                comms::option::def::ValidNumValue<546374235L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374235L>,
                    comms::option::def::ValidNumValue<546374235L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374235L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_LOG_INFO_UART2"</b> field.
    class MsgoutUbxLogInfoUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxLogInfoUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxLogInfoUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxLogInfoUsb field.
    struct MsgoutUbxLogInfoUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374236L>,
                comms::option::def::ValidNumValue<546374236L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374236L>,
                    comms::option::def::ValidNumValue<546374236L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374236L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_LOG_INFO_USB"</b> field.
    class MsgoutUbxLogInfoUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxLogInfoUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxLogInfoUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxLogInfoUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxLogInfoUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonCommsI2c field.
    struct MsgoutUbxMonCommsI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374479L>,
                comms::option::def::ValidNumValue<546374479L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374479L>,
                    comms::option::def::ValidNumValue<546374479L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374479L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_COMMS_I2C"</b> field.
    class MsgoutUbxMonCommsI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonCommsI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonCommsI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonCommsSpi field.
    struct MsgoutUbxMonCommsSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374483L>,
                comms::option::def::ValidNumValue<546374483L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374483L>,
                    comms::option::def::ValidNumValue<546374483L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374483L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_COMMS_SPI"</b> field.
    class MsgoutUbxMonCommsSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonCommsSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonCommsSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonCommsUart1 field.
    struct MsgoutUbxMonCommsUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374480L>,
                comms::option::def::ValidNumValue<546374480L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374480L>,
                    comms::option::def::ValidNumValue<546374480L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374480L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_COMMS_UART1"</b> field.
    class MsgoutUbxMonCommsUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonCommsUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonCommsUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonCommsUart2 field.
    struct MsgoutUbxMonCommsUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374481L>,
                comms::option::def::ValidNumValue<546374481L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374481L>,
                    comms::option::def::ValidNumValue<546374481L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374481L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_COMMS_UART2"</b> field.
    class MsgoutUbxMonCommsUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonCommsUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonCommsUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonCommsUsb field.
    struct MsgoutUbxMonCommsUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374482L>,
                comms::option::def::ValidNumValue<546374482L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374482L>,
                    comms::option::def::ValidNumValue<546374482L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374482L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_COMMS_USB"</b> field.
    class MsgoutUbxMonCommsUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonCommsUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonCommsUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonCommsUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonCommsUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw2I2c field.
    struct MsgoutUbxMonHw2I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374073L>,
                comms::option::def::ValidNumValue<546374073L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374073L>,
                    comms::option::def::ValidNumValue<546374073L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374073L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW2_I2C"</b> field.
    class MsgoutUbxMonHw2I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw2I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw2I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw2Spi field.
    struct MsgoutUbxMonHw2SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374077L>,
                comms::option::def::ValidNumValue<546374077L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374077L>,
                    comms::option::def::ValidNumValue<546374077L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374077L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW2_SPI"</b> field.
    class MsgoutUbxMonHw2Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw2SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw2SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw2Uart1 field.
    struct MsgoutUbxMonHw2Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374074L>,
                comms::option::def::ValidNumValue<546374074L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374074L>,
                    comms::option::def::ValidNumValue<546374074L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374074L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW2_UART1"</b> field.
    class MsgoutUbxMonHw2Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw2Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw2Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw2Uart2 field.
    struct MsgoutUbxMonHw2Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374075L>,
                comms::option::def::ValidNumValue<546374075L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374075L>,
                    comms::option::def::ValidNumValue<546374075L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374075L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW2_UART2"</b> field.
    class MsgoutUbxMonHw2Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw2Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw2Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw2Usb field.
    struct MsgoutUbxMonHw2UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374076L>,
                comms::option::def::ValidNumValue<546374076L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374076L>,
                    comms::option::def::ValidNumValue<546374076L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374076L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW2_USB"</b> field.
    class MsgoutUbxMonHw2Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw2UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw2UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw2UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw2UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw3I2c field.
    struct MsgoutUbxMonHw3I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374484L>,
                comms::option::def::ValidNumValue<546374484L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374484L>,
                    comms::option::def::ValidNumValue<546374484L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374484L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW3_I2C"</b> field.
    class MsgoutUbxMonHw3I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw3I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw3I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw3Spi field.
    struct MsgoutUbxMonHw3SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374488L>,
                comms::option::def::ValidNumValue<546374488L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374488L>,
                    comms::option::def::ValidNumValue<546374488L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374488L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW3_SPI"</b> field.
    class MsgoutUbxMonHw3Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw3SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw3SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw3Uart1 field.
    struct MsgoutUbxMonHw3Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374485L>,
                comms::option::def::ValidNumValue<546374485L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374485L>,
                    comms::option::def::ValidNumValue<546374485L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374485L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW3_UART1"</b> field.
    class MsgoutUbxMonHw3Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw3Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw3Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw3Uart2 field.
    struct MsgoutUbxMonHw3Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374486L>,
                comms::option::def::ValidNumValue<546374486L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374486L>,
                    comms::option::def::ValidNumValue<546374486L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374486L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW3_UART2"</b> field.
    class MsgoutUbxMonHw3Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw3Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw3Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHw3Usb field.
    struct MsgoutUbxMonHw3UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374487L>,
                comms::option::def::ValidNumValue<546374487L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374487L>,
                    comms::option::def::ValidNumValue<546374487L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374487L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW3_USB"</b> field.
    class MsgoutUbxMonHw3Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHw3UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHw3UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHw3UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHw3UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHwI2c field.
    struct MsgoutUbxMonHwI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374068L>,
                comms::option::def::ValidNumValue<546374068L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374068L>,
                    comms::option::def::ValidNumValue<546374068L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374068L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW_I2C"</b> field.
    class MsgoutUbxMonHwI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHwI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHwI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHwSpi field.
    struct MsgoutUbxMonHwSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374072L>,
                comms::option::def::ValidNumValue<546374072L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374072L>,
                    comms::option::def::ValidNumValue<546374072L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374072L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW_SPI"</b> field.
    class MsgoutUbxMonHwSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHwSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHwSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHwUart1 field.
    struct MsgoutUbxMonHwUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374069L>,
                comms::option::def::ValidNumValue<546374069L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374069L>,
                    comms::option::def::ValidNumValue<546374069L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374069L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW_UART1"</b> field.
    class MsgoutUbxMonHwUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHwUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHwUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHwUart2 field.
    struct MsgoutUbxMonHwUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374070L>,
                comms::option::def::ValidNumValue<546374070L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374070L>,
                    comms::option::def::ValidNumValue<546374070L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374070L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW_UART2"</b> field.
    class MsgoutUbxMonHwUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHwUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHwUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonHwUsb field.
    struct MsgoutUbxMonHwUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374071L>,
                comms::option::def::ValidNumValue<546374071L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374071L>,
                    comms::option::def::ValidNumValue<546374071L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374071L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_HW_USB"</b> field.
    class MsgoutUbxMonHwUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonHwUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonHwUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonHwUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonHwUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonIoI2c field.
    struct MsgoutUbxMonIoI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374053L>,
                comms::option::def::ValidNumValue<546374053L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374053L>,
                    comms::option::def::ValidNumValue<546374053L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374053L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_IO_I2C"</b> field.
    class MsgoutUbxMonIoI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonIoI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonIoI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonIoSpi field.
    struct MsgoutUbxMonIoSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374057L>,
                comms::option::def::ValidNumValue<546374057L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374057L>,
                    comms::option::def::ValidNumValue<546374057L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374057L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_IO_SPI"</b> field.
    class MsgoutUbxMonIoSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonIoSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonIoSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonIoUart1 field.
    struct MsgoutUbxMonIoUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374054L>,
                comms::option::def::ValidNumValue<546374054L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374054L>,
                    comms::option::def::ValidNumValue<546374054L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374054L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_IO_UART1"</b> field.
    class MsgoutUbxMonIoUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonIoUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonIoUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonIoUart2 field.
    struct MsgoutUbxMonIoUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374055L>,
                comms::option::def::ValidNumValue<546374055L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374055L>,
                    comms::option::def::ValidNumValue<546374055L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374055L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_IO_UART2"</b> field.
    class MsgoutUbxMonIoUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonIoUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonIoUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonIoUsb field.
    struct MsgoutUbxMonIoUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374056L>,
                comms::option::def::ValidNumValue<546374056L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374056L>,
                    comms::option::def::ValidNumValue<546374056L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374056L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_IO_USB"</b> field.
    class MsgoutUbxMonIoUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonIoUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonIoUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonIoUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonIoUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonMsgppI2c field.
    struct MsgoutUbxMonMsgppI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374038L>,
                comms::option::def::ValidNumValue<546374038L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374038L>,
                    comms::option::def::ValidNumValue<546374038L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374038L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_MSGPP_I2C"</b> field.
    class MsgoutUbxMonMsgppI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonMsgppI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonMsgppI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonMsgppSpi field.
    struct MsgoutUbxMonMsgppSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374042L>,
                comms::option::def::ValidNumValue<546374042L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374042L>,
                    comms::option::def::ValidNumValue<546374042L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374042L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_MSGPP_SPI"</b> field.
    class MsgoutUbxMonMsgppSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonMsgppSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonMsgppSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonMsgppUart1 field.
    struct MsgoutUbxMonMsgppUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374039L>,
                comms::option::def::ValidNumValue<546374039L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374039L>,
                    comms::option::def::ValidNumValue<546374039L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374039L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_MSGPP_UART1"</b> field.
    class MsgoutUbxMonMsgppUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonMsgppUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonMsgppUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonMsgppUart2 field.
    struct MsgoutUbxMonMsgppUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374040L>,
                comms::option::def::ValidNumValue<546374040L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374040L>,
                    comms::option::def::ValidNumValue<546374040L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374040L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_MSGPP_UART2"</b> field.
    class MsgoutUbxMonMsgppUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonMsgppUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonMsgppUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonMsgppUsb field.
    struct MsgoutUbxMonMsgppUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374041L>,
                comms::option::def::ValidNumValue<546374041L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374041L>,
                    comms::option::def::ValidNumValue<546374041L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374041L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_MSGPP_USB"</b> field.
    class MsgoutUbxMonMsgppUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonMsgppUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonMsgppUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonMsgppUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonMsgppUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRfI2c field.
    struct MsgoutUbxMonRfI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374489L>,
                comms::option::def::ValidNumValue<546374489L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374489L>,
                    comms::option::def::ValidNumValue<546374489L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374489L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RF_I2C"</b> field.
    class MsgoutUbxMonRfI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRfI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRfI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRfSpi field.
    struct MsgoutUbxMonRfSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374493L>,
                comms::option::def::ValidNumValue<546374493L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374493L>,
                    comms::option::def::ValidNumValue<546374493L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374493L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RF_SPI"</b> field.
    class MsgoutUbxMonRfSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRfSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRfSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRfUart1 field.
    struct MsgoutUbxMonRfUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374490L>,
                comms::option::def::ValidNumValue<546374490L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374490L>,
                    comms::option::def::ValidNumValue<546374490L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374490L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RF_UART1"</b> field.
    class MsgoutUbxMonRfUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRfUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRfUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRfUart2 field.
    struct MsgoutUbxMonRfUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374491L>,
                comms::option::def::ValidNumValue<546374491L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374491L>,
                    comms::option::def::ValidNumValue<546374491L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374491L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RF_UART2"</b> field.
    class MsgoutUbxMonRfUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRfUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRfUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRfUsb field.
    struct MsgoutUbxMonRfUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374492L>,
                comms::option::def::ValidNumValue<546374492L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374492L>,
                    comms::option::def::ValidNumValue<546374492L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374492L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RF_USB"</b> field.
    class MsgoutUbxMonRfUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRfUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRfUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRfUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRfUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxbufI2c field.
    struct MsgoutUbxMonRxbufI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374048L>,
                comms::option::def::ValidNumValue<546374048L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374048L>,
                    comms::option::def::ValidNumValue<546374048L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374048L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXBUF_I2C"</b> field.
    class MsgoutUbxMonRxbufI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxbufI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxbufI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxbufSpi field.
    struct MsgoutUbxMonRxbufSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374052L>,
                comms::option::def::ValidNumValue<546374052L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374052L>,
                    comms::option::def::ValidNumValue<546374052L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374052L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXBUF_SPI"</b> field.
    class MsgoutUbxMonRxbufSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxbufSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxbufSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxbufUart1 field.
    struct MsgoutUbxMonRxbufUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374049L>,
                comms::option::def::ValidNumValue<546374049L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374049L>,
                    comms::option::def::ValidNumValue<546374049L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374049L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXBUF_UART1"</b> field.
    class MsgoutUbxMonRxbufUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxbufUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxbufUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxbufUart2 field.
    struct MsgoutUbxMonRxbufUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374050L>,
                comms::option::def::ValidNumValue<546374050L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374050L>,
                    comms::option::def::ValidNumValue<546374050L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374050L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXBUF_UART2"</b> field.
    class MsgoutUbxMonRxbufUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxbufUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxbufUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxbufUsb field.
    struct MsgoutUbxMonRxbufUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374051L>,
                comms::option::def::ValidNumValue<546374051L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374051L>,
                    comms::option::def::ValidNumValue<546374051L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374051L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXBUF_USB"</b> field.
    class MsgoutUbxMonRxbufUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxbufUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxbufUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxbufUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxbufUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxrI2c field.
    struct MsgoutUbxMonRxrI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374023L>,
                comms::option::def::ValidNumValue<546374023L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374023L>,
                    comms::option::def::ValidNumValue<546374023L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374023L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXR_I2C"</b> field.
    class MsgoutUbxMonRxrI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxrI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxrI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxrSpi field.
    struct MsgoutUbxMonRxrSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374027L>,
                comms::option::def::ValidNumValue<546374027L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374027L>,
                    comms::option::def::ValidNumValue<546374027L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374027L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXR_SPI"</b> field.
    class MsgoutUbxMonRxrSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxrSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxrSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxrUart1 field.
    struct MsgoutUbxMonRxrUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374024L>,
                comms::option::def::ValidNumValue<546374024L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374024L>,
                    comms::option::def::ValidNumValue<546374024L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374024L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXR_UART1"</b> field.
    class MsgoutUbxMonRxrUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxrUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxrUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxrUart2 field.
    struct MsgoutUbxMonRxrUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374025L>,
                comms::option::def::ValidNumValue<546374025L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374025L>,
                    comms::option::def::ValidNumValue<546374025L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374025L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXR_UART2"</b> field.
    class MsgoutUbxMonRxrUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxrUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxrUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonRxrUsb field.
    struct MsgoutUbxMonRxrUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374026L>,
                comms::option::def::ValidNumValue<546374026L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374026L>,
                    comms::option::def::ValidNumValue<546374026L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374026L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_RXR_USB"</b> field.
    class MsgoutUbxMonRxrUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonRxrUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonRxrUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonRxrUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonRxrUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonSpanI2c field.
    struct MsgoutUbxMonSpanI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374539L>,
                comms::option::def::ValidNumValue<546374539L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374539L>,
                    comms::option::def::ValidNumValue<546374539L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374539L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_SPAN_I2C"</b> field.
    class MsgoutUbxMonSpanI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonSpanI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonSpanI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonSpanSpi field.
    struct MsgoutUbxMonSpanSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374543L>,
                comms::option::def::ValidNumValue<546374543L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374543L>,
                    comms::option::def::ValidNumValue<546374543L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374543L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_SPAN_SPI"</b> field.
    class MsgoutUbxMonSpanSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonSpanSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonSpanSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonSpanUart1 field.
    struct MsgoutUbxMonSpanUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374540L>,
                comms::option::def::ValidNumValue<546374540L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374540L>,
                    comms::option::def::ValidNumValue<546374540L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374540L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_SPAN_UART1"</b> field.
    class MsgoutUbxMonSpanUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonSpanUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonSpanUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonSpanUart2 field.
    struct MsgoutUbxMonSpanUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374541L>,
                comms::option::def::ValidNumValue<546374541L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374541L>,
                    comms::option::def::ValidNumValue<546374541L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374541L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_SPAN_UART2"</b> field.
    class MsgoutUbxMonSpanUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonSpanUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonSpanUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonSpanUsb field.
    struct MsgoutUbxMonSpanUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374542L>,
                comms::option::def::ValidNumValue<546374542L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374542L>,
                    comms::option::def::ValidNumValue<546374542L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374542L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_SPAN_USB"</b> field.
    class MsgoutUbxMonSpanUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonSpanUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonSpanUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonSpanUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonSpanUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonTxbufI2c field.
    struct MsgoutUbxMonTxbufI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374043L>,
                comms::option::def::ValidNumValue<546374043L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374043L>,
                    comms::option::def::ValidNumValue<546374043L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374043L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_TXBUF_I2C"</b> field.
    class MsgoutUbxMonTxbufI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonTxbufI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonTxbufI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonTxbufSpi field.
    struct MsgoutUbxMonTxbufSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374047L>,
                comms::option::def::ValidNumValue<546374047L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374047L>,
                    comms::option::def::ValidNumValue<546374047L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374047L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_TXBUF_SPI"</b> field.
    class MsgoutUbxMonTxbufSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonTxbufSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonTxbufSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonTxbufUart1 field.
    struct MsgoutUbxMonTxbufUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374044L>,
                comms::option::def::ValidNumValue<546374044L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374044L>,
                    comms::option::def::ValidNumValue<546374044L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374044L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_TXBUF_UART1"</b> field.
    class MsgoutUbxMonTxbufUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonTxbufUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonTxbufUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonTxbufUart2 field.
    struct MsgoutUbxMonTxbufUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374045L>,
                comms::option::def::ValidNumValue<546374045L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374045L>,
                    comms::option::def::ValidNumValue<546374045L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374045L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_TXBUF_UART2"</b> field.
    class MsgoutUbxMonTxbufUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonTxbufUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonTxbufUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxMonTxbufUsb field.
    struct MsgoutUbxMonTxbufUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374046L>,
                comms::option::def::ValidNumValue<546374046L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374046L>,
                    comms::option::def::ValidNumValue<546374046L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374046L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_MON_TXBUF_USB"</b> field.
    class MsgoutUbxMonTxbufUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxMonTxbufUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxMonTxbufUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxMonTxbufUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxMonTxbufUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavClockI2c field.
    struct MsgoutUbxNavClockI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373733L>,
                comms::option::def::ValidNumValue<546373733L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373733L>,
                    comms::option::def::ValidNumValue<546373733L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373733L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_CLOCK_I2C"</b> field.
    class MsgoutUbxNavClockI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavClockI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavClockI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavClockSpi field.
    struct MsgoutUbxNavClockSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373737L>,
                comms::option::def::ValidNumValue<546373737L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373737L>,
                    comms::option::def::ValidNumValue<546373737L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373737L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_CLOCK_SPI"</b> field.
    class MsgoutUbxNavClockSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavClockSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavClockSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavClockUart1 field.
    struct MsgoutUbxNavClockUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373734L>,
                comms::option::def::ValidNumValue<546373734L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373734L>,
                    comms::option::def::ValidNumValue<546373734L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373734L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_CLOCK_UART1"</b> field.
    class MsgoutUbxNavClockUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavClockUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavClockUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavClockUart2 field.
    struct MsgoutUbxNavClockUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373735L>,
                comms::option::def::ValidNumValue<546373735L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373735L>,
                    comms::option::def::ValidNumValue<546373735L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373735L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_CLOCK_UART2"</b> field.
    class MsgoutUbxNavClockUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavClockUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavClockUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavClockUsb field.
    struct MsgoutUbxNavClockUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373736L>,
                comms::option::def::ValidNumValue<546373736L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373736L>,
                    comms::option::def::ValidNumValue<546373736L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373736L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_CLOCK_USB"</b> field.
    class MsgoutUbxNavClockUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavClockUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavClockUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavClockUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavClockUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavDopI2c field.
    struct MsgoutUbxNavDopI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373688L>,
                comms::option::def::ValidNumValue<546373688L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373688L>,
                    comms::option::def::ValidNumValue<546373688L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373688L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_DOP_I2C"</b> field.
    class MsgoutUbxNavDopI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavDopI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavDopI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavDopSpi field.
    struct MsgoutUbxNavDopSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373692L>,
                comms::option::def::ValidNumValue<546373692L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373692L>,
                    comms::option::def::ValidNumValue<546373692L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373692L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_DOP_SPI"</b> field.
    class MsgoutUbxNavDopSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavDopSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavDopSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavDopUart1 field.
    struct MsgoutUbxNavDopUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373689L>,
                comms::option::def::ValidNumValue<546373689L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373689L>,
                    comms::option::def::ValidNumValue<546373689L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373689L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_DOP_UART1"</b> field.
    class MsgoutUbxNavDopUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavDopUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavDopUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavDopUart2 field.
    struct MsgoutUbxNavDopUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373690L>,
                comms::option::def::ValidNumValue<546373690L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373690L>,
                    comms::option::def::ValidNumValue<546373690L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373690L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_DOP_UART2"</b> field.
    class MsgoutUbxNavDopUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavDopUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavDopUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavDopUsb field.
    struct MsgoutUbxNavDopUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373691L>,
                comms::option::def::ValidNumValue<546373691L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373691L>,
                    comms::option::def::ValidNumValue<546373691L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373691L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_DOP_USB"</b> field.
    class MsgoutUbxNavDopUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavDopUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavDopUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavDopUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavDopUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavEoeI2c field.
    struct MsgoutUbxNavEoeI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373983L>,
                comms::option::def::ValidNumValue<546373983L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373983L>,
                    comms::option::def::ValidNumValue<546373983L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373983L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_EOE_I2C"</b> field.
    class MsgoutUbxNavEoeI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavEoeI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavEoeI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavEoeSpi field.
    struct MsgoutUbxNavEoeSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373987L>,
                comms::option::def::ValidNumValue<546373987L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373987L>,
                    comms::option::def::ValidNumValue<546373987L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373987L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_EOE_SPI"</b> field.
    class MsgoutUbxNavEoeSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavEoeSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavEoeSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavEoeUart1 field.
    struct MsgoutUbxNavEoeUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373984L>,
                comms::option::def::ValidNumValue<546373984L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373984L>,
                    comms::option::def::ValidNumValue<546373984L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373984L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_EOE_UART1"</b> field.
    class MsgoutUbxNavEoeUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavEoeUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavEoeUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavEoeUart2 field.
    struct MsgoutUbxNavEoeUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373985L>,
                comms::option::def::ValidNumValue<546373985L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373985L>,
                    comms::option::def::ValidNumValue<546373985L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373985L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_EOE_UART2"</b> field.
    class MsgoutUbxNavEoeUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavEoeUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavEoeUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavEoeUsb field.
    struct MsgoutUbxNavEoeUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373986L>,
                comms::option::def::ValidNumValue<546373986L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373986L>,
                    comms::option::def::ValidNumValue<546373986L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373986L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_EOE_USB"</b> field.
    class MsgoutUbxNavEoeUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavEoeUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavEoeUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavEoeUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavEoeUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavGeofenceI2c field.
    struct MsgoutUbxNavGeofenceI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373793L>,
                comms::option::def::ValidNumValue<546373793L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373793L>,
                    comms::option::def::ValidNumValue<546373793L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373793L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_GEOFENCE_I2C"</b> field.
    class MsgoutUbxNavGeofenceI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavGeofenceI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavGeofenceI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavGeofenceSpi field.
    struct MsgoutUbxNavGeofenceSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373797L>,
                comms::option::def::ValidNumValue<546373797L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373797L>,
                    comms::option::def::ValidNumValue<546373797L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373797L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_GEOFENCE_SPI"</b> field.
    class MsgoutUbxNavGeofenceSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavGeofenceSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavGeofenceSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavGeofenceUart1 field.
    struct MsgoutUbxNavGeofenceUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373794L>,
                comms::option::def::ValidNumValue<546373794L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373794L>,
                    comms::option::def::ValidNumValue<546373794L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373794L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_GEOFENCE_UART1"</b> field.
    class MsgoutUbxNavGeofenceUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavGeofenceUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavGeofenceUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavGeofenceUart2 field.
    struct MsgoutUbxNavGeofenceUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373795L>,
                comms::option::def::ValidNumValue<546373795L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373795L>,
                    comms::option::def::ValidNumValue<546373795L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373795L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_GEOFENCE_UART2"</b> field.
    class MsgoutUbxNavGeofenceUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavGeofenceUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavGeofenceUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavGeofenceUsb field.
    struct MsgoutUbxNavGeofenceUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373796L>,
                comms::option::def::ValidNumValue<546373796L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373796L>,
                    comms::option::def::ValidNumValue<546373796L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373796L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_GEOFENCE_USB"</b> field.
    class MsgoutUbxNavGeofenceUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavGeofenceUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavGeofenceUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavGeofenceUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavGeofenceUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposecefI2c field.
    struct MsgoutUbxNavHpposecefI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373678L>,
                comms::option::def::ValidNumValue<546373678L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373678L>,
                    comms::option::def::ValidNumValue<546373678L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373678L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSECEF_I2C"</b> field.
    class MsgoutUbxNavHpposecefI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposecefI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposecefI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposecefSpi field.
    struct MsgoutUbxNavHpposecefSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373682L>,
                comms::option::def::ValidNumValue<546373682L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373682L>,
                    comms::option::def::ValidNumValue<546373682L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373682L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSECEF_SPI"</b> field.
    class MsgoutUbxNavHpposecefSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposecefSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposecefSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposecefUart1 field.
    struct MsgoutUbxNavHpposecefUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373679L>,
                comms::option::def::ValidNumValue<546373679L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373679L>,
                    comms::option::def::ValidNumValue<546373679L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373679L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSECEF_UART1"</b> field.
    class MsgoutUbxNavHpposecefUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposecefUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposecefUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposecefUart2 field.
    struct MsgoutUbxNavHpposecefUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373680L>,
                comms::option::def::ValidNumValue<546373680L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373680L>,
                    comms::option::def::ValidNumValue<546373680L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373680L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSECEF_UART2"</b> field.
    class MsgoutUbxNavHpposecefUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposecefUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposecefUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposecefUsb field.
    struct MsgoutUbxNavHpposecefUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373681L>,
                comms::option::def::ValidNumValue<546373681L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373681L>,
                    comms::option::def::ValidNumValue<546373681L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373681L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSECEF_USB"</b> field.
    class MsgoutUbxNavHpposecefUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposecefUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposecefUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposecefUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposecefUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposllhI2c field.
    struct MsgoutUbxNavHpposllhI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373683L>,
                comms::option::def::ValidNumValue<546373683L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373683L>,
                    comms::option::def::ValidNumValue<546373683L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373683L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSLLH_I2C"</b> field.
    class MsgoutUbxNavHpposllhI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposllhI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposllhI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposllhSpi field.
    struct MsgoutUbxNavHpposllhSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373687L>,
                comms::option::def::ValidNumValue<546373687L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373687L>,
                    comms::option::def::ValidNumValue<546373687L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373687L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSLLH_SPI"</b> field.
    class MsgoutUbxNavHpposllhSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposllhSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposllhSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposllhUart1 field.
    struct MsgoutUbxNavHpposllhUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373684L>,
                comms::option::def::ValidNumValue<546373684L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373684L>,
                    comms::option::def::ValidNumValue<546373684L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373684L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSLLH_UART1"</b> field.
    class MsgoutUbxNavHpposllhUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposllhUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposllhUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposllhUart2 field.
    struct MsgoutUbxNavHpposllhUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373685L>,
                comms::option::def::ValidNumValue<546373685L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373685L>,
                    comms::option::def::ValidNumValue<546373685L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373685L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSLLH_UART2"</b> field.
    class MsgoutUbxNavHpposllhUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposllhUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposllhUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavHpposllhUsb field.
    struct MsgoutUbxNavHpposllhUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373686L>,
                comms::option::def::ValidNumValue<546373686L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373686L>,
                    comms::option::def::ValidNumValue<546373686L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373686L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_HPPOSLLH_USB"</b> field.
    class MsgoutUbxNavHpposllhUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavHpposllhUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavHpposllhUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavHpposllhUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavHpposllhUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOdoI2c field.
    struct MsgoutUbxNavOdoI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373758L>,
                comms::option::def::ValidNumValue<546373758L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373758L>,
                    comms::option::def::ValidNumValue<546373758L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373758L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ODO_I2C"</b> field.
    class MsgoutUbxNavOdoI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOdoI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOdoI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOdoSpi field.
    struct MsgoutUbxNavOdoSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373762L>,
                comms::option::def::ValidNumValue<546373762L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373762L>,
                    comms::option::def::ValidNumValue<546373762L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373762L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ODO_SPI"</b> field.
    class MsgoutUbxNavOdoSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOdoSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOdoSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOdoUart1 field.
    struct MsgoutUbxNavOdoUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373759L>,
                comms::option::def::ValidNumValue<546373759L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373759L>,
                    comms::option::def::ValidNumValue<546373759L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373759L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ODO_UART1"</b> field.
    class MsgoutUbxNavOdoUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOdoUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOdoUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOdoUart2 field.
    struct MsgoutUbxNavOdoUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373760L>,
                comms::option::def::ValidNumValue<546373760L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373760L>,
                    comms::option::def::ValidNumValue<546373760L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373760L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ODO_UART2"</b> field.
    class MsgoutUbxNavOdoUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOdoUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOdoUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOdoUsb field.
    struct MsgoutUbxNavOdoUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373761L>,
                comms::option::def::ValidNumValue<546373761L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373761L>,
                    comms::option::def::ValidNumValue<546373761L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373761L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ODO_USB"</b> field.
    class MsgoutUbxNavOdoUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOdoUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOdoUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOdoUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOdoUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOrbI2c field.
    struct MsgoutUbxNavOrbI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373648L>,
                comms::option::def::ValidNumValue<546373648L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373648L>,
                    comms::option::def::ValidNumValue<546373648L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373648L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ORB_I2C"</b> field.
    class MsgoutUbxNavOrbI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOrbI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOrbI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOrbSpi field.
    struct MsgoutUbxNavOrbSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373652L>,
                comms::option::def::ValidNumValue<546373652L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373652L>,
                    comms::option::def::ValidNumValue<546373652L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373652L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ORB_SPI"</b> field.
    class MsgoutUbxNavOrbSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOrbSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOrbSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOrbUart1 field.
    struct MsgoutUbxNavOrbUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373649L>,
                comms::option::def::ValidNumValue<546373649L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373649L>,
                    comms::option::def::ValidNumValue<546373649L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373649L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ORB_UART1"</b> field.
    class MsgoutUbxNavOrbUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOrbUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOrbUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOrbUart2 field.
    struct MsgoutUbxNavOrbUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373650L>,
                comms::option::def::ValidNumValue<546373650L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373650L>,
                    comms::option::def::ValidNumValue<546373650L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373650L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ORB_UART2"</b> field.
    class MsgoutUbxNavOrbUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOrbUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOrbUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavOrbUsb field.
    struct MsgoutUbxNavOrbUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373651L>,
                comms::option::def::ValidNumValue<546373651L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373651L>,
                    comms::option::def::ValidNumValue<546373651L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373651L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_ORB_USB"</b> field.
    class MsgoutUbxNavOrbUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavOrbUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavOrbUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavOrbUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavOrbUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosecefI2c field.
    struct MsgoutUbxNavPosecefI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373668L>,
                comms::option::def::ValidNumValue<546373668L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373668L>,
                    comms::option::def::ValidNumValue<546373668L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373668L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSECEF_I2C"</b> field.
    class MsgoutUbxNavPosecefI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosecefI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosecefI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosecefSpi field.
    struct MsgoutUbxNavPosecefSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373672L>,
                comms::option::def::ValidNumValue<546373672L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373672L>,
                    comms::option::def::ValidNumValue<546373672L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373672L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSECEF_SPI"</b> field.
    class MsgoutUbxNavPosecefSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosecefSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosecefSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosecefUart1 field.
    struct MsgoutUbxNavPosecefUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373669L>,
                comms::option::def::ValidNumValue<546373669L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373669L>,
                    comms::option::def::ValidNumValue<546373669L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373669L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSECEF_UART1"</b> field.
    class MsgoutUbxNavPosecefUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosecefUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosecefUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosecefUart2 field.
    struct MsgoutUbxNavPosecefUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373670L>,
                comms::option::def::ValidNumValue<546373670L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373670L>,
                    comms::option::def::ValidNumValue<546373670L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373670L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSECEF_UART2"</b> field.
    class MsgoutUbxNavPosecefUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosecefUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosecefUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosecefUsb field.
    struct MsgoutUbxNavPosecefUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373671L>,
                comms::option::def::ValidNumValue<546373671L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373671L>,
                    comms::option::def::ValidNumValue<546373671L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373671L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSECEF_USB"</b> field.
    class MsgoutUbxNavPosecefUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosecefUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosecefUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosecefUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosecefUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosllhI2c field.
    struct MsgoutUbxNavPosllhI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373673L>,
                comms::option::def::ValidNumValue<546373673L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373673L>,
                    comms::option::def::ValidNumValue<546373673L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373673L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSLLH_I2C"</b> field.
    class MsgoutUbxNavPosllhI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosllhI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosllhI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosllhSpi field.
    struct MsgoutUbxNavPosllhSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373677L>,
                comms::option::def::ValidNumValue<546373677L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373677L>,
                    comms::option::def::ValidNumValue<546373677L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373677L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSLLH_SPI"</b> field.
    class MsgoutUbxNavPosllhSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosllhSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosllhSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosllhUart1 field.
    struct MsgoutUbxNavPosllhUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373674L>,
                comms::option::def::ValidNumValue<546373674L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373674L>,
                    comms::option::def::ValidNumValue<546373674L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373674L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSLLH_UART1"</b> field.
    class MsgoutUbxNavPosllhUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosllhUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosllhUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosllhUart2 field.
    struct MsgoutUbxNavPosllhUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373675L>,
                comms::option::def::ValidNumValue<546373675L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373675L>,
                    comms::option::def::ValidNumValue<546373675L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373675L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSLLH_UART2"</b> field.
    class MsgoutUbxNavPosllhUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosllhUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosllhUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPosllhUsb field.
    struct MsgoutUbxNavPosllhUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373676L>,
                comms::option::def::ValidNumValue<546373676L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373676L>,
                    comms::option::def::ValidNumValue<546373676L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373676L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_POSLLH_USB"</b> field.
    class MsgoutUbxNavPosllhUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPosllhUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPosllhUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPosllhUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPosllhUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPvtI2c field.
    struct MsgoutUbxNavPvtI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373638L>,
                comms::option::def::ValidNumValue<546373638L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373638L>,
                    comms::option::def::ValidNumValue<546373638L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373638L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_PVT_I2C"</b> field.
    class MsgoutUbxNavPvtI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPvtI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPvtI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPvtSpi field.
    struct MsgoutUbxNavPvtSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373642L>,
                comms::option::def::ValidNumValue<546373642L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373642L>,
                    comms::option::def::ValidNumValue<546373642L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373642L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_PVT_SPI"</b> field.
    class MsgoutUbxNavPvtSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPvtSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPvtSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPvtUart1 field.
    struct MsgoutUbxNavPvtUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373639L>,
                comms::option::def::ValidNumValue<546373639L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373639L>,
                    comms::option::def::ValidNumValue<546373639L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373639L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_PVT_UART1"</b> field.
    class MsgoutUbxNavPvtUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPvtUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPvtUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPvtUart2 field.
    struct MsgoutUbxNavPvtUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373640L>,
                comms::option::def::ValidNumValue<546373640L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373640L>,
                    comms::option::def::ValidNumValue<546373640L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373640L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_PVT_UART2"</b> field.
    class MsgoutUbxNavPvtUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPvtUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPvtUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavPvtUsb field.
    struct MsgoutUbxNavPvtUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373641L>,
                comms::option::def::ValidNumValue<546373641L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373641L>,
                    comms::option::def::ValidNumValue<546373641L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373641L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_PVT_USB"</b> field.
    class MsgoutUbxNavPvtUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavPvtUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavPvtUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavPvtUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavPvtUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavRelposnedI2c field.
    struct MsgoutUbxNavRelposnedI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373773L>,
                comms::option::def::ValidNumValue<546373773L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373773L>,
                    comms::option::def::ValidNumValue<546373773L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373773L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_RELPOSNED_I2C"</b> field.
    class MsgoutUbxNavRelposnedI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavRelposnedI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavRelposnedI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavRelposnedSpi field.
    struct MsgoutUbxNavRelposnedSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373777L>,
                comms::option::def::ValidNumValue<546373777L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373777L>,
                    comms::option::def::ValidNumValue<546373777L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373777L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_RELPOSNED_SPI"</b> field.
    class MsgoutUbxNavRelposnedSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavRelposnedSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavRelposnedSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavRelposnedUart1 field.
    struct MsgoutUbxNavRelposnedUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373774L>,
                comms::option::def::ValidNumValue<546373774L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373774L>,
                    comms::option::def::ValidNumValue<546373774L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373774L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_RELPOSNED_UART1"</b> field.
    class MsgoutUbxNavRelposnedUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavRelposnedUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavRelposnedUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavRelposnedUart2 field.
    struct MsgoutUbxNavRelposnedUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373775L>,
                comms::option::def::ValidNumValue<546373775L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373775L>,
                    comms::option::def::ValidNumValue<546373775L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373775L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_RELPOSNED_UART2"</b> field.
    class MsgoutUbxNavRelposnedUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavRelposnedUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavRelposnedUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavRelposnedUsb field.
    struct MsgoutUbxNavRelposnedUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373776L>,
                comms::option::def::ValidNumValue<546373776L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373776L>,
                    comms::option::def::ValidNumValue<546373776L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373776L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_RELPOSNED_USB"</b> field.
    class MsgoutUbxNavRelposnedUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavRelposnedUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavRelposnedUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavRelposnedUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavRelposnedUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSatI2c field.
    struct MsgoutUbxNavSatI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373653L>,
                comms::option::def::ValidNumValue<546373653L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373653L>,
                    comms::option::def::ValidNumValue<546373653L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373653L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SAT_I2C"</b> field.
    class MsgoutUbxNavSatI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSatI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSatI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSatSpi field.
    struct MsgoutUbxNavSatSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373657L>,
                comms::option::def::ValidNumValue<546373657L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373657L>,
                    comms::option::def::ValidNumValue<546373657L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373657L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SAT_SPI"</b> field.
    class MsgoutUbxNavSatSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSatSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSatSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSatUart1 field.
    struct MsgoutUbxNavSatUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373654L>,
                comms::option::def::ValidNumValue<546373654L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373654L>,
                    comms::option::def::ValidNumValue<546373654L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373654L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SAT_UART1"</b> field.
    class MsgoutUbxNavSatUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSatUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSatUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSatUart2 field.
    struct MsgoutUbxNavSatUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373655L>,
                comms::option::def::ValidNumValue<546373655L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373655L>,
                    comms::option::def::ValidNumValue<546373655L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373655L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SAT_UART2"</b> field.
    class MsgoutUbxNavSatUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSatUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSatUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSatUsb field.
    struct MsgoutUbxNavSatUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373656L>,
                comms::option::def::ValidNumValue<546373656L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373656L>,
                    comms::option::def::ValidNumValue<546373656L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373656L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SAT_USB"</b> field.
    class MsgoutUbxNavSatUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSatUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSatUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSatUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSatUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSbasI2c field.
    struct MsgoutUbxNavSbasI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373738L>,
                comms::option::def::ValidNumValue<546373738L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373738L>,
                    comms::option::def::ValidNumValue<546373738L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373738L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SBAS_I2C"</b> field.
    class MsgoutUbxNavSbasI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSbasI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSbasI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSbasSpi field.
    struct MsgoutUbxNavSbasSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373742L>,
                comms::option::def::ValidNumValue<546373742L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373742L>,
                    comms::option::def::ValidNumValue<546373742L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373742L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SBAS_SPI"</b> field.
    class MsgoutUbxNavSbasSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSbasSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSbasSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSbasUart1 field.
    struct MsgoutUbxNavSbasUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373739L>,
                comms::option::def::ValidNumValue<546373739L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373739L>,
                    comms::option::def::ValidNumValue<546373739L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373739L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SBAS_UART1"</b> field.
    class MsgoutUbxNavSbasUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSbasUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSbasUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSbasUart2 field.
    struct MsgoutUbxNavSbasUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373740L>,
                comms::option::def::ValidNumValue<546373740L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373740L>,
                    comms::option::def::ValidNumValue<546373740L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373740L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SBAS_UART2"</b> field.
    class MsgoutUbxNavSbasUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSbasUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSbasUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSbasUsb field.
    struct MsgoutUbxNavSbasUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373741L>,
                comms::option::def::ValidNumValue<546373741L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373741L>,
                    comms::option::def::ValidNumValue<546373741L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373741L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SBAS_USB"</b> field.
    class MsgoutUbxNavSbasUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSbasUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSbasUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSbasUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSbasUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSigI2c field.
    struct MsgoutUbxNavSigI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374469L>,
                comms::option::def::ValidNumValue<546374469L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374469L>,
                    comms::option::def::ValidNumValue<546374469L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374469L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SIG_I2C"</b> field.
    class MsgoutUbxNavSigI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSigI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSigI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSigSpi field.
    struct MsgoutUbxNavSigSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374473L>,
                comms::option::def::ValidNumValue<546374473L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374473L>,
                    comms::option::def::ValidNumValue<546374473L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374473L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SIG_SPI"</b> field.
    class MsgoutUbxNavSigSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSigSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSigSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSigUart1 field.
    struct MsgoutUbxNavSigUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374470L>,
                comms::option::def::ValidNumValue<546374470L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374470L>,
                    comms::option::def::ValidNumValue<546374470L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374470L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SIG_UART1"</b> field.
    class MsgoutUbxNavSigUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSigUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSigUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSigUart2 field.
    struct MsgoutUbxNavSigUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374471L>,
                comms::option::def::ValidNumValue<546374471L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374471L>,
                    comms::option::def::ValidNumValue<546374471L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374471L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SIG_UART2"</b> field.
    class MsgoutUbxNavSigUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSigUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSigUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSigUsb field.
    struct MsgoutUbxNavSigUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374472L>,
                comms::option::def::ValidNumValue<546374472L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374472L>,
                    comms::option::def::ValidNumValue<546374472L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374472L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SIG_USB"</b> field.
    class MsgoutUbxNavSigUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSigUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSigUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSigUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSigUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSlasI2c field.
    struct MsgoutUbxNavSlasI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374454L>,
                comms::option::def::ValidNumValue<546374454L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374454L>,
                    comms::option::def::ValidNumValue<546374454L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374454L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SLAS_I2C"</b> field.
    class MsgoutUbxNavSlasI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSlasI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSlasI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSlasSpi field.
    struct MsgoutUbxNavSlasSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374458L>,
                comms::option::def::ValidNumValue<546374458L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374458L>,
                    comms::option::def::ValidNumValue<546374458L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374458L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SLAS_SPI"</b> field.
    class MsgoutUbxNavSlasSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSlasSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSlasSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSlasUart1 field.
    struct MsgoutUbxNavSlasUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374455L>,
                comms::option::def::ValidNumValue<546374455L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374455L>,
                    comms::option::def::ValidNumValue<546374455L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374455L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SLAS_UART1"</b> field.
    class MsgoutUbxNavSlasUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSlasUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSlasUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSlasUart2 field.
    struct MsgoutUbxNavSlasUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374456L>,
                comms::option::def::ValidNumValue<546374456L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374456L>,
                    comms::option::def::ValidNumValue<546374456L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374456L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SLAS_UART2"</b> field.
    class MsgoutUbxNavSlasUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSlasUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSlasUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSlasUsb field.
    struct MsgoutUbxNavSlasUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374457L>,
                comms::option::def::ValidNumValue<546374457L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374457L>,
                    comms::option::def::ValidNumValue<546374457L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374457L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SLAS_USB"</b> field.
    class MsgoutUbxNavSlasUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSlasUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSlasUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSlasUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSlasUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavStatusI2c field.
    struct MsgoutUbxNavStatusI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373658L>,
                comms::option::def::ValidNumValue<546373658L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373658L>,
                    comms::option::def::ValidNumValue<546373658L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373658L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_STATUS_I2C"</b> field.
    class MsgoutUbxNavStatusI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavStatusI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavStatusI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavStatusSpi field.
    struct MsgoutUbxNavStatusSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373662L>,
                comms::option::def::ValidNumValue<546373662L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373662L>,
                    comms::option::def::ValidNumValue<546373662L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373662L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_STATUS_SPI"</b> field.
    class MsgoutUbxNavStatusSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavStatusSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavStatusSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavStatusUart1 field.
    struct MsgoutUbxNavStatusUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373659L>,
                comms::option::def::ValidNumValue<546373659L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373659L>,
                    comms::option::def::ValidNumValue<546373659L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373659L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_STATUS_UART1"</b> field.
    class MsgoutUbxNavStatusUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavStatusUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavStatusUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavStatusUart2 field.
    struct MsgoutUbxNavStatusUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373660L>,
                comms::option::def::ValidNumValue<546373660L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373660L>,
                    comms::option::def::ValidNumValue<546373660L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373660L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_STATUS_UART2"</b> field.
    class MsgoutUbxNavStatusUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavStatusUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavStatusUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavStatusUsb field.
    struct MsgoutUbxNavStatusUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373661L>,
                comms::option::def::ValidNumValue<546373661L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373661L>,
                    comms::option::def::ValidNumValue<546373661L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373661L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_STATUS_USB"</b> field.
    class MsgoutUbxNavStatusUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavStatusUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavStatusUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavStatusUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavStatusUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSvinI2c field.
    struct MsgoutUbxNavSvinI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373768L>,
                comms::option::def::ValidNumValue<546373768L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373768L>,
                    comms::option::def::ValidNumValue<546373768L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373768L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SVIN_I2C"</b> field.
    class MsgoutUbxNavSvinI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSvinI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSvinI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSvinSpi field.
    struct MsgoutUbxNavSvinSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373772L>,
                comms::option::def::ValidNumValue<546373772L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373772L>,
                    comms::option::def::ValidNumValue<546373772L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373772L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SVIN_SPI"</b> field.
    class MsgoutUbxNavSvinSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSvinSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSvinSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSvinUart1 field.
    struct MsgoutUbxNavSvinUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373769L>,
                comms::option::def::ValidNumValue<546373769L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373769L>,
                    comms::option::def::ValidNumValue<546373769L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373769L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SVIN_UART1"</b> field.
    class MsgoutUbxNavSvinUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSvinUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSvinUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSvinUart2 field.
    struct MsgoutUbxNavSvinUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373770L>,
                comms::option::def::ValidNumValue<546373770L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373770L>,
                    comms::option::def::ValidNumValue<546373770L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373770L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SVIN_UART2"</b> field.
    class MsgoutUbxNavSvinUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSvinUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSvinUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavSvinUsb field.
    struct MsgoutUbxNavSvinUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373771L>,
                comms::option::def::ValidNumValue<546373771L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373771L>,
                    comms::option::def::ValidNumValue<546373771L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373771L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_SVIN_USB"</b> field.
    class MsgoutUbxNavSvinUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavSvinUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavSvinUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavSvinUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavSvinUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimebdsI2c field.
    struct MsgoutUbxNavTimebdsI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373713L>,
                comms::option::def::ValidNumValue<546373713L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373713L>,
                    comms::option::def::ValidNumValue<546373713L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373713L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEBDS_I2C"</b> field.
    class MsgoutUbxNavTimebdsI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimebdsI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimebdsI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimebdsSpi field.
    struct MsgoutUbxNavTimebdsSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373717L>,
                comms::option::def::ValidNumValue<546373717L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373717L>,
                    comms::option::def::ValidNumValue<546373717L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373717L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEBDS_SPI"</b> field.
    class MsgoutUbxNavTimebdsSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimebdsSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimebdsSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimebdsUart1 field.
    struct MsgoutUbxNavTimebdsUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373714L>,
                comms::option::def::ValidNumValue<546373714L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373714L>,
                    comms::option::def::ValidNumValue<546373714L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373714L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEBDS_UART1"</b> field.
    class MsgoutUbxNavTimebdsUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimebdsUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimebdsUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimebdsUart2 field.
    struct MsgoutUbxNavTimebdsUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373715L>,
                comms::option::def::ValidNumValue<546373715L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373715L>,
                    comms::option::def::ValidNumValue<546373715L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373715L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEBDS_UART2"</b> field.
    class MsgoutUbxNavTimebdsUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimebdsUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimebdsUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimebdsUsb field.
    struct MsgoutUbxNavTimebdsUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373716L>,
                comms::option::def::ValidNumValue<546373716L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373716L>,
                    comms::option::def::ValidNumValue<546373716L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373716L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEBDS_USB"</b> field.
    class MsgoutUbxNavTimebdsUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimebdsUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimebdsUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimebdsUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimebdsUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegalI2c field.
    struct MsgoutUbxNavTimegalI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373718L>,
                comms::option::def::ValidNumValue<546373718L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373718L>,
                    comms::option::def::ValidNumValue<546373718L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373718L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGAL_I2C"</b> field.
    class MsgoutUbxNavTimegalI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegalI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegalI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegalSpi field.
    struct MsgoutUbxNavTimegalSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373722L>,
                comms::option::def::ValidNumValue<546373722L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373722L>,
                    comms::option::def::ValidNumValue<546373722L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373722L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGAL_SPI"</b> field.
    class MsgoutUbxNavTimegalSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegalSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegalSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegalUart1 field.
    struct MsgoutUbxNavTimegalUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373719L>,
                comms::option::def::ValidNumValue<546373719L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373719L>,
                    comms::option::def::ValidNumValue<546373719L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373719L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGAL_UART1"</b> field.
    class MsgoutUbxNavTimegalUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegalUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegalUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegalUart2 field.
    struct MsgoutUbxNavTimegalUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373720L>,
                comms::option::def::ValidNumValue<546373720L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373720L>,
                    comms::option::def::ValidNumValue<546373720L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373720L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGAL_UART2"</b> field.
    class MsgoutUbxNavTimegalUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegalUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegalUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegalUsb field.
    struct MsgoutUbxNavTimegalUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373721L>,
                comms::option::def::ValidNumValue<546373721L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373721L>,
                    comms::option::def::ValidNumValue<546373721L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373721L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGAL_USB"</b> field.
    class MsgoutUbxNavTimegalUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegalUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegalUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegalUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegalUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegloI2c field.
    struct MsgoutUbxNavTimegloI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373708L>,
                comms::option::def::ValidNumValue<546373708L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373708L>,
                    comms::option::def::ValidNumValue<546373708L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373708L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGLO_I2C"</b> field.
    class MsgoutUbxNavTimegloI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegloI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegloI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegloSpi field.
    struct MsgoutUbxNavTimegloSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373712L>,
                comms::option::def::ValidNumValue<546373712L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373712L>,
                    comms::option::def::ValidNumValue<546373712L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373712L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGLO_SPI"</b> field.
    class MsgoutUbxNavTimegloSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegloSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegloSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegloUart1 field.
    struct MsgoutUbxNavTimegloUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373709L>,
                comms::option::def::ValidNumValue<546373709L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373709L>,
                    comms::option::def::ValidNumValue<546373709L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373709L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGLO_UART1"</b> field.
    class MsgoutUbxNavTimegloUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegloUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegloUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegloUart2 field.
    struct MsgoutUbxNavTimegloUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373710L>,
                comms::option::def::ValidNumValue<546373710L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373710L>,
                    comms::option::def::ValidNumValue<546373710L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373710L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGLO_UART2"</b> field.
    class MsgoutUbxNavTimegloUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegloUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegloUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegloUsb field.
    struct MsgoutUbxNavTimegloUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373711L>,
                comms::option::def::ValidNumValue<546373711L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373711L>,
                    comms::option::def::ValidNumValue<546373711L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373711L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGLO_USB"</b> field.
    class MsgoutUbxNavTimegloUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegloUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegloUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegloUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegloUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegpsI2c field.
    struct MsgoutUbxNavTimegpsI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373703L>,
                comms::option::def::ValidNumValue<546373703L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373703L>,
                    comms::option::def::ValidNumValue<546373703L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373703L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGPS_I2C"</b> field.
    class MsgoutUbxNavTimegpsI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegpsI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegpsI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegpsSpi field.
    struct MsgoutUbxNavTimegpsSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373707L>,
                comms::option::def::ValidNumValue<546373707L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373707L>,
                    comms::option::def::ValidNumValue<546373707L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373707L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGPS_SPI"</b> field.
    class MsgoutUbxNavTimegpsSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegpsSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegpsSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegpsUart1 field.
    struct MsgoutUbxNavTimegpsUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373704L>,
                comms::option::def::ValidNumValue<546373704L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373704L>,
                    comms::option::def::ValidNumValue<546373704L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373704L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGPS_UART1"</b> field.
    class MsgoutUbxNavTimegpsUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegpsUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegpsUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegpsUart2 field.
    struct MsgoutUbxNavTimegpsUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373705L>,
                comms::option::def::ValidNumValue<546373705L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373705L>,
                    comms::option::def::ValidNumValue<546373705L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373705L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGPS_UART2"</b> field.
    class MsgoutUbxNavTimegpsUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegpsUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegpsUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimegpsUsb field.
    struct MsgoutUbxNavTimegpsUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373706L>,
                comms::option::def::ValidNumValue<546373706L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373706L>,
                    comms::option::def::ValidNumValue<546373706L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373706L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEGPS_USB"</b> field.
    class MsgoutUbxNavTimegpsUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimegpsUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimegpsUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimegpsUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimegpsUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimelsI2c field.
    struct MsgoutUbxNavTimelsI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373728L>,
                comms::option::def::ValidNumValue<546373728L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373728L>,
                    comms::option::def::ValidNumValue<546373728L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373728L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMELS_I2C"</b> field.
    class MsgoutUbxNavTimelsI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimelsI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimelsI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimelsSpi field.
    struct MsgoutUbxNavTimelsSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373732L>,
                comms::option::def::ValidNumValue<546373732L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373732L>,
                    comms::option::def::ValidNumValue<546373732L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373732L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMELS_SPI"</b> field.
    class MsgoutUbxNavTimelsSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimelsSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimelsSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimelsUart1 field.
    struct MsgoutUbxNavTimelsUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373729L>,
                comms::option::def::ValidNumValue<546373729L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373729L>,
                    comms::option::def::ValidNumValue<546373729L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373729L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMELS_UART1"</b> field.
    class MsgoutUbxNavTimelsUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimelsUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimelsUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimelsUart2 field.
    struct MsgoutUbxNavTimelsUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373730L>,
                comms::option::def::ValidNumValue<546373730L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373730L>,
                    comms::option::def::ValidNumValue<546373730L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373730L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMELS_UART2"</b> field.
    class MsgoutUbxNavTimelsUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimelsUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimelsUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimelsUsb field.
    struct MsgoutUbxNavTimelsUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373731L>,
                comms::option::def::ValidNumValue<546373731L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373731L>,
                    comms::option::def::ValidNumValue<546373731L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373731L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMELS_USB"</b> field.
    class MsgoutUbxNavTimelsUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimelsUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimelsUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimelsUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimelsUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeqzssI2c field.
    struct MsgoutUbxNavTimeqzssI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374534L>,
                comms::option::def::ValidNumValue<546374534L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374534L>,
                    comms::option::def::ValidNumValue<546374534L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374534L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEQZSS_I2C"</b> field.
    class MsgoutUbxNavTimeqzssI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeqzssI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeqzssI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeqzssSpi field.
    struct MsgoutUbxNavTimeqzssSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374538L>,
                comms::option::def::ValidNumValue<546374538L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374538L>,
                    comms::option::def::ValidNumValue<546374538L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374538L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEQZSS_SPI"</b> field.
    class MsgoutUbxNavTimeqzssSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeqzssSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeqzssSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeqzssUart1 field.
    struct MsgoutUbxNavTimeqzssUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374535L>,
                comms::option::def::ValidNumValue<546374535L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374535L>,
                    comms::option::def::ValidNumValue<546374535L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374535L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEQZSS_UART1"</b> field.
    class MsgoutUbxNavTimeqzssUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeqzssUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeqzssUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeqzssUart2 field.
    struct MsgoutUbxNavTimeqzssUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374536L>,
                comms::option::def::ValidNumValue<546374536L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374536L>,
                    comms::option::def::ValidNumValue<546374536L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374536L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEQZSS_UART2"</b> field.
    class MsgoutUbxNavTimeqzssUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeqzssUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeqzssUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeqzssUsb field.
    struct MsgoutUbxNavTimeqzssUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374537L>,
                comms::option::def::ValidNumValue<546374537L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374537L>,
                    comms::option::def::ValidNumValue<546374537L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374537L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEQZSS_USB"</b> field.
    class MsgoutUbxNavTimeqzssUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeqzssUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeqzssUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeqzssUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeqzssUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeutcI2c field.
    struct MsgoutUbxNavTimeutcI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373723L>,
                comms::option::def::ValidNumValue<546373723L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373723L>,
                    comms::option::def::ValidNumValue<546373723L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373723L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEUTC_I2C"</b> field.
    class MsgoutUbxNavTimeutcI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeutcI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeutcI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeutcSpi field.
    struct MsgoutUbxNavTimeutcSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373727L>,
                comms::option::def::ValidNumValue<546373727L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373727L>,
                    comms::option::def::ValidNumValue<546373727L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373727L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEUTC_SPI"</b> field.
    class MsgoutUbxNavTimeutcSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeutcSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeutcSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeutcUart1 field.
    struct MsgoutUbxNavTimeutcUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373724L>,
                comms::option::def::ValidNumValue<546373724L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373724L>,
                    comms::option::def::ValidNumValue<546373724L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373724L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEUTC_UART1"</b> field.
    class MsgoutUbxNavTimeutcUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeutcUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeutcUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeutcUart2 field.
    struct MsgoutUbxNavTimeutcUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373725L>,
                comms::option::def::ValidNumValue<546373725L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373725L>,
                    comms::option::def::ValidNumValue<546373725L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373725L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEUTC_UART2"</b> field.
    class MsgoutUbxNavTimeutcUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeutcUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeutcUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavTimeutcUsb field.
    struct MsgoutUbxNavTimeutcUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373726L>,
                comms::option::def::ValidNumValue<546373726L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373726L>,
                    comms::option::def::ValidNumValue<546373726L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373726L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_TIMEUTC_USB"</b> field.
    class MsgoutUbxNavTimeutcUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavTimeutcUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavTimeutcUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavTimeutcUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavTimeutcUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelecefI2c field.
    struct MsgoutUbxNavVelecefI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373693L>,
                comms::option::def::ValidNumValue<546373693L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373693L>,
                    comms::option::def::ValidNumValue<546373693L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373693L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELECEF_I2C"</b> field.
    class MsgoutUbxNavVelecefI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelecefI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelecefI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelecefSpi field.
    struct MsgoutUbxNavVelecefSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373697L>,
                comms::option::def::ValidNumValue<546373697L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373697L>,
                    comms::option::def::ValidNumValue<546373697L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373697L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELECEF_SPI"</b> field.
    class MsgoutUbxNavVelecefSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelecefSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelecefSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelecefUart1 field.
    struct MsgoutUbxNavVelecefUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373694L>,
                comms::option::def::ValidNumValue<546373694L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373694L>,
                    comms::option::def::ValidNumValue<546373694L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373694L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELECEF_UART1"</b> field.
    class MsgoutUbxNavVelecefUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelecefUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelecefUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelecefUart2 field.
    struct MsgoutUbxNavVelecefUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373695L>,
                comms::option::def::ValidNumValue<546373695L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373695L>,
                    comms::option::def::ValidNumValue<546373695L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373695L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELECEF_UART2"</b> field.
    class MsgoutUbxNavVelecefUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelecefUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelecefUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelecefUsb field.
    struct MsgoutUbxNavVelecefUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373696L>,
                comms::option::def::ValidNumValue<546373696L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373696L>,
                    comms::option::def::ValidNumValue<546373696L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373696L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELECEF_USB"</b> field.
    class MsgoutUbxNavVelecefUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelecefUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelecefUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelecefUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelecefUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelnedI2c field.
    struct MsgoutUbxNavVelnedI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373698L>,
                comms::option::def::ValidNumValue<546373698L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373698L>,
                    comms::option::def::ValidNumValue<546373698L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373698L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELNED_I2C"</b> field.
    class MsgoutUbxNavVelnedI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelnedI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelnedI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelnedSpi field.
    struct MsgoutUbxNavVelnedSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373702L>,
                comms::option::def::ValidNumValue<546373702L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373702L>,
                    comms::option::def::ValidNumValue<546373702L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373702L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELNED_SPI"</b> field.
    class MsgoutUbxNavVelnedSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelnedSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelnedSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelnedUart1 field.
    struct MsgoutUbxNavVelnedUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373699L>,
                comms::option::def::ValidNumValue<546373699L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373699L>,
                    comms::option::def::ValidNumValue<546373699L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373699L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELNED_UART1"</b> field.
    class MsgoutUbxNavVelnedUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelnedUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelnedUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelnedUart2 field.
    struct MsgoutUbxNavVelnedUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373700L>,
                comms::option::def::ValidNumValue<546373700L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373700L>,
                    comms::option::def::ValidNumValue<546373700L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373700L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELNED_UART2"</b> field.
    class MsgoutUbxNavVelnedUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelnedUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelnedUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxNavVelnedUsb field.
    struct MsgoutUbxNavVelnedUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373701L>,
                comms::option::def::ValidNumValue<546373701L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373701L>,
                    comms::option::def::ValidNumValue<546373701L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373701L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_NAV_VELNED_USB"</b> field.
    class MsgoutUbxNavVelnedUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxNavVelnedUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxNavVelnedUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxNavVelnedUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxNavVelnedUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmMeasxI2c field.
    struct MsgoutUbxRxmMeasxI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374148L>,
                comms::option::def::ValidNumValue<546374148L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374148L>,
                    comms::option::def::ValidNumValue<546374148L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374148L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_MEASX_I2C"</b> field.
    class MsgoutUbxRxmMeasxI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmMeasxI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmMeasxI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmMeasxSpi field.
    struct MsgoutUbxRxmMeasxSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374152L>,
                comms::option::def::ValidNumValue<546374152L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374152L>,
                    comms::option::def::ValidNumValue<546374152L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374152L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_MEASX_SPI"</b> field.
    class MsgoutUbxRxmMeasxSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmMeasxSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmMeasxSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmMeasxUart1 field.
    struct MsgoutUbxRxmMeasxUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374149L>,
                comms::option::def::ValidNumValue<546374149L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374149L>,
                    comms::option::def::ValidNumValue<546374149L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374149L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_MEASX_UART1"</b> field.
    class MsgoutUbxRxmMeasxUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmMeasxUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmMeasxUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmMeasxUart2 field.
    struct MsgoutUbxRxmMeasxUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374150L>,
                comms::option::def::ValidNumValue<546374150L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374150L>,
                    comms::option::def::ValidNumValue<546374150L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374150L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_MEASX_UART2"</b> field.
    class MsgoutUbxRxmMeasxUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmMeasxUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmMeasxUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmMeasxUsb field.
    struct MsgoutUbxRxmMeasxUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374151L>,
                comms::option::def::ValidNumValue<546374151L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374151L>,
                    comms::option::def::ValidNumValue<546374151L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374151L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_MEASX_USB"</b> field.
    class MsgoutUbxRxmMeasxUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmMeasxUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmMeasxUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmMeasxUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmMeasxUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRawxI2c field.
    struct MsgoutUbxRxmRawxI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374308L>,
                comms::option::def::ValidNumValue<546374308L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374308L>,
                    comms::option::def::ValidNumValue<546374308L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374308L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RAWX_I2C"</b> field.
    class MsgoutUbxRxmRawxI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRawxI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRawxI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRawxSpi field.
    struct MsgoutUbxRxmRawxSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374312L>,
                comms::option::def::ValidNumValue<546374312L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374312L>,
                    comms::option::def::ValidNumValue<546374312L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374312L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RAWX_SPI"</b> field.
    class MsgoutUbxRxmRawxSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRawxSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRawxSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRawxUart1 field.
    struct MsgoutUbxRxmRawxUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374309L>,
                comms::option::def::ValidNumValue<546374309L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374309L>,
                    comms::option::def::ValidNumValue<546374309L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374309L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RAWX_UART1"</b> field.
    class MsgoutUbxRxmRawxUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRawxUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRawxUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRawxUart2 field.
    struct MsgoutUbxRxmRawxUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374310L>,
                comms::option::def::ValidNumValue<546374310L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374310L>,
                    comms::option::def::ValidNumValue<546374310L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374310L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RAWX_UART2"</b> field.
    class MsgoutUbxRxmRawxUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRawxUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRawxUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRawxUsb field.
    struct MsgoutUbxRxmRawxUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374311L>,
                comms::option::def::ValidNumValue<546374311L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374311L>,
                    comms::option::def::ValidNumValue<546374311L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374311L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RAWX_USB"</b> field.
    class MsgoutUbxRxmRawxUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRawxUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRawxUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRawxUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRawxUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRlmI2c field.
    struct MsgoutUbxRxmRlmI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374238L>,
                comms::option::def::ValidNumValue<546374238L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374238L>,
                    comms::option::def::ValidNumValue<546374238L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374238L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RLM_I2C"</b> field.
    class MsgoutUbxRxmRlmI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRlmI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRlmI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRlmSpi field.
    struct MsgoutUbxRxmRlmSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374242L>,
                comms::option::def::ValidNumValue<546374242L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374242L>,
                    comms::option::def::ValidNumValue<546374242L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374242L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RLM_SPI"</b> field.
    class MsgoutUbxRxmRlmSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRlmSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRlmSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRlmUart1 field.
    struct MsgoutUbxRxmRlmUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374239L>,
                comms::option::def::ValidNumValue<546374239L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374239L>,
                    comms::option::def::ValidNumValue<546374239L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374239L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RLM_UART1"</b> field.
    class MsgoutUbxRxmRlmUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRlmUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRlmUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRlmUart2 field.
    struct MsgoutUbxRxmRlmUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374240L>,
                comms::option::def::ValidNumValue<546374240L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374240L>,
                    comms::option::def::ValidNumValue<546374240L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374240L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RLM_UART2"</b> field.
    class MsgoutUbxRxmRlmUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRlmUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRlmUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRlmUsb field.
    struct MsgoutUbxRxmRlmUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374241L>,
                comms::option::def::ValidNumValue<546374241L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374241L>,
                    comms::option::def::ValidNumValue<546374241L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374241L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RLM_USB"</b> field.
    class MsgoutUbxRxmRlmUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRlmUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRlmUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRlmUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRlmUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRtcmI2c field.
    struct MsgoutUbxRxmRtcmI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374248L>,
                comms::option::def::ValidNumValue<546374248L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374248L>,
                    comms::option::def::ValidNumValue<546374248L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374248L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RTCM_I2C"</b> field.
    class MsgoutUbxRxmRtcmI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRtcmI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRtcmI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRtcmSpi field.
    struct MsgoutUbxRxmRtcmSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374252L>,
                comms::option::def::ValidNumValue<546374252L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374252L>,
                    comms::option::def::ValidNumValue<546374252L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374252L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RTCM_SPI"</b> field.
    class MsgoutUbxRxmRtcmSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRtcmSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRtcmSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRtcmUart1 field.
    struct MsgoutUbxRxmRtcmUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374249L>,
                comms::option::def::ValidNumValue<546374249L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374249L>,
                    comms::option::def::ValidNumValue<546374249L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374249L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RTCM_UART1"</b> field.
    class MsgoutUbxRxmRtcmUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRtcmUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRtcmUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRtcmUart2 field.
    struct MsgoutUbxRxmRtcmUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374250L>,
                comms::option::def::ValidNumValue<546374250L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374250L>,
                    comms::option::def::ValidNumValue<546374250L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374250L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RTCM_UART2"</b> field.
    class MsgoutUbxRxmRtcmUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRtcmUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRtcmUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmRtcmUsb field.
    struct MsgoutUbxRxmRtcmUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374251L>,
                comms::option::def::ValidNumValue<546374251L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374251L>,
                    comms::option::def::ValidNumValue<546374251L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374251L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_RTCM_USB"</b> field.
    class MsgoutUbxRxmRtcmUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmRtcmUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmRtcmUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmRtcmUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmRtcmUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmSfrbxI2c field.
    struct MsgoutUbxRxmSfrbxI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374193L>,
                comms::option::def::ValidNumValue<546374193L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374193L>,
                    comms::option::def::ValidNumValue<546374193L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374193L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_SFRBX_I2C"</b> field.
    class MsgoutUbxRxmSfrbxI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmSfrbxI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmSfrbxI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmSfrbxSpi field.
    struct MsgoutUbxRxmSfrbxSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374197L>,
                comms::option::def::ValidNumValue<546374197L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374197L>,
                    comms::option::def::ValidNumValue<546374197L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374197L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_SFRBX_SPI"</b> field.
    class MsgoutUbxRxmSfrbxSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmSfrbxSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmSfrbxSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmSfrbxUart1 field.
    struct MsgoutUbxRxmSfrbxUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374194L>,
                comms::option::def::ValidNumValue<546374194L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374194L>,
                    comms::option::def::ValidNumValue<546374194L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374194L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_SFRBX_UART1"</b> field.
    class MsgoutUbxRxmSfrbxUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmSfrbxUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmSfrbxUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmSfrbxUart2 field.
    struct MsgoutUbxRxmSfrbxUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374195L>,
                comms::option::def::ValidNumValue<546374195L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374195L>,
                    comms::option::def::ValidNumValue<546374195L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374195L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_SFRBX_UART2"</b> field.
    class MsgoutUbxRxmSfrbxUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmSfrbxUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmSfrbxUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxRxmSfrbxUsb field.
    struct MsgoutUbxRxmSfrbxUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374196L>,
                comms::option::def::ValidNumValue<546374196L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374196L>,
                    comms::option::def::ValidNumValue<546374196L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374196L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_RXM_SFRBX_USB"</b> field.
    class MsgoutUbxRxmSfrbxUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxRxmSfrbxUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxRxmSfrbxUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxRxmSfrbxUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxRxmSfrbxUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTm2I2c field.
    struct MsgoutUbxTimTm2I2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374008L>,
                comms::option::def::ValidNumValue<546374008L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374008L>,
                    comms::option::def::ValidNumValue<546374008L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2I2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2I2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374008L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TM2_I2C"</b> field.
    class MsgoutUbxTimTm2I2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTm2I2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTm2I2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2I2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2I2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2I2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTm2Spi field.
    struct MsgoutUbxTimTm2SpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374012L>,
                comms::option::def::ValidNumValue<546374012L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374012L>,
                    comms::option::def::ValidNumValue<546374012L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2SpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2SpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374012L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TM2_SPI"</b> field.
    class MsgoutUbxTimTm2Spi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTm2SpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTm2SpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2SpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2SpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2SpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTm2Uart1 field.
    struct MsgoutUbxTimTm2Uart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374009L>,
                comms::option::def::ValidNumValue<546374009L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374009L>,
                    comms::option::def::ValidNumValue<546374009L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2Uart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2Uart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374009L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TM2_UART1"</b> field.
    class MsgoutUbxTimTm2Uart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTm2Uart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTm2Uart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2Uart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2Uart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2Uart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTm2Uart2 field.
    struct MsgoutUbxTimTm2Uart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374010L>,
                comms::option::def::ValidNumValue<546374010L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374010L>,
                    comms::option::def::ValidNumValue<546374010L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2Uart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2Uart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374010L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TM2_UART2"</b> field.
    class MsgoutUbxTimTm2Uart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTm2Uart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTm2Uart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2Uart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2Uart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2Uart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTm2Usb field.
    struct MsgoutUbxTimTm2UsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374011L>,
                comms::option::def::ValidNumValue<546374011L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374011L>,
                    comms::option::def::ValidNumValue<546374011L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2UsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2UsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374011L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TM2_USB"</b> field.
    class MsgoutUbxTimTm2Usb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTm2UsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTm2UsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2UsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTm2UsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTm2UsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTpI2c field.
    struct MsgoutUbxTimTpI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374013L>,
                comms::option::def::ValidNumValue<546374013L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374013L>,
                    comms::option::def::ValidNumValue<546374013L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374013L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TP_I2C"</b> field.
    class MsgoutUbxTimTpI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTpI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTpI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTpSpi field.
    struct MsgoutUbxTimTpSpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374017L>,
                comms::option::def::ValidNumValue<546374017L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374017L>,
                    comms::option::def::ValidNumValue<546374017L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpSpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpSpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374017L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TP_SPI"</b> field.
    class MsgoutUbxTimTpSpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTpSpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTpSpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpSpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpSpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpSpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTpUart1 field.
    struct MsgoutUbxTimTpUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374014L>,
                comms::option::def::ValidNumValue<546374014L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374014L>,
                    comms::option::def::ValidNumValue<546374014L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374014L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TP_UART1"</b> field.
    class MsgoutUbxTimTpUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTpUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTpUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTpUart2 field.
    struct MsgoutUbxTimTpUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374015L>,
                comms::option::def::ValidNumValue<546374015L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374015L>,
                    comms::option::def::ValidNumValue<546374015L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374015L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TP_UART2"</b> field.
    class MsgoutUbxTimTpUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTpUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTpUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimTpUsb field.
    struct MsgoutUbxTimTpUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546374016L>,
                comms::option::def::ValidNumValue<546374016L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546374016L>,
                    comms::option::def::ValidNumValue<546374016L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546374016L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_TP_USB"</b> field.
    class MsgoutUbxTimTpUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimTpUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimTpUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimTpUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimTpUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimVrfyI2c field.
    struct MsgoutUbxTimVrfyI2cMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373778L>,
                comms::option::def::ValidNumValue<546373778L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373778L>,
                    comms::option::def::ValidNumValue<546373778L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyI2cMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyI2cMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373778L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_VRFY_I2C"</b> field.
    class MsgoutUbxTimVrfyI2c : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimVrfyI2cMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimVrfyI2cMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfyI2cMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfyI2cMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyI2cCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimVrfySpi field.
    struct MsgoutUbxTimVrfySpiMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373782L>,
                comms::option::def::ValidNumValue<546373782L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373782L>,
                    comms::option::def::ValidNumValue<546373782L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfySpiMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfySpiMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373782L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_VRFY_SPI"</b> field.
    class MsgoutUbxTimVrfySpi : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimVrfySpiMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimVrfySpiMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfySpiMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfySpiMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfySpiCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimVrfyUart1 field.
    struct MsgoutUbxTimVrfyUart1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373779L>,
                comms::option::def::ValidNumValue<546373779L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373779L>,
                    comms::option::def::ValidNumValue<546373779L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUart1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUart1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373779L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_VRFY_UART1"</b> field.
    class MsgoutUbxTimVrfyUart1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimVrfyUart1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimVrfyUart1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfyUart1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfyUart1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUart1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimVrfyUart2 field.
    struct MsgoutUbxTimVrfyUart2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373780L>,
                comms::option::def::ValidNumValue<546373780L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373780L>,
                    comms::option::def::ValidNumValue<546373780L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUart2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUart2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373780L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_VRFY_UART2"</b> field.
    class MsgoutUbxTimVrfyUart2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimVrfyUart2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimVrfyUart2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfyUart2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfyUart2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUart2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref MsgoutUbxTimVrfyUsb field.
    struct MsgoutUbxTimVrfyUsbMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546373781L>,
                comms::option::def::ValidNumValue<546373781L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546373781L>,
                    comms::option::def::ValidNumValue<546373781L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUsbMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUsbMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546373781L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-MSGOUT-UBX_TIM_VRFY_USB"</b> field.
    class MsgoutUbxTimVrfyUsb : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename MsgoutUbxTimVrfyUsbMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename MsgoutUbxTimVrfyUsbMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfyUsbMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::MsgoutUbxTimVrfyUsbMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::MsgoutUbxTimVrfyUsbCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavhpgDgnssmode field.
    struct NavhpgDgnssmodeMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<538181649L>,
                comms::option::def::ValidNumValue<538181649L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<538181649L>,
                    comms::option::def::ValidNumValue<538181649L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(538181649L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<2, 3>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<2, 3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVHPG-DGNSSMODE"</b> field.
    class NavhpgDgnssmode : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavhpgDgnssmodeMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavhpgDgnssmodeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavhpgDgnssmodeMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavhpgDgnssmodeMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavhpgDgnssmodeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgFixmode field.
    struct NavspgFixmodeMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985041L>,
                comms::option::def::ValidNumValue<537985041L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985041L>,
                    comms::option::def::ValidNumValue<537985041L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985041L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<1, 3>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<1, 3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgFixmodeMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-FIXMODE"</b> field.
    class NavspgFixmode : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgFixmodeMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgFixmodeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgFixmodeMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgFixmodeMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgFixmodeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgInifix3d field.
    struct NavspgInifix3dMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<269549587L>,
                comms::option::def::ValidNumValue<269549587L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<269549587L>,
                    comms::option::def::ValidNumValue<269549587L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInifix3dMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInifix3dMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(269549587L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-INIFIX3D"</b> field.
    class NavspgInifix3d : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgInifix3dMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgInifix3dMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInifix3dMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInifix3dMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgInifix3dCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgWknrollover field.
    struct NavspgWknrolloverMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<806420503L>,
                comms::option::def::ValidNumValue<806420503L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<806420503L>,
                    comms::option::def::ValidNumValue<806420503L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgWknrolloverMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgWknrolloverMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(806420503L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ValidNumValueRange<1, 4096>
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::ValidNumValueRange<1, 4096>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgWknrolloverMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgWknrolloverMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-WKNROLLOVER"</b> field.
    class NavspgWknrollover : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgWknrolloverMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgWknrolloverMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgWknrolloverMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgWknrolloverMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgWknrolloverCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUtcstandard field.
    struct NavspgUtcstandardMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985052L>,
                comms::option::def::ValidNumValue<537985052L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985052L>,
                    comms::option::def::ValidNumValue<537985052L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985052L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::ValidNumValue<3>,
                comms::option::def::ValidNumValueRange<5, 7>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValue<0>,
                    comms::option::def::ValidNumValue<3>,
                    comms::option::def::ValidNumValueRange<5, 7>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUtcstandardMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-UTCSTANDARD"</b> field.
    class NavspgUtcstandard : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUtcstandardMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUtcstandardMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUtcstandardMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUtcstandardMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUtcstandardCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgDynmodel field.
    struct NavspgDynmodelMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985057L>,
                comms::option::def::ValidNumValue<537985057L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985057L>,
                    comms::option::def::ValidNumValue<537985057L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985057L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::ValidNumValueRange<2, 9>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValue<0>,
                    comms::option::def::ValidNumValueRange<2, 9>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgDynmodelMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-DYNMODEL"</b> field.
    class NavspgDynmodel : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgDynmodelMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgDynmodelMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgDynmodelMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgDynmodelMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgDynmodelCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgAckaiding field.
    struct NavspgAckaidingMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<269549605L>,
                comms::option::def::ValidNumValue<269549605L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<269549605L>,
                    comms::option::def::ValidNumValue<269549605L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgAckaidingMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgAckaidingMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(269549605L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-ACKAIDING"</b> field.
    class NavspgAckaiding : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgAckaidingMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgAckaidingMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgAckaidingMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgAckaidingMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgAckaidingCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUseUsrdat field.
    struct NavspgUseUsrdatMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<269549665L>,
                comms::option::def::ValidNumValue<269549665L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<269549665L>,
                    comms::option::def::ValidNumValue<269549665L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUseUsrdatMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUseUsrdatMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(269549665L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USE_USRDAT"</b> field.
    class NavspgUseUsrdat : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUseUsrdatMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUseUsrdatMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUseUsrdatMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUseUsrdatMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUseUsrdatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatMaja field.
    struct NavspgUsrdatMajaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1343291490L>,
                comms::option::def::ValidNumValue<1343291490L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1343291490L>,
                    comms::option::def::ValidNumValue<1343291490L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatMajaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatMajaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1343291490L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::FloatValue<
                ublox::field::FieldBase<>,
                double,
                comms::option::def::UnitsMeters,
                comms::option::def::InvalidByDefault
            >
        {
            using Base =
                comms::field::FloatValue<
                    ublox::field::FieldBase<>,
                    double,
                    comms::option::def::UnitsMeters,
                    comms::option::def::InvalidByDefault
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Generated default constructor.
            Val()
            {
                Base::setValue(static_cast<ValueType>(6300000.000000));
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatMajaMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatMajaMembersCommon::ValCommon::name();
            }

            /// @brief Generated validity check functionality.
            bool valid() const
            {
                if (Base::valid()) {
                    return true;
                }

                if ((static_cast<ValueType>(6300000.000000) <= Base::getValue()) &&
                    (Base::getValue() <= static_cast<ValueType>(6500000.000000))) {
                    return true;
                }

                return false;
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_MAJA"</b> field.
    class NavspgUsrdatMaja : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatMajaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatMajaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatMajaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatMajaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatMajaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatFlat field.
    struct NavspgUsrdatFlatMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1343291491L>,
                comms::option::def::ValidNumValue<1343291491L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1343291491L>,
                    comms::option::def::ValidNumValue<1343291491L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatFlatMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatFlatMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1343291491L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::FloatValue<
                ublox::field::FieldBase<>,
                double,
                comms::option::def::InvalidByDefault
            >
        {
            using Base =
                comms::field::FloatValue<
                    ublox::field::FieldBase<>,
                    double,
                    comms::option::def::InvalidByDefault
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatFlatMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatFlatMembersCommon::ValCommon::name();
            }

            /// @brief Generated validity check functionality.
            bool valid() const
            {
                if (Base::valid()) {
                    return true;
                }

                if ((static_cast<ValueType>(0.000000) <= Base::getValue()) &&
                    (Base::getValue() <= static_cast<ValueType>(500.000000))) {
                    return true;
                }

                return false;
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_FLAT"</b> field.
    class NavspgUsrdatFlat : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatFlatMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatFlatMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatFlatMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatFlatMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatFlatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatDx field.
    struct NavspgUsrdatDxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856036L>,
                comms::option::def::ValidNumValue<1074856036L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856036L>,
                    comms::option::def::ValidNumValue<1074856036L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856036L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::FloatValue<
                ublox::field::FieldBase<>,
                float,
                comms::option::def::UnitsMeters,
                comms::option::def::InvalidByDefault
            >
        {
            using Base =
                comms::field::FloatValue<
                    ublox::field::FieldBase<>,
                    float,
                    comms::option::def::UnitsMeters,
                    comms::option::def::InvalidByDefault
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDxMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDxMembersCommon::ValCommon::name();
            }

            /// @brief Generated validity check functionality.
            bool valid() const
            {
                if (Base::valid()) {
                    return true;
                }

                if ((static_cast<ValueType>(-5000.000000) <= Base::getValue()) &&
                    (Base::getValue() <= static_cast<ValueType>(5000.000000))) {
                    return true;
                }

                return false;
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_DX"</b> field.
    class NavspgUsrdatDx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatDxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatDxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatDxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatDxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatDy field.
    struct NavspgUsrdatDyMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856037L>,
                comms::option::def::ValidNumValue<1074856037L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856037L>,
                    comms::option::def::ValidNumValue<1074856037L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDyMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDyMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856037L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::FloatValue<
                ublox::field::FieldBase<>,
                float,
                comms::option::def::UnitsMeters,
                comms::option::def::InvalidByDefault
            >
        {
            using Base =
                comms::field::FloatValue<
                    ublox::field::FieldBase<>,
                    float,
                    comms::option::def::UnitsMeters,
                    comms::option::def::InvalidByDefault
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDyMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDyMembersCommon::ValCommon::name();
            }

            /// @brief Generated validity check functionality.
            bool valid() const
            {
                if (Base::valid()) {
                    return true;
                }

                if ((static_cast<ValueType>(-5000.000000) <= Base::getValue()) &&
                    (Base::getValue() <= static_cast<ValueType>(5000.000000))) {
                    return true;
                }

                return false;
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_DY"</b> field.
    class NavspgUsrdatDy : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatDyMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatDyMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatDyMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatDyMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDyCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatDz field.
    struct NavspgUsrdatDzMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856038L>,
                comms::option::def::ValidNumValue<1074856038L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856038L>,
                    comms::option::def::ValidNumValue<1074856038L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDzMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDzMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856038L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::FloatValue<
                ublox::field::FieldBase<>,
                float,
                comms::option::def::UnitsMeters,
                comms::option::def::InvalidByDefault
            >
        {
            using Base =
                comms::field::FloatValue<
                    ublox::field::FieldBase<>,
                    float,
                    comms::option::def::UnitsMeters,
                    comms::option::def::InvalidByDefault
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDzMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDzMembersCommon::ValCommon::name();
            }

            /// @brief Generated validity check functionality.
            bool valid() const
            {
                if (Base::valid()) {
                    return true;
                }

                if ((static_cast<ValueType>(-5000.000000) <= Base::getValue()) &&
                    (Base::getValue() <= static_cast<ValueType>(5000.000000))) {
                    return true;
                }

                return false;
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_DZ"</b> field.
    class NavspgUsrdatDz : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatDzMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatDzMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatDzMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatDzMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatDzCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatRotx field.
    struct NavspgUsrdatRotxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856039L>,
                comms::option::def::ValidNumValue<1074856039L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856039L>,
                    comms::option::def::ValidNumValue<1074856039L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856039L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValR4<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_ROTX"</b> field.
    class NavspgUsrdatRotx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatRotxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatRotxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatRotxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatRotxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatRoty field.
    struct NavspgUsrdatRotyMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856040L>,
                comms::option::def::ValidNumValue<1074856040L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856040L>,
                    comms::option::def::ValidNumValue<1074856040L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotyMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotyMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856040L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValR4<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_ROTY"</b> field.
    class NavspgUsrdatRoty : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatRotyMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatRotyMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatRotyMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatRotyMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotyCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatRotz field.
    struct NavspgUsrdatRotzMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856041L>,
                comms::option::def::ValidNumValue<1074856041L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856041L>,
                    comms::option::def::ValidNumValue<1074856041L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotzMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotzMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856041L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValR4<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_ROTZ"</b> field.
    class NavspgUsrdatRotz : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatRotzMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatRotzMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatRotzMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatRotzMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatRotzCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgUsrdatScale field.
    struct NavspgUsrdatScaleMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856042L>,
                comms::option::def::ValidNumValue<1074856042L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856042L>,
                    comms::option::def::ValidNumValue<1074856042L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatScaleMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgUsrdatScaleMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856042L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValR4<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-USRDAT_SCALE"</b> field.
    class NavspgUsrdatScale : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgUsrdatScaleMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgUsrdatScaleMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatScaleMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgUsrdatScaleMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgUsrdatScaleCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgInfilMinsvs field.
    struct NavspgInfilMinsvsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985185L>,
                comms::option::def::ValidNumValue<537985185L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985185L>,
                    comms::option::def::ValidNumValue<537985185L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMinsvsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMinsvsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985185L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-INFIL_MINSVS"</b> field.
    class NavspgInfilMinsvs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgInfilMinsvsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgInfilMinsvsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilMinsvsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilMinsvsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgInfilMinsvsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgInfilMaxsvs field.
    struct NavspgInfilMaxsvsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985186L>,
                comms::option::def::ValidNumValue<537985186L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985186L>,
                    comms::option::def::ValidNumValue<537985186L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMaxsvsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMaxsvsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985186L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-INFIL_MAXSVS"</b> field.
    class NavspgInfilMaxsvs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgInfilMaxsvsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgInfilMaxsvsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilMaxsvsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilMaxsvsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgInfilMaxsvsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgInfilMincno field.
    struct NavspgInfilMincnoMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985187L>,
                comms::option::def::ValidNumValue<537985187L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985187L>,
                    comms::option::def::ValidNumValue<537985187L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMincnoMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMincnoMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985187L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-INFIL_MINCNO"</b> field.
    class NavspgInfilMincno : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgInfilMincnoMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgInfilMincnoMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilMincnoMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilMincnoMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgInfilMincnoCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgInfilMinelev field.
    struct NavspgInfilMinelevMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985188L>,
                comms::option::def::ValidNumValue<537985188L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985188L>,
                    comms::option::def::ValidNumValue<537985188L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMinelevMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMinelevMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985188L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::UnitsDegrees
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int8_t,
                    comms::option::def::UnitsDegrees
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMinelevMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilMinelevMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-INFIL_MINELEV"</b> field.
    class NavspgInfilMinelev : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgInfilMinelevMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgInfilMinelevMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilMinelevMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilMinelevMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgInfilMinelevCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgInfilNcnothrs field.
    struct NavspgInfilNcnothrsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985194L>,
                comms::option::def::ValidNumValue<537985194L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985194L>,
                    comms::option::def::ValidNumValue<537985194L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilNcnothrsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilNcnothrsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985194L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-INFIL_NCNOTHRS"</b> field.
    class NavspgInfilNcnothrs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgInfilNcnothrsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgInfilNcnothrsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilNcnothrsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilNcnothrsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgInfilNcnothrsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgInfilCnothrs field.
    struct NavspgInfilCnothrsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985195L>,
                comms::option::def::ValidNumValue<537985195L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985195L>,
                    comms::option::def::ValidNumValue<537985195L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilCnothrsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgInfilCnothrsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985195L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-INFIL_CNOTHRS"</b> field.
    class NavspgInfilCnothrs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgInfilCnothrsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgInfilCnothrsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilCnothrsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgInfilCnothrsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgInfilCnothrsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgOutfilPdop field.
    struct NavspgOutfilPdopMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<806420657L>,
                comms::option::def::ValidNumValue<806420657L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<806420657L>,
                    comms::option::def::ValidNumValue<806420657L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilPdopMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilPdopMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(806420657L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 10>
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::ScalingRatio<1, 10>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilPdopMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilPdopMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-OUTFIL_PDOP"</b> field.
    class NavspgOutfilPdop : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgOutfilPdopMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgOutfilPdopMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilPdopMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilPdopMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgOutfilPdopCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgOutfilTdop field.
    struct NavspgOutfilTdopMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<806420658L>,
                comms::option::def::ValidNumValue<806420658L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<806420658L>,
                    comms::option::def::ValidNumValue<806420658L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilTdopMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilTdopMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(806420658L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 10>
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::ScalingRatio<1, 10>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilTdopMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilTdopMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-OUTFIL_TDOP"</b> field.
    class NavspgOutfilTdop : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgOutfilTdopMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgOutfilTdopMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilTdopMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilTdopMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgOutfilTdopCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgOutfilPacc field.
    struct NavspgOutfilPaccMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<806420659L>,
                comms::option::def::ValidNumValue<806420659L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<806420659L>,
                    comms::option::def::ValidNumValue<806420659L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilPaccMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilPaccMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(806420659L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsMeters
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsMeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilPaccMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilPaccMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-OUTFIL_PACC"</b> field.
    class NavspgOutfilPacc : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgOutfilPaccMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgOutfilPaccMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilPaccMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilPaccMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgOutfilPaccCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgOutfilTacc field.
    struct NavspgOutfilTaccMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<806420660L>,
                comms::option::def::ValidNumValue<806420660L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<806420660L>,
                    comms::option::def::ValidNumValue<806420660L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilTaccMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilTaccMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(806420660L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsMeters
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsMeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilTaccMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilTaccMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-OUTFIL_TACC"</b> field.
    class NavspgOutfilTacc : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgOutfilTaccMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgOutfilTaccMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilTaccMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilTaccMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgOutfilTaccCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgOutfilFacc field.
    struct NavspgOutfilFaccMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<806420661L>,
                comms::option::def::ValidNumValue<806420661L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<806420661L>,
                    comms::option::def::ValidNumValue<806420661L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilFaccMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilFaccMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(806420661L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 100>,
                comms::option::def::UnitsMetersPerSecond
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::ScalingRatio<1, 100>,
                    comms::option::def::UnitsMetersPerSecond
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilFaccMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgOutfilFaccMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-OUTFIL_FACC"</b> field.
    class NavspgOutfilFacc : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgOutfilFaccMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgOutfilFaccMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilFaccMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgOutfilFaccMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgOutfilFaccCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgConstrAlt field.
    struct NavspgConstrAltMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856129L>,
                comms::option::def::ValidNumValue<1074856129L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856129L>,
                    comms::option::def::ValidNumValue<1074856129L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrAltMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrAltMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856129L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 100>,
                comms::option::def::UnitsMeters
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<1, 100>,
                    comms::option::def::UnitsMeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrAltMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrAltMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-CONSTR_ALT"</b> field.
    class NavspgConstrAlt : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgConstrAltMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgConstrAltMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgConstrAltMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgConstrAltMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgConstrAltCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgConstrAltvar field.
    struct NavspgConstrAltvarMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074856130L>,
                comms::option::def::ValidNumValue<1074856130L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074856130L>,
                    comms::option::def::ValidNumValue<1074856130L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrAltvarMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrAltvarMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074856130L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 10000>
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 10000>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrAltvarMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 0U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrAltvarMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-CONSTR_ALTVAR"</b> field.
    class NavspgConstrAltvar : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgConstrAltvarMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgConstrAltvarMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgConstrAltvarMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgConstrAltvarMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgConstrAltvarCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NavspgConstrDgnssto field.
    struct NavspgConstrDgnsstoMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537985220L>,
                comms::option::def::ValidNumValue<537985220L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537985220L>,
                    comms::option::def::ValidNumValue<537985220L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrDgnsstoMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrDgnsstoMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537985220L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrDgnsstoMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NavspgConstrDgnsstoMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NAVSPG-CONSTR_DGNSSTO"</b> field.
    class NavspgConstrDgnssto : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NavspgConstrDgnsstoMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NavspgConstrDgnsstoMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgConstrDgnsstoMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NavspgConstrDgnsstoMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NavspgConstrDgnsstoCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaProtver field.
    struct NmeaProtverMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546504705L>,
                comms::option::def::ValidNumValue<546504705L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546504705L>,
                    comms::option::def::ValidNumValue<546504705L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaProtverMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaProtverMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546504705L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::NmeaVersion<
                TOpt
            >
        {
            using Base =
                ublox::field::NmeaVersion<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaProtverMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-PROTVER"</b> field.
    class NmeaProtver : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaProtverMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaProtverMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaProtverMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaProtverMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaProtverCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaMaxsvs field.
    struct NmeaMaxsvsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546504706L>,
                comms::option::def::ValidNumValue<546504706L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546504706L>,
                    comms::option::def::ValidNumValue<546504706L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546504706L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::ValidNumValue<8>,
                comms::option::def::ValidNumValue<12>,
                comms::option::def::ValidNumValue<16>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValue<0>,
                    comms::option::def::ValidNumValue<8>,
                    comms::option::def::ValidNumValue<12>,
                    comms::option::def::ValidNumValue<16>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaMaxsvsMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-MAXSVS"</b> field.
    class NmeaMaxsvs : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaMaxsvsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaMaxsvsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaMaxsvsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaMaxsvsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaMaxsvsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaCompat field.
    struct NmeaCompatMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069251L>,
                comms::option::def::ValidNumValue<278069251L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069251L>,
                    comms::option::def::ValidNumValue<278069251L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaCompatMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaCompatMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069251L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-COMPAT"</b> field.
    class NmeaCompat : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaCompatMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaCompatMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaCompatMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaCompatMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaCompatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaConsider field.
    struct NmeaConsiderMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069252L>,
                comms::option::def::ValidNumValue<278069252L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069252L>,
                    comms::option::def::ValidNumValue<278069252L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaConsiderMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaConsiderMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069252L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-CONSIDER"</b> field.
    class NmeaConsider : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaConsiderMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaConsiderMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaConsiderMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaConsiderMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaConsiderCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaLimit82 field.
    struct NmeaLimit82Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069253L>,
                comms::option::def::ValidNumValue<278069253L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069253L>,
                    comms::option::def::ValidNumValue<278069253L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaLimit82MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaLimit82MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069253L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-LIMIT82"</b> field.
    class NmeaLimit82 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaLimit82Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaLimit82Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaLimit82Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaLimit82Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaLimit82Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaHighprec field.
    struct NmeaHighprecMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069254L>,
                comms::option::def::ValidNumValue<278069254L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069254L>,
                    comms::option::def::ValidNumValue<278069254L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaHighprecMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaHighprecMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069254L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-HIGHPREC"</b> field.
    class NmeaHighprec : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaHighprecMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaHighprecMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaHighprecMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaHighprecMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaHighprecCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaSvnumbering field.
    struct NmeaSvnumberingMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546504711L>,
                comms::option::def::ValidNumValue<546504711L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546504711L>,
                    comms::option::def::ValidNumValue<546504711L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546504711L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 6>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 6>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaSvnumberingMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-SVNUMBERING"</b> field.
    class NmeaSvnumbering : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaSvnumberingMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaSvnumberingMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaSvnumberingMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaSvnumberingMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaSvnumberingCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaFiltGps field.
    struct NmeaFiltGpsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069265L>,
                comms::option::def::ValidNumValue<278069265L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069265L>,
                    comms::option::def::ValidNumValue<278069265L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltGpsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltGpsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069265L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-FILT_GPS"</b> field.
    class NmeaFiltGps : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaFiltGpsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaFiltGpsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltGpsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltGpsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaFiltGpsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaFiltSbas field.
    struct NmeaFiltSbasMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069266L>,
                comms::option::def::ValidNumValue<278069266L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069266L>,
                    comms::option::def::ValidNumValue<278069266L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltSbasMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltSbasMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069266L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-FILT_SBAS"</b> field.
    class NmeaFiltSbas : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaFiltSbasMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaFiltSbasMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltSbasMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltSbasMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaFiltSbasCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaFiltGal field.
    struct NmeaFiltGalMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069267L>,
                comms::option::def::ValidNumValue<278069267L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069267L>,
                    comms::option::def::ValidNumValue<278069267L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltGalMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltGalMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069267L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-FILT_GAL"</b> field.
    class NmeaFiltGal : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaFiltGalMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaFiltGalMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltGalMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltGalMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaFiltGalCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaFiltQzss field.
    struct NmeaFiltQzssMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069269L>,
                comms::option::def::ValidNumValue<278069269L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069269L>,
                    comms::option::def::ValidNumValue<278069269L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltQzssMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltQzssMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069269L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-FILT_QZSS"</b> field.
    class NmeaFiltQzss : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaFiltQzssMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaFiltQzssMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltQzssMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltQzssMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaFiltQzssCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaFiltGlo field.
    struct NmeaFiltGloMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069270L>,
                comms::option::def::ValidNumValue<278069270L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069270L>,
                    comms::option::def::ValidNumValue<278069270L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltGloMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltGloMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069270L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-FILT_GLO"</b> field.
    class NmeaFiltGlo : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaFiltGloMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaFiltGloMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltGloMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltGloMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaFiltGloCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaFiltBds field.
    struct NmeaFiltBdsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069271L>,
                comms::option::def::ValidNumValue<278069271L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069271L>,
                    comms::option::def::ValidNumValue<278069271L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltBdsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaFiltBdsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069271L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-FILT_BDS"</b> field.
    class NmeaFiltBds : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaFiltBdsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaFiltBdsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltBdsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaFiltBdsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaFiltBdsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaOutInvfix field.
    struct NmeaOutInvfixMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069281L>,
                comms::option::def::ValidNumValue<278069281L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069281L>,
                    comms::option::def::ValidNumValue<278069281L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutInvfixMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutInvfixMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069281L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-OUT_INVFIX"</b> field.
    class NmeaOutInvfix : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaOutInvfixMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaOutInvfixMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutInvfixMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutInvfixMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaOutInvfixCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaOutMskfix field.
    struct NmeaOutMskfixMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069282L>,
                comms::option::def::ValidNumValue<278069282L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069282L>,
                    comms::option::def::ValidNumValue<278069282L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutMskfixMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutMskfixMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069282L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-OUT_MSKFIX"</b> field.
    class NmeaOutMskfix : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaOutMskfixMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaOutMskfixMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutMskfixMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutMskfixMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaOutMskfixCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaOutInvtime field.
    struct NmeaOutInvtimeMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069283L>,
                comms::option::def::ValidNumValue<278069283L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069283L>,
                    comms::option::def::ValidNumValue<278069283L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutInvtimeMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutInvtimeMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069283L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-OUT_INVTIME"</b> field.
    class NmeaOutInvtime : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaOutInvtimeMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaOutInvtimeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutInvtimeMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutInvtimeMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaOutInvtimeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaOutInvdate field.
    struct NmeaOutInvdateMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069284L>,
                comms::option::def::ValidNumValue<278069284L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069284L>,
                    comms::option::def::ValidNumValue<278069284L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutInvdateMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutInvdateMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069284L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-OUT_INVDATE"</b> field.
    class NmeaOutInvdate : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaOutInvdateMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaOutInvdateMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutInvdateMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutInvdateMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaOutInvdateCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaOutOnlygps field.
    struct NmeaOutOnlygpsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069285L>,
                comms::option::def::ValidNumValue<278069285L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069285L>,
                    comms::option::def::ValidNumValue<278069285L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutOnlygpsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutOnlygpsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069285L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-OUT_ONLYGPS"</b> field.
    class NmeaOutOnlygps : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaOutOnlygpsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaOutOnlygpsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutOnlygpsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutOnlygpsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaOutOnlygpsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaOutFrozencog field.
    struct NmeaOutFrozencogMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<278069286L>,
                comms::option::def::ValidNumValue<278069286L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<278069286L>,
                    comms::option::def::ValidNumValue<278069286L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutFrozencogMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutFrozencogMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(278069286L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-OUT_FROZENCOG"</b> field.
    class NmeaOutFrozencog : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaOutFrozencogMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaOutFrozencogMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutFrozencogMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutFrozencogMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaOutFrozencogCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref NmeaOutMaintalkerid field.
    struct NmeaOutMaintalkeridMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<546504753L>,
                comms::option::def::ValidNumValue<546504753L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<546504753L>,
                    comms::option::def::ValidNumValue<546504753L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(546504753L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-NMEA-MAINTALKERID"</b> field.
    class NmeaOutMaintalkerid : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename NmeaOutMaintalkeridMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename NmeaOutMaintalkeridMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutMaintalkeridMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::NmeaOutMaintalkeridMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::NmeaOutMaintalkeridCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoUseOdo field.
    struct OdoUseOdoMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270663681L>,
                comms::option::def::ValidNumValue<270663681L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270663681L>,
                    comms::option::def::ValidNumValue<270663681L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoUseOdoMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoUseOdoMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270663681L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-USE_ODO"</b> field.
    class OdoUseOdo : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoUseOdoMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoUseOdoMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoUseOdoMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoUseOdoMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoUseOdoCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoUseCog field.
    struct OdoUseCogMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270663682L>,
                comms::option::def::ValidNumValue<270663682L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270663682L>,
                    comms::option::def::ValidNumValue<270663682L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoUseCogMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoUseCogMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270663682L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-USE_COG"</b> field.
    class OdoUseCog : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoUseCogMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoUseCogMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoUseCogMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoUseCogMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoUseCogCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoOutlpvel field.
    struct OdoOutlpvelMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270663683L>,
                comms::option::def::ValidNumValue<270663683L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270663683L>,
                    comms::option::def::ValidNumValue<270663683L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoOutlpvelMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoOutlpvelMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270663683L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-OUTLPVEL"</b> field.
    class OdoOutlpvel : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoOutlpvelMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoOutlpvelMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoOutlpvelMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoOutlpvelMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoOutlpvelCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoOutlpcog field.
    struct OdoOutlpcogMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<270663684L>,
                comms::option::def::ValidNumValue<270663684L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<270663684L>,
                    comms::option::def::ValidNumValue<270663684L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoOutlpcogMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoOutlpcogMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(270663684L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-OUTLPCOG"</b> field.
    class OdoOutlpcog : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoOutlpcogMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoOutlpcogMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoOutlpcogMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoOutlpcogMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoOutlpcogCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoProfile field.
    struct OdoProfileMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539099141L>,
                comms::option::def::ValidNumValue<539099141L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539099141L>,
                    comms::option::def::ValidNumValue<539099141L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539099141L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 4>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 4>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoProfileMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-PROFILE"</b> field.
    class OdoProfile : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoProfileMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoProfileMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoProfileMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoProfileMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoProfileCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoCogmaxspeed field.
    struct OdoCogmaxspeedMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539099169L>,
                comms::option::def::ValidNumValue<539099169L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539099169L>,
                    comms::option::def::ValidNumValue<539099169L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoCogmaxspeedMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoCogmaxspeedMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539099169L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::UnitsMetersPerSecond
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::UnitsMetersPerSecond
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoCogmaxspeedMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoCogmaxspeedMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-COGMAXSPEED"</b> field.
    class OdoCogmaxspeed : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoCogmaxspeedMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoCogmaxspeedMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoCogmaxspeedMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoCogmaxspeedMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoCogmaxspeedCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoCogmaxposacc field.
    struct OdoCogmaxposaccMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539099170L>,
                comms::option::def::ValidNumValue<539099170L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539099170L>,
                    comms::option::def::ValidNumValue<539099170L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoCogmaxposaccMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoCogmaxposaccMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539099170L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-COGMAXPOSACC"</b> field.
    class OdoCogmaxposacc : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoCogmaxposaccMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoCogmaxposaccMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoCogmaxposaccMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoCogmaxposaccMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoCogmaxposaccCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoVellpgain field.
    struct OdoVellpgainMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539099185L>,
                comms::option::def::ValidNumValue<539099185L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539099185L>,
                    comms::option::def::ValidNumValue<539099185L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoVellpgainMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoVellpgainMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539099185L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-VELLPGAIN"</b> field.
    class OdoVellpgain : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoVellpgainMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoVellpgainMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoVellpgainMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoVellpgainMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoVellpgainCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref OdoCoglpgain field.
    struct OdoCoglpgainMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539099186L>,
                comms::option::def::ValidNumValue<539099186L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539099186L>,
                    comms::option::def::ValidNumValue<539099186L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::OdoCoglpgainMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::OdoCoglpgainMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539099186L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-ODO-COGLPGAIN"</b> field.
    class OdoCoglpgain : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename OdoCoglpgainMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename OdoCoglpgainMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::OdoCoglpgainMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::OdoCoglpgainMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::OdoCoglpgainCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref QzssUseSlasDgnss field.
    struct QzssUseSlasDgnssMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<272039941L>,
                comms::option::def::ValidNumValue<272039941L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<272039941L>,
                    comms::option::def::ValidNumValue<272039941L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::QzssUseSlasDgnssMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::QzssUseSlasDgnssMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(272039941L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-QZSS-USE_SLAS_DGNSS"</b> field.
    class QzssUseSlasDgnss : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename QzssUseSlasDgnssMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename QzssUseSlasDgnssMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::QzssUseSlasDgnssMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::QzssUseSlasDgnssMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::QzssUseSlasDgnssCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref QzssUseSlasTestmode field.
    struct QzssUseSlasTestmodeMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<272039942L>,
                comms::option::def::ValidNumValue<272039942L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<272039942L>,
                    comms::option::def::ValidNumValue<272039942L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::QzssUseSlasTestmodeMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::QzssUseSlasTestmodeMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(272039942L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-QZSS-USE_SLAS_TESTMODE"</b> field.
    class QzssUseSlasTestmode : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename QzssUseSlasTestmodeMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename QzssUseSlasTestmodeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::QzssUseSlasTestmodeMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::QzssUseSlasTestmodeMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::QzssUseSlasTestmodeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref QzssUseSlasRaimUncorr field.
    struct QzssUseSlasRaimUncorrMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<272039943L>,
                comms::option::def::ValidNumValue<272039943L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<272039943L>,
                    comms::option::def::ValidNumValue<272039943L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::QzssUseSlasRaimUncorrMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::QzssUseSlasRaimUncorrMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(272039943L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-QZSS-USE_SLAS_RAIM_UNCORR"</b> field.
    class QzssUseSlasRaimUncorr : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename QzssUseSlasRaimUncorrMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename QzssUseSlasRaimUncorrMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::QzssUseSlasRaimUncorrMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::QzssUseSlasRaimUncorrMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::QzssUseSlasRaimUncorrCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RateMeas field.
    struct RateMeasMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<807469057L>,
                comms::option::def::ValidNumValue<807469057L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<807469057L>,
                    comms::option::def::ValidNumValue<807469057L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RateMeasMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RateMeasMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(807469057L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 1000>,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::ScalingRatio<1, 1000>,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RateMeasMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 3U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RateMeasMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RATE-MEAS"</b> field.
    class RateMeas : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RateMeasMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RateMeasMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RateMeasMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RateMeasMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RateMeasCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RateNav field.
    struct RateNavMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<807469058L>,
                comms::option::def::ValidNumValue<807469058L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<807469058L>,
                    comms::option::def::ValidNumValue<807469058L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RateNavMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RateNavMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(807469058L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU2<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RATE-NAV"</b> field.
    class RateNav : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RateNavMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RateNavMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RateNavMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RateNavMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RateNavCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RateTimeref field.
    struct RateTimerefMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<539033603L>,
                comms::option::def::ValidNumValue<539033603L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<539033603L>,
                    comms::option::def::ValidNumValue<539033603L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RateTimerefMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RateTimerefMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(539033603L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValSat<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RATE-TIMEREF"</b> field.
    class RateTimeref : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RateTimerefMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RateTimerefMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RateTimerefMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RateTimerefMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RateTimerefCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RinvDump field.
    struct RinvDumpMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<281477121L>,
                comms::option::def::ValidNumValue<281477121L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<281477121L>,
                    comms::option::def::ValidNumValue<281477121L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RinvDumpMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RinvDumpMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(281477121L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RINV-DUMP"</b> field.
    class RinvDump : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RinvDumpMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RinvDumpMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RinvDumpMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RinvDumpMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RinvDumpCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RinvBinary field.
    struct RinvBinaryMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<281477122L>,
                comms::option::def::ValidNumValue<281477122L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<281477122L>,
                    comms::option::def::ValidNumValue<281477122L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RinvBinaryMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RinvBinaryMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(281477122L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RINV-BINARY"</b> field.
    class RinvBinary : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RinvBinaryMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RinvBinaryMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RinvBinaryMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RinvBinaryMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RinvBinaryCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RinvDataSize field.
    struct RinvDataSizeMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<549912579L>,
                comms::option::def::ValidNumValue<549912579L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<549912579L>,
                    comms::option::def::ValidNumValue<549912579L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RinvDataSizeMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RinvDataSizeMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(549912579L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RINV-DATA_SIZE"</b> field.
    class RinvDataSize : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RinvDataSizeMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RinvDataSizeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RinvDataSizeMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RinvDataSizeMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RinvDataSizeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RinvChunk0 field.
    struct RinvChunk0Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1355218948L>,
                comms::option::def::ValidNumValue<1355218948L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1355218948L>,
                    comms::option::def::ValidNumValue<1355218948L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RinvChunk0MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RinvChunk0MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1355218948L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RINV-CHUNK0"</b> field.
    class RinvChunk0 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RinvChunk0Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RinvChunk0Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RinvChunk0Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RinvChunk0Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RinvChunk0Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RinvChunk1 field.
    struct RinvChunk1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1355218949L>,
                comms::option::def::ValidNumValue<1355218949L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1355218949L>,
                    comms::option::def::ValidNumValue<1355218949L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RinvChunk1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RinvChunk1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1355218949L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RINV-CHUNK1"</b> field.
    class RinvChunk1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RinvChunk1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RinvChunk1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RinvChunk1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RinvChunk1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RinvChunk1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RinvChunk2 field.
    struct RinvChunk2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1355218950L>,
                comms::option::def::ValidNumValue<1355218950L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1355218950L>,
                    comms::option::def::ValidNumValue<1355218950L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RinvChunk2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RinvChunk2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1355218950L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RINV-CHUNK2"</b> field.
    class RinvChunk2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RinvChunk2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RinvChunk2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RinvChunk2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RinvChunk2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RinvChunk2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RinvChunk3 field.
    struct RinvChunk3Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1355218951L>,
                comms::option::def::ValidNumValue<1355218951L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1355218951L>,
                    comms::option::def::ValidNumValue<1355218951L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RinvChunk3MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RinvChunk3MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1355218951L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RINV-CHUNK3"</b> field.
    class RinvChunk3 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RinvChunk3Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RinvChunk3Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RinvChunk3Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RinvChunk3Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RinvChunk3Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RtcmDf003Out field.
    struct RtcmDf003OutMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<805896193L>,
                comms::option::def::ValidNumValue<805896193L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<805896193L>,
                    comms::option::def::ValidNumValue<805896193L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003OutMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003OutMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(805896193L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU2<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RTCM-DF003_OUT"</b> field.
    class RtcmDf003Out : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RtcmDf003OutMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RtcmDf003OutMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RtcmDf003OutMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RtcmDf003OutMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RtcmDf003OutCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RtcmDf003In field.
    struct RtcmDf003InMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<805896200L>,
                comms::option::def::ValidNumValue<805896200L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<805896200L>,
                    comms::option::def::ValidNumValue<805896200L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003InMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003InMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(805896200L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU2<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RTCM-DF003_IN"</b> field.
    class RtcmDf003In : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RtcmDf003InMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RtcmDf003InMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RtcmDf003InMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RtcmDf003InMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RtcmDf003InCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref RtcmDf003InFilter field.
    struct RtcmDf003InFilterMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537460745L>,
                comms::option::def::ValidNumValue<537460745L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537460745L>,
                    comms::option::def::ValidNumValue<537460745L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537460745L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-RTCM-DF003_IN_FILTER"</b> field.
    class RtcmDf003InFilter : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename RtcmDf003InFilterMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename RtcmDf003InFilterMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::RtcmDf003InFilterMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::RtcmDf003InFilterMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::RtcmDf003InFilterCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SbasUseTestmode field.
    struct SbasUseTestmodeMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271974402L>,
                comms::option::def::ValidNumValue<271974402L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271974402L>,
                    comms::option::def::ValidNumValue<271974402L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SbasUseTestmodeMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SbasUseTestmodeMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271974402L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SBAS-USE_TESTMODE"</b> field.
    class SbasUseTestmode : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SbasUseTestmodeMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SbasUseTestmodeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SbasUseTestmodeMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SbasUseTestmodeMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SbasUseTestmodeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SbasUseRanging field.
    struct SbasUseRangingMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271974403L>,
                comms::option::def::ValidNumValue<271974403L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271974403L>,
                    comms::option::def::ValidNumValue<271974403L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SbasUseRangingMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SbasUseRangingMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271974403L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SBAS-USE_RANGING"</b> field.
    class SbasUseRanging : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SbasUseRangingMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SbasUseRangingMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SbasUseRangingMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SbasUseRangingMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SbasUseRangingCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SbasUseDiffcorr field.
    struct SbasUseDiffcorrMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271974404L>,
                comms::option::def::ValidNumValue<271974404L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271974404L>,
                    comms::option::def::ValidNumValue<271974404L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SbasUseDiffcorrMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SbasUseDiffcorrMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271974404L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SBAS-USE_DIFFCORR"</b> field.
    class SbasUseDiffcorr : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SbasUseDiffcorrMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SbasUseDiffcorrMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SbasUseDiffcorrMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SbasUseDiffcorrMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SbasUseDiffcorrCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SbasUseIntegrity field.
    struct SbasUseIntegrityMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271974405L>,
                comms::option::def::ValidNumValue<271974405L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271974405L>,
                    comms::option::def::ValidNumValue<271974405L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SbasUseIntegrityMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SbasUseIntegrityMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271974405L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SBAS-USE_INTEGRITY"</b> field.
    class SbasUseIntegrity : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SbasUseIntegrityMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SbasUseIntegrityMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SbasUseIntegrityMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SbasUseIntegrityMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SbasUseIntegrityCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SbasPrnscanmask field.
    struct SbasPrnscanmaskMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1345716230L>,
                comms::option::def::ValidNumValue<1345716230L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1345716230L>,
                    comms::option::def::ValidNumValue<1345716230L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SbasPrnscanmaskMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SbasPrnscanmaskMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1345716230L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<8U>,
                comms::option::def::BitmaskReservedBits<0xFFFFFF8000000000ULL, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    ublox::field::FieldBase<>,
                    comms::option::def::FixedLength<8U>,
                    comms::option::def::BitmaskReservedBits<0xFFFFFF8000000000ULL, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_PRN120, @b getBitValue_PRN120() and @b setBitValue_PRN120().
            ///      @li @b BitIdx_PRN121, @b getBitValue_PRN121() and @b setBitValue_PRN121().
            ///      @li @b BitIdx_PRN122, @b getBitValue_PRN122() and @b setBitValue_PRN122().
            ///      @li @b BitIdx_PRN123, @b getBitValue_PRN123() and @b setBitValue_PRN123().
            ///      @li @b BitIdx_PRN124, @b getBitValue_PRN124() and @b setBitValue_PRN124().
            ///      @li @b BitIdx_PRN125, @b getBitValue_PRN125() and @b setBitValue_PRN125().
            ///      @li @b BitIdx_PRN126, @b getBitValue_PRN126() and @b setBitValue_PRN126().
            ///      @li @b BitIdx_PRN127, @b getBitValue_PRN127() and @b setBitValue_PRN127().
            ///      @li @b BitIdx_PRN128, @b getBitValue_PRN128() and @b setBitValue_PRN128().
            ///      @li @b BitIdx_PRN129, @b getBitValue_PRN129() and @b setBitValue_PRN129().
            ///      @li @b BitIdx_PRN130, @b getBitValue_PRN130() and @b setBitValue_PRN130().
            ///      @li @b BitIdx_PRN131, @b getBitValue_PRN131() and @b setBitValue_PRN131().
            ///      @li @b BitIdx_PRN132, @b getBitValue_PRN132() and @b setBitValue_PRN132().
            ///      @li @b BitIdx_PRN133, @b getBitValue_PRN133() and @b setBitValue_PRN133().
            ///      @li @b BitIdx_PRN134, @b getBitValue_PRN134() and @b setBitValue_PRN134().
            ///      @li @b BitIdx_PRN135, @b getBitValue_PRN135() and @b setBitValue_PRN135().
            ///      @li @b BitIdx_PRN136, @b getBitValue_PRN136() and @b setBitValue_PRN136().
            ///      @li @b BitIdx_PRN137, @b getBitValue_PRN137() and @b setBitValue_PRN137().
            ///      @li @b BitIdx_PRN138, @b getBitValue_PRN138() and @b setBitValue_PRN138().
            ///      @li @b BitIdx_PRN139, @b getBitValue_PRN139() and @b setBitValue_PRN139().
            ///      @li @b BitIdx_PRN140, @b getBitValue_PRN140() and @b setBitValue_PRN140().
            ///      @li @b BitIdx_PRN141, @b getBitValue_PRN141() and @b setBitValue_PRN141().
            ///      @li @b BitIdx_PRN142, @b getBitValue_PRN142() and @b setBitValue_PRN142().
            ///      @li @b BitIdx_PRN143, @b getBitValue_PRN143() and @b setBitValue_PRN143().
            ///      @li @b BitIdx_PRN144, @b getBitValue_PRN144() and @b setBitValue_PRN144().
            ///      @li @b BitIdx_PRN145, @b getBitValue_PRN145() and @b setBitValue_PRN145().
            ///      @li @b BitIdx_PRN146, @b getBitValue_PRN146() and @b setBitValue_PRN146().
            ///      @li @b BitIdx_PRN147, @b getBitValue_PRN147() and @b setBitValue_PRN147().
            ///      @li @b BitIdx_PRN148, @b getBitValue_PRN148() and @b setBitValue_PRN148().
            ///      @li @b BitIdx_PRN149, @b getBitValue_PRN149() and @b setBitValue_PRN149().
            ///      @li @b BitIdx_PRN150, @b getBitValue_PRN150() and @b setBitValue_PRN150().
            ///      @li @b BitIdx_PRN151, @b getBitValue_PRN151() and @b setBitValue_PRN151().
            ///      @li @b BitIdx_PRN152, @b getBitValue_PRN152() and @b setBitValue_PRN152().
            ///      @li @b BitIdx_PRN153, @b getBitValue_PRN153() and @b setBitValue_PRN153().
            ///      @li @b BitIdx_PRN154, @b getBitValue_PRN154() and @b setBitValue_PRN154().
            ///      @li @b BitIdx_PRN155, @b getBitValue_PRN155() and @b setBitValue_PRN155().
            ///      @li @b BitIdx_PRN156, @b getBitValue_PRN156() and @b setBitValue_PRN156().
            ///      @li @b BitIdx_PRN157, @b getBitValue_PRN157() and @b setBitValue_PRN157().
            ///      @li @b BitIdx_PRN158, @b getBitValue_PRN158() and @b setBitValue_PRN158().
            COMMS_BITMASK_BITS_SEQ(
                PRN120,
                PRN121,
                PRN122,
                PRN123,
                PRN124,
                PRN125,
                PRN126,
                PRN127,
                PRN128,
                PRN129,
                PRN130,
                PRN131,
                PRN132,
                PRN133,
                PRN134,
                PRN135,
                PRN136,
                PRN137,
                PRN138,
                PRN139,
                PRN140,
                PRN141,
                PRN142,
                PRN143,
                PRN144,
                PRN145,
                PRN146,
                PRN147,
                PRN148,
                PRN149,
                PRN150,
                PRN151,
                PRN152,
                PRN153,
                PRN154,
                PRN155,
                PRN156,
                PRN157,
                PRN158
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref ublox::field::CfgValPairMembersCommon::SbasPrnscanmaskMembersCommon::ValCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    ublox::field::CfgValPairMembersCommon::SbasPrnscanmaskMembersCommon::ValCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SbasPrnscanmaskMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SBAS-PRNSCANMASK"</b> field.
    class SbasPrnscanmask : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SbasPrnscanmaskMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SbasPrnscanmaskMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SbasPrnscanmaskMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SbasPrnscanmaskMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SbasPrnscanmaskCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGpsEna field.
    struct SignalGpsEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646751L>,
                comms::option::def::ValidNumValue<271646751L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646751L>,
                    comms::option::def::ValidNumValue<271646751L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGpsEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGpsEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646751L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GPS_ENA"</b> field.
    class SignalGpsEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGpsEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGpsEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGpsEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGpsEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGpsEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGpsL1caEna field.
    struct SignalGpsL1caEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646721L>,
                comms::option::def::ValidNumValue<271646721L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646721L>,
                    comms::option::def::ValidNumValue<271646721L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGpsL1caEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGpsL1caEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646721L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GPS_L1CA_ENA"</b> field.
    class SignalGpsL1caEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGpsL1caEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGpsL1caEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGpsL1caEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGpsL1caEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGpsL1caEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGpsL2cEna field.
    struct SignalGpsL2cEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646723L>,
                comms::option::def::ValidNumValue<271646723L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646723L>,
                    comms::option::def::ValidNumValue<271646723L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGpsL2cEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGpsL2cEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646723L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GPS_L2C_ENA"</b> field.
    class SignalGpsL2cEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGpsL2cEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGpsL2cEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGpsL2cEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGpsL2cEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGpsL2cEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalSbasEna field.
    struct SignalSbasEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646752L>,
                comms::option::def::ValidNumValue<271646752L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646752L>,
                    comms::option::def::ValidNumValue<271646752L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalSbasEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalSbasEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646752L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-SBAS_ENA"</b> field.
    class SignalSbasEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalSbasEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalSbasEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalSbasEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalSbasEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalSbasEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalSbasL1caEna field.
    struct SignalSbasL1caEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646725L>,
                comms::option::def::ValidNumValue<271646725L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646725L>,
                    comms::option::def::ValidNumValue<271646725L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalSbasL1caEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalSbasL1caEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646725L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-SBAS_L1CA_ENA"</b> field.
    class SignalSbasL1caEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalSbasL1caEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalSbasL1caEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalSbasL1caEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalSbasL1caEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalSbasL1caEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGalEna field.
    struct SignalGalEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646753L>,
                comms::option::def::ValidNumValue<271646753L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646753L>,
                    comms::option::def::ValidNumValue<271646753L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGalEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGalEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646753L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GAL_ENA"</b> field.
    class SignalGalEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGalEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGalEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGalEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGalEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGalEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGalE1Ena field.
    struct SignalGalE1EnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646727L>,
                comms::option::def::ValidNumValue<271646727L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646727L>,
                    comms::option::def::ValidNumValue<271646727L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGalE1EnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGalE1EnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646727L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GAL_E1_ENA"</b> field.
    class SignalGalE1Ena : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGalE1EnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGalE1EnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGalE1EnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGalE1EnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGalE1EnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGalE5bEna field.
    struct SignalGalE5bEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646730L>,
                comms::option::def::ValidNumValue<271646730L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646730L>,
                    comms::option::def::ValidNumValue<271646730L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGalE5bEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGalE5bEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646730L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GAL_E5B_ENA"</b> field.
    class SignalGalE5bEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGalE5bEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGalE5bEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGalE5bEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGalE5bEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGalE5bEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalBdsEna field.
    struct SignalBdsEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646754L>,
                comms::option::def::ValidNumValue<271646754L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646754L>,
                    comms::option::def::ValidNumValue<271646754L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalBdsEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalBdsEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646754L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-BDS_ENA"</b> field.
    class SignalBdsEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalBdsEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalBdsEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalBdsEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalBdsEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalBdsEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalBdsB1Ena field.
    struct SignalBdsB1EnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646733L>,
                comms::option::def::ValidNumValue<271646733L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646733L>,
                    comms::option::def::ValidNumValue<271646733L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalBdsB1EnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalBdsB1EnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646733L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-BDS_B1_ENA"</b> field.
    class SignalBdsB1Ena : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalBdsB1EnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalBdsB1EnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalBdsB1EnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalBdsB1EnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalBdsB1EnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalBdsB2Ena field.
    struct SignalBdsB2EnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646734L>,
                comms::option::def::ValidNumValue<271646734L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646734L>,
                    comms::option::def::ValidNumValue<271646734L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalBdsB2EnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalBdsB2EnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646734L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-BDS_B2_ENA"</b> field.
    class SignalBdsB2Ena : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalBdsB2EnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalBdsB2EnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalBdsB2EnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalBdsB2EnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalBdsB2EnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalQzssEna field.
    struct SignalQzssEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646756L>,
                comms::option::def::ValidNumValue<271646756L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646756L>,
                    comms::option::def::ValidNumValue<271646756L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalQzssEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalQzssEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646756L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-QZSS_ENA"</b> field.
    class SignalQzssEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalQzssEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalQzssEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalQzssEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalQzssEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalQzssEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalQzssL1caEna field.
    struct SignalQzssL1caEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646738L>,
                comms::option::def::ValidNumValue<271646738L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646738L>,
                    comms::option::def::ValidNumValue<271646738L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalQzssL1caEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalQzssL1caEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646738L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-QZSS_L1CA_ENA"</b> field.
    class SignalQzssL1caEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalQzssL1caEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalQzssL1caEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalQzssL1caEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalQzssL1caEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalQzssL1caEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalQzssL1sEna field.
    struct SignalQzssL1sEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646740L>,
                comms::option::def::ValidNumValue<271646740L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646740L>,
                    comms::option::def::ValidNumValue<271646740L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalQzssL1sEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalQzssL1sEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646740L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-QZSS_L1S_ENA"</b> field.
    class SignalQzssL1sEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalQzssL1sEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalQzssL1sEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalQzssL1sEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalQzssL1sEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalQzssL1sEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalQzssL2cEna field.
    struct SignalQzssL2cEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646741L>,
                comms::option::def::ValidNumValue<271646741L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646741L>,
                    comms::option::def::ValidNumValue<271646741L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalQzssL2cEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalQzssL2cEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646741L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-QZSS_L2C_ENA"</b> field.
    class SignalQzssL2cEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalQzssL2cEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalQzssL2cEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalQzssL2cEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalQzssL2cEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalQzssL2cEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGloEna field.
    struct SignalGloEnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646757L>,
                comms::option::def::ValidNumValue<271646757L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646757L>,
                    comms::option::def::ValidNumValue<271646757L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGloEnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGloEnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646757L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GLO_ENA"</b> field.
    class SignalGloEna : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGloEnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGloEnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGloEnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGloEnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGloEnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGloL1Ena field.
    struct SignalGloL1EnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646744L>,
                comms::option::def::ValidNumValue<271646744L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646744L>,
                    comms::option::def::ValidNumValue<271646744L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGloL1EnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGloL1EnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646744L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GLO_L1_ENA"</b> field.
    class SignalGloL1Ena : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGloL1EnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGloL1EnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGloL1EnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGloL1EnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGloL1EnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SignalGloL2Ena field.
    struct SignalGloL2EnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<271646746L>,
                comms::option::def::ValidNumValue<271646746L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<271646746L>,
                    comms::option::def::ValidNumValue<271646746L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGloL2EnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SignalGloL2EnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(271646746L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SIGNAL-GLO_L2_ENA"</b> field.
    class SignalGloL2Ena : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SignalGloL2EnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SignalGloL2EnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGloL2EnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SignalGloL2EnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SignalGloL2EnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpiMaxff field.
    struct SpiMaxffMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<543424513L>,
                comms::option::def::ValidNumValue<543424513L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<543424513L>,
                    comms::option::def::ValidNumValue<543424513L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpiMaxffMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpiMaxffMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(543424513L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPI-MAXFF"</b> field.
    class SpiMaxff : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpiMaxffMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpiMaxffMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpiMaxffMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpiMaxffMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpiMaxffCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpiCpolarity field.
    struct SpiCpolarityMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<274989058L>,
                comms::option::def::ValidNumValue<274989058L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<274989058L>,
                    comms::option::def::ValidNumValue<274989058L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpiCpolarityMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpiCpolarityMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(274989058L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPI-CPOLARITY"</b> field.
    class SpiCpolarity : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpiCpolarityMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpiCpolarityMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpiCpolarityMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpiCpolarityMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpiCpolarityCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpiCphase field.
    struct SpiCphaseMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<274989059L>,
                comms::option::def::ValidNumValue<274989059L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<274989059L>,
                    comms::option::def::ValidNumValue<274989059L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpiCphaseMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpiCphaseMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(274989059L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPI-CPHASE"</b> field.
    class SpiCphase : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpiCphaseMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpiCphaseMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpiCphaseMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpiCphaseMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpiCphaseCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpiExtendedtimeout field.
    struct SpiExtendedtimeoutMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<274989061L>,
                comms::option::def::ValidNumValue<274989061L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<274989061L>,
                    comms::option::def::ValidNumValue<274989061L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpiExtendedtimeoutMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpiExtendedtimeoutMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(274989061L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPI-EXTENDEDTIMEOUT"</b> field.
    class SpiExtendedtimeout : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpiExtendedtimeoutMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpiExtendedtimeoutMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpiExtendedtimeoutMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpiExtendedtimeoutMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpiExtendedtimeoutCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpiEnabled field.
    struct SpiEnabledMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<274989062L>,
                comms::option::def::ValidNumValue<274989062L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<274989062L>,
                    comms::option::def::ValidNumValue<274989062L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpiEnabledMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpiEnabledMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(274989062L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPI-ENABLED"</b> field.
    class SpiEnabled : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpiEnabledMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpiEnabledMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpiEnabledMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpiEnabledMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpiEnabledCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpiinprotUbx field.
    struct SpiinprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276365313L>,
                comms::option::def::ValidNumValue<276365313L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276365313L>,
                    comms::option::def::ValidNumValue<276365313L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpiinprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpiinprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276365313L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPIINPROT-UBX"</b> field.
    class SpiinprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpiinprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpiinprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpiinprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpiinprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpiinprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpiinprotNmea field.
    struct SpiinprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276365314L>,
                comms::option::def::ValidNumValue<276365314L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276365314L>,
                    comms::option::def::ValidNumValue<276365314L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpiinprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpiinprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276365314L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPIINPROT-NMEA"</b> field.
    class SpiinprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpiinprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpiinprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpiinprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpiinprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpiinprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpiinprotRtcm3x field.
    struct SpiinprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276365316L>,
                comms::option::def::ValidNumValue<276365316L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276365316L>,
                    comms::option::def::ValidNumValue<276365316L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpiinprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpiinprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276365316L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPIINPROT-RTCM3X"</b> field.
    class SpiinprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpiinprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpiinprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpiinprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpiinprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpiinprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpioutprotUbx field.
    struct SpioutprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276430849L>,
                comms::option::def::ValidNumValue<276430849L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276430849L>,
                    comms::option::def::ValidNumValue<276430849L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpioutprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpioutprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276430849L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPIOUTPROT-UBX"</b> field.
    class SpioutprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpioutprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpioutprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpioutprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpioutprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpioutprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpioutprotNmea field.
    struct SpioutprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276430850L>,
                comms::option::def::ValidNumValue<276430850L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276430850L>,
                    comms::option::def::ValidNumValue<276430850L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpioutprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpioutprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276430850L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPIOUTPROT-NMEA"</b> field.
    class SpioutprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpioutprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpioutprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpioutprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpioutprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpioutprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref SpioutprotRtcm3x field.
    struct SpioutprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276430852L>,
                comms::option::def::ValidNumValue<276430852L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276430852L>,
                    comms::option::def::ValidNumValue<276430852L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::SpioutprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::SpioutprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276430852L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-SPIOUTPROT-RTCM3X"</b> field.
    class SpioutprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename SpioutprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename SpioutprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::SpioutprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::SpioutprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::SpioutprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeMode field.
    struct TmodeModeMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537067521L>,
                comms::option::def::ValidNumValue<537067521L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537067521L>,
                    comms::option::def::ValidNumValue<537067521L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537067521L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeModeMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-MODE"</b> field.
    class TmodeMode : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeModeMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeModeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeModeMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeModeMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeModeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodePosType field.
    struct TmodePosTypeMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537067522L>,
                comms::option::def::ValidNumValue<537067522L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537067522L>,
                    comms::option::def::ValidNumValue<537067522L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537067522L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodePosTypeMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-POS_TYPE"</b> field.
    class TmodePosType : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodePosTypeMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodePosTypeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodePosTypeMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodePosTypeMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodePosTypeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeEcefX field.
    struct TmodeEcefXMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938435L>,
                comms::option::def::ValidNumValue<1073938435L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938435L>,
                    comms::option::def::ValidNumValue<1073938435L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefXMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefXMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938435L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::EcefX<
                TOpt
            >
        {
            using Base =
                ublox::field::EcefX<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefXMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-ECEF_X"</b> field.
    class TmodeEcefX : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeEcefXMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeEcefXMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefXMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefXMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeEcefXCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeEcefY field.
    struct TmodeEcefYMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938436L>,
                comms::option::def::ValidNumValue<1073938436L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938436L>,
                    comms::option::def::ValidNumValue<1073938436L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefYMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefYMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938436L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::EcefY<
                TOpt
            >
        {
            using Base =
                ublox::field::EcefY<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefYMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-ECEF_Y"</b> field.
    class TmodeEcefY : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeEcefYMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeEcefYMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefYMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefYMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeEcefYCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeEcefZ field.
    struct TmodeEcefZMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938437L>,
                comms::option::def::ValidNumValue<1073938437L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938437L>,
                    comms::option::def::ValidNumValue<1073938437L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefZMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefZMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938437L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::EcefZ<
                TOpt
            >
        {
            using Base =
                ublox::field::EcefZ<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefZMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-ECEF_Z"</b> field.
    class TmodeEcefZ : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeEcefZMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeEcefZMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefZMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefZMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeEcefZCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeEcefXHp field.
    struct TmodeEcefXHpMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537067526L>,
                comms::option::def::ValidNumValue<537067526L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537067526L>,
                    comms::option::def::ValidNumValue<537067526L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefXHpMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefXHpMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537067526L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::EcefHP<
                TOpt
            >
        {
            using Base =
                ublox::field::EcefHP<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefXHpMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-ECEF_X_HP"</b> field.
    class TmodeEcefXHp : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeEcefXHpMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeEcefXHpMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefXHpMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefXHpMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeEcefXHpCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeEcefYHp field.
    struct TmodeEcefYHpMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537067527L>,
                comms::option::def::ValidNumValue<537067527L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537067527L>,
                    comms::option::def::ValidNumValue<537067527L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefYHpMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefYHpMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537067527L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::EcefHP<
                TOpt
            >
        {
            using Base =
                ublox::field::EcefHP<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefYHpMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-ECEF_Y_HP"</b> field.
    class TmodeEcefYHp : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeEcefYHpMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeEcefYHpMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefYHpMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefYHpMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeEcefYHpCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeEcefZHp field.
    struct TmodeEcefZHpMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537067528L>,
                comms::option::def::ValidNumValue<537067528L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537067528L>,
                    comms::option::def::ValidNumValue<537067528L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefZHpMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefZHpMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537067528L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::EcefHP<
                TOpt
            >
        {
            using Base =
                ublox::field::EcefHP<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeEcefZHpMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-ECEF_Z_HP"</b> field.
    class TmodeEcefZHp : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeEcefZHpMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeEcefZHpMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefZHpMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeEcefZHpMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeEcefZHpCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeLat field.
    struct TmodeLatMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938441L>,
                comms::option::def::ValidNumValue<1073938441L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938441L>,
                    comms::option::def::ValidNumValue<1073938441L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLatMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLatMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938441L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lat<
                TOpt
            >
        {
            using Base =
                ublox::field::Lat<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLatMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-LAT"</b> field.
    class TmodeLat : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeLatMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeLatMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeLatMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeLatMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeLatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeLon field.
    struct TmodeLonMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938442L>,
                comms::option::def::ValidNumValue<1073938442L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938442L>,
                    comms::option::def::ValidNumValue<1073938442L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLonMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLonMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938442L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Lon<
                TOpt
            >
        {
            using Base =
                ublox::field::Lon<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLonMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-LON"</b> field.
    class TmodeLon : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeLonMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeLonMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeLonMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeLonMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeLonCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeHeight field.
    struct TmodeHeightMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938443L>,
                comms::option::def::ValidNumValue<1073938443L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938443L>,
                    comms::option::def::ValidNumValue<1073938443L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeHeightMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeHeightMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938443L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::Alt<
                TOpt
            >
        {
            using Base =
                ublox::field::Alt<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeHeightMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-HEIGHT"</b> field.
    class TmodeHeight : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeHeightMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeHeightMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeHeightMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeHeightMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeHeightCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeLatHp field.
    struct TmodeLatHpMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537067532L>,
                comms::option::def::ValidNumValue<537067532L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537067532L>,
                    comms::option::def::ValidNumValue<537067532L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLatHpMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLatHpMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537067532L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::LatHP<
                TOpt
            >
        {
            using Base =
                ublox::field::LatHP<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLatHpMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-LAT_HP"</b> field.
    class TmodeLatHp : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeLatHpMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeLatHpMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeLatHpMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeLatHpMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeLatHpCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeLonHp field.
    struct TmodeLonHpMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537067533L>,
                comms::option::def::ValidNumValue<537067533L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537067533L>,
                    comms::option::def::ValidNumValue<537067533L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLonHpMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLonHpMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537067533L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::LonHP<
                TOpt
            >
        {
            using Base =
                ublox::field::LonHP<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeLonHpMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-LON_HP"</b> field.
    class TmodeLonHp : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeLonHpMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeLonHpMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeLonHpMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeLonHpMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeLonHpCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeHeightHp field.
    struct TmodeHeightHpMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537067534L>,
                comms::option::def::ValidNumValue<537067534L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537067534L>,
                    comms::option::def::ValidNumValue<537067534L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeHeightHpMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeHeightHpMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537067534L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::AltHP<
                TOpt
            >
        {
            using Base =
                ublox::field::AltHP<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeHeightHpMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-HEIGHT_HP"</b> field.
    class TmodeHeightHp : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeHeightHpMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeHeightHpMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeHeightHpMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeHeightHpMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeHeightHpCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeFixedPosAcc field.
    struct TmodeFixedPosAccMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938447L>,
                comms::option::def::ValidNumValue<1073938447L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938447L>,
                    comms::option::def::ValidNumValue<1073938447L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeFixedPosAccMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeFixedPosAccMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938447L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            ublox::field::FixedPosAcc<
                TOpt
            >
        {
            using Base =
                ublox::field::FixedPosAcc<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeFixedPosAccMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-FIXED_POS_ACC"</b> field.
    class TmodeFixedPosAcc : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeFixedPosAccMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeFixedPosAccMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeFixedPosAccMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeFixedPosAccMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeFixedPosAccCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeSvinMinDur field.
    struct TmodeSvinMinDurMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938448L>,
                comms::option::def::ValidNumValue<1073938448L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938448L>,
                    comms::option::def::ValidNumValue<1073938448L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeSvinMinDurMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeSvinMinDurMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938448L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeSvinMinDurMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeSvinMinDurMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-SVIN_MIN_DUR"</b> field.
    class TmodeSvinMinDur : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeSvinMinDurMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeSvinMinDurMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeSvinMinDurMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeSvinMinDurMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeSvinMinDurCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TmodeSvinAccLimit field.
    struct TmodeSvinAccLimitMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1073938449L>,
                comms::option::def::ValidNumValue<1073938449L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1073938449L>,
                    comms::option::def::ValidNumValue<1073938449L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeSvinAccLimitMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeSvinAccLimitMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1073938449L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 10>,
                    comms::option::def::UnitsMillimeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeSvinAccLimitMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 1U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TmodeSvinAccLimitMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TMODE-SVIN_ACC_LIMIT"</b> field.
    class TmodeSvinAccLimit : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TmodeSvinAccLimitMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TmodeSvinAccLimitMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeSvinAccLimitMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TmodeSvinAccLimitMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TmodeSvinAccLimitCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpPulseDef field.
    struct TpPulseDefMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537198627L>,
                comms::option::def::ValidNumValue<537198627L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537198627L>,
                    comms::option::def::ValidNumValue<537198627L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537198627L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseDefMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-PULSE_DEF"</b> field.
    class TpPulseDef : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpPulseDefMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpPulseDefMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpPulseDefMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpPulseDefMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpPulseDefCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpPulseLengthDef field.
    struct TpPulseLengthDefMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537198640L>,
                comms::option::def::ValidNumValue<537198640L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537198640L>,
                    comms::option::def::ValidNumValue<537198640L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537198640L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPulseLengthDefMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-PULSE_LENGTH_DEF"</b> field.
    class TpPulseLengthDef : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpPulseLengthDefMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpPulseLengthDefMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpPulseLengthDefMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpPulseLengthDefMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpPulseLengthDefCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpAntCabledelay field.
    struct TpAntCabledelayMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<805634049L>,
                comms::option::def::ValidNumValue<805634049L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<805634049L>,
                    comms::option::def::ValidNumValue<805634049L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpAntCabledelayMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpAntCabledelayMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(805634049L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 1000000000L>,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int16_t,
                    comms::option::def::ScalingRatio<1, 1000000000L>,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpAntCabledelayMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 9U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpAntCabledelayMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-ANT_CABLEDELAY"</b> field.
    class TpAntCabledelay : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpAntCabledelayMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpAntCabledelayMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpAntCabledelayMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpAntCabledelayMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpAntCabledelayCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpPeriodTp1 field.
    struct TpPeriodTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074069506L>,
                comms::option::def::ValidNumValue<1074069506L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074069506L>,
                    comms::option::def::ValidNumValue<1074069506L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpPeriodTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPeriodTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074069506L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 1000000L>,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 1000000L>,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpPeriodTp1MembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 6U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPeriodTp1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-PERIOD_TP1"</b> field.
    class TpPeriodTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpPeriodTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpPeriodTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpPeriodTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpPeriodTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpPeriodTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpPeriodLockTp1 field.
    struct TpPeriodLockTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074069507L>,
                comms::option::def::ValidNumValue<1074069507L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074069507L>,
                    comms::option::def::ValidNumValue<1074069507L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpPeriodLockTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPeriodLockTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074069507L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 1000000L>,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 1000000L>,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpPeriodLockTp1MembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 6U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPeriodLockTp1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-PERIOD_LOCK_TP1"</b> field.
    class TpPeriodLockTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpPeriodLockTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpPeriodLockTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpPeriodLockTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpPeriodLockTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpPeriodLockTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpFreqTp1 field.
    struct TpFreqTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074069540L>,
                comms::option::def::ValidNumValue<1074069540L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074069540L>,
                    comms::option::def::ValidNumValue<1074069540L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpFreqTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpFreqTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074069540L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsHertz
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsHertz
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpFreqTp1MembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpFreqTp1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-FREQ_TP1"</b> field.
    class TpFreqTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpFreqTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpFreqTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpFreqTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpFreqTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpFreqTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpFreqLockTp1 field.
    struct TpFreqLockTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074069541L>,
                comms::option::def::ValidNumValue<1074069541L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074069541L>,
                    comms::option::def::ValidNumValue<1074069541L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpFreqLockTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpFreqLockTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074069541L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsHertz
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsHertz
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpFreqLockTp1MembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpFreqLockTp1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-FREQ_LOCK_TP1"</b> field.
    class TpFreqLockTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpFreqLockTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpFreqLockTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpFreqLockTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpFreqLockTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpFreqLockTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpLenTp1 field.
    struct TpLenTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074069508L>,
                comms::option::def::ValidNumValue<1074069508L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074069508L>,
                    comms::option::def::ValidNumValue<1074069508L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpLenTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpLenTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074069508L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 1000000L>,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 1000000L>,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpLenTp1MembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 6U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpLenTp1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-LEN_TP1"</b> field.
    class TpLenTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpLenTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpLenTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpLenTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpLenTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpLenTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpLenLockTp1 field.
    struct TpLenLockTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074069509L>,
                comms::option::def::ValidNumValue<1074069509L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074069509L>,
                    comms::option::def::ValidNumValue<1074069509L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpLenLockTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpLenLockTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074069509L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 1000000L>,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 1000000L>,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpLenLockTp1MembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 6U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpLenLockTp1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-LEN_LOCK_TP1"</b> field.
    class TpLenLockTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpLenLockTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpLenLockTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpLenLockTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpLenLockTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpLenLockTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpDutyTp1 field.
    struct TpDutyTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1342505002L>,
                comms::option::def::ValidNumValue<1342505002L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1342505002L>,
                    comms::option::def::ValidNumValue<1342505002L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpDutyTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpDutyTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1342505002L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValR8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-DUTY_TP1"</b> field.
    class TpDutyTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpDutyTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpDutyTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpDutyTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpDutyTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpDutyTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpDutyLockTp1 field.
    struct TpDutyLockTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1342505003L>,
                comms::option::def::ValidNumValue<1342505003L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1342505003L>,
                    comms::option::def::ValidNumValue<1342505003L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpDutyLockTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpDutyLockTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1342505003L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValR8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-DUTY_LOCK_TP1"</b> field.
    class TpDutyLockTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpDutyLockTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpDutyLockTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpDutyLockTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpDutyLockTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpDutyLockTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpUserDelayTp1 field.
    struct TpUserDelayTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1074069510L>,
                comms::option::def::ValidNumValue<1074069510L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1074069510L>,
                    comms::option::def::ValidNumValue<1074069510L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpUserDelayTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpUserDelayTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1074069510L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 1000000000L>,
                comms::option::def::UnitsSeconds
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<1, 1000000000L>,
                    comms::option::def::UnitsSeconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpUserDelayTp1MembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 9U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpUserDelayTp1MembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-USER_DELAY_TP1"</b> field.
    class TpUserDelayTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpUserDelayTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpUserDelayTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpUserDelayTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpUserDelayTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpUserDelayTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpTp1Ena field.
    struct TpTp1EnaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<268763143L>,
                comms::option::def::ValidNumValue<268763143L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<268763143L>,
                    comms::option::def::ValidNumValue<268763143L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpTp1EnaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpTp1EnaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(268763143L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-TP1_ENA"</b> field.
    class TpTp1Ena : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpTp1EnaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpTp1EnaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpTp1EnaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpTp1EnaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpTp1EnaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpSyncGnssTp1 field.
    struct TpSyncGnssTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<268763144L>,
                comms::option::def::ValidNumValue<268763144L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<268763144L>,
                    comms::option::def::ValidNumValue<268763144L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpSyncGnssTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpSyncGnssTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(268763144L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-SYNC_GNSS_TP1"</b> field.
    class TpSyncGnssTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpSyncGnssTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpSyncGnssTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpSyncGnssTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpSyncGnssTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpSyncGnssTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpUseLockedTp1 field.
    struct TpUseLockedTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<268763145L>,
                comms::option::def::ValidNumValue<268763145L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<268763145L>,
                    comms::option::def::ValidNumValue<268763145L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpUseLockedTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpUseLockedTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(268763145L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-USE_LOCKED_TP1"</b> field.
    class TpUseLockedTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpUseLockedTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpUseLockedTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpUseLockedTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpUseLockedTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpUseLockedTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpAlignToTowTp1 field.
    struct TpAlignToTowTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<268763146L>,
                comms::option::def::ValidNumValue<268763146L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<268763146L>,
                    comms::option::def::ValidNumValue<268763146L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpAlignToTowTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpAlignToTowTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(268763146L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-ALIGN_TO_TOW_TP1"</b> field.
    class TpAlignToTowTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpAlignToTowTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpAlignToTowTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpAlignToTowTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpAlignToTowTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpAlignToTowTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpPolTp1 field.
    struct TpPolTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<268763147L>,
                comms::option::def::ValidNumValue<268763147L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<268763147L>,
                    comms::option::def::ValidNumValue<268763147L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpPolTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpPolTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(268763147L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-POL_TP1"</b> field.
    class TpPolTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpPolTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpPolTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpPolTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpPolTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpPolTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TpTimegridTp1 field.
    struct TpTimegridTp1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<537198604L>,
                comms::option::def::ValidNumValue<537198604L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<537198604L>,
                    comms::option::def::ValidNumValue<537198604L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TpTimegridTp1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TpTimegridTp1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(537198604L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValSat<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TP-TIMEGRID_TP1"</b> field.
    class TpTimegridTp1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TpTimegridTp1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TpTimegridTp1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TpTimegridTp1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TpTimegridTp1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TpTimegridTp1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TxreadyEnabled field.
    struct TxreadyEnabledMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279052289L>,
                comms::option::def::ValidNumValue<279052289L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279052289L>,
                    comms::option::def::ValidNumValue<279052289L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyEnabledMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyEnabledMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279052289L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TXREADY-ENABLED"</b> field.
    class TxreadyEnabled : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TxreadyEnabledMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TxreadyEnabledMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyEnabledMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyEnabledMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TxreadyEnabledCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TxreadyPolarity field.
    struct TxreadyPolarityMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<279052290L>,
                comms::option::def::ValidNumValue<279052290L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<279052290L>,
                    comms::option::def::ValidNumValue<279052290L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyPolarityMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyPolarityMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(279052290L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TXREADY-POLARITY"</b> field.
    class TxreadyPolarity : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TxreadyPolarityMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TxreadyPolarityMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyPolarityMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyPolarityMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TxreadyPolarityCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TxreadyPin field.
    struct TxreadyPinMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<547487747L>,
                comms::option::def::ValidNumValue<547487747L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<547487747L>,
                    comms::option::def::ValidNumValue<547487747L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyPinMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyPinMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(547487747L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU1<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TXREADY-PIN"</b> field.
    class TxreadyPin : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TxreadyPinMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TxreadyPinMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyPinMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyPinMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TxreadyPinCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TxreadyThreshold field.
    struct TxreadyThresholdMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<815923204L>,
                comms::option::def::ValidNumValue<815923204L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<815923204L>,
                    comms::option::def::ValidNumValue<815923204L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyThresholdMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyThresholdMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(815923204L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU2<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TXREADY-THRESHOLD"</b> field.
    class TxreadyThreshold : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TxreadyThresholdMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TxreadyThresholdMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyThresholdMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyThresholdMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TxreadyThresholdCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref TxreadyInterface field.
    struct TxreadyInterfaceMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<547487749L>,
                comms::option::def::ValidNumValue<547487749L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<547487749L>,
                    comms::option::def::ValidNumValue<547487749L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(547487749L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        /// @see @ref ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::ValueType
        class Val : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::TxreadyInterfaceMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-TXREADY-INTERFACE"</b> field.
    class TxreadyInterface : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename TxreadyInterfaceMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename TxreadyInterfaceMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyInterfaceMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::TxreadyInterfaceMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::TxreadyInterfaceCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1Baudrate field.
    struct Uart1BaudrateMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1079115777L>,
                comms::option::def::ValidNumValue<1079115777L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1079115777L>,
                    comms::option::def::ValidNumValue<1079115777L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1BaudrateMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1BaudrateMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1079115777L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU4<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1-BAUDRATE"</b> field.
    class Uart1Baudrate : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1BaudrateMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1BaudrateMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1BaudrateMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1BaudrateMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1BaudrateCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1Stopbits field.
    struct Uart1StopbitsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<542244866L>,
                comms::option::def::ValidNumValue<542244866L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<542244866L>,
                    comms::option::def::ValidNumValue<542244866L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1StopbitsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1StopbitsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(542244866L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValUartStopBits<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1-STOPBITS"</b> field.
    class Uart1Stopbits : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1StopbitsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1StopbitsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1StopbitsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1StopbitsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1StopbitsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1Databits field.
    struct Uart1DatabitsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<542244867L>,
                comms::option::def::ValidNumValue<542244867L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<542244867L>,
                    comms::option::def::ValidNumValue<542244867L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1DatabitsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1DatabitsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(542244867L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValUartDataBits<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1-DATABITS"</b> field.
    class Uart1Databits : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1DatabitsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1DatabitsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1DatabitsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1DatabitsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1DatabitsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1Parity field.
    struct Uart1ParityMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<542244868L>,
                comms::option::def::ValidNumValue<542244868L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<542244868L>,
                    comms::option::def::ValidNumValue<542244868L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1ParityMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1ParityMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(542244868L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValUartParity<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1-PARITY"</b> field.
    class Uart1Parity : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1ParityMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1ParityMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1ParityMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1ParityMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1ParityCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1Enabled field.
    struct Uart1EnabledMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<273809413L>,
                comms::option::def::ValidNumValue<273809413L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<273809413L>,
                    comms::option::def::ValidNumValue<273809413L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1EnabledMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1EnabledMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(273809413L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1-ENABLED"</b> field.
    class Uart1Enabled : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1EnabledMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1EnabledMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1EnabledMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1EnabledMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1EnabledCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1inprotUbx field.
    struct Uart1inprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275972097L>,
                comms::option::def::ValidNumValue<275972097L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275972097L>,
                    comms::option::def::ValidNumValue<275972097L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1inprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1inprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275972097L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1INPROT-UBX"</b> field.
    class Uart1inprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1inprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1inprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1inprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1inprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1inprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1inprotNmea field.
    struct Uart1inprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275972098L>,
                comms::option::def::ValidNumValue<275972098L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275972098L>,
                    comms::option::def::ValidNumValue<275972098L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1inprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1inprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275972098L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1INPROT-NMEA"</b> field.
    class Uart1inprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1inprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1inprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1inprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1inprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1inprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1inprotRtcm3x field.
    struct Uart1inprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275972100L>,
                comms::option::def::ValidNumValue<275972100L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275972100L>,
                    comms::option::def::ValidNumValue<275972100L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1inprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1inprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275972100L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1INPROT-RTCM3X"</b> field.
    class Uart1inprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1inprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1inprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1inprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1inprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1inprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1outprotUbx field.
    struct Uart1outprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276037633L>,
                comms::option::def::ValidNumValue<276037633L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276037633L>,
                    comms::option::def::ValidNumValue<276037633L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1outprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1outprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276037633L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1OUTPROT-UBX"</b> field.
    class Uart1outprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1outprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1outprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1outprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1outprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1outprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1outprotNmea field.
    struct Uart1outprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276037634L>,
                comms::option::def::ValidNumValue<276037634L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276037634L>,
                    comms::option::def::ValidNumValue<276037634L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1outprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1outprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276037634L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1OUTPROT-NMEA"</b> field.
    class Uart1outprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1outprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1outprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1outprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1outprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1outprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart1outprotRtcm3x field.
    struct Uart1outprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276037636L>,
                comms::option::def::ValidNumValue<276037636L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276037636L>,
                    comms::option::def::ValidNumValue<276037636L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1outprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart1outprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276037636L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART1OUTPROT-RTCM3X"</b> field.
    class Uart1outprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart1outprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart1outprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1outprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart1outprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart1outprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2Baudrate field.
    struct Uart2BaudrateMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1079181313L>,
                comms::option::def::ValidNumValue<1079181313L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1079181313L>,
                    comms::option::def::ValidNumValue<1079181313L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2BaudrateMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2BaudrateMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1079181313L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU4<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2-BAUDRATE"</b> field.
    class Uart2Baudrate : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2BaudrateMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2BaudrateMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2BaudrateMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2BaudrateMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2BaudrateCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2Stopbits field.
    struct Uart2StopbitsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<542310402L>,
                comms::option::def::ValidNumValue<542310402L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<542310402L>,
                    comms::option::def::ValidNumValue<542310402L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2StopbitsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2StopbitsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(542310402L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValUartStopBits<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2-STOPBITS"</b> field.
    class Uart2Stopbits : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2StopbitsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2StopbitsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2StopbitsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2StopbitsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2StopbitsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2Databits field.
    struct Uart2DatabitsMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<542310403L>,
                comms::option::def::ValidNumValue<542310403L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<542310403L>,
                    comms::option::def::ValidNumValue<542310403L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2DatabitsMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2DatabitsMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(542310403L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValUartDataBits<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2-DATABITS"</b> field.
    class Uart2Databits : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2DatabitsMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2DatabitsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2DatabitsMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2DatabitsMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2DatabitsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2Parity field.
    struct Uart2ParityMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<542310404L>,
                comms::option::def::ValidNumValue<542310404L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<542310404L>,
                    comms::option::def::ValidNumValue<542310404L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2ParityMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2ParityMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(542310404L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValUartParity<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2-PARITY"</b> field.
    class Uart2Parity : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2ParityMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2ParityMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2ParityMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2ParityMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2ParityCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2Enabled field.
    struct Uart2EnabledMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<273874949L>,
                comms::option::def::ValidNumValue<273874949L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<273874949L>,
                    comms::option::def::ValidNumValue<273874949L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2EnabledMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2EnabledMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(273874949L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2-ENABLED"</b> field.
    class Uart2Enabled : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2EnabledMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2EnabledMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2EnabledMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2EnabledMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2EnabledCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2Remap field.
    struct Uart2RemapMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<273874950L>,
                comms::option::def::ValidNumValue<273874950L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<273874950L>,
                    comms::option::def::ValidNumValue<273874950L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2RemapMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2RemapMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(273874950L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2-REMAP"</b> field.
    class Uart2Remap : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2RemapMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2RemapMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2RemapMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2RemapMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2RemapCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2inprotUbx field.
    struct Uart2inprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276103169L>,
                comms::option::def::ValidNumValue<276103169L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276103169L>,
                    comms::option::def::ValidNumValue<276103169L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2inprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2inprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276103169L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2INPROT-UBX"</b> field.
    class Uart2inprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2inprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2inprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2inprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2inprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2inprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2inprotNmea field.
    struct Uart2inprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276103170L>,
                comms::option::def::ValidNumValue<276103170L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276103170L>,
                    comms::option::def::ValidNumValue<276103170L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2inprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2inprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276103170L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2INPROT-NMEA"</b> field.
    class Uart2inprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2inprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2inprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2inprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2inprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2inprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2inprotRtcm3x field.
    struct Uart2inprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276103172L>,
                comms::option::def::ValidNumValue<276103172L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276103172L>,
                    comms::option::def::ValidNumValue<276103172L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2inprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2inprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276103172L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2INPROT-RTCM3X"</b> field.
    class Uart2inprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2inprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2inprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2inprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2inprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2inprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2outprotUbx field.
    struct Uart2outprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276168705L>,
                comms::option::def::ValidNumValue<276168705L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276168705L>,
                    comms::option::def::ValidNumValue<276168705L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2outprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2outprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276168705L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2OUTPROT-UBX"</b> field.
    class Uart2outprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2outprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2outprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2outprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2outprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2outprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2outprotNmea field.
    struct Uart2outprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276168706L>,
                comms::option::def::ValidNumValue<276168706L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276168706L>,
                    comms::option::def::ValidNumValue<276168706L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2outprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2outprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276168706L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2OUTPROT-NMEA"</b> field.
    class Uart2outprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2outprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2outprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2outprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2outprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2outprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Uart2outprotRtcm3x field.
    struct Uart2outprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276168708L>,
                comms::option::def::ValidNumValue<276168708L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276168708L>,
                    comms::option::def::ValidNumValue<276168708L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2outprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::Uart2outprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276168708L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-UART2OUTPROT-RTCM3X"</b> field.
    class Uart2outprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename Uart2outprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename Uart2outprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2outprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::Uart2outprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::Uart2outprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbEnabled field.
    struct UsbEnabledMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275054593L>,
                comms::option::def::ValidNumValue<275054593L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275054593L>,
                    comms::option::def::ValidNumValue<275054593L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbEnabledMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbEnabledMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275054593L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-ENABLED"</b> field.
    class UsbEnabled : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbEnabledMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbEnabledMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbEnabledMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbEnabledMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbEnabledCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbSelfpow field.
    struct UsbSelfpowMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<275054594L>,
                comms::option::def::ValidNumValue<275054594L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<275054594L>,
                    comms::option::def::ValidNumValue<275054594L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSelfpowMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSelfpowMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(275054594L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-SELFPOW"</b> field.
    class UsbSelfpow : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbSelfpowMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbSelfpowMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSelfpowMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSelfpowMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbSelfpowCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbVendorId field.
    struct UsbVendorIdMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<811925514L>,
                comms::option::def::ValidNumValue<811925514L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<811925514L>,
                    comms::option::def::ValidNumValue<811925514L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorIdMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorIdMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(811925514L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU2<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-VENDOR_ID"</b> field.
    class UsbVendorId : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbVendorIdMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbVendorIdMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorIdMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorIdMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbVendorIdCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbProductId field.
    struct UsbProductIdMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<811925515L>,
                comms::option::def::ValidNumValue<811925515L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<811925515L>,
                    comms::option::def::ValidNumValue<811925515L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductIdMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductIdMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(811925515L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValU2<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-PRODUCT_ID"</b> field.
    class UsbProductId : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbProductIdMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbProductIdMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductIdMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductIdMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbProductIdCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbPower field.
    struct UsbPowerMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<811925516L>,
                comms::option::def::ValidNumValue<811925516L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<811925516L>,
                    comms::option::def::ValidNumValue<811925516L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbPowerMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbPowerMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(811925516L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        class Val : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsMilliamps
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsMilliamps
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbPowerMembersCommon::ValCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbPowerMembersCommon::ValCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-POWER"</b> field.
    class UsbPower : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbPowerMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbPowerMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbPowerMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbPowerMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbPowerCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbVendorStr0 field.
    struct UsbVendorStr0Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796429L>,
                comms::option::def::ValidNumValue<1348796429L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796429L>,
                    comms::option::def::ValidNumValue<1348796429L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorStr0MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorStr0MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796429L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-VENDOR_STR0"</b> field.
    class UsbVendorStr0 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbVendorStr0Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbVendorStr0Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorStr0Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorStr0Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbVendorStr0Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbVendorStr1 field.
    struct UsbVendorStr1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796430L>,
                comms::option::def::ValidNumValue<1348796430L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796430L>,
                    comms::option::def::ValidNumValue<1348796430L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorStr1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorStr1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796430L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-VENDOR_STR1"</b> field.
    class UsbVendorStr1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbVendorStr1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbVendorStr1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorStr1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorStr1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbVendorStr1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbVendorStr2 field.
    struct UsbVendorStr2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796431L>,
                comms::option::def::ValidNumValue<1348796431L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796431L>,
                    comms::option::def::ValidNumValue<1348796431L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorStr2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorStr2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796431L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-VENDOR_STR2"</b> field.
    class UsbVendorStr2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbVendorStr2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbVendorStr2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorStr2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorStr2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbVendorStr2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbVendorStr3 field.
    struct UsbVendorStr3Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796432L>,
                comms::option::def::ValidNumValue<1348796432L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796432L>,
                    comms::option::def::ValidNumValue<1348796432L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorStr3MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbVendorStr3MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796432L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-VENDOR_STR3"</b> field.
    class UsbVendorStr3 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbVendorStr3Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbVendorStr3Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorStr3Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbVendorStr3Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbVendorStr3Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbProductStr0 field.
    struct UsbProductStr0Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796433L>,
                comms::option::def::ValidNumValue<1348796433L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796433L>,
                    comms::option::def::ValidNumValue<1348796433L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductStr0MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductStr0MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796433L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-PRODUCT_STR0"</b> field.
    class UsbProductStr0 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbProductStr0Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbProductStr0Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductStr0Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductStr0Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbProductStr0Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbProductStr1 field.
    struct UsbProductStr1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796434L>,
                comms::option::def::ValidNumValue<1348796434L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796434L>,
                    comms::option::def::ValidNumValue<1348796434L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductStr1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductStr1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796434L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-PRODUCT_STR1"</b> field.
    class UsbProductStr1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbProductStr1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbProductStr1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductStr1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductStr1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbProductStr1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbProductStr2 field.
    struct UsbProductStr2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796435L>,
                comms::option::def::ValidNumValue<1348796435L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796435L>,
                    comms::option::def::ValidNumValue<1348796435L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductStr2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductStr2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796435L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-PRODUCT_STR2"</b> field.
    class UsbProductStr2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbProductStr2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbProductStr2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductStr2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductStr2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbProductStr2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbProductStr3 field.
    struct UsbProductStr3Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796436L>,
                comms::option::def::ValidNumValue<1348796436L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796436L>,
                    comms::option::def::ValidNumValue<1348796436L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductStr3MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbProductStr3MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796436L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-PRODUCT_STR3"</b> field.
    class UsbProductStr3 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbProductStr3Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbProductStr3Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductStr3Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbProductStr3Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbProductStr3Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbSerialNoStr0 field.
    struct UsbSerialNoStr0Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796437L>,
                comms::option::def::ValidNumValue<1348796437L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796437L>,
                    comms::option::def::ValidNumValue<1348796437L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr0MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr0MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796437L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-SERIAL_NO_STR0"</b> field.
    class UsbSerialNoStr0 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbSerialNoStr0Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbSerialNoStr0Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSerialNoStr0Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSerialNoStr0Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr0Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbSerialNoStr1 field.
    struct UsbSerialNoStr1Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796438L>,
                comms::option::def::ValidNumValue<1348796438L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796438L>,
                    comms::option::def::ValidNumValue<1348796438L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr1MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr1MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796438L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-SERIAL_NO_STR1"</b> field.
    class UsbSerialNoStr1 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbSerialNoStr1Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbSerialNoStr1Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSerialNoStr1Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSerialNoStr1Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbSerialNoStr2 field.
    struct UsbSerialNoStr2Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796439L>,
                comms::option::def::ValidNumValue<1348796439L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796439L>,
                    comms::option::def::ValidNumValue<1348796439L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr2MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr2MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796439L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-SERIAL_NO_STR2"</b> field.
    class UsbSerialNoStr2 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbSerialNoStr2Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbSerialNoStr2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSerialNoStr2Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSerialNoStr2Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbSerialNoStr3 field.
    struct UsbSerialNoStr3Members
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1348796440L>,
                comms::option::def::ValidNumValue<1348796440L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<1348796440L>,
                    comms::option::def::ValidNumValue<1348796440L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr3MembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr3MembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(1348796440L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValData8<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USB-SERIAL_NO_STR3"</b> field.
    class UsbSerialNoStr3 : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbSerialNoStr3Members::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbSerialNoStr3Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSerialNoStr3Members::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbSerialNoStr3Members::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbSerialNoStr3Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbinprotUbx field.
    struct UsbinprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276234241L>,
                comms::option::def::ValidNumValue<276234241L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276234241L>,
                    comms::option::def::ValidNumValue<276234241L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbinprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbinprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276234241L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USBINPROT-UBX"</b> field.
    class UsbinprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbinprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbinprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbinprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbinprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbinprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbinprotNmea field.
    struct UsbinprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276234242L>,
                comms::option::def::ValidNumValue<276234242L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276234242L>,
                    comms::option::def::ValidNumValue<276234242L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbinprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbinprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276234242L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USBINPROT-NMEA"</b> field.
    class UsbinprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbinprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbinprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbinprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbinprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbinprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsbinprotRtcm3x field.
    struct UsbinprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276234244L>,
                comms::option::def::ValidNumValue<276234244L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276234244L>,
                    comms::option::def::ValidNumValue<276234244L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsbinprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsbinprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276234244L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USBINPROT-RTCM3X"</b> field.
    class UsbinprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsbinprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsbinprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsbinprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsbinprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsbinprotRtcm3xCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsboutprotUbx field.
    struct UsboutprotUbxMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276299777L>,
                comms::option::def::ValidNumValue<276299777L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276299777L>,
                    comms::option::def::ValidNumValue<276299777L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsboutprotUbxMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsboutprotUbxMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276299777L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USBOUTPROT-UBX"</b> field.
    class UsboutprotUbx : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsboutprotUbxMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsboutprotUbxMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsboutprotUbxMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsboutprotUbxMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsboutprotUbxCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsboutprotNmea field.
    struct UsboutprotNmeaMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276299778L>,
                comms::option::def::ValidNumValue<276299778L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276299778L>,
                    comms::option::def::ValidNumValue<276299778L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsboutprotNmeaMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsboutprotNmeaMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276299778L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USBOUTPROT-NMEA"</b> field.
    class UsboutprotNmea : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsboutprotNmeaMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsboutprotNmeaMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsboutprotNmeaMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsboutprotNmeaMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsboutprotNmeaCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref UsboutprotRtcm3x field.
    struct UsboutprotRtcm3xMembers
    {
        /// @brief Definition of <b>"Key"</b> field.
        class Key : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<276299780L>,
                comms::option::def::ValidNumValue<276299780L>,
                comms::option::def::HasCustomRefresh
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FailOnInvalid<>,
                    comms::option::def::DefaultNumValue<276299780L>,
                    comms::option::def::ValidNumValue<276299780L>,
                    comms::option::def::HasCustomRefresh
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::field::CfgValPairMembersCommon::UsboutprotRtcm3xMembersCommon::KeyCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::field::CfgValPairMembersCommon::UsboutprotRtcm3xMembersCommon::KeyCommon::name();
            }

            /// @brief Generated refresh functionality.
            bool refresh()
            {
                bool updated = Base::refresh();
                if (Base::valid()) {
                    return updated;
                };
                Base::setValue(276299780L);
                return true;
            }
        };

        /// @brief Definition of <b>"Val"</b> field.
        using Val =
            ublox::field::CfgValL<
                TOpt
            >;

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Key,
               Val
            >;
    };

    /// @brief Definition of <b>"CFG-USBOUTPROT-RTCM3X"</b> field.
    class UsboutprotRtcm3x : public
        comms::field::Bundle<
            ublox::field::FieldBase<>,
            typename UsboutprotRtcm3xMembers::All
        >
    {
        using Base =
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename UsboutprotRtcm3xMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bundle class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_key index, @b Field_key type and @b field_key() access function -
        ///         for ublox::field::CfgValPairMembers::UsboutprotRtcm3xMembers::Key member field.
        ///     @li @b FieldIdx_val index, @b Field_val type and @b field_val() access function -
        ///         for ublox::field::CfgValPairMembers::UsboutprotRtcm3xMembers::Val member field.
        COMMS_FIELD_MEMBERS_NAMES(
            key,
            val
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::field::CfgValPairMembersCommon::UsboutprotRtcm3xCommon::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           BdsUsePrn1to5,
           GeofenceConflvl,
           GeofenceUsePio,
           GeofencePinpol,
           GeofenceUseFence1,
           GeofenceFence1Lat,
           GeofenceFence1Lon,
           GeofenceFence1Rad,
           GeofenceUseFence2,
           GeofenceFence2Lat,
           GeofenceFence2Lon,
           GeofenceFence2Rad,
           GeofenceUseFence3,
           GeofenceFence3Lat,
           GeofenceFence3Lon,
           GeofenceFence3Rad,
           GeofenceUseFence4,
           GeofenceFence4Lat,
           GeofenceFence4Lon,
           GeofenceFence4Rad,
           HwAntCfgValctrl,
           HwAntCfgShortdet,
           HwAntCfgShortdetPol,
           HwAntCfgOpendet,
           HwAntCfgOpendetPol,
           HwAntCfgPwrdown,
           HwAntCfgPwrdownPol,
           HwAntCfgRecover,
           HwAntSupSwitchPin,
           HwAntSupShortPin,
           HwAntSupOpenPin,
           HwAntSupEngine,
           HwAntSupShortThr,
           HwAntSupOpenThr,
           I2cAddress,
           I2cExtendedtimeout,
           I2cEnabled,
           I2cInprotUbx,
           I2cInprotNmea,
           I2cInprotRtcm3x,
           I2cOutprotUbx,
           I2cOutprotNmea,
           I2cOutprotRtcm3x,
           InfmsgUbxI2c,
           InfmsgUbxUart1,
           InfmsgUbxUart2,
           InfmsgUbxUsb,
           InfmsgUbxSpi,
           InfmsgNmeaI2c,
           InfmsgNmeaUart1,
           InfmsgNmeaUart2,
           InfmsgNmeaUsb,
           InfmsgNmeaSpi,
           ItfmBbThreshold,
           ItfmCwThreshold,
           ItfmEnable,
           ItfmAntSetting,
           LogfilterRecordEna,
           LogfilterOncePerWakeUpEna,
           LogfilterApplyAllFilters,
           LogfilterMinInterval,
           LogfilterTimeThrs,
           LogfilterSpeedThrs,
           LogfilterPositionThrs,
           MotGnssSpeedThrs,
           MotGnssDistThrs,
           MsgoutNmeaIdDtmI2c,
           MsgoutNmeaIdDtmSpi,
           MsgoutNmeaIdDtmUart1,
           MsgoutNmeaIdDtmUart2,
           MsgoutNmeaIdDtmUsb,
           MsgoutNmeaIdGbsI2c,
           MsgoutNmeaIdGbsSpi,
           MsgoutNmeaIdGbsUart1,
           MsgoutNmeaIdGbsUart2,
           MsgoutNmeaIdGbsUsb,
           MsgoutNmeaIdGgaI2c,
           MsgoutNmeaIdGgaSpi,
           MsgoutNmeaIdGgaUart1,
           MsgoutNmeaIdGgaUart2,
           MsgoutNmeaIdGgaUsb,
           MsgoutNmeaIdGllI2c,
           MsgoutNmeaIdGllSpi,
           MsgoutNmeaIdGllUart1,
           MsgoutNmeaIdGllUart2,
           MsgoutNmeaIdGllUsb,
           MsgoutNmeaIdGnsI2c,
           MsgoutNmeaIdGnsSpi,
           MsgoutNmeaIdGnsUart1,
           MsgoutNmeaIdGnsUart2,
           MsgoutNmeaIdGnsUsb,
           MsgoutNmeaIdGrsI2c,
           MsgoutNmeaIdGrsSpi,
           MsgoutNmeaIdGrsUart1,
           MsgoutNmeaIdGrsUart2,
           MsgoutNmeaIdGrsUsb,
           MsgoutNmeaIdGsaI2c,
           MsgoutNmeaIdGsaSpi,
           MsgoutNmeaIdGsaUart1,
           MsgoutNmeaIdGsaUart2,
           MsgoutNmeaIdGsaUsb,
           MsgoutNmeaIdGstI2c,
           MsgoutNmeaIdGstSpi,
           MsgoutNmeaIdGstUart1,
           MsgoutNmeaIdGstUart2,
           MsgoutNmeaIdGstUsb,
           MsgoutNmeaIdGsvI2c,
           MsgoutNmeaIdGsvSpi,
           MsgoutNmeaIdGsvUart1,
           MsgoutNmeaIdGsvUart2,
           MsgoutNmeaIdGsvUsb,
           MsgoutNmeaIdRlmI2c,
           MsgoutNmeaIdRlmSpi,
           MsgoutNmeaIdRlmUart1,
           MsgoutNmeaIdRlmUart2,
           MsgoutNmeaIdRlmUsb,
           MsgoutNmeaIdRmcI2c,
           MsgoutNmeaIdRmcSpi,
           MsgoutNmeaIdRmcUart1,
           MsgoutNmeaIdRmcUart2,
           MsgoutNmeaIdRmcUsb,
           MsgoutNmeaIdVlwI2c,
           MsgoutNmeaIdVlwSpi,
           MsgoutNmeaIdVlwUart1,
           MsgoutNmeaIdVlwUart2,
           MsgoutNmeaIdVlwUsb,
           MsgoutNmeaIdVtgI2c,
           MsgoutNmeaIdVtgSpi,
           MsgoutNmeaIdVtgUart1,
           MsgoutNmeaIdVtgUart2,
           MsgoutNmeaIdVtgUsb,
           MsgoutNmeaIdZdaI2c,
           MsgoutNmeaIdZdaSpi,
           MsgoutNmeaIdZdaUart1,
           MsgoutNmeaIdZdaUart2,
           MsgoutNmeaIdZdaUsb,
           MsgoutPubxIdPolypI2c,
           MsgoutPubxIdPolypSpi,
           MsgoutPubxIdPolypUart1,
           MsgoutPubxIdPolypUart2,
           MsgoutPubxIdPolypUsb,
           MsgoutPubxIdPolysI2c,
           MsgoutPubxIdPolysSpi,
           MsgoutPubxIdPolysUart1,
           MsgoutPubxIdPolysUart2,
           MsgoutPubxIdPolysUsb,
           MsgoutPubxIdPolytI2c,
           MsgoutPubxIdPolytSpi,
           MsgoutPubxIdPolytUart1,
           MsgoutPubxIdPolytUart2,
           MsgoutPubxIdPolytUsb,
           MsgoutRtcm3xType1005I2c,
           MsgoutRtcm3xType1005Spi,
           MsgoutRtcm3xType1005Uart1,
           MsgoutRtcm3xType1005Uart2,
           MsgoutRtcm3xType1005Usb,
           MsgoutRtcm3xType1074I2c,
           MsgoutRtcm3xType1074Spi,
           MsgoutRtcm3xType1074Uart1,
           MsgoutRtcm3xType1074Uart2,
           MsgoutRtcm3xType1074Usb,
           MsgoutRtcm3xType1077I2c,
           MsgoutRtcm3xType1077Spi,
           MsgoutRtcm3xType1077Uart1,
           MsgoutRtcm3xType1077Uart2,
           MsgoutRtcm3xType1077Usb,
           MsgoutRtcm3xType1084I2c,
           MsgoutRtcm3xType1084Spi,
           MsgoutRtcm3xType1084Uart1,
           MsgoutRtcm3xType1084Uart2,
           MsgoutRtcm3xType1084Usb,
           MsgoutRtcm3xType1087I2c,
           MsgoutRtcm3xType1087Spi,
           MsgoutRtcm3xType1087Uart1,
           MsgoutRtcm3xType1087Uart2,
           MsgoutRtcm3xType1087Usb,
           MsgoutRtcm3xType1094I2c,
           MsgoutRtcm3xType1094Spi,
           MsgoutRtcm3xType1094Uart1,
           MsgoutRtcm3xType1094Uart2,
           MsgoutRtcm3xType1094Usb,
           MsgoutRtcm3xType1097I2c,
           MsgoutRtcm3xType1097Spi,
           MsgoutRtcm3xType1097Uart1,
           MsgoutRtcm3xType1097Uart2,
           MsgoutRtcm3xType1097Usb,
           MsgoutRtcm3xType1124I2c,
           MsgoutRtcm3xType1124Spi,
           MsgoutRtcm3xType1124Uart1,
           MsgoutRtcm3xType1124Uart2,
           MsgoutRtcm3xType1124Usb,
           MsgoutRtcm3xType1127I2c,
           MsgoutRtcm3xType1127Spi,
           MsgoutRtcm3xType1127Uart1,
           MsgoutRtcm3xType1127Uart2,
           MsgoutRtcm3xType1127Usb,
           MsgoutRtcm3xType1230I2c,
           MsgoutRtcm3xType1230Spi,
           MsgoutRtcm3xType1230Uart1,
           MsgoutRtcm3xType1230Uart2,
           MsgoutRtcm3xType1230Usb,
           MsgoutRtcm3xType4072_0I2c,
           MsgoutRtcm3xType4072_0Spi,
           MsgoutRtcm3xType4072_0Uart1,
           MsgoutRtcm3xType4072_0Uart2,
           MsgoutRtcm3xType4072_0Usb,
           MsgoutRtcm3xType4072_1I2c,
           MsgoutRtcm3xType4072_1Spi,
           MsgoutRtcm3xType4072_1Uart1,
           MsgoutRtcm3xType4072_1Uart2,
           MsgoutRtcm3xType4072_1Usb,
           MsgoutUbxLogInfoI2c,
           MsgoutUbxLogInfoSpi,
           MsgoutUbxLogInfoUart1,
           MsgoutUbxLogInfoUart2,
           MsgoutUbxLogInfoUsb,
           MsgoutUbxMonCommsI2c,
           MsgoutUbxMonCommsSpi,
           MsgoutUbxMonCommsUart1,
           MsgoutUbxMonCommsUart2,
           MsgoutUbxMonCommsUsb,
           MsgoutUbxMonHw2I2c,
           MsgoutUbxMonHw2Spi,
           MsgoutUbxMonHw2Uart1,
           MsgoutUbxMonHw2Uart2,
           MsgoutUbxMonHw2Usb,
           MsgoutUbxMonHw3I2c,
           MsgoutUbxMonHw3Spi,
           MsgoutUbxMonHw3Uart1,
           MsgoutUbxMonHw3Uart2,
           MsgoutUbxMonHw3Usb,
           MsgoutUbxMonHwI2c,
           MsgoutUbxMonHwSpi,
           MsgoutUbxMonHwUart1,
           MsgoutUbxMonHwUart2,
           MsgoutUbxMonHwUsb,
           MsgoutUbxMonIoI2c,
           MsgoutUbxMonIoSpi,
           MsgoutUbxMonIoUart1,
           MsgoutUbxMonIoUart2,
           MsgoutUbxMonIoUsb,
           MsgoutUbxMonMsgppI2c,
           MsgoutUbxMonMsgppSpi,
           MsgoutUbxMonMsgppUart1,
           MsgoutUbxMonMsgppUart2,
           MsgoutUbxMonMsgppUsb,
           MsgoutUbxMonRfI2c,
           MsgoutUbxMonRfSpi,
           MsgoutUbxMonRfUart1,
           MsgoutUbxMonRfUart2,
           MsgoutUbxMonRfUsb,
           MsgoutUbxMonRxbufI2c,
           MsgoutUbxMonRxbufSpi,
           MsgoutUbxMonRxbufUart1,
           MsgoutUbxMonRxbufUart2,
           MsgoutUbxMonRxbufUsb,
           MsgoutUbxMonRxrI2c,
           MsgoutUbxMonRxrSpi,
           MsgoutUbxMonRxrUart1,
           MsgoutUbxMonRxrUart2,
           MsgoutUbxMonRxrUsb,
           MsgoutUbxMonSpanI2c,
           MsgoutUbxMonSpanSpi,
           MsgoutUbxMonSpanUart1,
           MsgoutUbxMonSpanUart2,
           MsgoutUbxMonSpanUsb,
           MsgoutUbxMonTxbufI2c,
           MsgoutUbxMonTxbufSpi,
           MsgoutUbxMonTxbufUart1,
           MsgoutUbxMonTxbufUart2,
           MsgoutUbxMonTxbufUsb,
           MsgoutUbxNavClockI2c,
           MsgoutUbxNavClockSpi,
           MsgoutUbxNavClockUart1,
           MsgoutUbxNavClockUart2,
           MsgoutUbxNavClockUsb,
           MsgoutUbxNavDopI2c,
           MsgoutUbxNavDopSpi,
           MsgoutUbxNavDopUart1,
           MsgoutUbxNavDopUart2,
           MsgoutUbxNavDopUsb,
           MsgoutUbxNavEoeI2c,
           MsgoutUbxNavEoeSpi,
           MsgoutUbxNavEoeUart1,
           MsgoutUbxNavEoeUart2,
           MsgoutUbxNavEoeUsb,
           MsgoutUbxNavGeofenceI2c,
           MsgoutUbxNavGeofenceSpi,
           MsgoutUbxNavGeofenceUart1,
           MsgoutUbxNavGeofenceUart2,
           MsgoutUbxNavGeofenceUsb,
           MsgoutUbxNavHpposecefI2c,
           MsgoutUbxNavHpposecefSpi,
           MsgoutUbxNavHpposecefUart1,
           MsgoutUbxNavHpposecefUart2,
           MsgoutUbxNavHpposecefUsb,
           MsgoutUbxNavHpposllhI2c,
           MsgoutUbxNavHpposllhSpi,
           MsgoutUbxNavHpposllhUart1,
           MsgoutUbxNavHpposllhUart2,
           MsgoutUbxNavHpposllhUsb,
           MsgoutUbxNavOdoI2c,
           MsgoutUbxNavOdoSpi,
           MsgoutUbxNavOdoUart1,
           MsgoutUbxNavOdoUart2,
           MsgoutUbxNavOdoUsb,
           MsgoutUbxNavOrbI2c,
           MsgoutUbxNavOrbSpi,
           MsgoutUbxNavOrbUart1,
           MsgoutUbxNavOrbUart2,
           MsgoutUbxNavOrbUsb,
           MsgoutUbxNavPosecefI2c,
           MsgoutUbxNavPosecefSpi,
           MsgoutUbxNavPosecefUart1,
           MsgoutUbxNavPosecefUart2,
           MsgoutUbxNavPosecefUsb,
           MsgoutUbxNavPosllhI2c,
           MsgoutUbxNavPosllhSpi,
           MsgoutUbxNavPosllhUart1,
           MsgoutUbxNavPosllhUart2,
           MsgoutUbxNavPosllhUsb,
           MsgoutUbxNavPvtI2c,
           MsgoutUbxNavPvtSpi,
           MsgoutUbxNavPvtUart1,
           MsgoutUbxNavPvtUart2,
           MsgoutUbxNavPvtUsb,
           MsgoutUbxNavRelposnedI2c,
           MsgoutUbxNavRelposnedSpi,
           MsgoutUbxNavRelposnedUart1,
           MsgoutUbxNavRelposnedUart2,
           MsgoutUbxNavRelposnedUsb,
           MsgoutUbxNavSatI2c,
           MsgoutUbxNavSatSpi,
           MsgoutUbxNavSatUart1,
           MsgoutUbxNavSatUart2,
           MsgoutUbxNavSatUsb,
           MsgoutUbxNavSbasI2c,
           MsgoutUbxNavSbasSpi,
           MsgoutUbxNavSbasUart1,
           MsgoutUbxNavSbasUart2,
           MsgoutUbxNavSbasUsb,
           MsgoutUbxNavSigI2c,
           MsgoutUbxNavSigSpi,
           MsgoutUbxNavSigUart1,
           MsgoutUbxNavSigUart2,
           MsgoutUbxNavSigUsb,
           MsgoutUbxNavSlasI2c,
           MsgoutUbxNavSlasSpi,
           MsgoutUbxNavSlasUart1,
           MsgoutUbxNavSlasUart2,
           MsgoutUbxNavSlasUsb,
           MsgoutUbxNavStatusI2c,
           MsgoutUbxNavStatusSpi,
           MsgoutUbxNavStatusUart1,
           MsgoutUbxNavStatusUart2,
           MsgoutUbxNavStatusUsb,
           MsgoutUbxNavSvinI2c,
           MsgoutUbxNavSvinSpi,
           MsgoutUbxNavSvinUart1,
           MsgoutUbxNavSvinUart2,
           MsgoutUbxNavSvinUsb,
           MsgoutUbxNavTimebdsI2c,
           MsgoutUbxNavTimebdsSpi,
           MsgoutUbxNavTimebdsUart1,
           MsgoutUbxNavTimebdsUart2,
           MsgoutUbxNavTimebdsUsb,
           MsgoutUbxNavTimegalI2c,
           MsgoutUbxNavTimegalSpi,
           MsgoutUbxNavTimegalUart1,
           MsgoutUbxNavTimegalUart2,
           MsgoutUbxNavTimegalUsb,
           MsgoutUbxNavTimegloI2c,
           MsgoutUbxNavTimegloSpi,
           MsgoutUbxNavTimegloUart1,
           MsgoutUbxNavTimegloUart2,
           MsgoutUbxNavTimegloUsb,
           MsgoutUbxNavTimegpsI2c,
           MsgoutUbxNavTimegpsSpi,
           MsgoutUbxNavTimegpsUart1,
           MsgoutUbxNavTimegpsUart2,
           MsgoutUbxNavTimegpsUsb,
           MsgoutUbxNavTimelsI2c,
           MsgoutUbxNavTimelsSpi,
           MsgoutUbxNavTimelsUart1,
           MsgoutUbxNavTimelsUart2,
           MsgoutUbxNavTimelsUsb,
           MsgoutUbxNavTimeqzssI2c,
           MsgoutUbxNavTimeqzssSpi,
           MsgoutUbxNavTimeqzssUart1,
           MsgoutUbxNavTimeqzssUart2,
           MsgoutUbxNavTimeqzssUsb,
           MsgoutUbxNavTimeutcI2c,
           MsgoutUbxNavTimeutcSpi,
           MsgoutUbxNavTimeutcUart1,
           MsgoutUbxNavTimeutcUart2,
           MsgoutUbxNavTimeutcUsb,
           MsgoutUbxNavVelecefI2c,
           MsgoutUbxNavVelecefSpi,
           MsgoutUbxNavVelecefUart1,
           MsgoutUbxNavVelecefUart2,
           MsgoutUbxNavVelecefUsb,
           MsgoutUbxNavVelnedI2c,
           MsgoutUbxNavVelnedSpi,
           MsgoutUbxNavVelnedUart1,
           MsgoutUbxNavVelnedUart2,
           MsgoutUbxNavVelnedUsb,
           MsgoutUbxRxmMeasxI2c,
           MsgoutUbxRxmMeasxSpi,
           MsgoutUbxRxmMeasxUart1,
           MsgoutUbxRxmMeasxUart2,
           MsgoutUbxRxmMeasxUsb,
           MsgoutUbxRxmRawxI2c,
           MsgoutUbxRxmRawxSpi,
           MsgoutUbxRxmRawxUart1,
           MsgoutUbxRxmRawxUart2,
           MsgoutUbxRxmRawxUsb,
           MsgoutUbxRxmRlmI2c,
           MsgoutUbxRxmRlmSpi,
           MsgoutUbxRxmRlmUart1,
           MsgoutUbxRxmRlmUart2,
           MsgoutUbxRxmRlmUsb,
           MsgoutUbxRxmRtcmI2c,
           MsgoutUbxRxmRtcmSpi,
           MsgoutUbxRxmRtcmUart1,
           MsgoutUbxRxmRtcmUart2,
           MsgoutUbxRxmRtcmUsb,
           MsgoutUbxRxmSfrbxI2c,
           MsgoutUbxRxmSfrbxSpi,
           MsgoutUbxRxmSfrbxUart1,
           MsgoutUbxRxmSfrbxUart2,
           MsgoutUbxRxmSfrbxUsb,
           MsgoutUbxTimTm2I2c,
           MsgoutUbxTimTm2Spi,
           MsgoutUbxTimTm2Uart1,
           MsgoutUbxTimTm2Uart2,
           MsgoutUbxTimTm2Usb,
           MsgoutUbxTimTpI2c,
           MsgoutUbxTimTpSpi,
           MsgoutUbxTimTpUart1,
           MsgoutUbxTimTpUart2,
           MsgoutUbxTimTpUsb,
           MsgoutUbxTimVrfyI2c,
           MsgoutUbxTimVrfySpi,
           MsgoutUbxTimVrfyUart1,
           MsgoutUbxTimVrfyUart2,
           MsgoutUbxTimVrfyUsb,
           NavhpgDgnssmode,
           NavspgFixmode,
           NavspgInifix3d,
           NavspgWknrollover,
           NavspgUtcstandard,
           NavspgDynmodel,
           NavspgAckaiding,
           NavspgUseUsrdat,
           NavspgUsrdatMaja,
           NavspgUsrdatFlat,
           NavspgUsrdatDx,
           NavspgUsrdatDy,
           NavspgUsrdatDz,
           NavspgUsrdatRotx,
           NavspgUsrdatRoty,
           NavspgUsrdatRotz,
           NavspgUsrdatScale,
           NavspgInfilMinsvs,
           NavspgInfilMaxsvs,
           NavspgInfilMincno,
           NavspgInfilMinelev,
           NavspgInfilNcnothrs,
           NavspgInfilCnothrs,
           NavspgOutfilPdop,
           NavspgOutfilTdop,
           NavspgOutfilPacc,
           NavspgOutfilTacc,
           NavspgOutfilFacc,
           NavspgConstrAlt,
           NavspgConstrAltvar,
           NavspgConstrDgnssto,
           NmeaProtver,
           NmeaMaxsvs,
           NmeaCompat,
           NmeaConsider,
           NmeaLimit82,
           NmeaHighprec,
           NmeaSvnumbering,
           NmeaFiltGps,
           NmeaFiltSbas,
           NmeaFiltGal,
           NmeaFiltQzss,
           NmeaFiltGlo,
           NmeaFiltBds,
           NmeaOutInvfix,
           NmeaOutMskfix,
           NmeaOutInvtime,
           NmeaOutInvdate,
           NmeaOutOnlygps,
           NmeaOutFrozencog,
           NmeaOutMaintalkerid,
           OdoUseOdo,
           OdoUseCog,
           OdoOutlpvel,
           OdoOutlpcog,
           OdoProfile,
           OdoCogmaxspeed,
           OdoCogmaxposacc,
           OdoVellpgain,
           OdoCoglpgain,
           QzssUseSlasDgnss,
           QzssUseSlasTestmode,
           QzssUseSlasRaimUncorr,
           RateMeas,
           RateNav,
           RateTimeref,
           RinvDump,
           RinvBinary,
           RinvDataSize,
           RinvChunk0,
           RinvChunk1,
           RinvChunk2,
           RinvChunk3,
           RtcmDf003Out,
           RtcmDf003In,
           RtcmDf003InFilter,
           SbasUseTestmode,
           SbasUseRanging,
           SbasUseDiffcorr,
           SbasUseIntegrity,
           SbasPrnscanmask,
           SignalGpsEna,
           SignalGpsL1caEna,
           SignalGpsL2cEna,
           SignalSbasEna,
           SignalSbasL1caEna,
           SignalGalEna,
           SignalGalE1Ena,
           SignalGalE5bEna,
           SignalBdsEna,
           SignalBdsB1Ena,
           SignalBdsB2Ena,
           SignalQzssEna,
           SignalQzssL1caEna,
           SignalQzssL1sEna,
           SignalQzssL2cEna,
           SignalGloEna,
           SignalGloL1Ena,
           SignalGloL2Ena,
           SpiMaxff,
           SpiCpolarity,
           SpiCphase,
           SpiExtendedtimeout,
           SpiEnabled,
           SpiinprotUbx,
           SpiinprotNmea,
           SpiinprotRtcm3x,
           SpioutprotUbx,
           SpioutprotNmea,
           SpioutprotRtcm3x,
           TmodeMode,
           TmodePosType,
           TmodeEcefX,
           TmodeEcefY,
           TmodeEcefZ,
           TmodeEcefXHp,
           TmodeEcefYHp,
           TmodeEcefZHp,
           TmodeLat,
           TmodeLon,
           TmodeHeight,
           TmodeLatHp,
           TmodeLonHp,
           TmodeHeightHp,
           TmodeFixedPosAcc,
           TmodeSvinMinDur,
           TmodeSvinAccLimit,
           TpPulseDef,
           TpPulseLengthDef,
           TpAntCabledelay,
           TpPeriodTp1,
           TpPeriodLockTp1,
           TpFreqTp1,
           TpFreqLockTp1,
           TpLenTp1,
           TpLenLockTp1,
           TpDutyTp1,
           TpDutyLockTp1,
           TpUserDelayTp1,
           TpTp1Ena,
           TpSyncGnssTp1,
           TpUseLockedTp1,
           TpAlignToTowTp1,
           TpPolTp1,
           TpTimegridTp1,
           TxreadyEnabled,
           TxreadyPolarity,
           TxreadyPin,
           TxreadyThreshold,
           TxreadyInterface,
           Uart1Baudrate,
           Uart1Stopbits,
           Uart1Databits,
           Uart1Parity,
           Uart1Enabled,
           Uart1inprotUbx,
           Uart1inprotNmea,
           Uart1inprotRtcm3x,
           Uart1outprotUbx,
           Uart1outprotNmea,
           Uart1outprotRtcm3x,
           Uart2Baudrate,
           Uart2Stopbits,
           Uart2Databits,
           Uart2Parity,
           Uart2Enabled,
           Uart2Remap,
           Uart2inprotUbx,
           Uart2inprotNmea,
           Uart2inprotRtcm3x,
           Uart2outprotUbx,
           Uart2outprotNmea,
           Uart2outprotRtcm3x,
           UsbEnabled,
           UsbSelfpow,
           UsbVendorId,
           UsbProductId,
           UsbPower,
           UsbVendorStr0,
           UsbVendorStr1,
           UsbVendorStr2,
           UsbVendorStr3,
           UsbProductStr0,
           UsbProductStr1,
           UsbProductStr2,
           UsbProductStr3,
           UsbSerialNoStr0,
           UsbSerialNoStr1,
           UsbSerialNoStr2,
           UsbSerialNoStr3,
           UsbinprotUbx,
           UsbinprotNmea,
           UsbinprotRtcm3x,
           UsboutprotUbx,
           UsboutprotNmea,
           UsboutprotRtcm3x
        >;
};

/// @brief Definition of <b>"CfgValPair"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = ublox::options::DefaultOptions, typename... TExtraOpts>
class CfgValPair : public
    comms::field::Variant<
        ublox::field::FieldBase<>,
        typename CfgValPairMembers<TOpt>::All,
        TExtraOpts...,
        comms::option::def::HasCustomRead
    >
{
    using Base =
        comms::field::Variant<
            ublox::field::FieldBase<>,
            typename CfgValPairMembers<TOpt>::All,
            TExtraOpts...,
            comms::option::def::HasCustomRead
        >;
public:
    /// @brief Allow access to internal fields by index.
    enum FieldIdx : unsigned
    {
        FieldIdx_bdsUsePrn1to5,
        FieldIdx_geofenceConflvl,
        FieldIdx_geofenceUsePio,
        FieldIdx_geofencePinpol,
        FieldIdx_geofenceUseFence1,
        FieldIdx_geofenceFence1Lat,
        FieldIdx_geofenceFence1Lon,
        FieldIdx_geofenceFence1Rad,
        FieldIdx_geofenceUseFence2,
        FieldIdx_geofenceFence2Lat,
        FieldIdx_geofenceFence2Lon,
        FieldIdx_geofenceFence2Rad,
        FieldIdx_geofenceUseFence3,
        FieldIdx_geofenceFence3Lat,
        FieldIdx_geofenceFence3Lon,
        FieldIdx_geofenceFence3Rad,
        FieldIdx_geofenceUseFence4,
        FieldIdx_geofenceFence4Lat,
        FieldIdx_geofenceFence4Lon,
        FieldIdx_geofenceFence4Rad,
        FieldIdx_hwAntCfgValctrl,
        FieldIdx_hwAntCfgShortdet,
        FieldIdx_hwAntCfgShortdetPol,
        FieldIdx_hwAntCfgOpendet,
        FieldIdx_hwAntCfgOpendetPol,
        FieldIdx_hwAntCfgPwrdown,
        FieldIdx_hwAntCfgPwrdownPol,
        FieldIdx_hwAntCfgRecover,
        FieldIdx_hwAntSupSwitchPin,
        FieldIdx_hwAntSupShortPin,
        FieldIdx_hwAntSupOpenPin,
        FieldIdx_hwAntSupEngine,
        FieldIdx_hwAntSupShortThr,
        FieldIdx_hwAntSupOpenThr,
        FieldIdx_i2cAddress,
        FieldIdx_i2cExtendedtimeout,
        FieldIdx_i2cEnabled,
        FieldIdx_i2cInprotUbx,
        FieldIdx_i2cInprotNmea,
        FieldIdx_i2cInprotRtcm3x,
        FieldIdx_i2cOutprotUbx,
        FieldIdx_i2cOutprotNmea,
        FieldIdx_i2cOutprotRtcm3x,
        FieldIdx_infmsgUbxI2c,
        FieldIdx_infmsgUbxUart1,
        FieldIdx_infmsgUbxUart2,
        FieldIdx_infmsgUbxUsb,
        FieldIdx_infmsgUbxSpi,
        FieldIdx_infmsgNmeaI2c,
        FieldIdx_infmsgNmeaUart1,
        FieldIdx_infmsgNmeaUart2,
        FieldIdx_infmsgNmeaUsb,
        FieldIdx_infmsgNmeaSpi,
        FieldIdx_itfmBbThreshold,
        FieldIdx_itfmCwThreshold,
        FieldIdx_itfmEnable,
        FieldIdx_itfmAntSetting,
        FieldIdx_logfilterRecordEna,
        FieldIdx_logfilterOncePerWakeUpEna,
        FieldIdx_logfilterApplyAllFilters,
        FieldIdx_logfilterMinInterval,
        FieldIdx_logfilterTimeThrs,
        FieldIdx_logfilterSpeedThrs,
        FieldIdx_logfilterPositionThrs,
        FieldIdx_motGnssSpeedThrs,
        FieldIdx_motGnssDistThrs,
        FieldIdx_msgoutNmeaIdDtmI2c,
        FieldIdx_msgoutNmeaIdDtmSpi,
        FieldIdx_msgoutNmeaIdDtmUart1,
        FieldIdx_msgoutNmeaIdDtmUart2,
        FieldIdx_msgoutNmeaIdDtmUsb,
        FieldIdx_msgoutNmeaIdGbsI2c,
        FieldIdx_msgoutNmeaIdGbsSpi,
        FieldIdx_msgoutNmeaIdGbsUart1,
        FieldIdx_msgoutNmeaIdGbsUart2,
        FieldIdx_msgoutNmeaIdGbsUsb,
        FieldIdx_msgoutNmeaIdGgaI2c,
        FieldIdx_msgoutNmeaIdGgaSpi,
        FieldIdx_msgoutNmeaIdGgaUart1,
        FieldIdx_msgoutNmeaIdGgaUart2,
        FieldIdx_msgoutNmeaIdGgaUsb,
        FieldIdx_msgoutNmeaIdGllI2c,
        FieldIdx_msgoutNmeaIdGllSpi,
        FieldIdx_msgoutNmeaIdGllUart1,
        FieldIdx_msgoutNmeaIdGllUart2,
        FieldIdx_msgoutNmeaIdGllUsb,
        FieldIdx_msgoutNmeaIdGnsI2c,
        FieldIdx_msgoutNmeaIdGnsSpi,
        FieldIdx_msgoutNmeaIdGnsUart1,
        FieldIdx_msgoutNmeaIdGnsUart2,
        FieldIdx_msgoutNmeaIdGnsUsb,
        FieldIdx_msgoutNmeaIdGrsI2c,
        FieldIdx_msgoutNmeaIdGrsSpi,
        FieldIdx_msgoutNmeaIdGrsUart1,
        FieldIdx_msgoutNmeaIdGrsUart2,
        FieldIdx_msgoutNmeaIdGrsUsb,
        FieldIdx_msgoutNmeaIdGsaI2c,
        FieldIdx_msgoutNmeaIdGsaSpi,
        FieldIdx_msgoutNmeaIdGsaUart1,
        FieldIdx_msgoutNmeaIdGsaUart2,
        FieldIdx_msgoutNmeaIdGsaUsb,
        FieldIdx_msgoutNmeaIdGstI2c,
        FieldIdx_msgoutNmeaIdGstSpi,
        FieldIdx_msgoutNmeaIdGstUart1,
        FieldIdx_msgoutNmeaIdGstUart2,
        FieldIdx_msgoutNmeaIdGstUsb,
        FieldIdx_msgoutNmeaIdGsvI2c,
        FieldIdx_msgoutNmeaIdGsvSpi,
        FieldIdx_msgoutNmeaIdGsvUart1,
        FieldIdx_msgoutNmeaIdGsvUart2,
        FieldIdx_msgoutNmeaIdGsvUsb,
        FieldIdx_msgoutNmeaIdRlmI2c,
        FieldIdx_msgoutNmeaIdRlmSpi,
        FieldIdx_msgoutNmeaIdRlmUart1,
        FieldIdx_msgoutNmeaIdRlmUart2,
        FieldIdx_msgoutNmeaIdRlmUsb,
        FieldIdx_msgoutNmeaIdRmcI2c,
        FieldIdx_msgoutNmeaIdRmcSpi,
        FieldIdx_msgoutNmeaIdRmcUart1,
        FieldIdx_msgoutNmeaIdRmcUart2,
        FieldIdx_msgoutNmeaIdRmcUsb,
        FieldIdx_msgoutNmeaIdVlwI2c,
        FieldIdx_msgoutNmeaIdVlwSpi,
        FieldIdx_msgoutNmeaIdVlwUart1,
        FieldIdx_msgoutNmeaIdVlwUart2,
        FieldIdx_msgoutNmeaIdVlwUsb,
        FieldIdx_msgoutNmeaIdVtgI2c,
        FieldIdx_msgoutNmeaIdVtgSpi,
        FieldIdx_msgoutNmeaIdVtgUart1,
        FieldIdx_msgoutNmeaIdVtgUart2,
        FieldIdx_msgoutNmeaIdVtgUsb,
        FieldIdx_msgoutNmeaIdZdaI2c,
        FieldIdx_msgoutNmeaIdZdaSpi,
        FieldIdx_msgoutNmeaIdZdaUart1,
        FieldIdx_msgoutNmeaIdZdaUart2,
        FieldIdx_msgoutNmeaIdZdaUsb,
        FieldIdx_msgoutPubxIdPolypI2c,
        FieldIdx_msgoutPubxIdPolypSpi,
        FieldIdx_msgoutPubxIdPolypUart1,
        FieldIdx_msgoutPubxIdPolypUart2,
        FieldIdx_msgoutPubxIdPolypUsb,
        FieldIdx_msgoutPubxIdPolysI2c,
        FieldIdx_msgoutPubxIdPolysSpi,
        FieldIdx_msgoutPubxIdPolysUart1,
        FieldIdx_msgoutPubxIdPolysUart2,
        FieldIdx_msgoutPubxIdPolysUsb,
        FieldIdx_msgoutPubxIdPolytI2c,
        FieldIdx_msgoutPubxIdPolytSpi,
        FieldIdx_msgoutPubxIdPolytUart1,
        FieldIdx_msgoutPubxIdPolytUart2,
        FieldIdx_msgoutPubxIdPolytUsb,
        FieldIdx_msgoutRtcm3xType1005I2c,
        FieldIdx_msgoutRtcm3xType1005Spi,
        FieldIdx_msgoutRtcm3xType1005Uart1,
        FieldIdx_msgoutRtcm3xType1005Uart2,
        FieldIdx_msgoutRtcm3xType1005Usb,
        FieldIdx_msgoutRtcm3xType1074I2c,
        FieldIdx_msgoutRtcm3xType1074Spi,
        FieldIdx_msgoutRtcm3xType1074Uart1,
        FieldIdx_msgoutRtcm3xType1074Uart2,
        FieldIdx_msgoutRtcm3xType1074Usb,
        FieldIdx_msgoutRtcm3xType1077I2c,
        FieldIdx_msgoutRtcm3xType1077Spi,
        FieldIdx_msgoutRtcm3xType1077Uart1,
        FieldIdx_msgoutRtcm3xType1077Uart2,
        FieldIdx_msgoutRtcm3xType1077Usb,
        FieldIdx_msgoutRtcm3xType1084I2c,
        FieldIdx_msgoutRtcm3xType1084Spi,
        FieldIdx_msgoutRtcm3xType1084Uart1,
        FieldIdx_msgoutRtcm3xType1084Uart2,
        FieldIdx_msgoutRtcm3xType1084Usb,
        FieldIdx_msgoutRtcm3xType1087I2c,
        FieldIdx_msgoutRtcm3xType1087Spi,
        FieldIdx_msgoutRtcm3xType1087Uart1,
        FieldIdx_msgoutRtcm3xType1087Uart2,
        FieldIdx_msgoutRtcm3xType1087Usb,
        FieldIdx_msgoutRtcm3xType1094I2c,
        FieldIdx_msgoutRtcm3xType1094Spi,
        FieldIdx_msgoutRtcm3xType1094Uart1,
        FieldIdx_msgoutRtcm3xType1094Uart2,
        FieldIdx_msgoutRtcm3xType1094Usb,
        FieldIdx_msgoutRtcm3xType1097I2c,
        FieldIdx_msgoutRtcm3xType1097Spi,
        FieldIdx_msgoutRtcm3xType1097Uart1,
        FieldIdx_msgoutRtcm3xType1097Uart2,
        FieldIdx_msgoutRtcm3xType1097Usb,
        FieldIdx_msgoutRtcm3xType1124I2c,
        FieldIdx_msgoutRtcm3xType1124Spi,
        FieldIdx_msgoutRtcm3xType1124Uart1,
        FieldIdx_msgoutRtcm3xType1124Uart2,
        FieldIdx_msgoutRtcm3xType1124Usb,
        FieldIdx_msgoutRtcm3xType1127I2c,
        FieldIdx_msgoutRtcm3xType1127Spi,
        FieldIdx_msgoutRtcm3xType1127Uart1,
        FieldIdx_msgoutRtcm3xType1127Uart2,
        FieldIdx_msgoutRtcm3xType1127Usb,
        FieldIdx_msgoutRtcm3xType1230I2c,
        FieldIdx_msgoutRtcm3xType1230Spi,
        FieldIdx_msgoutRtcm3xType1230Uart1,
        FieldIdx_msgoutRtcm3xType1230Uart2,
        FieldIdx_msgoutRtcm3xType1230Usb,
        FieldIdx_msgoutRtcm3xType4072_0I2c,
        FieldIdx_msgoutRtcm3xType4072_0Spi,
        FieldIdx_msgoutRtcm3xType4072_0Uart1,
        FieldIdx_msgoutRtcm3xType4072_0Uart2,
        FieldIdx_msgoutRtcm3xType4072_0Usb,
        FieldIdx_msgoutRtcm3xType4072_1I2c,
        FieldIdx_msgoutRtcm3xType4072_1Spi,
        FieldIdx_msgoutRtcm3xType4072_1Uart1,
        FieldIdx_msgoutRtcm3xType4072_1Uart2,
        FieldIdx_msgoutRtcm3xType4072_1Usb,
        FieldIdx_msgoutUbxLogInfoI2c,
        FieldIdx_msgoutUbxLogInfoSpi,
        FieldIdx_msgoutUbxLogInfoUart1,
        FieldIdx_msgoutUbxLogInfoUart2,
        FieldIdx_msgoutUbxLogInfoUsb,
        FieldIdx_msgoutUbxMonCommsI2c,
        FieldIdx_msgoutUbxMonCommsSpi,
        FieldIdx_msgoutUbxMonCommsUart1,
        FieldIdx_msgoutUbxMonCommsUart2,
        FieldIdx_msgoutUbxMonCommsUsb,
        FieldIdx_msgoutUbxMonHw2I2c,
        FieldIdx_msgoutUbxMonHw2Spi,
        FieldIdx_msgoutUbxMonHw2Uart1,
        FieldIdx_msgoutUbxMonHw2Uart2,
        FieldIdx_msgoutUbxMonHw2Usb,
        FieldIdx_msgoutUbxMonHw3I2c,
        FieldIdx_msgoutUbxMonHw3Spi,
        FieldIdx_msgoutUbxMonHw3Uart1,
        FieldIdx_msgoutUbxMonHw3Uart2,
        FieldIdx_msgoutUbxMonHw3Usb,
        FieldIdx_msgoutUbxMonHwI2c,
        FieldIdx_msgoutUbxMonHwSpi,
        FieldIdx_msgoutUbxMonHwUart1,
        FieldIdx_msgoutUbxMonHwUart2,
        FieldIdx_msgoutUbxMonHwUsb,
        FieldIdx_msgoutUbxMonIoI2c,
        FieldIdx_msgoutUbxMonIoSpi,
        FieldIdx_msgoutUbxMonIoUart1,
        FieldIdx_msgoutUbxMonIoUart2,
        FieldIdx_msgoutUbxMonIoUsb,
        FieldIdx_msgoutUbxMonMsgppI2c,
        FieldIdx_msgoutUbxMonMsgppSpi,
        FieldIdx_msgoutUbxMonMsgppUart1,
        FieldIdx_msgoutUbxMonMsgppUart2,
        FieldIdx_msgoutUbxMonMsgppUsb,
        FieldIdx_msgoutUbxMonRfI2c,
        FieldIdx_msgoutUbxMonRfSpi,
        FieldIdx_msgoutUbxMonRfUart1,
        FieldIdx_msgoutUbxMonRfUart2,
        FieldIdx_msgoutUbxMonRfUsb,
        FieldIdx_msgoutUbxMonRxbufI2c,
        FieldIdx_msgoutUbxMonRxbufSpi,
        FieldIdx_msgoutUbxMonRxbufUart1,
        FieldIdx_msgoutUbxMonRxbufUart2,
        FieldIdx_msgoutUbxMonRxbufUsb,
        FieldIdx_msgoutUbxMonRxrI2c,
        FieldIdx_msgoutUbxMonRxrSpi,
        FieldIdx_msgoutUbxMonRxrUart1,
        FieldIdx_msgoutUbxMonRxrUart2,
        FieldIdx_msgoutUbxMonRxrUsb,
        FieldIdx_msgoutUbxMonSpanI2c,
        FieldIdx_msgoutUbxMonSpanSpi,
        FieldIdx_msgoutUbxMonSpanUart1,
        FieldIdx_msgoutUbxMonSpanUart2,
        FieldIdx_msgoutUbxMonSpanUsb,
        FieldIdx_msgoutUbxMonTxbufI2c,
        FieldIdx_msgoutUbxMonTxbufSpi,
        FieldIdx_msgoutUbxMonTxbufUart1,
        FieldIdx_msgoutUbxMonTxbufUart2,
        FieldIdx_msgoutUbxMonTxbufUsb,
        FieldIdx_msgoutUbxNavClockI2c,
        FieldIdx_msgoutUbxNavClockSpi,
        FieldIdx_msgoutUbxNavClockUart1,
        FieldIdx_msgoutUbxNavClockUart2,
        FieldIdx_msgoutUbxNavClockUsb,
        FieldIdx_msgoutUbxNavDopI2c,
        FieldIdx_msgoutUbxNavDopSpi,
        FieldIdx_msgoutUbxNavDopUart1,
        FieldIdx_msgoutUbxNavDopUart2,
        FieldIdx_msgoutUbxNavDopUsb,
        FieldIdx_msgoutUbxNavEoeI2c,
        FieldIdx_msgoutUbxNavEoeSpi,
        FieldIdx_msgoutUbxNavEoeUart1,
        FieldIdx_msgoutUbxNavEoeUart2,
        FieldIdx_msgoutUbxNavEoeUsb,
        FieldIdx_msgoutUbxNavGeofenceI2c,
        FieldIdx_msgoutUbxNavGeofenceSpi,
        FieldIdx_msgoutUbxNavGeofenceUart1,
        FieldIdx_msgoutUbxNavGeofenceUart2,
        FieldIdx_msgoutUbxNavGeofenceUsb,
        FieldIdx_msgoutUbxNavHpposecefI2c,
        FieldIdx_msgoutUbxNavHpposecefSpi,
        FieldIdx_msgoutUbxNavHpposecefUart1,
        FieldIdx_msgoutUbxNavHpposecefUart2,
        FieldIdx_msgoutUbxNavHpposecefUsb,
        FieldIdx_msgoutUbxNavHpposllhI2c,
        FieldIdx_msgoutUbxNavHpposllhSpi,
        FieldIdx_msgoutUbxNavHpposllhUart1,
        FieldIdx_msgoutUbxNavHpposllhUart2,
        FieldIdx_msgoutUbxNavHpposllhUsb,
        FieldIdx_msgoutUbxNavOdoI2c,
        FieldIdx_msgoutUbxNavOdoSpi,
        FieldIdx_msgoutUbxNavOdoUart1,
        FieldIdx_msgoutUbxNavOdoUart2,
        FieldIdx_msgoutUbxNavOdoUsb,
        FieldIdx_msgoutUbxNavOrbI2c,
        FieldIdx_msgoutUbxNavOrbSpi,
        FieldIdx_msgoutUbxNavOrbUart1,
        FieldIdx_msgoutUbxNavOrbUart2,
        FieldIdx_msgoutUbxNavOrbUsb,
        FieldIdx_msgoutUbxNavPosecefI2c,
        FieldIdx_msgoutUbxNavPosecefSpi,
        FieldIdx_msgoutUbxNavPosecefUart1,
        FieldIdx_msgoutUbxNavPosecefUart2,
        FieldIdx_msgoutUbxNavPosecefUsb,
        FieldIdx_msgoutUbxNavPosllhI2c,
        FieldIdx_msgoutUbxNavPosllhSpi,
        FieldIdx_msgoutUbxNavPosllhUart1,
        FieldIdx_msgoutUbxNavPosllhUart2,
        FieldIdx_msgoutUbxNavPosllhUsb,
        FieldIdx_msgoutUbxNavPvtI2c,
        FieldIdx_msgoutUbxNavPvtSpi,
        FieldIdx_msgoutUbxNavPvtUart1,
        FieldIdx_msgoutUbxNavPvtUart2,
        FieldIdx_msgoutUbxNavPvtUsb,
        FieldIdx_msgoutUbxNavRelposnedI2c,
        FieldIdx_msgoutUbxNavRelposnedSpi,
        FieldIdx_msgoutUbxNavRelposnedUart1,
        FieldIdx_msgoutUbxNavRelposnedUart2,
        FieldIdx_msgoutUbxNavRelposnedUsb,
        FieldIdx_msgoutUbxNavSatI2c,
        FieldIdx_msgoutUbxNavSatSpi,
        FieldIdx_msgoutUbxNavSatUart1,
        FieldIdx_msgoutUbxNavSatUart2,
        FieldIdx_msgoutUbxNavSatUsb,
        FieldIdx_msgoutUbxNavSbasI2c,
        FieldIdx_msgoutUbxNavSbasSpi,
        FieldIdx_msgoutUbxNavSbasUart1,
        FieldIdx_msgoutUbxNavSbasUart2,
        FieldIdx_msgoutUbxNavSbasUsb,
        FieldIdx_msgoutUbxNavSigI2c,
        FieldIdx_msgoutUbxNavSigSpi,
        FieldIdx_msgoutUbxNavSigUart1,
        FieldIdx_msgoutUbxNavSigUart2,
        FieldIdx_msgoutUbxNavSigUsb,
        FieldIdx_msgoutUbxNavSlasI2c,
        FieldIdx_msgoutUbxNavSlasSpi,
        FieldIdx_msgoutUbxNavSlasUart1,
        FieldIdx_msgoutUbxNavSlasUart2,
        FieldIdx_msgoutUbxNavSlasUsb,
        FieldIdx_msgoutUbxNavStatusI2c,
        FieldIdx_msgoutUbxNavStatusSpi,
        FieldIdx_msgoutUbxNavStatusUart1,
        FieldIdx_msgoutUbxNavStatusUart2,
        FieldIdx_msgoutUbxNavStatusUsb,
        FieldIdx_msgoutUbxNavSvinI2c,
        FieldIdx_msgoutUbxNavSvinSpi,
        FieldIdx_msgoutUbxNavSvinUart1,
        FieldIdx_msgoutUbxNavSvinUart2,
        FieldIdx_msgoutUbxNavSvinUsb,
        FieldIdx_msgoutUbxNavTimebdsI2c,
        FieldIdx_msgoutUbxNavTimebdsSpi,
        FieldIdx_msgoutUbxNavTimebdsUart1,
        FieldIdx_msgoutUbxNavTimebdsUart2,
        FieldIdx_msgoutUbxNavTimebdsUsb,
        FieldIdx_msgoutUbxNavTimegalI2c,
        FieldIdx_msgoutUbxNavTimegalSpi,
        FieldIdx_msgoutUbxNavTimegalUart1,
        FieldIdx_msgoutUbxNavTimegalUart2,
        FieldIdx_msgoutUbxNavTimegalUsb,
        FieldIdx_msgoutUbxNavTimegloI2c,
        FieldIdx_msgoutUbxNavTimegloSpi,
        FieldIdx_msgoutUbxNavTimegloUart1,
        FieldIdx_msgoutUbxNavTimegloUart2,
        FieldIdx_msgoutUbxNavTimegloUsb,
        FieldIdx_msgoutUbxNavTimegpsI2c,
        FieldIdx_msgoutUbxNavTimegpsSpi,
        FieldIdx_msgoutUbxNavTimegpsUart1,
        FieldIdx_msgoutUbxNavTimegpsUart2,
        FieldIdx_msgoutUbxNavTimegpsUsb,
        FieldIdx_msgoutUbxNavTimelsI2c,
        FieldIdx_msgoutUbxNavTimelsSpi,
        FieldIdx_msgoutUbxNavTimelsUart1,
        FieldIdx_msgoutUbxNavTimelsUart2,
        FieldIdx_msgoutUbxNavTimelsUsb,
        FieldIdx_msgoutUbxNavTimeqzssI2c,
        FieldIdx_msgoutUbxNavTimeqzssSpi,
        FieldIdx_msgoutUbxNavTimeqzssUart1,
        FieldIdx_msgoutUbxNavTimeqzssUart2,
        FieldIdx_msgoutUbxNavTimeqzssUsb,
        FieldIdx_msgoutUbxNavTimeutcI2c,
        FieldIdx_msgoutUbxNavTimeutcSpi,
        FieldIdx_msgoutUbxNavTimeutcUart1,
        FieldIdx_msgoutUbxNavTimeutcUart2,
        FieldIdx_msgoutUbxNavTimeutcUsb,
        FieldIdx_msgoutUbxNavVelecefI2c,
        FieldIdx_msgoutUbxNavVelecefSpi,
        FieldIdx_msgoutUbxNavVelecefUart1,
        FieldIdx_msgoutUbxNavVelecefUart2,
        FieldIdx_msgoutUbxNavVelecefUsb,
        FieldIdx_msgoutUbxNavVelnedI2c,
        FieldIdx_msgoutUbxNavVelnedSpi,
        FieldIdx_msgoutUbxNavVelnedUart1,
        FieldIdx_msgoutUbxNavVelnedUart2,
        FieldIdx_msgoutUbxNavVelnedUsb,
        FieldIdx_msgoutUbxRxmMeasxI2c,
        FieldIdx_msgoutUbxRxmMeasxSpi,
        FieldIdx_msgoutUbxRxmMeasxUart1,
        FieldIdx_msgoutUbxRxmMeasxUart2,
        FieldIdx_msgoutUbxRxmMeasxUsb,
        FieldIdx_msgoutUbxRxmRawxI2c,
        FieldIdx_msgoutUbxRxmRawxSpi,
        FieldIdx_msgoutUbxRxmRawxUart1,
        FieldIdx_msgoutUbxRxmRawxUart2,
        FieldIdx_msgoutUbxRxmRawxUsb,
        FieldIdx_msgoutUbxRxmRlmI2c,
        FieldIdx_msgoutUbxRxmRlmSpi,
        FieldIdx_msgoutUbxRxmRlmUart1,
        FieldIdx_msgoutUbxRxmRlmUart2,
        FieldIdx_msgoutUbxRxmRlmUsb,
        FieldIdx_msgoutUbxRxmRtcmI2c,
        FieldIdx_msgoutUbxRxmRtcmSpi,
        FieldIdx_msgoutUbxRxmRtcmUart1,
        FieldIdx_msgoutUbxRxmRtcmUart2,
        FieldIdx_msgoutUbxRxmRtcmUsb,
        FieldIdx_msgoutUbxRxmSfrbxI2c,
        FieldIdx_msgoutUbxRxmSfrbxSpi,
        FieldIdx_msgoutUbxRxmSfrbxUart1,
        FieldIdx_msgoutUbxRxmSfrbxUart2,
        FieldIdx_msgoutUbxRxmSfrbxUsb,
        FieldIdx_msgoutUbxTimTm2I2c,
        FieldIdx_msgoutUbxTimTm2Spi,
        FieldIdx_msgoutUbxTimTm2Uart1,
        FieldIdx_msgoutUbxTimTm2Uart2,
        FieldIdx_msgoutUbxTimTm2Usb,
        FieldIdx_msgoutUbxTimTpI2c,
        FieldIdx_msgoutUbxTimTpSpi,
        FieldIdx_msgoutUbxTimTpUart1,
        FieldIdx_msgoutUbxTimTpUart2,
        FieldIdx_msgoutUbxTimTpUsb,
        FieldIdx_msgoutUbxTimVrfyI2c,
        FieldIdx_msgoutUbxTimVrfySpi,
        FieldIdx_msgoutUbxTimVrfyUart1,
        FieldIdx_msgoutUbxTimVrfyUart2,
        FieldIdx_msgoutUbxTimVrfyUsb,
        FieldIdx_navhpgDgnssmode,
        FieldIdx_navspgFixmode,
        FieldIdx_navspgInifix3d,
        FieldIdx_navspgWknrollover,
        FieldIdx_navspgUtcstandard,
        FieldIdx_navspgDynmodel,
        FieldIdx_navspgAckaiding,
        FieldIdx_navspgUseUsrdat,
        FieldIdx_navspgUsrdatMaja,
        FieldIdx_navspgUsrdatFlat,
        FieldIdx_navspgUsrdatDx,
        FieldIdx_navspgUsrdatDy,
        FieldIdx_navspgUsrdatDz,
        FieldIdx_navspgUsrdatRotx,
        FieldIdx_navspgUsrdatRoty,
        FieldIdx_navspgUsrdatRotz,
        FieldIdx_navspgUsrdatScale,
        FieldIdx_navspgInfilMinsvs,
        FieldIdx_navspgInfilMaxsvs,
        FieldIdx_navspgInfilMincno,
        FieldIdx_navspgInfilMinelev,
        FieldIdx_navspgInfilNcnothrs,
        FieldIdx_navspgInfilCnothrs,
        FieldIdx_navspgOutfilPdop,
        FieldIdx_navspgOutfilTdop,
        FieldIdx_navspgOutfilPacc,
        FieldIdx_navspgOutfilTacc,
        FieldIdx_navspgOutfilFacc,
        FieldIdx_navspgConstrAlt,
        FieldIdx_navspgConstrAltvar,
        FieldIdx_navspgConstrDgnssto,
        FieldIdx_nmeaProtver,
        FieldIdx_nmeaMaxsvs,
        FieldIdx_nmeaCompat,
        FieldIdx_nmeaConsider,
        FieldIdx_nmeaLimit82,
        FieldIdx_nmeaHighprec,
        FieldIdx_nmeaSvnumbering,
        FieldIdx_nmeaFiltGps,
        FieldIdx_nmeaFiltSbas,
        FieldIdx_nmeaFiltGal,
        FieldIdx_nmeaFiltQzss,
        FieldIdx_nmeaFiltGlo,
        FieldIdx_nmeaFiltBds,
        FieldIdx_nmeaOutInvfix,
        FieldIdx_nmeaOutMskfix,
        FieldIdx_nmeaOutInvtime,
        FieldIdx_nmeaOutInvdate,
        FieldIdx_nmeaOutOnlygps,
        FieldIdx_nmeaOutFrozencog,
        FieldIdx_nmeaOutMaintalkerid,
        FieldIdx_odoUseOdo,
        FieldIdx_odoUseCog,
        FieldIdx_odoOutlpvel,
        FieldIdx_odoOutlpcog,
        FieldIdx_odoProfile,
        FieldIdx_odoCogmaxspeed,
        FieldIdx_odoCogmaxposacc,
        FieldIdx_odoVellpgain,
        FieldIdx_odoCoglpgain,
        FieldIdx_qzssUseSlasDgnss,
        FieldIdx_qzssUseSlasTestmode,
        FieldIdx_qzssUseSlasRaimUncorr,
        FieldIdx_rateMeas,
        FieldIdx_rateNav,
        FieldIdx_rateTimeref,
        FieldIdx_rinvDump,
        FieldIdx_rinvBinary,
        FieldIdx_rinvDataSize,
        FieldIdx_rinvChunk0,
        FieldIdx_rinvChunk1,
        FieldIdx_rinvChunk2,
        FieldIdx_rinvChunk3,
        FieldIdx_rtcmDf003Out,
        FieldIdx_rtcmDf003In,
        FieldIdx_rtcmDf003InFilter,
        FieldIdx_sbasUseTestmode,
        FieldIdx_sbasUseRanging,
        FieldIdx_sbasUseDiffcorr,
        FieldIdx_sbasUseIntegrity,
        FieldIdx_sbasPrnscanmask,
        FieldIdx_signalGpsEna,
        FieldIdx_signalGpsL1caEna,
        FieldIdx_signalGpsL2cEna,
        FieldIdx_signalSbasEna,
        FieldIdx_signalSbasL1caEna,
        FieldIdx_signalGalEna,
        FieldIdx_signalGalE1Ena,
        FieldIdx_signalGalE5bEna,
        FieldIdx_signalBdsEna,
        FieldIdx_signalBdsB1Ena,
        FieldIdx_signalBdsB2Ena,
        FieldIdx_signalQzssEna,
        FieldIdx_signalQzssL1caEna,
        FieldIdx_signalQzssL1sEna,
        FieldIdx_signalQzssL2cEna,
        FieldIdx_signalGloEna,
        FieldIdx_signalGloL1Ena,
        FieldIdx_signalGloL2Ena,
        FieldIdx_spiMaxff,
        FieldIdx_spiCpolarity,
        FieldIdx_spiCphase,
        FieldIdx_spiExtendedtimeout,
        FieldIdx_spiEnabled,
        FieldIdx_spiinprotUbx,
        FieldIdx_spiinprotNmea,
        FieldIdx_spiinprotRtcm3x,
        FieldIdx_spioutprotUbx,
        FieldIdx_spioutprotNmea,
        FieldIdx_spioutprotRtcm3x,
        FieldIdx_tmodeMode,
        FieldIdx_tmodePosType,
        FieldIdx_tmodeEcefX,
        FieldIdx_tmodeEcefY,
        FieldIdx_tmodeEcefZ,
        FieldIdx_tmodeEcefXHp,
        FieldIdx_tmodeEcefYHp,
        FieldIdx_tmodeEcefZHp,
        FieldIdx_tmodeLat,
        FieldIdx_tmodeLon,
        FieldIdx_tmodeHeight,
        FieldIdx_tmodeLatHp,
        FieldIdx_tmodeLonHp,
        FieldIdx_tmodeHeightHp,
        FieldIdx_tmodeFixedPosAcc,
        FieldIdx_tmodeSvinMinDur,
        FieldIdx_tmodeSvinAccLimit,
        FieldIdx_tpPulseDef,
        FieldIdx_tpPulseLengthDef,
        FieldIdx_tpAntCabledelay,
        FieldIdx_tpPeriodTp1,
        FieldIdx_tpPeriodLockTp1,
        FieldIdx_tpFreqTp1,
        FieldIdx_tpFreqLockTp1,
        FieldIdx_tpLenTp1,
        FieldIdx_tpLenLockTp1,
        FieldIdx_tpDutyTp1,
        FieldIdx_tpDutyLockTp1,
        FieldIdx_tpUserDelayTp1,
        FieldIdx_tpTp1Ena,
        FieldIdx_tpSyncGnssTp1,
        FieldIdx_tpUseLockedTp1,
        FieldIdx_tpAlignToTowTp1,
        FieldIdx_tpPolTp1,
        FieldIdx_tpTimegridTp1,
        FieldIdx_txreadyEnabled,
        FieldIdx_txreadyPolarity,
        FieldIdx_txreadyPin,
        FieldIdx_txreadyThreshold,
        FieldIdx_txreadyInterface,
        FieldIdx_uart1Baudrate,
        FieldIdx_uart1Stopbits,
        FieldIdx_uart1Databits,
        FieldIdx_uart1Parity,
        FieldIdx_uart1Enabled,
        FieldIdx_uart1inprotUbx,
        FieldIdx_uart1inprotNmea,
        FieldIdx_uart1inprotRtcm3x,
        FieldIdx_uart1outprotUbx,
        FieldIdx_uart1outprotNmea,
        FieldIdx_uart1outprotRtcm3x,
        FieldIdx_uart2Baudrate,
        FieldIdx_uart2Stopbits,
        FieldIdx_uart2Databits,
        FieldIdx_uart2Parity,
        FieldIdx_uart2Enabled,
        FieldIdx_uart2Remap,
        FieldIdx_uart2inprotUbx,
        FieldIdx_uart2inprotNmea,
        FieldIdx_uart2inprotRtcm3x,
        FieldIdx_uart2outprotUbx,
        FieldIdx_uart2outprotNmea,
        FieldIdx_uart2outprotRtcm3x,
        FieldIdx_usbEnabled,
        FieldIdx_usbSelfpow,
        FieldIdx_usbVendorId,
        FieldIdx_usbProductId,
        FieldIdx_usbPower,
        FieldIdx_usbVendorStr0,
        FieldIdx_usbVendorStr1,
        FieldIdx_usbVendorStr2,
        FieldIdx_usbVendorStr3,
        FieldIdx_usbProductStr0,
        FieldIdx_usbProductStr1,
        FieldIdx_usbProductStr2,
        FieldIdx_usbProductStr3,
        FieldIdx_usbSerialNoStr0,
        FieldIdx_usbSerialNoStr1,
        FieldIdx_usbSerialNoStr2,
        FieldIdx_usbSerialNoStr3,
        FieldIdx_usbinprotUbx,
        FieldIdx_usbinprotNmea,
        FieldIdx_usbinprotRtcm3x,
        FieldIdx_usboutprotUbx,
        FieldIdx_usboutprotNmea,
        FieldIdx_usboutprotRtcm3x,
        FieldIdx_numOfValues};

    /// @brief Member type alias to CfgValPairMembers::BdsUsePrn1to5.
    using Field_bdsUsePrn1to5 = typename CfgValPairMembers<TOpt>::BdsUsePrn1to5;

    /// @brief Initialize as CfgValPairMembers::BdsUsePrn1to5
    Field_bdsUsePrn1to5& initField_bdsUsePrn1to5()
    {
        return Base::template initField<FieldIdx_bdsUsePrn1to5>();
    }

    /// @brief Access as CfgValPairMembers::BdsUsePrn1to5
    Field_bdsUsePrn1to5& accessField_bdsUsePrn1to5()
    {
        return Base::template accessField<FieldIdx_bdsUsePrn1to5>();
    }

    /// @brief Access as CfgValPairMembers::BdsUsePrn1to5 (const version)
    const Field_bdsUsePrn1to5& accessField_bdsUsePrn1to5() const
    {
        return Base::template accessField<FieldIdx_bdsUsePrn1to5>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceConflvl.
    using Field_geofenceConflvl = typename CfgValPairMembers<TOpt>::GeofenceConflvl;

    /// @brief Initialize as CfgValPairMembers::GeofenceConflvl
    Field_geofenceConflvl& initField_geofenceConflvl()
    {
        return Base::template initField<FieldIdx_geofenceConflvl>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceConflvl
    Field_geofenceConflvl& accessField_geofenceConflvl()
    {
        return Base::template accessField<FieldIdx_geofenceConflvl>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceConflvl (const version)
    const Field_geofenceConflvl& accessField_geofenceConflvl() const
    {
        return Base::template accessField<FieldIdx_geofenceConflvl>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceUsePio.
    using Field_geofenceUsePio = typename CfgValPairMembers<TOpt>::GeofenceUsePio;

    /// @brief Initialize as CfgValPairMembers::GeofenceUsePio
    Field_geofenceUsePio& initField_geofenceUsePio()
    {
        return Base::template initField<FieldIdx_geofenceUsePio>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUsePio
    Field_geofenceUsePio& accessField_geofenceUsePio()
    {
        return Base::template accessField<FieldIdx_geofenceUsePio>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUsePio (const version)
    const Field_geofenceUsePio& accessField_geofenceUsePio() const
    {
        return Base::template accessField<FieldIdx_geofenceUsePio>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofencePinpol.
    using Field_geofencePinpol = typename CfgValPairMembers<TOpt>::GeofencePinpol;

    /// @brief Initialize as CfgValPairMembers::GeofencePinpol
    Field_geofencePinpol& initField_geofencePinpol()
    {
        return Base::template initField<FieldIdx_geofencePinpol>();
    }

    /// @brief Access as CfgValPairMembers::GeofencePinpol
    Field_geofencePinpol& accessField_geofencePinpol()
    {
        return Base::template accessField<FieldIdx_geofencePinpol>();
    }

    /// @brief Access as CfgValPairMembers::GeofencePinpol (const version)
    const Field_geofencePinpol& accessField_geofencePinpol() const
    {
        return Base::template accessField<FieldIdx_geofencePinpol>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceUseFence1.
    using Field_geofenceUseFence1 = typename CfgValPairMembers<TOpt>::GeofenceUseFence1;

    /// @brief Initialize as CfgValPairMembers::GeofenceUseFence1
    Field_geofenceUseFence1& initField_geofenceUseFence1()
    {
        return Base::template initField<FieldIdx_geofenceUseFence1>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUseFence1
    Field_geofenceUseFence1& accessField_geofenceUseFence1()
    {
        return Base::template accessField<FieldIdx_geofenceUseFence1>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUseFence1 (const version)
    const Field_geofenceUseFence1& accessField_geofenceUseFence1() const
    {
        return Base::template accessField<FieldIdx_geofenceUseFence1>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence1Lat.
    using Field_geofenceFence1Lat = typename CfgValPairMembers<TOpt>::GeofenceFence1Lat;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence1Lat
    Field_geofenceFence1Lat& initField_geofenceFence1Lat()
    {
        return Base::template initField<FieldIdx_geofenceFence1Lat>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence1Lat
    Field_geofenceFence1Lat& accessField_geofenceFence1Lat()
    {
        return Base::template accessField<FieldIdx_geofenceFence1Lat>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence1Lat (const version)
    const Field_geofenceFence1Lat& accessField_geofenceFence1Lat() const
    {
        return Base::template accessField<FieldIdx_geofenceFence1Lat>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence1Lon.
    using Field_geofenceFence1Lon = typename CfgValPairMembers<TOpt>::GeofenceFence1Lon;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence1Lon
    Field_geofenceFence1Lon& initField_geofenceFence1Lon()
    {
        return Base::template initField<FieldIdx_geofenceFence1Lon>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence1Lon
    Field_geofenceFence1Lon& accessField_geofenceFence1Lon()
    {
        return Base::template accessField<FieldIdx_geofenceFence1Lon>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence1Lon (const version)
    const Field_geofenceFence1Lon& accessField_geofenceFence1Lon() const
    {
        return Base::template accessField<FieldIdx_geofenceFence1Lon>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence1Rad.
    using Field_geofenceFence1Rad = typename CfgValPairMembers<TOpt>::GeofenceFence1Rad;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence1Rad
    Field_geofenceFence1Rad& initField_geofenceFence1Rad()
    {
        return Base::template initField<FieldIdx_geofenceFence1Rad>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence1Rad
    Field_geofenceFence1Rad& accessField_geofenceFence1Rad()
    {
        return Base::template accessField<FieldIdx_geofenceFence1Rad>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence1Rad (const version)
    const Field_geofenceFence1Rad& accessField_geofenceFence1Rad() const
    {
        return Base::template accessField<FieldIdx_geofenceFence1Rad>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceUseFence2.
    using Field_geofenceUseFence2 = typename CfgValPairMembers<TOpt>::GeofenceUseFence2;

    /// @brief Initialize as CfgValPairMembers::GeofenceUseFence2
    Field_geofenceUseFence2& initField_geofenceUseFence2()
    {
        return Base::template initField<FieldIdx_geofenceUseFence2>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUseFence2
    Field_geofenceUseFence2& accessField_geofenceUseFence2()
    {
        return Base::template accessField<FieldIdx_geofenceUseFence2>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUseFence2 (const version)
    const Field_geofenceUseFence2& accessField_geofenceUseFence2() const
    {
        return Base::template accessField<FieldIdx_geofenceUseFence2>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence2Lat.
    using Field_geofenceFence2Lat = typename CfgValPairMembers<TOpt>::GeofenceFence2Lat;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence2Lat
    Field_geofenceFence2Lat& initField_geofenceFence2Lat()
    {
        return Base::template initField<FieldIdx_geofenceFence2Lat>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence2Lat
    Field_geofenceFence2Lat& accessField_geofenceFence2Lat()
    {
        return Base::template accessField<FieldIdx_geofenceFence2Lat>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence2Lat (const version)
    const Field_geofenceFence2Lat& accessField_geofenceFence2Lat() const
    {
        return Base::template accessField<FieldIdx_geofenceFence2Lat>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence2Lon.
    using Field_geofenceFence2Lon = typename CfgValPairMembers<TOpt>::GeofenceFence2Lon;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence2Lon
    Field_geofenceFence2Lon& initField_geofenceFence2Lon()
    {
        return Base::template initField<FieldIdx_geofenceFence2Lon>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence2Lon
    Field_geofenceFence2Lon& accessField_geofenceFence2Lon()
    {
        return Base::template accessField<FieldIdx_geofenceFence2Lon>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence2Lon (const version)
    const Field_geofenceFence2Lon& accessField_geofenceFence2Lon() const
    {
        return Base::template accessField<FieldIdx_geofenceFence2Lon>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence2Rad.
    using Field_geofenceFence2Rad = typename CfgValPairMembers<TOpt>::GeofenceFence2Rad;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence2Rad
    Field_geofenceFence2Rad& initField_geofenceFence2Rad()
    {
        return Base::template initField<FieldIdx_geofenceFence2Rad>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence2Rad
    Field_geofenceFence2Rad& accessField_geofenceFence2Rad()
    {
        return Base::template accessField<FieldIdx_geofenceFence2Rad>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence2Rad (const version)
    const Field_geofenceFence2Rad& accessField_geofenceFence2Rad() const
    {
        return Base::template accessField<FieldIdx_geofenceFence2Rad>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceUseFence3.
    using Field_geofenceUseFence3 = typename CfgValPairMembers<TOpt>::GeofenceUseFence3;

    /// @brief Initialize as CfgValPairMembers::GeofenceUseFence3
    Field_geofenceUseFence3& initField_geofenceUseFence3()
    {
        return Base::template initField<FieldIdx_geofenceUseFence3>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUseFence3
    Field_geofenceUseFence3& accessField_geofenceUseFence3()
    {
        return Base::template accessField<FieldIdx_geofenceUseFence3>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUseFence3 (const version)
    const Field_geofenceUseFence3& accessField_geofenceUseFence3() const
    {
        return Base::template accessField<FieldIdx_geofenceUseFence3>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence3Lat.
    using Field_geofenceFence3Lat = typename CfgValPairMembers<TOpt>::GeofenceFence3Lat;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence3Lat
    Field_geofenceFence3Lat& initField_geofenceFence3Lat()
    {
        return Base::template initField<FieldIdx_geofenceFence3Lat>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence3Lat
    Field_geofenceFence3Lat& accessField_geofenceFence3Lat()
    {
        return Base::template accessField<FieldIdx_geofenceFence3Lat>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence3Lat (const version)
    const Field_geofenceFence3Lat& accessField_geofenceFence3Lat() const
    {
        return Base::template accessField<FieldIdx_geofenceFence3Lat>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence3Lon.
    using Field_geofenceFence3Lon = typename CfgValPairMembers<TOpt>::GeofenceFence3Lon;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence3Lon
    Field_geofenceFence3Lon& initField_geofenceFence3Lon()
    {
        return Base::template initField<FieldIdx_geofenceFence3Lon>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence3Lon
    Field_geofenceFence3Lon& accessField_geofenceFence3Lon()
    {
        return Base::template accessField<FieldIdx_geofenceFence3Lon>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence3Lon (const version)
    const Field_geofenceFence3Lon& accessField_geofenceFence3Lon() const
    {
        return Base::template accessField<FieldIdx_geofenceFence3Lon>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence3Rad.
    using Field_geofenceFence3Rad = typename CfgValPairMembers<TOpt>::GeofenceFence3Rad;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence3Rad
    Field_geofenceFence3Rad& initField_geofenceFence3Rad()
    {
        return Base::template initField<FieldIdx_geofenceFence3Rad>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence3Rad
    Field_geofenceFence3Rad& accessField_geofenceFence3Rad()
    {
        return Base::template accessField<FieldIdx_geofenceFence3Rad>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence3Rad (const version)
    const Field_geofenceFence3Rad& accessField_geofenceFence3Rad() const
    {
        return Base::template accessField<FieldIdx_geofenceFence3Rad>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceUseFence4.
    using Field_geofenceUseFence4 = typename CfgValPairMembers<TOpt>::GeofenceUseFence4;

    /// @brief Initialize as CfgValPairMembers::GeofenceUseFence4
    Field_geofenceUseFence4& initField_geofenceUseFence4()
    {
        return Base::template initField<FieldIdx_geofenceUseFence4>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUseFence4
    Field_geofenceUseFence4& accessField_geofenceUseFence4()
    {
        return Base::template accessField<FieldIdx_geofenceUseFence4>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceUseFence4 (const version)
    const Field_geofenceUseFence4& accessField_geofenceUseFence4() const
    {
        return Base::template accessField<FieldIdx_geofenceUseFence4>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence4Lat.
    using Field_geofenceFence4Lat = typename CfgValPairMembers<TOpt>::GeofenceFence4Lat;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence4Lat
    Field_geofenceFence4Lat& initField_geofenceFence4Lat()
    {
        return Base::template initField<FieldIdx_geofenceFence4Lat>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence4Lat
    Field_geofenceFence4Lat& accessField_geofenceFence4Lat()
    {
        return Base::template accessField<FieldIdx_geofenceFence4Lat>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence4Lat (const version)
    const Field_geofenceFence4Lat& accessField_geofenceFence4Lat() const
    {
        return Base::template accessField<FieldIdx_geofenceFence4Lat>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence4Lon.
    using Field_geofenceFence4Lon = typename CfgValPairMembers<TOpt>::GeofenceFence4Lon;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence4Lon
    Field_geofenceFence4Lon& initField_geofenceFence4Lon()
    {
        return Base::template initField<FieldIdx_geofenceFence4Lon>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence4Lon
    Field_geofenceFence4Lon& accessField_geofenceFence4Lon()
    {
        return Base::template accessField<FieldIdx_geofenceFence4Lon>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence4Lon (const version)
    const Field_geofenceFence4Lon& accessField_geofenceFence4Lon() const
    {
        return Base::template accessField<FieldIdx_geofenceFence4Lon>();
    }

    /// @brief Member type alias to CfgValPairMembers::GeofenceFence4Rad.
    using Field_geofenceFence4Rad = typename CfgValPairMembers<TOpt>::GeofenceFence4Rad;

    /// @brief Initialize as CfgValPairMembers::GeofenceFence4Rad
    Field_geofenceFence4Rad& initField_geofenceFence4Rad()
    {
        return Base::template initField<FieldIdx_geofenceFence4Rad>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence4Rad
    Field_geofenceFence4Rad& accessField_geofenceFence4Rad()
    {
        return Base::template accessField<FieldIdx_geofenceFence4Rad>();
    }

    /// @brief Access as CfgValPairMembers::GeofenceFence4Rad (const version)
    const Field_geofenceFence4Rad& accessField_geofenceFence4Rad() const
    {
        return Base::template accessField<FieldIdx_geofenceFence4Rad>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntCfgValctrl.
    using Field_hwAntCfgValctrl = typename CfgValPairMembers<TOpt>::HwAntCfgValctrl;

    /// @brief Initialize as CfgValPairMembers::HwAntCfgValctrl
    Field_hwAntCfgValctrl& initField_hwAntCfgValctrl()
    {
        return Base::template initField<FieldIdx_hwAntCfgValctrl>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgValctrl
    Field_hwAntCfgValctrl& accessField_hwAntCfgValctrl()
    {
        return Base::template accessField<FieldIdx_hwAntCfgValctrl>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgValctrl (const version)
    const Field_hwAntCfgValctrl& accessField_hwAntCfgValctrl() const
    {
        return Base::template accessField<FieldIdx_hwAntCfgValctrl>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntCfgShortdet.
    using Field_hwAntCfgShortdet = typename CfgValPairMembers<TOpt>::HwAntCfgShortdet;

    /// @brief Initialize as CfgValPairMembers::HwAntCfgShortdet
    Field_hwAntCfgShortdet& initField_hwAntCfgShortdet()
    {
        return Base::template initField<FieldIdx_hwAntCfgShortdet>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgShortdet
    Field_hwAntCfgShortdet& accessField_hwAntCfgShortdet()
    {
        return Base::template accessField<FieldIdx_hwAntCfgShortdet>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgShortdet (const version)
    const Field_hwAntCfgShortdet& accessField_hwAntCfgShortdet() const
    {
        return Base::template accessField<FieldIdx_hwAntCfgShortdet>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntCfgShortdetPol.
    using Field_hwAntCfgShortdetPol = typename CfgValPairMembers<TOpt>::HwAntCfgShortdetPol;

    /// @brief Initialize as CfgValPairMembers::HwAntCfgShortdetPol
    Field_hwAntCfgShortdetPol& initField_hwAntCfgShortdetPol()
    {
        return Base::template initField<FieldIdx_hwAntCfgShortdetPol>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgShortdetPol
    Field_hwAntCfgShortdetPol& accessField_hwAntCfgShortdetPol()
    {
        return Base::template accessField<FieldIdx_hwAntCfgShortdetPol>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgShortdetPol (const version)
    const Field_hwAntCfgShortdetPol& accessField_hwAntCfgShortdetPol() const
    {
        return Base::template accessField<FieldIdx_hwAntCfgShortdetPol>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntCfgOpendet.
    using Field_hwAntCfgOpendet = typename CfgValPairMembers<TOpt>::HwAntCfgOpendet;

    /// @brief Initialize as CfgValPairMembers::HwAntCfgOpendet
    Field_hwAntCfgOpendet& initField_hwAntCfgOpendet()
    {
        return Base::template initField<FieldIdx_hwAntCfgOpendet>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgOpendet
    Field_hwAntCfgOpendet& accessField_hwAntCfgOpendet()
    {
        return Base::template accessField<FieldIdx_hwAntCfgOpendet>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgOpendet (const version)
    const Field_hwAntCfgOpendet& accessField_hwAntCfgOpendet() const
    {
        return Base::template accessField<FieldIdx_hwAntCfgOpendet>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntCfgOpendetPol.
    using Field_hwAntCfgOpendetPol = typename CfgValPairMembers<TOpt>::HwAntCfgOpendetPol;

    /// @brief Initialize as CfgValPairMembers::HwAntCfgOpendetPol
    Field_hwAntCfgOpendetPol& initField_hwAntCfgOpendetPol()
    {
        return Base::template initField<FieldIdx_hwAntCfgOpendetPol>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgOpendetPol
    Field_hwAntCfgOpendetPol& accessField_hwAntCfgOpendetPol()
    {
        return Base::template accessField<FieldIdx_hwAntCfgOpendetPol>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgOpendetPol (const version)
    const Field_hwAntCfgOpendetPol& accessField_hwAntCfgOpendetPol() const
    {
        return Base::template accessField<FieldIdx_hwAntCfgOpendetPol>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntCfgPwrdown.
    using Field_hwAntCfgPwrdown = typename CfgValPairMembers<TOpt>::HwAntCfgPwrdown;

    /// @brief Initialize as CfgValPairMembers::HwAntCfgPwrdown
    Field_hwAntCfgPwrdown& initField_hwAntCfgPwrdown()
    {
        return Base::template initField<FieldIdx_hwAntCfgPwrdown>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgPwrdown
    Field_hwAntCfgPwrdown& accessField_hwAntCfgPwrdown()
    {
        return Base::template accessField<FieldIdx_hwAntCfgPwrdown>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgPwrdown (const version)
    const Field_hwAntCfgPwrdown& accessField_hwAntCfgPwrdown() const
    {
        return Base::template accessField<FieldIdx_hwAntCfgPwrdown>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntCfgPwrdownPol.
    using Field_hwAntCfgPwrdownPol = typename CfgValPairMembers<TOpt>::HwAntCfgPwrdownPol;

    /// @brief Initialize as CfgValPairMembers::HwAntCfgPwrdownPol
    Field_hwAntCfgPwrdownPol& initField_hwAntCfgPwrdownPol()
    {
        return Base::template initField<FieldIdx_hwAntCfgPwrdownPol>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgPwrdownPol
    Field_hwAntCfgPwrdownPol& accessField_hwAntCfgPwrdownPol()
    {
        return Base::template accessField<FieldIdx_hwAntCfgPwrdownPol>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgPwrdownPol (const version)
    const Field_hwAntCfgPwrdownPol& accessField_hwAntCfgPwrdownPol() const
    {
        return Base::template accessField<FieldIdx_hwAntCfgPwrdownPol>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntCfgRecover.
    using Field_hwAntCfgRecover = typename CfgValPairMembers<TOpt>::HwAntCfgRecover;

    /// @brief Initialize as CfgValPairMembers::HwAntCfgRecover
    Field_hwAntCfgRecover& initField_hwAntCfgRecover()
    {
        return Base::template initField<FieldIdx_hwAntCfgRecover>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgRecover
    Field_hwAntCfgRecover& accessField_hwAntCfgRecover()
    {
        return Base::template accessField<FieldIdx_hwAntCfgRecover>();
    }

    /// @brief Access as CfgValPairMembers::HwAntCfgRecover (const version)
    const Field_hwAntCfgRecover& accessField_hwAntCfgRecover() const
    {
        return Base::template accessField<FieldIdx_hwAntCfgRecover>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntSupSwitchPin.
    using Field_hwAntSupSwitchPin = typename CfgValPairMembers<TOpt>::HwAntSupSwitchPin;

    /// @brief Initialize as CfgValPairMembers::HwAntSupSwitchPin
    Field_hwAntSupSwitchPin& initField_hwAntSupSwitchPin()
    {
        return Base::template initField<FieldIdx_hwAntSupSwitchPin>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupSwitchPin
    Field_hwAntSupSwitchPin& accessField_hwAntSupSwitchPin()
    {
        return Base::template accessField<FieldIdx_hwAntSupSwitchPin>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupSwitchPin (const version)
    const Field_hwAntSupSwitchPin& accessField_hwAntSupSwitchPin() const
    {
        return Base::template accessField<FieldIdx_hwAntSupSwitchPin>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntSupShortPin.
    using Field_hwAntSupShortPin = typename CfgValPairMembers<TOpt>::HwAntSupShortPin;

    /// @brief Initialize as CfgValPairMembers::HwAntSupShortPin
    Field_hwAntSupShortPin& initField_hwAntSupShortPin()
    {
        return Base::template initField<FieldIdx_hwAntSupShortPin>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupShortPin
    Field_hwAntSupShortPin& accessField_hwAntSupShortPin()
    {
        return Base::template accessField<FieldIdx_hwAntSupShortPin>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupShortPin (const version)
    const Field_hwAntSupShortPin& accessField_hwAntSupShortPin() const
    {
        return Base::template accessField<FieldIdx_hwAntSupShortPin>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntSupOpenPin.
    using Field_hwAntSupOpenPin = typename CfgValPairMembers<TOpt>::HwAntSupOpenPin;

    /// @brief Initialize as CfgValPairMembers::HwAntSupOpenPin
    Field_hwAntSupOpenPin& initField_hwAntSupOpenPin()
    {
        return Base::template initField<FieldIdx_hwAntSupOpenPin>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupOpenPin
    Field_hwAntSupOpenPin& accessField_hwAntSupOpenPin()
    {
        return Base::template accessField<FieldIdx_hwAntSupOpenPin>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupOpenPin (const version)
    const Field_hwAntSupOpenPin& accessField_hwAntSupOpenPin() const
    {
        return Base::template accessField<FieldIdx_hwAntSupOpenPin>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntSupEngine.
    using Field_hwAntSupEngine = typename CfgValPairMembers<TOpt>::HwAntSupEngine;

    /// @brief Initialize as CfgValPairMembers::HwAntSupEngine
    Field_hwAntSupEngine& initField_hwAntSupEngine()
    {
        return Base::template initField<FieldIdx_hwAntSupEngine>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupEngine
    Field_hwAntSupEngine& accessField_hwAntSupEngine()
    {
        return Base::template accessField<FieldIdx_hwAntSupEngine>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupEngine (const version)
    const Field_hwAntSupEngine& accessField_hwAntSupEngine() const
    {
        return Base::template accessField<FieldIdx_hwAntSupEngine>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntSupShortThr.
    using Field_hwAntSupShortThr = typename CfgValPairMembers<TOpt>::HwAntSupShortThr;

    /// @brief Initialize as CfgValPairMembers::HwAntSupShortThr
    Field_hwAntSupShortThr& initField_hwAntSupShortThr()
    {
        return Base::template initField<FieldIdx_hwAntSupShortThr>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupShortThr
    Field_hwAntSupShortThr& accessField_hwAntSupShortThr()
    {
        return Base::template accessField<FieldIdx_hwAntSupShortThr>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupShortThr (const version)
    const Field_hwAntSupShortThr& accessField_hwAntSupShortThr() const
    {
        return Base::template accessField<FieldIdx_hwAntSupShortThr>();
    }

    /// @brief Member type alias to CfgValPairMembers::HwAntSupOpenThr.
    using Field_hwAntSupOpenThr = typename CfgValPairMembers<TOpt>::HwAntSupOpenThr;

    /// @brief Initialize as CfgValPairMembers::HwAntSupOpenThr
    Field_hwAntSupOpenThr& initField_hwAntSupOpenThr()
    {
        return Base::template initField<FieldIdx_hwAntSupOpenThr>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupOpenThr
    Field_hwAntSupOpenThr& accessField_hwAntSupOpenThr()
    {
        return Base::template accessField<FieldIdx_hwAntSupOpenThr>();
    }

    /// @brief Access as CfgValPairMembers::HwAntSupOpenThr (const version)
    const Field_hwAntSupOpenThr& accessField_hwAntSupOpenThr() const
    {
        return Base::template accessField<FieldIdx_hwAntSupOpenThr>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cAddress.
    using Field_i2cAddress = typename CfgValPairMembers<TOpt>::I2cAddress;

    /// @brief Initialize as CfgValPairMembers::I2cAddress
    Field_i2cAddress& initField_i2cAddress()
    {
        return Base::template initField<FieldIdx_i2cAddress>();
    }

    /// @brief Access as CfgValPairMembers::I2cAddress
    Field_i2cAddress& accessField_i2cAddress()
    {
        return Base::template accessField<FieldIdx_i2cAddress>();
    }

    /// @brief Access as CfgValPairMembers::I2cAddress (const version)
    const Field_i2cAddress& accessField_i2cAddress() const
    {
        return Base::template accessField<FieldIdx_i2cAddress>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cExtendedtimeout.
    using Field_i2cExtendedtimeout = typename CfgValPairMembers<TOpt>::I2cExtendedtimeout;

    /// @brief Initialize as CfgValPairMembers::I2cExtendedtimeout
    Field_i2cExtendedtimeout& initField_i2cExtendedtimeout()
    {
        return Base::template initField<FieldIdx_i2cExtendedtimeout>();
    }

    /// @brief Access as CfgValPairMembers::I2cExtendedtimeout
    Field_i2cExtendedtimeout& accessField_i2cExtendedtimeout()
    {
        return Base::template accessField<FieldIdx_i2cExtendedtimeout>();
    }

    /// @brief Access as CfgValPairMembers::I2cExtendedtimeout (const version)
    const Field_i2cExtendedtimeout& accessField_i2cExtendedtimeout() const
    {
        return Base::template accessField<FieldIdx_i2cExtendedtimeout>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cEnabled.
    using Field_i2cEnabled = typename CfgValPairMembers<TOpt>::I2cEnabled;

    /// @brief Initialize as CfgValPairMembers::I2cEnabled
    Field_i2cEnabled& initField_i2cEnabled()
    {
        return Base::template initField<FieldIdx_i2cEnabled>();
    }

    /// @brief Access as CfgValPairMembers::I2cEnabled
    Field_i2cEnabled& accessField_i2cEnabled()
    {
        return Base::template accessField<FieldIdx_i2cEnabled>();
    }

    /// @brief Access as CfgValPairMembers::I2cEnabled (const version)
    const Field_i2cEnabled& accessField_i2cEnabled() const
    {
        return Base::template accessField<FieldIdx_i2cEnabled>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cInprotUbx.
    using Field_i2cInprotUbx = typename CfgValPairMembers<TOpt>::I2cInprotUbx;

    /// @brief Initialize as CfgValPairMembers::I2cInprotUbx
    Field_i2cInprotUbx& initField_i2cInprotUbx()
    {
        return Base::template initField<FieldIdx_i2cInprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::I2cInprotUbx
    Field_i2cInprotUbx& accessField_i2cInprotUbx()
    {
        return Base::template accessField<FieldIdx_i2cInprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::I2cInprotUbx (const version)
    const Field_i2cInprotUbx& accessField_i2cInprotUbx() const
    {
        return Base::template accessField<FieldIdx_i2cInprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cInprotNmea.
    using Field_i2cInprotNmea = typename CfgValPairMembers<TOpt>::I2cInprotNmea;

    /// @brief Initialize as CfgValPairMembers::I2cInprotNmea
    Field_i2cInprotNmea& initField_i2cInprotNmea()
    {
        return Base::template initField<FieldIdx_i2cInprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::I2cInprotNmea
    Field_i2cInprotNmea& accessField_i2cInprotNmea()
    {
        return Base::template accessField<FieldIdx_i2cInprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::I2cInprotNmea (const version)
    const Field_i2cInprotNmea& accessField_i2cInprotNmea() const
    {
        return Base::template accessField<FieldIdx_i2cInprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cInprotRtcm3x.
    using Field_i2cInprotRtcm3x = typename CfgValPairMembers<TOpt>::I2cInprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::I2cInprotRtcm3x
    Field_i2cInprotRtcm3x& initField_i2cInprotRtcm3x()
    {
        return Base::template initField<FieldIdx_i2cInprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::I2cInprotRtcm3x
    Field_i2cInprotRtcm3x& accessField_i2cInprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_i2cInprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::I2cInprotRtcm3x (const version)
    const Field_i2cInprotRtcm3x& accessField_i2cInprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_i2cInprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cOutprotUbx.
    using Field_i2cOutprotUbx = typename CfgValPairMembers<TOpt>::I2cOutprotUbx;

    /// @brief Initialize as CfgValPairMembers::I2cOutprotUbx
    Field_i2cOutprotUbx& initField_i2cOutprotUbx()
    {
        return Base::template initField<FieldIdx_i2cOutprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::I2cOutprotUbx
    Field_i2cOutprotUbx& accessField_i2cOutprotUbx()
    {
        return Base::template accessField<FieldIdx_i2cOutprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::I2cOutprotUbx (const version)
    const Field_i2cOutprotUbx& accessField_i2cOutprotUbx() const
    {
        return Base::template accessField<FieldIdx_i2cOutprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cOutprotNmea.
    using Field_i2cOutprotNmea = typename CfgValPairMembers<TOpt>::I2cOutprotNmea;

    /// @brief Initialize as CfgValPairMembers::I2cOutprotNmea
    Field_i2cOutprotNmea& initField_i2cOutprotNmea()
    {
        return Base::template initField<FieldIdx_i2cOutprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::I2cOutprotNmea
    Field_i2cOutprotNmea& accessField_i2cOutprotNmea()
    {
        return Base::template accessField<FieldIdx_i2cOutprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::I2cOutprotNmea (const version)
    const Field_i2cOutprotNmea& accessField_i2cOutprotNmea() const
    {
        return Base::template accessField<FieldIdx_i2cOutprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::I2cOutprotRtcm3x.
    using Field_i2cOutprotRtcm3x = typename CfgValPairMembers<TOpt>::I2cOutprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::I2cOutprotRtcm3x
    Field_i2cOutprotRtcm3x& initField_i2cOutprotRtcm3x()
    {
        return Base::template initField<FieldIdx_i2cOutprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::I2cOutprotRtcm3x
    Field_i2cOutprotRtcm3x& accessField_i2cOutprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_i2cOutprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::I2cOutprotRtcm3x (const version)
    const Field_i2cOutprotRtcm3x& accessField_i2cOutprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_i2cOutprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgUbxI2c.
    using Field_infmsgUbxI2c = typename CfgValPairMembers<TOpt>::InfmsgUbxI2c;

    /// @brief Initialize as CfgValPairMembers::InfmsgUbxI2c
    Field_infmsgUbxI2c& initField_infmsgUbxI2c()
    {
        return Base::template initField<FieldIdx_infmsgUbxI2c>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxI2c
    Field_infmsgUbxI2c& accessField_infmsgUbxI2c()
    {
        return Base::template accessField<FieldIdx_infmsgUbxI2c>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxI2c (const version)
    const Field_infmsgUbxI2c& accessField_infmsgUbxI2c() const
    {
        return Base::template accessField<FieldIdx_infmsgUbxI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgUbxUart1.
    using Field_infmsgUbxUart1 = typename CfgValPairMembers<TOpt>::InfmsgUbxUart1;

    /// @brief Initialize as CfgValPairMembers::InfmsgUbxUart1
    Field_infmsgUbxUart1& initField_infmsgUbxUart1()
    {
        return Base::template initField<FieldIdx_infmsgUbxUart1>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxUart1
    Field_infmsgUbxUart1& accessField_infmsgUbxUart1()
    {
        return Base::template accessField<FieldIdx_infmsgUbxUart1>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxUart1 (const version)
    const Field_infmsgUbxUart1& accessField_infmsgUbxUart1() const
    {
        return Base::template accessField<FieldIdx_infmsgUbxUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgUbxUart2.
    using Field_infmsgUbxUart2 = typename CfgValPairMembers<TOpt>::InfmsgUbxUart2;

    /// @brief Initialize as CfgValPairMembers::InfmsgUbxUart2
    Field_infmsgUbxUart2& initField_infmsgUbxUart2()
    {
        return Base::template initField<FieldIdx_infmsgUbxUart2>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxUart2
    Field_infmsgUbxUart2& accessField_infmsgUbxUart2()
    {
        return Base::template accessField<FieldIdx_infmsgUbxUart2>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxUart2 (const version)
    const Field_infmsgUbxUart2& accessField_infmsgUbxUart2() const
    {
        return Base::template accessField<FieldIdx_infmsgUbxUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgUbxUsb.
    using Field_infmsgUbxUsb = typename CfgValPairMembers<TOpt>::InfmsgUbxUsb;

    /// @brief Initialize as CfgValPairMembers::InfmsgUbxUsb
    Field_infmsgUbxUsb& initField_infmsgUbxUsb()
    {
        return Base::template initField<FieldIdx_infmsgUbxUsb>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxUsb
    Field_infmsgUbxUsb& accessField_infmsgUbxUsb()
    {
        return Base::template accessField<FieldIdx_infmsgUbxUsb>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxUsb (const version)
    const Field_infmsgUbxUsb& accessField_infmsgUbxUsb() const
    {
        return Base::template accessField<FieldIdx_infmsgUbxUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgUbxSpi.
    using Field_infmsgUbxSpi = typename CfgValPairMembers<TOpt>::InfmsgUbxSpi;

    /// @brief Initialize as CfgValPairMembers::InfmsgUbxSpi
    Field_infmsgUbxSpi& initField_infmsgUbxSpi()
    {
        return Base::template initField<FieldIdx_infmsgUbxSpi>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxSpi
    Field_infmsgUbxSpi& accessField_infmsgUbxSpi()
    {
        return Base::template accessField<FieldIdx_infmsgUbxSpi>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgUbxSpi (const version)
    const Field_infmsgUbxSpi& accessField_infmsgUbxSpi() const
    {
        return Base::template accessField<FieldIdx_infmsgUbxSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgNmeaI2c.
    using Field_infmsgNmeaI2c = typename CfgValPairMembers<TOpt>::InfmsgNmeaI2c;

    /// @brief Initialize as CfgValPairMembers::InfmsgNmeaI2c
    Field_infmsgNmeaI2c& initField_infmsgNmeaI2c()
    {
        return Base::template initField<FieldIdx_infmsgNmeaI2c>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaI2c
    Field_infmsgNmeaI2c& accessField_infmsgNmeaI2c()
    {
        return Base::template accessField<FieldIdx_infmsgNmeaI2c>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaI2c (const version)
    const Field_infmsgNmeaI2c& accessField_infmsgNmeaI2c() const
    {
        return Base::template accessField<FieldIdx_infmsgNmeaI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgNmeaUart1.
    using Field_infmsgNmeaUart1 = typename CfgValPairMembers<TOpt>::InfmsgNmeaUart1;

    /// @brief Initialize as CfgValPairMembers::InfmsgNmeaUart1
    Field_infmsgNmeaUart1& initField_infmsgNmeaUart1()
    {
        return Base::template initField<FieldIdx_infmsgNmeaUart1>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaUart1
    Field_infmsgNmeaUart1& accessField_infmsgNmeaUart1()
    {
        return Base::template accessField<FieldIdx_infmsgNmeaUart1>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaUart1 (const version)
    const Field_infmsgNmeaUart1& accessField_infmsgNmeaUart1() const
    {
        return Base::template accessField<FieldIdx_infmsgNmeaUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgNmeaUart2.
    using Field_infmsgNmeaUart2 = typename CfgValPairMembers<TOpt>::InfmsgNmeaUart2;

    /// @brief Initialize as CfgValPairMembers::InfmsgNmeaUart2
    Field_infmsgNmeaUart2& initField_infmsgNmeaUart2()
    {
        return Base::template initField<FieldIdx_infmsgNmeaUart2>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaUart2
    Field_infmsgNmeaUart2& accessField_infmsgNmeaUart2()
    {
        return Base::template accessField<FieldIdx_infmsgNmeaUart2>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaUart2 (const version)
    const Field_infmsgNmeaUart2& accessField_infmsgNmeaUart2() const
    {
        return Base::template accessField<FieldIdx_infmsgNmeaUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgNmeaUsb.
    using Field_infmsgNmeaUsb = typename CfgValPairMembers<TOpt>::InfmsgNmeaUsb;

    /// @brief Initialize as CfgValPairMembers::InfmsgNmeaUsb
    Field_infmsgNmeaUsb& initField_infmsgNmeaUsb()
    {
        return Base::template initField<FieldIdx_infmsgNmeaUsb>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaUsb
    Field_infmsgNmeaUsb& accessField_infmsgNmeaUsb()
    {
        return Base::template accessField<FieldIdx_infmsgNmeaUsb>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaUsb (const version)
    const Field_infmsgNmeaUsb& accessField_infmsgNmeaUsb() const
    {
        return Base::template accessField<FieldIdx_infmsgNmeaUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::InfmsgNmeaSpi.
    using Field_infmsgNmeaSpi = typename CfgValPairMembers<TOpt>::InfmsgNmeaSpi;

    /// @brief Initialize as CfgValPairMembers::InfmsgNmeaSpi
    Field_infmsgNmeaSpi& initField_infmsgNmeaSpi()
    {
        return Base::template initField<FieldIdx_infmsgNmeaSpi>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaSpi
    Field_infmsgNmeaSpi& accessField_infmsgNmeaSpi()
    {
        return Base::template accessField<FieldIdx_infmsgNmeaSpi>();
    }

    /// @brief Access as CfgValPairMembers::InfmsgNmeaSpi (const version)
    const Field_infmsgNmeaSpi& accessField_infmsgNmeaSpi() const
    {
        return Base::template accessField<FieldIdx_infmsgNmeaSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::ItfmBbThreshold.
    using Field_itfmBbThreshold = typename CfgValPairMembers<TOpt>::ItfmBbThreshold;

    /// @brief Initialize as CfgValPairMembers::ItfmBbThreshold
    Field_itfmBbThreshold& initField_itfmBbThreshold()
    {
        return Base::template initField<FieldIdx_itfmBbThreshold>();
    }

    /// @brief Access as CfgValPairMembers::ItfmBbThreshold
    Field_itfmBbThreshold& accessField_itfmBbThreshold()
    {
        return Base::template accessField<FieldIdx_itfmBbThreshold>();
    }

    /// @brief Access as CfgValPairMembers::ItfmBbThreshold (const version)
    const Field_itfmBbThreshold& accessField_itfmBbThreshold() const
    {
        return Base::template accessField<FieldIdx_itfmBbThreshold>();
    }

    /// @brief Member type alias to CfgValPairMembers::ItfmCwThreshold.
    using Field_itfmCwThreshold = typename CfgValPairMembers<TOpt>::ItfmCwThreshold;

    /// @brief Initialize as CfgValPairMembers::ItfmCwThreshold
    Field_itfmCwThreshold& initField_itfmCwThreshold()
    {
        return Base::template initField<FieldIdx_itfmCwThreshold>();
    }

    /// @brief Access as CfgValPairMembers::ItfmCwThreshold
    Field_itfmCwThreshold& accessField_itfmCwThreshold()
    {
        return Base::template accessField<FieldIdx_itfmCwThreshold>();
    }

    /// @brief Access as CfgValPairMembers::ItfmCwThreshold (const version)
    const Field_itfmCwThreshold& accessField_itfmCwThreshold() const
    {
        return Base::template accessField<FieldIdx_itfmCwThreshold>();
    }

    /// @brief Member type alias to CfgValPairMembers::ItfmEnable.
    using Field_itfmEnable = typename CfgValPairMembers<TOpt>::ItfmEnable;

    /// @brief Initialize as CfgValPairMembers::ItfmEnable
    Field_itfmEnable& initField_itfmEnable()
    {
        return Base::template initField<FieldIdx_itfmEnable>();
    }

    /// @brief Access as CfgValPairMembers::ItfmEnable
    Field_itfmEnable& accessField_itfmEnable()
    {
        return Base::template accessField<FieldIdx_itfmEnable>();
    }

    /// @brief Access as CfgValPairMembers::ItfmEnable (const version)
    const Field_itfmEnable& accessField_itfmEnable() const
    {
        return Base::template accessField<FieldIdx_itfmEnable>();
    }

    /// @brief Member type alias to CfgValPairMembers::ItfmAntSetting.
    using Field_itfmAntSetting = typename CfgValPairMembers<TOpt>::ItfmAntSetting;

    /// @brief Initialize as CfgValPairMembers::ItfmAntSetting
    Field_itfmAntSetting& initField_itfmAntSetting()
    {
        return Base::template initField<FieldIdx_itfmAntSetting>();
    }

    /// @brief Access as CfgValPairMembers::ItfmAntSetting
    Field_itfmAntSetting& accessField_itfmAntSetting()
    {
        return Base::template accessField<FieldIdx_itfmAntSetting>();
    }

    /// @brief Access as CfgValPairMembers::ItfmAntSetting (const version)
    const Field_itfmAntSetting& accessField_itfmAntSetting() const
    {
        return Base::template accessField<FieldIdx_itfmAntSetting>();
    }

    /// @brief Member type alias to CfgValPairMembers::LogfilterRecordEna.
    using Field_logfilterRecordEna = typename CfgValPairMembers<TOpt>::LogfilterRecordEna;

    /// @brief Initialize as CfgValPairMembers::LogfilterRecordEna
    Field_logfilterRecordEna& initField_logfilterRecordEna()
    {
        return Base::template initField<FieldIdx_logfilterRecordEna>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterRecordEna
    Field_logfilterRecordEna& accessField_logfilterRecordEna()
    {
        return Base::template accessField<FieldIdx_logfilterRecordEna>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterRecordEna (const version)
    const Field_logfilterRecordEna& accessField_logfilterRecordEna() const
    {
        return Base::template accessField<FieldIdx_logfilterRecordEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::LogfilterOncePerWakeUpEna.
    using Field_logfilterOncePerWakeUpEna = typename CfgValPairMembers<TOpt>::LogfilterOncePerWakeUpEna;

    /// @brief Initialize as CfgValPairMembers::LogfilterOncePerWakeUpEna
    Field_logfilterOncePerWakeUpEna& initField_logfilterOncePerWakeUpEna()
    {
        return Base::template initField<FieldIdx_logfilterOncePerWakeUpEna>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterOncePerWakeUpEna
    Field_logfilterOncePerWakeUpEna& accessField_logfilterOncePerWakeUpEna()
    {
        return Base::template accessField<FieldIdx_logfilterOncePerWakeUpEna>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterOncePerWakeUpEna (const version)
    const Field_logfilterOncePerWakeUpEna& accessField_logfilterOncePerWakeUpEna() const
    {
        return Base::template accessField<FieldIdx_logfilterOncePerWakeUpEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::LogfilterApplyAllFilters.
    using Field_logfilterApplyAllFilters = typename CfgValPairMembers<TOpt>::LogfilterApplyAllFilters;

    /// @brief Initialize as CfgValPairMembers::LogfilterApplyAllFilters
    Field_logfilterApplyAllFilters& initField_logfilterApplyAllFilters()
    {
        return Base::template initField<FieldIdx_logfilterApplyAllFilters>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterApplyAllFilters
    Field_logfilterApplyAllFilters& accessField_logfilterApplyAllFilters()
    {
        return Base::template accessField<FieldIdx_logfilterApplyAllFilters>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterApplyAllFilters (const version)
    const Field_logfilterApplyAllFilters& accessField_logfilterApplyAllFilters() const
    {
        return Base::template accessField<FieldIdx_logfilterApplyAllFilters>();
    }

    /// @brief Member type alias to CfgValPairMembers::LogfilterMinInterval.
    using Field_logfilterMinInterval = typename CfgValPairMembers<TOpt>::LogfilterMinInterval;

    /// @brief Initialize as CfgValPairMembers::LogfilterMinInterval
    Field_logfilterMinInterval& initField_logfilterMinInterval()
    {
        return Base::template initField<FieldIdx_logfilterMinInterval>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterMinInterval
    Field_logfilterMinInterval& accessField_logfilterMinInterval()
    {
        return Base::template accessField<FieldIdx_logfilterMinInterval>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterMinInterval (const version)
    const Field_logfilterMinInterval& accessField_logfilterMinInterval() const
    {
        return Base::template accessField<FieldIdx_logfilterMinInterval>();
    }

    /// @brief Member type alias to CfgValPairMembers::LogfilterTimeThrs.
    using Field_logfilterTimeThrs = typename CfgValPairMembers<TOpt>::LogfilterTimeThrs;

    /// @brief Initialize as CfgValPairMembers::LogfilterTimeThrs
    Field_logfilterTimeThrs& initField_logfilterTimeThrs()
    {
        return Base::template initField<FieldIdx_logfilterTimeThrs>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterTimeThrs
    Field_logfilterTimeThrs& accessField_logfilterTimeThrs()
    {
        return Base::template accessField<FieldIdx_logfilterTimeThrs>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterTimeThrs (const version)
    const Field_logfilterTimeThrs& accessField_logfilterTimeThrs() const
    {
        return Base::template accessField<FieldIdx_logfilterTimeThrs>();
    }

    /// @brief Member type alias to CfgValPairMembers::LogfilterSpeedThrs.
    using Field_logfilterSpeedThrs = typename CfgValPairMembers<TOpt>::LogfilterSpeedThrs;

    /// @brief Initialize as CfgValPairMembers::LogfilterSpeedThrs
    Field_logfilterSpeedThrs& initField_logfilterSpeedThrs()
    {
        return Base::template initField<FieldIdx_logfilterSpeedThrs>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterSpeedThrs
    Field_logfilterSpeedThrs& accessField_logfilterSpeedThrs()
    {
        return Base::template accessField<FieldIdx_logfilterSpeedThrs>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterSpeedThrs (const version)
    const Field_logfilterSpeedThrs& accessField_logfilterSpeedThrs() const
    {
        return Base::template accessField<FieldIdx_logfilterSpeedThrs>();
    }

    /// @brief Member type alias to CfgValPairMembers::LogfilterPositionThrs.
    using Field_logfilterPositionThrs = typename CfgValPairMembers<TOpt>::LogfilterPositionThrs;

    /// @brief Initialize as CfgValPairMembers::LogfilterPositionThrs
    Field_logfilterPositionThrs& initField_logfilterPositionThrs()
    {
        return Base::template initField<FieldIdx_logfilterPositionThrs>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterPositionThrs
    Field_logfilterPositionThrs& accessField_logfilterPositionThrs()
    {
        return Base::template accessField<FieldIdx_logfilterPositionThrs>();
    }

    /// @brief Access as CfgValPairMembers::LogfilterPositionThrs (const version)
    const Field_logfilterPositionThrs& accessField_logfilterPositionThrs() const
    {
        return Base::template accessField<FieldIdx_logfilterPositionThrs>();
    }

    /// @brief Member type alias to CfgValPairMembers::MotGnssSpeedThrs.
    using Field_motGnssSpeedThrs = typename CfgValPairMembers<TOpt>::MotGnssSpeedThrs;

    /// @brief Initialize as CfgValPairMembers::MotGnssSpeedThrs
    Field_motGnssSpeedThrs& initField_motGnssSpeedThrs()
    {
        return Base::template initField<FieldIdx_motGnssSpeedThrs>();
    }

    /// @brief Access as CfgValPairMembers::MotGnssSpeedThrs
    Field_motGnssSpeedThrs& accessField_motGnssSpeedThrs()
    {
        return Base::template accessField<FieldIdx_motGnssSpeedThrs>();
    }

    /// @brief Access as CfgValPairMembers::MotGnssSpeedThrs (const version)
    const Field_motGnssSpeedThrs& accessField_motGnssSpeedThrs() const
    {
        return Base::template accessField<FieldIdx_motGnssSpeedThrs>();
    }

    /// @brief Member type alias to CfgValPairMembers::MotGnssDistThrs.
    using Field_motGnssDistThrs = typename CfgValPairMembers<TOpt>::MotGnssDistThrs;

    /// @brief Initialize as CfgValPairMembers::MotGnssDistThrs
    Field_motGnssDistThrs& initField_motGnssDistThrs()
    {
        return Base::template initField<FieldIdx_motGnssDistThrs>();
    }

    /// @brief Access as CfgValPairMembers::MotGnssDistThrs
    Field_motGnssDistThrs& accessField_motGnssDistThrs()
    {
        return Base::template accessField<FieldIdx_motGnssDistThrs>();
    }

    /// @brief Access as CfgValPairMembers::MotGnssDistThrs (const version)
    const Field_motGnssDistThrs& accessField_motGnssDistThrs() const
    {
        return Base::template accessField<FieldIdx_motGnssDistThrs>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdDtmI2c.
    using Field_msgoutNmeaIdDtmI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdDtmI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdDtmI2c
    Field_msgoutNmeaIdDtmI2c& initField_msgoutNmeaIdDtmI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdDtmI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmI2c
    Field_msgoutNmeaIdDtmI2c& accessField_msgoutNmeaIdDtmI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmI2c (const version)
    const Field_msgoutNmeaIdDtmI2c& accessField_msgoutNmeaIdDtmI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdDtmSpi.
    using Field_msgoutNmeaIdDtmSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdDtmSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdDtmSpi
    Field_msgoutNmeaIdDtmSpi& initField_msgoutNmeaIdDtmSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdDtmSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmSpi
    Field_msgoutNmeaIdDtmSpi& accessField_msgoutNmeaIdDtmSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmSpi (const version)
    const Field_msgoutNmeaIdDtmSpi& accessField_msgoutNmeaIdDtmSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdDtmUart1.
    using Field_msgoutNmeaIdDtmUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdDtmUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdDtmUart1
    Field_msgoutNmeaIdDtmUart1& initField_msgoutNmeaIdDtmUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdDtmUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmUart1
    Field_msgoutNmeaIdDtmUart1& accessField_msgoutNmeaIdDtmUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmUart1 (const version)
    const Field_msgoutNmeaIdDtmUart1& accessField_msgoutNmeaIdDtmUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdDtmUart2.
    using Field_msgoutNmeaIdDtmUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdDtmUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdDtmUart2
    Field_msgoutNmeaIdDtmUart2& initField_msgoutNmeaIdDtmUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdDtmUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmUart2
    Field_msgoutNmeaIdDtmUart2& accessField_msgoutNmeaIdDtmUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmUart2 (const version)
    const Field_msgoutNmeaIdDtmUart2& accessField_msgoutNmeaIdDtmUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdDtmUsb.
    using Field_msgoutNmeaIdDtmUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdDtmUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdDtmUsb
    Field_msgoutNmeaIdDtmUsb& initField_msgoutNmeaIdDtmUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdDtmUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmUsb
    Field_msgoutNmeaIdDtmUsb& accessField_msgoutNmeaIdDtmUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdDtmUsb (const version)
    const Field_msgoutNmeaIdDtmUsb& accessField_msgoutNmeaIdDtmUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdDtmUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGbsI2c.
    using Field_msgoutNmeaIdGbsI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGbsI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGbsI2c
    Field_msgoutNmeaIdGbsI2c& initField_msgoutNmeaIdGbsI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGbsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsI2c
    Field_msgoutNmeaIdGbsI2c& accessField_msgoutNmeaIdGbsI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsI2c (const version)
    const Field_msgoutNmeaIdGbsI2c& accessField_msgoutNmeaIdGbsI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGbsSpi.
    using Field_msgoutNmeaIdGbsSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGbsSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGbsSpi
    Field_msgoutNmeaIdGbsSpi& initField_msgoutNmeaIdGbsSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGbsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsSpi
    Field_msgoutNmeaIdGbsSpi& accessField_msgoutNmeaIdGbsSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsSpi (const version)
    const Field_msgoutNmeaIdGbsSpi& accessField_msgoutNmeaIdGbsSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGbsUart1.
    using Field_msgoutNmeaIdGbsUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGbsUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGbsUart1
    Field_msgoutNmeaIdGbsUart1& initField_msgoutNmeaIdGbsUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGbsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsUart1
    Field_msgoutNmeaIdGbsUart1& accessField_msgoutNmeaIdGbsUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsUart1 (const version)
    const Field_msgoutNmeaIdGbsUart1& accessField_msgoutNmeaIdGbsUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGbsUart2.
    using Field_msgoutNmeaIdGbsUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGbsUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGbsUart2
    Field_msgoutNmeaIdGbsUart2& initField_msgoutNmeaIdGbsUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGbsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsUart2
    Field_msgoutNmeaIdGbsUart2& accessField_msgoutNmeaIdGbsUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsUart2 (const version)
    const Field_msgoutNmeaIdGbsUart2& accessField_msgoutNmeaIdGbsUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGbsUsb.
    using Field_msgoutNmeaIdGbsUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGbsUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGbsUsb
    Field_msgoutNmeaIdGbsUsb& initField_msgoutNmeaIdGbsUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGbsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsUsb
    Field_msgoutNmeaIdGbsUsb& accessField_msgoutNmeaIdGbsUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGbsUsb (const version)
    const Field_msgoutNmeaIdGbsUsb& accessField_msgoutNmeaIdGbsUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGbsUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGgaI2c.
    using Field_msgoutNmeaIdGgaI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGgaI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGgaI2c
    Field_msgoutNmeaIdGgaI2c& initField_msgoutNmeaIdGgaI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGgaI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaI2c
    Field_msgoutNmeaIdGgaI2c& accessField_msgoutNmeaIdGgaI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaI2c (const version)
    const Field_msgoutNmeaIdGgaI2c& accessField_msgoutNmeaIdGgaI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGgaSpi.
    using Field_msgoutNmeaIdGgaSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGgaSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGgaSpi
    Field_msgoutNmeaIdGgaSpi& initField_msgoutNmeaIdGgaSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGgaSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaSpi
    Field_msgoutNmeaIdGgaSpi& accessField_msgoutNmeaIdGgaSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaSpi (const version)
    const Field_msgoutNmeaIdGgaSpi& accessField_msgoutNmeaIdGgaSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGgaUart1.
    using Field_msgoutNmeaIdGgaUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGgaUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGgaUart1
    Field_msgoutNmeaIdGgaUart1& initField_msgoutNmeaIdGgaUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGgaUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaUart1
    Field_msgoutNmeaIdGgaUart1& accessField_msgoutNmeaIdGgaUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaUart1 (const version)
    const Field_msgoutNmeaIdGgaUart1& accessField_msgoutNmeaIdGgaUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGgaUart2.
    using Field_msgoutNmeaIdGgaUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGgaUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGgaUart2
    Field_msgoutNmeaIdGgaUart2& initField_msgoutNmeaIdGgaUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGgaUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaUart2
    Field_msgoutNmeaIdGgaUart2& accessField_msgoutNmeaIdGgaUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaUart2 (const version)
    const Field_msgoutNmeaIdGgaUart2& accessField_msgoutNmeaIdGgaUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGgaUsb.
    using Field_msgoutNmeaIdGgaUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGgaUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGgaUsb
    Field_msgoutNmeaIdGgaUsb& initField_msgoutNmeaIdGgaUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGgaUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaUsb
    Field_msgoutNmeaIdGgaUsb& accessField_msgoutNmeaIdGgaUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGgaUsb (const version)
    const Field_msgoutNmeaIdGgaUsb& accessField_msgoutNmeaIdGgaUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGgaUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGllI2c.
    using Field_msgoutNmeaIdGllI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGllI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGllI2c
    Field_msgoutNmeaIdGllI2c& initField_msgoutNmeaIdGllI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGllI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllI2c
    Field_msgoutNmeaIdGllI2c& accessField_msgoutNmeaIdGllI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllI2c (const version)
    const Field_msgoutNmeaIdGllI2c& accessField_msgoutNmeaIdGllI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGllSpi.
    using Field_msgoutNmeaIdGllSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGllSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGllSpi
    Field_msgoutNmeaIdGllSpi& initField_msgoutNmeaIdGllSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGllSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllSpi
    Field_msgoutNmeaIdGllSpi& accessField_msgoutNmeaIdGllSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllSpi (const version)
    const Field_msgoutNmeaIdGllSpi& accessField_msgoutNmeaIdGllSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGllUart1.
    using Field_msgoutNmeaIdGllUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGllUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGllUart1
    Field_msgoutNmeaIdGllUart1& initField_msgoutNmeaIdGllUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGllUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllUart1
    Field_msgoutNmeaIdGllUart1& accessField_msgoutNmeaIdGllUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllUart1 (const version)
    const Field_msgoutNmeaIdGllUart1& accessField_msgoutNmeaIdGllUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGllUart2.
    using Field_msgoutNmeaIdGllUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGllUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGllUart2
    Field_msgoutNmeaIdGllUart2& initField_msgoutNmeaIdGllUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGllUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllUart2
    Field_msgoutNmeaIdGllUart2& accessField_msgoutNmeaIdGllUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllUart2 (const version)
    const Field_msgoutNmeaIdGllUart2& accessField_msgoutNmeaIdGllUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGllUsb.
    using Field_msgoutNmeaIdGllUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGllUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGllUsb
    Field_msgoutNmeaIdGllUsb& initField_msgoutNmeaIdGllUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGllUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllUsb
    Field_msgoutNmeaIdGllUsb& accessField_msgoutNmeaIdGllUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGllUsb (const version)
    const Field_msgoutNmeaIdGllUsb& accessField_msgoutNmeaIdGllUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGllUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGnsI2c.
    using Field_msgoutNmeaIdGnsI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGnsI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGnsI2c
    Field_msgoutNmeaIdGnsI2c& initField_msgoutNmeaIdGnsI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGnsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsI2c
    Field_msgoutNmeaIdGnsI2c& accessField_msgoutNmeaIdGnsI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsI2c (const version)
    const Field_msgoutNmeaIdGnsI2c& accessField_msgoutNmeaIdGnsI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGnsSpi.
    using Field_msgoutNmeaIdGnsSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGnsSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGnsSpi
    Field_msgoutNmeaIdGnsSpi& initField_msgoutNmeaIdGnsSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGnsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsSpi
    Field_msgoutNmeaIdGnsSpi& accessField_msgoutNmeaIdGnsSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsSpi (const version)
    const Field_msgoutNmeaIdGnsSpi& accessField_msgoutNmeaIdGnsSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGnsUart1.
    using Field_msgoutNmeaIdGnsUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGnsUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGnsUart1
    Field_msgoutNmeaIdGnsUart1& initField_msgoutNmeaIdGnsUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGnsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsUart1
    Field_msgoutNmeaIdGnsUart1& accessField_msgoutNmeaIdGnsUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsUart1 (const version)
    const Field_msgoutNmeaIdGnsUart1& accessField_msgoutNmeaIdGnsUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGnsUart2.
    using Field_msgoutNmeaIdGnsUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGnsUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGnsUart2
    Field_msgoutNmeaIdGnsUart2& initField_msgoutNmeaIdGnsUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGnsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsUart2
    Field_msgoutNmeaIdGnsUart2& accessField_msgoutNmeaIdGnsUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsUart2 (const version)
    const Field_msgoutNmeaIdGnsUart2& accessField_msgoutNmeaIdGnsUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGnsUsb.
    using Field_msgoutNmeaIdGnsUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGnsUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGnsUsb
    Field_msgoutNmeaIdGnsUsb& initField_msgoutNmeaIdGnsUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGnsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsUsb
    Field_msgoutNmeaIdGnsUsb& accessField_msgoutNmeaIdGnsUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGnsUsb (const version)
    const Field_msgoutNmeaIdGnsUsb& accessField_msgoutNmeaIdGnsUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGnsUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGrsI2c.
    using Field_msgoutNmeaIdGrsI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGrsI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGrsI2c
    Field_msgoutNmeaIdGrsI2c& initField_msgoutNmeaIdGrsI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGrsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsI2c
    Field_msgoutNmeaIdGrsI2c& accessField_msgoutNmeaIdGrsI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsI2c (const version)
    const Field_msgoutNmeaIdGrsI2c& accessField_msgoutNmeaIdGrsI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGrsSpi.
    using Field_msgoutNmeaIdGrsSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGrsSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGrsSpi
    Field_msgoutNmeaIdGrsSpi& initField_msgoutNmeaIdGrsSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGrsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsSpi
    Field_msgoutNmeaIdGrsSpi& accessField_msgoutNmeaIdGrsSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsSpi (const version)
    const Field_msgoutNmeaIdGrsSpi& accessField_msgoutNmeaIdGrsSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGrsUart1.
    using Field_msgoutNmeaIdGrsUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGrsUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGrsUart1
    Field_msgoutNmeaIdGrsUart1& initField_msgoutNmeaIdGrsUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGrsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsUart1
    Field_msgoutNmeaIdGrsUart1& accessField_msgoutNmeaIdGrsUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsUart1 (const version)
    const Field_msgoutNmeaIdGrsUart1& accessField_msgoutNmeaIdGrsUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGrsUart2.
    using Field_msgoutNmeaIdGrsUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGrsUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGrsUart2
    Field_msgoutNmeaIdGrsUart2& initField_msgoutNmeaIdGrsUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGrsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsUart2
    Field_msgoutNmeaIdGrsUart2& accessField_msgoutNmeaIdGrsUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsUart2 (const version)
    const Field_msgoutNmeaIdGrsUart2& accessField_msgoutNmeaIdGrsUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGrsUsb.
    using Field_msgoutNmeaIdGrsUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGrsUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGrsUsb
    Field_msgoutNmeaIdGrsUsb& initField_msgoutNmeaIdGrsUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGrsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsUsb
    Field_msgoutNmeaIdGrsUsb& accessField_msgoutNmeaIdGrsUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGrsUsb (const version)
    const Field_msgoutNmeaIdGrsUsb& accessField_msgoutNmeaIdGrsUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGrsUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsaI2c.
    using Field_msgoutNmeaIdGsaI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsaI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsaI2c
    Field_msgoutNmeaIdGsaI2c& initField_msgoutNmeaIdGsaI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsaI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaI2c
    Field_msgoutNmeaIdGsaI2c& accessField_msgoutNmeaIdGsaI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaI2c (const version)
    const Field_msgoutNmeaIdGsaI2c& accessField_msgoutNmeaIdGsaI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsaSpi.
    using Field_msgoutNmeaIdGsaSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsaSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsaSpi
    Field_msgoutNmeaIdGsaSpi& initField_msgoutNmeaIdGsaSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsaSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaSpi
    Field_msgoutNmeaIdGsaSpi& accessField_msgoutNmeaIdGsaSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaSpi (const version)
    const Field_msgoutNmeaIdGsaSpi& accessField_msgoutNmeaIdGsaSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsaUart1.
    using Field_msgoutNmeaIdGsaUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsaUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsaUart1
    Field_msgoutNmeaIdGsaUart1& initField_msgoutNmeaIdGsaUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsaUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaUart1
    Field_msgoutNmeaIdGsaUart1& accessField_msgoutNmeaIdGsaUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaUart1 (const version)
    const Field_msgoutNmeaIdGsaUart1& accessField_msgoutNmeaIdGsaUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsaUart2.
    using Field_msgoutNmeaIdGsaUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsaUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsaUart2
    Field_msgoutNmeaIdGsaUart2& initField_msgoutNmeaIdGsaUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsaUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaUart2
    Field_msgoutNmeaIdGsaUart2& accessField_msgoutNmeaIdGsaUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaUart2 (const version)
    const Field_msgoutNmeaIdGsaUart2& accessField_msgoutNmeaIdGsaUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsaUsb.
    using Field_msgoutNmeaIdGsaUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsaUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsaUsb
    Field_msgoutNmeaIdGsaUsb& initField_msgoutNmeaIdGsaUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsaUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaUsb
    Field_msgoutNmeaIdGsaUsb& accessField_msgoutNmeaIdGsaUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsaUsb (const version)
    const Field_msgoutNmeaIdGsaUsb& accessField_msgoutNmeaIdGsaUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsaUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGstI2c.
    using Field_msgoutNmeaIdGstI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGstI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGstI2c
    Field_msgoutNmeaIdGstI2c& initField_msgoutNmeaIdGstI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGstI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstI2c
    Field_msgoutNmeaIdGstI2c& accessField_msgoutNmeaIdGstI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstI2c (const version)
    const Field_msgoutNmeaIdGstI2c& accessField_msgoutNmeaIdGstI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGstSpi.
    using Field_msgoutNmeaIdGstSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGstSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGstSpi
    Field_msgoutNmeaIdGstSpi& initField_msgoutNmeaIdGstSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGstSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstSpi
    Field_msgoutNmeaIdGstSpi& accessField_msgoutNmeaIdGstSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstSpi (const version)
    const Field_msgoutNmeaIdGstSpi& accessField_msgoutNmeaIdGstSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGstUart1.
    using Field_msgoutNmeaIdGstUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGstUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGstUart1
    Field_msgoutNmeaIdGstUart1& initField_msgoutNmeaIdGstUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGstUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstUart1
    Field_msgoutNmeaIdGstUart1& accessField_msgoutNmeaIdGstUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstUart1 (const version)
    const Field_msgoutNmeaIdGstUart1& accessField_msgoutNmeaIdGstUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGstUart2.
    using Field_msgoutNmeaIdGstUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGstUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGstUart2
    Field_msgoutNmeaIdGstUart2& initField_msgoutNmeaIdGstUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGstUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstUart2
    Field_msgoutNmeaIdGstUart2& accessField_msgoutNmeaIdGstUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstUart2 (const version)
    const Field_msgoutNmeaIdGstUart2& accessField_msgoutNmeaIdGstUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGstUsb.
    using Field_msgoutNmeaIdGstUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGstUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGstUsb
    Field_msgoutNmeaIdGstUsb& initField_msgoutNmeaIdGstUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGstUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstUsb
    Field_msgoutNmeaIdGstUsb& accessField_msgoutNmeaIdGstUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGstUsb (const version)
    const Field_msgoutNmeaIdGstUsb& accessField_msgoutNmeaIdGstUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGstUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsvI2c.
    using Field_msgoutNmeaIdGsvI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsvI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsvI2c
    Field_msgoutNmeaIdGsvI2c& initField_msgoutNmeaIdGsvI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsvI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvI2c
    Field_msgoutNmeaIdGsvI2c& accessField_msgoutNmeaIdGsvI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvI2c (const version)
    const Field_msgoutNmeaIdGsvI2c& accessField_msgoutNmeaIdGsvI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsvSpi.
    using Field_msgoutNmeaIdGsvSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsvSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsvSpi
    Field_msgoutNmeaIdGsvSpi& initField_msgoutNmeaIdGsvSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsvSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvSpi
    Field_msgoutNmeaIdGsvSpi& accessField_msgoutNmeaIdGsvSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvSpi (const version)
    const Field_msgoutNmeaIdGsvSpi& accessField_msgoutNmeaIdGsvSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsvUart1.
    using Field_msgoutNmeaIdGsvUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsvUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsvUart1
    Field_msgoutNmeaIdGsvUart1& initField_msgoutNmeaIdGsvUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsvUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvUart1
    Field_msgoutNmeaIdGsvUart1& accessField_msgoutNmeaIdGsvUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvUart1 (const version)
    const Field_msgoutNmeaIdGsvUart1& accessField_msgoutNmeaIdGsvUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsvUart2.
    using Field_msgoutNmeaIdGsvUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsvUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsvUart2
    Field_msgoutNmeaIdGsvUart2& initField_msgoutNmeaIdGsvUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsvUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvUart2
    Field_msgoutNmeaIdGsvUart2& accessField_msgoutNmeaIdGsvUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvUart2 (const version)
    const Field_msgoutNmeaIdGsvUart2& accessField_msgoutNmeaIdGsvUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdGsvUsb.
    using Field_msgoutNmeaIdGsvUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdGsvUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdGsvUsb
    Field_msgoutNmeaIdGsvUsb& initField_msgoutNmeaIdGsvUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdGsvUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvUsb
    Field_msgoutNmeaIdGsvUsb& accessField_msgoutNmeaIdGsvUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdGsvUsb (const version)
    const Field_msgoutNmeaIdGsvUsb& accessField_msgoutNmeaIdGsvUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdGsvUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRlmI2c.
    using Field_msgoutNmeaIdRlmI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRlmI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRlmI2c
    Field_msgoutNmeaIdRlmI2c& initField_msgoutNmeaIdRlmI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRlmI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmI2c
    Field_msgoutNmeaIdRlmI2c& accessField_msgoutNmeaIdRlmI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmI2c (const version)
    const Field_msgoutNmeaIdRlmI2c& accessField_msgoutNmeaIdRlmI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRlmSpi.
    using Field_msgoutNmeaIdRlmSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRlmSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRlmSpi
    Field_msgoutNmeaIdRlmSpi& initField_msgoutNmeaIdRlmSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRlmSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmSpi
    Field_msgoutNmeaIdRlmSpi& accessField_msgoutNmeaIdRlmSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmSpi (const version)
    const Field_msgoutNmeaIdRlmSpi& accessField_msgoutNmeaIdRlmSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRlmUart1.
    using Field_msgoutNmeaIdRlmUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRlmUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRlmUart1
    Field_msgoutNmeaIdRlmUart1& initField_msgoutNmeaIdRlmUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRlmUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmUart1
    Field_msgoutNmeaIdRlmUart1& accessField_msgoutNmeaIdRlmUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmUart1 (const version)
    const Field_msgoutNmeaIdRlmUart1& accessField_msgoutNmeaIdRlmUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRlmUart2.
    using Field_msgoutNmeaIdRlmUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRlmUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRlmUart2
    Field_msgoutNmeaIdRlmUart2& initField_msgoutNmeaIdRlmUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRlmUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmUart2
    Field_msgoutNmeaIdRlmUart2& accessField_msgoutNmeaIdRlmUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmUart2 (const version)
    const Field_msgoutNmeaIdRlmUart2& accessField_msgoutNmeaIdRlmUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRlmUsb.
    using Field_msgoutNmeaIdRlmUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRlmUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRlmUsb
    Field_msgoutNmeaIdRlmUsb& initField_msgoutNmeaIdRlmUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRlmUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmUsb
    Field_msgoutNmeaIdRlmUsb& accessField_msgoutNmeaIdRlmUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRlmUsb (const version)
    const Field_msgoutNmeaIdRlmUsb& accessField_msgoutNmeaIdRlmUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRlmUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRmcI2c.
    using Field_msgoutNmeaIdRmcI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRmcI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRmcI2c
    Field_msgoutNmeaIdRmcI2c& initField_msgoutNmeaIdRmcI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRmcI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcI2c
    Field_msgoutNmeaIdRmcI2c& accessField_msgoutNmeaIdRmcI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcI2c (const version)
    const Field_msgoutNmeaIdRmcI2c& accessField_msgoutNmeaIdRmcI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRmcSpi.
    using Field_msgoutNmeaIdRmcSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRmcSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRmcSpi
    Field_msgoutNmeaIdRmcSpi& initField_msgoutNmeaIdRmcSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRmcSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcSpi
    Field_msgoutNmeaIdRmcSpi& accessField_msgoutNmeaIdRmcSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcSpi (const version)
    const Field_msgoutNmeaIdRmcSpi& accessField_msgoutNmeaIdRmcSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRmcUart1.
    using Field_msgoutNmeaIdRmcUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRmcUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRmcUart1
    Field_msgoutNmeaIdRmcUart1& initField_msgoutNmeaIdRmcUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRmcUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcUart1
    Field_msgoutNmeaIdRmcUart1& accessField_msgoutNmeaIdRmcUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcUart1 (const version)
    const Field_msgoutNmeaIdRmcUart1& accessField_msgoutNmeaIdRmcUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRmcUart2.
    using Field_msgoutNmeaIdRmcUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRmcUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRmcUart2
    Field_msgoutNmeaIdRmcUart2& initField_msgoutNmeaIdRmcUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRmcUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcUart2
    Field_msgoutNmeaIdRmcUart2& accessField_msgoutNmeaIdRmcUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcUart2 (const version)
    const Field_msgoutNmeaIdRmcUart2& accessField_msgoutNmeaIdRmcUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdRmcUsb.
    using Field_msgoutNmeaIdRmcUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdRmcUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdRmcUsb
    Field_msgoutNmeaIdRmcUsb& initField_msgoutNmeaIdRmcUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdRmcUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcUsb
    Field_msgoutNmeaIdRmcUsb& accessField_msgoutNmeaIdRmcUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdRmcUsb (const version)
    const Field_msgoutNmeaIdRmcUsb& accessField_msgoutNmeaIdRmcUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdRmcUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVlwI2c.
    using Field_msgoutNmeaIdVlwI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVlwI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVlwI2c
    Field_msgoutNmeaIdVlwI2c& initField_msgoutNmeaIdVlwI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVlwI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwI2c
    Field_msgoutNmeaIdVlwI2c& accessField_msgoutNmeaIdVlwI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwI2c (const version)
    const Field_msgoutNmeaIdVlwI2c& accessField_msgoutNmeaIdVlwI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVlwSpi.
    using Field_msgoutNmeaIdVlwSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVlwSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVlwSpi
    Field_msgoutNmeaIdVlwSpi& initField_msgoutNmeaIdVlwSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVlwSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwSpi
    Field_msgoutNmeaIdVlwSpi& accessField_msgoutNmeaIdVlwSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwSpi (const version)
    const Field_msgoutNmeaIdVlwSpi& accessField_msgoutNmeaIdVlwSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVlwUart1.
    using Field_msgoutNmeaIdVlwUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVlwUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVlwUart1
    Field_msgoutNmeaIdVlwUart1& initField_msgoutNmeaIdVlwUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVlwUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwUart1
    Field_msgoutNmeaIdVlwUart1& accessField_msgoutNmeaIdVlwUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwUart1 (const version)
    const Field_msgoutNmeaIdVlwUart1& accessField_msgoutNmeaIdVlwUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVlwUart2.
    using Field_msgoutNmeaIdVlwUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVlwUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVlwUart2
    Field_msgoutNmeaIdVlwUart2& initField_msgoutNmeaIdVlwUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVlwUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwUart2
    Field_msgoutNmeaIdVlwUart2& accessField_msgoutNmeaIdVlwUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwUart2 (const version)
    const Field_msgoutNmeaIdVlwUart2& accessField_msgoutNmeaIdVlwUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVlwUsb.
    using Field_msgoutNmeaIdVlwUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVlwUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVlwUsb
    Field_msgoutNmeaIdVlwUsb& initField_msgoutNmeaIdVlwUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVlwUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwUsb
    Field_msgoutNmeaIdVlwUsb& accessField_msgoutNmeaIdVlwUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVlwUsb (const version)
    const Field_msgoutNmeaIdVlwUsb& accessField_msgoutNmeaIdVlwUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVlwUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVtgI2c.
    using Field_msgoutNmeaIdVtgI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVtgI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVtgI2c
    Field_msgoutNmeaIdVtgI2c& initField_msgoutNmeaIdVtgI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVtgI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgI2c
    Field_msgoutNmeaIdVtgI2c& accessField_msgoutNmeaIdVtgI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgI2c (const version)
    const Field_msgoutNmeaIdVtgI2c& accessField_msgoutNmeaIdVtgI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVtgSpi.
    using Field_msgoutNmeaIdVtgSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVtgSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVtgSpi
    Field_msgoutNmeaIdVtgSpi& initField_msgoutNmeaIdVtgSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVtgSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgSpi
    Field_msgoutNmeaIdVtgSpi& accessField_msgoutNmeaIdVtgSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgSpi (const version)
    const Field_msgoutNmeaIdVtgSpi& accessField_msgoutNmeaIdVtgSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVtgUart1.
    using Field_msgoutNmeaIdVtgUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVtgUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVtgUart1
    Field_msgoutNmeaIdVtgUart1& initField_msgoutNmeaIdVtgUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVtgUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgUart1
    Field_msgoutNmeaIdVtgUart1& accessField_msgoutNmeaIdVtgUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgUart1 (const version)
    const Field_msgoutNmeaIdVtgUart1& accessField_msgoutNmeaIdVtgUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVtgUart2.
    using Field_msgoutNmeaIdVtgUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVtgUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVtgUart2
    Field_msgoutNmeaIdVtgUart2& initField_msgoutNmeaIdVtgUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVtgUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgUart2
    Field_msgoutNmeaIdVtgUart2& accessField_msgoutNmeaIdVtgUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgUart2 (const version)
    const Field_msgoutNmeaIdVtgUart2& accessField_msgoutNmeaIdVtgUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdVtgUsb.
    using Field_msgoutNmeaIdVtgUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdVtgUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdVtgUsb
    Field_msgoutNmeaIdVtgUsb& initField_msgoutNmeaIdVtgUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdVtgUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgUsb
    Field_msgoutNmeaIdVtgUsb& accessField_msgoutNmeaIdVtgUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdVtgUsb (const version)
    const Field_msgoutNmeaIdVtgUsb& accessField_msgoutNmeaIdVtgUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdVtgUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdZdaI2c.
    using Field_msgoutNmeaIdZdaI2c = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdZdaI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdZdaI2c
    Field_msgoutNmeaIdZdaI2c& initField_msgoutNmeaIdZdaI2c()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdZdaI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaI2c
    Field_msgoutNmeaIdZdaI2c& accessField_msgoutNmeaIdZdaI2c()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaI2c (const version)
    const Field_msgoutNmeaIdZdaI2c& accessField_msgoutNmeaIdZdaI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdZdaSpi.
    using Field_msgoutNmeaIdZdaSpi = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdZdaSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdZdaSpi
    Field_msgoutNmeaIdZdaSpi& initField_msgoutNmeaIdZdaSpi()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdZdaSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaSpi
    Field_msgoutNmeaIdZdaSpi& accessField_msgoutNmeaIdZdaSpi()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaSpi (const version)
    const Field_msgoutNmeaIdZdaSpi& accessField_msgoutNmeaIdZdaSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdZdaUart1.
    using Field_msgoutNmeaIdZdaUart1 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdZdaUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdZdaUart1
    Field_msgoutNmeaIdZdaUart1& initField_msgoutNmeaIdZdaUart1()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdZdaUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaUart1
    Field_msgoutNmeaIdZdaUart1& accessField_msgoutNmeaIdZdaUart1()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaUart1 (const version)
    const Field_msgoutNmeaIdZdaUart1& accessField_msgoutNmeaIdZdaUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdZdaUart2.
    using Field_msgoutNmeaIdZdaUart2 = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdZdaUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdZdaUart2
    Field_msgoutNmeaIdZdaUart2& initField_msgoutNmeaIdZdaUart2()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdZdaUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaUart2
    Field_msgoutNmeaIdZdaUart2& accessField_msgoutNmeaIdZdaUart2()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaUart2 (const version)
    const Field_msgoutNmeaIdZdaUart2& accessField_msgoutNmeaIdZdaUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutNmeaIdZdaUsb.
    using Field_msgoutNmeaIdZdaUsb = typename CfgValPairMembers<TOpt>::MsgoutNmeaIdZdaUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutNmeaIdZdaUsb
    Field_msgoutNmeaIdZdaUsb& initField_msgoutNmeaIdZdaUsb()
    {
        return Base::template initField<FieldIdx_msgoutNmeaIdZdaUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaUsb
    Field_msgoutNmeaIdZdaUsb& accessField_msgoutNmeaIdZdaUsb()
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutNmeaIdZdaUsb (const version)
    const Field_msgoutNmeaIdZdaUsb& accessField_msgoutNmeaIdZdaUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutNmeaIdZdaUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolypI2c.
    using Field_msgoutPubxIdPolypI2c = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolypI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolypI2c
    Field_msgoutPubxIdPolypI2c& initField_msgoutPubxIdPolypI2c()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolypI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypI2c
    Field_msgoutPubxIdPolypI2c& accessField_msgoutPubxIdPolypI2c()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypI2c (const version)
    const Field_msgoutPubxIdPolypI2c& accessField_msgoutPubxIdPolypI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolypSpi.
    using Field_msgoutPubxIdPolypSpi = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolypSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolypSpi
    Field_msgoutPubxIdPolypSpi& initField_msgoutPubxIdPolypSpi()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolypSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypSpi
    Field_msgoutPubxIdPolypSpi& accessField_msgoutPubxIdPolypSpi()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypSpi (const version)
    const Field_msgoutPubxIdPolypSpi& accessField_msgoutPubxIdPolypSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolypUart1.
    using Field_msgoutPubxIdPolypUart1 = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolypUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolypUart1
    Field_msgoutPubxIdPolypUart1& initField_msgoutPubxIdPolypUart1()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolypUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypUart1
    Field_msgoutPubxIdPolypUart1& accessField_msgoutPubxIdPolypUart1()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypUart1 (const version)
    const Field_msgoutPubxIdPolypUart1& accessField_msgoutPubxIdPolypUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolypUart2.
    using Field_msgoutPubxIdPolypUart2 = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolypUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolypUart2
    Field_msgoutPubxIdPolypUart2& initField_msgoutPubxIdPolypUart2()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolypUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypUart2
    Field_msgoutPubxIdPolypUart2& accessField_msgoutPubxIdPolypUart2()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypUart2 (const version)
    const Field_msgoutPubxIdPolypUart2& accessField_msgoutPubxIdPolypUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolypUsb.
    using Field_msgoutPubxIdPolypUsb = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolypUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolypUsb
    Field_msgoutPubxIdPolypUsb& initField_msgoutPubxIdPolypUsb()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolypUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypUsb
    Field_msgoutPubxIdPolypUsb& accessField_msgoutPubxIdPolypUsb()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolypUsb (const version)
    const Field_msgoutPubxIdPolypUsb& accessField_msgoutPubxIdPolypUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolypUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolysI2c.
    using Field_msgoutPubxIdPolysI2c = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolysI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolysI2c
    Field_msgoutPubxIdPolysI2c& initField_msgoutPubxIdPolysI2c()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolysI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysI2c
    Field_msgoutPubxIdPolysI2c& accessField_msgoutPubxIdPolysI2c()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysI2c (const version)
    const Field_msgoutPubxIdPolysI2c& accessField_msgoutPubxIdPolysI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolysSpi.
    using Field_msgoutPubxIdPolysSpi = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolysSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolysSpi
    Field_msgoutPubxIdPolysSpi& initField_msgoutPubxIdPolysSpi()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolysSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysSpi
    Field_msgoutPubxIdPolysSpi& accessField_msgoutPubxIdPolysSpi()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysSpi (const version)
    const Field_msgoutPubxIdPolysSpi& accessField_msgoutPubxIdPolysSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolysUart1.
    using Field_msgoutPubxIdPolysUart1 = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolysUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolysUart1
    Field_msgoutPubxIdPolysUart1& initField_msgoutPubxIdPolysUart1()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolysUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysUart1
    Field_msgoutPubxIdPolysUart1& accessField_msgoutPubxIdPolysUart1()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysUart1 (const version)
    const Field_msgoutPubxIdPolysUart1& accessField_msgoutPubxIdPolysUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolysUart2.
    using Field_msgoutPubxIdPolysUart2 = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolysUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolysUart2
    Field_msgoutPubxIdPolysUart2& initField_msgoutPubxIdPolysUart2()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolysUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysUart2
    Field_msgoutPubxIdPolysUart2& accessField_msgoutPubxIdPolysUart2()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysUart2 (const version)
    const Field_msgoutPubxIdPolysUart2& accessField_msgoutPubxIdPolysUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolysUsb.
    using Field_msgoutPubxIdPolysUsb = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolysUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolysUsb
    Field_msgoutPubxIdPolysUsb& initField_msgoutPubxIdPolysUsb()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolysUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysUsb
    Field_msgoutPubxIdPolysUsb& accessField_msgoutPubxIdPolysUsb()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolysUsb (const version)
    const Field_msgoutPubxIdPolysUsb& accessField_msgoutPubxIdPolysUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolysUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolytI2c.
    using Field_msgoutPubxIdPolytI2c = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolytI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolytI2c
    Field_msgoutPubxIdPolytI2c& initField_msgoutPubxIdPolytI2c()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolytI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytI2c
    Field_msgoutPubxIdPolytI2c& accessField_msgoutPubxIdPolytI2c()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytI2c (const version)
    const Field_msgoutPubxIdPolytI2c& accessField_msgoutPubxIdPolytI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolytSpi.
    using Field_msgoutPubxIdPolytSpi = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolytSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolytSpi
    Field_msgoutPubxIdPolytSpi& initField_msgoutPubxIdPolytSpi()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolytSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytSpi
    Field_msgoutPubxIdPolytSpi& accessField_msgoutPubxIdPolytSpi()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytSpi (const version)
    const Field_msgoutPubxIdPolytSpi& accessField_msgoutPubxIdPolytSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolytUart1.
    using Field_msgoutPubxIdPolytUart1 = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolytUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolytUart1
    Field_msgoutPubxIdPolytUart1& initField_msgoutPubxIdPolytUart1()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolytUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytUart1
    Field_msgoutPubxIdPolytUart1& accessField_msgoutPubxIdPolytUart1()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytUart1 (const version)
    const Field_msgoutPubxIdPolytUart1& accessField_msgoutPubxIdPolytUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolytUart2.
    using Field_msgoutPubxIdPolytUart2 = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolytUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolytUart2
    Field_msgoutPubxIdPolytUart2& initField_msgoutPubxIdPolytUart2()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolytUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytUart2
    Field_msgoutPubxIdPolytUart2& accessField_msgoutPubxIdPolytUart2()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytUart2 (const version)
    const Field_msgoutPubxIdPolytUart2& accessField_msgoutPubxIdPolytUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutPubxIdPolytUsb.
    using Field_msgoutPubxIdPolytUsb = typename CfgValPairMembers<TOpt>::MsgoutPubxIdPolytUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutPubxIdPolytUsb
    Field_msgoutPubxIdPolytUsb& initField_msgoutPubxIdPolytUsb()
    {
        return Base::template initField<FieldIdx_msgoutPubxIdPolytUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytUsb
    Field_msgoutPubxIdPolytUsb& accessField_msgoutPubxIdPolytUsb()
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutPubxIdPolytUsb (const version)
    const Field_msgoutPubxIdPolytUsb& accessField_msgoutPubxIdPolytUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutPubxIdPolytUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1005I2c.
    using Field_msgoutRtcm3xType1005I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1005I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1005I2c
    Field_msgoutRtcm3xType1005I2c& initField_msgoutRtcm3xType1005I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1005I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005I2c
    Field_msgoutRtcm3xType1005I2c& accessField_msgoutRtcm3xType1005I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005I2c (const version)
    const Field_msgoutRtcm3xType1005I2c& accessField_msgoutRtcm3xType1005I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1005Spi.
    using Field_msgoutRtcm3xType1005Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1005Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1005Spi
    Field_msgoutRtcm3xType1005Spi& initField_msgoutRtcm3xType1005Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1005Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005Spi
    Field_msgoutRtcm3xType1005Spi& accessField_msgoutRtcm3xType1005Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005Spi (const version)
    const Field_msgoutRtcm3xType1005Spi& accessField_msgoutRtcm3xType1005Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1005Uart1.
    using Field_msgoutRtcm3xType1005Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1005Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1005Uart1
    Field_msgoutRtcm3xType1005Uart1& initField_msgoutRtcm3xType1005Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1005Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005Uart1
    Field_msgoutRtcm3xType1005Uart1& accessField_msgoutRtcm3xType1005Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005Uart1 (const version)
    const Field_msgoutRtcm3xType1005Uart1& accessField_msgoutRtcm3xType1005Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1005Uart2.
    using Field_msgoutRtcm3xType1005Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1005Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1005Uart2
    Field_msgoutRtcm3xType1005Uart2& initField_msgoutRtcm3xType1005Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1005Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005Uart2
    Field_msgoutRtcm3xType1005Uart2& accessField_msgoutRtcm3xType1005Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005Uart2 (const version)
    const Field_msgoutRtcm3xType1005Uart2& accessField_msgoutRtcm3xType1005Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1005Usb.
    using Field_msgoutRtcm3xType1005Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1005Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1005Usb
    Field_msgoutRtcm3xType1005Usb& initField_msgoutRtcm3xType1005Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1005Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005Usb
    Field_msgoutRtcm3xType1005Usb& accessField_msgoutRtcm3xType1005Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1005Usb (const version)
    const Field_msgoutRtcm3xType1005Usb& accessField_msgoutRtcm3xType1005Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1005Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1074I2c.
    using Field_msgoutRtcm3xType1074I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1074I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1074I2c
    Field_msgoutRtcm3xType1074I2c& initField_msgoutRtcm3xType1074I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1074I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074I2c
    Field_msgoutRtcm3xType1074I2c& accessField_msgoutRtcm3xType1074I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074I2c (const version)
    const Field_msgoutRtcm3xType1074I2c& accessField_msgoutRtcm3xType1074I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1074Spi.
    using Field_msgoutRtcm3xType1074Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1074Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1074Spi
    Field_msgoutRtcm3xType1074Spi& initField_msgoutRtcm3xType1074Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1074Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074Spi
    Field_msgoutRtcm3xType1074Spi& accessField_msgoutRtcm3xType1074Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074Spi (const version)
    const Field_msgoutRtcm3xType1074Spi& accessField_msgoutRtcm3xType1074Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1074Uart1.
    using Field_msgoutRtcm3xType1074Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1074Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1074Uart1
    Field_msgoutRtcm3xType1074Uart1& initField_msgoutRtcm3xType1074Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1074Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074Uart1
    Field_msgoutRtcm3xType1074Uart1& accessField_msgoutRtcm3xType1074Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074Uart1 (const version)
    const Field_msgoutRtcm3xType1074Uart1& accessField_msgoutRtcm3xType1074Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1074Uart2.
    using Field_msgoutRtcm3xType1074Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1074Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1074Uart2
    Field_msgoutRtcm3xType1074Uart2& initField_msgoutRtcm3xType1074Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1074Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074Uart2
    Field_msgoutRtcm3xType1074Uart2& accessField_msgoutRtcm3xType1074Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074Uart2 (const version)
    const Field_msgoutRtcm3xType1074Uart2& accessField_msgoutRtcm3xType1074Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1074Usb.
    using Field_msgoutRtcm3xType1074Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1074Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1074Usb
    Field_msgoutRtcm3xType1074Usb& initField_msgoutRtcm3xType1074Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1074Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074Usb
    Field_msgoutRtcm3xType1074Usb& accessField_msgoutRtcm3xType1074Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1074Usb (const version)
    const Field_msgoutRtcm3xType1074Usb& accessField_msgoutRtcm3xType1074Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1074Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1077I2c.
    using Field_msgoutRtcm3xType1077I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1077I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1077I2c
    Field_msgoutRtcm3xType1077I2c& initField_msgoutRtcm3xType1077I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1077I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077I2c
    Field_msgoutRtcm3xType1077I2c& accessField_msgoutRtcm3xType1077I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077I2c (const version)
    const Field_msgoutRtcm3xType1077I2c& accessField_msgoutRtcm3xType1077I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1077Spi.
    using Field_msgoutRtcm3xType1077Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1077Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1077Spi
    Field_msgoutRtcm3xType1077Spi& initField_msgoutRtcm3xType1077Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1077Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077Spi
    Field_msgoutRtcm3xType1077Spi& accessField_msgoutRtcm3xType1077Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077Spi (const version)
    const Field_msgoutRtcm3xType1077Spi& accessField_msgoutRtcm3xType1077Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1077Uart1.
    using Field_msgoutRtcm3xType1077Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1077Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1077Uart1
    Field_msgoutRtcm3xType1077Uart1& initField_msgoutRtcm3xType1077Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1077Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077Uart1
    Field_msgoutRtcm3xType1077Uart1& accessField_msgoutRtcm3xType1077Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077Uart1 (const version)
    const Field_msgoutRtcm3xType1077Uart1& accessField_msgoutRtcm3xType1077Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1077Uart2.
    using Field_msgoutRtcm3xType1077Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1077Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1077Uart2
    Field_msgoutRtcm3xType1077Uart2& initField_msgoutRtcm3xType1077Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1077Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077Uart2
    Field_msgoutRtcm3xType1077Uart2& accessField_msgoutRtcm3xType1077Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077Uart2 (const version)
    const Field_msgoutRtcm3xType1077Uart2& accessField_msgoutRtcm3xType1077Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1077Usb.
    using Field_msgoutRtcm3xType1077Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1077Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1077Usb
    Field_msgoutRtcm3xType1077Usb& initField_msgoutRtcm3xType1077Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1077Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077Usb
    Field_msgoutRtcm3xType1077Usb& accessField_msgoutRtcm3xType1077Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1077Usb (const version)
    const Field_msgoutRtcm3xType1077Usb& accessField_msgoutRtcm3xType1077Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1077Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1084I2c.
    using Field_msgoutRtcm3xType1084I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1084I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1084I2c
    Field_msgoutRtcm3xType1084I2c& initField_msgoutRtcm3xType1084I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1084I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084I2c
    Field_msgoutRtcm3xType1084I2c& accessField_msgoutRtcm3xType1084I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084I2c (const version)
    const Field_msgoutRtcm3xType1084I2c& accessField_msgoutRtcm3xType1084I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1084Spi.
    using Field_msgoutRtcm3xType1084Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1084Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1084Spi
    Field_msgoutRtcm3xType1084Spi& initField_msgoutRtcm3xType1084Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1084Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084Spi
    Field_msgoutRtcm3xType1084Spi& accessField_msgoutRtcm3xType1084Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084Spi (const version)
    const Field_msgoutRtcm3xType1084Spi& accessField_msgoutRtcm3xType1084Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1084Uart1.
    using Field_msgoutRtcm3xType1084Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1084Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1084Uart1
    Field_msgoutRtcm3xType1084Uart1& initField_msgoutRtcm3xType1084Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1084Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084Uart1
    Field_msgoutRtcm3xType1084Uart1& accessField_msgoutRtcm3xType1084Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084Uart1 (const version)
    const Field_msgoutRtcm3xType1084Uart1& accessField_msgoutRtcm3xType1084Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1084Uart2.
    using Field_msgoutRtcm3xType1084Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1084Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1084Uart2
    Field_msgoutRtcm3xType1084Uart2& initField_msgoutRtcm3xType1084Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1084Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084Uart2
    Field_msgoutRtcm3xType1084Uart2& accessField_msgoutRtcm3xType1084Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084Uart2 (const version)
    const Field_msgoutRtcm3xType1084Uart2& accessField_msgoutRtcm3xType1084Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1084Usb.
    using Field_msgoutRtcm3xType1084Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1084Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1084Usb
    Field_msgoutRtcm3xType1084Usb& initField_msgoutRtcm3xType1084Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1084Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084Usb
    Field_msgoutRtcm3xType1084Usb& accessField_msgoutRtcm3xType1084Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1084Usb (const version)
    const Field_msgoutRtcm3xType1084Usb& accessField_msgoutRtcm3xType1084Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1084Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1087I2c.
    using Field_msgoutRtcm3xType1087I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1087I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1087I2c
    Field_msgoutRtcm3xType1087I2c& initField_msgoutRtcm3xType1087I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1087I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087I2c
    Field_msgoutRtcm3xType1087I2c& accessField_msgoutRtcm3xType1087I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087I2c (const version)
    const Field_msgoutRtcm3xType1087I2c& accessField_msgoutRtcm3xType1087I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1087Spi.
    using Field_msgoutRtcm3xType1087Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1087Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1087Spi
    Field_msgoutRtcm3xType1087Spi& initField_msgoutRtcm3xType1087Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1087Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087Spi
    Field_msgoutRtcm3xType1087Spi& accessField_msgoutRtcm3xType1087Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087Spi (const version)
    const Field_msgoutRtcm3xType1087Spi& accessField_msgoutRtcm3xType1087Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1087Uart1.
    using Field_msgoutRtcm3xType1087Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1087Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1087Uart1
    Field_msgoutRtcm3xType1087Uart1& initField_msgoutRtcm3xType1087Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1087Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087Uart1
    Field_msgoutRtcm3xType1087Uart1& accessField_msgoutRtcm3xType1087Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087Uart1 (const version)
    const Field_msgoutRtcm3xType1087Uart1& accessField_msgoutRtcm3xType1087Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1087Uart2.
    using Field_msgoutRtcm3xType1087Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1087Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1087Uart2
    Field_msgoutRtcm3xType1087Uart2& initField_msgoutRtcm3xType1087Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1087Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087Uart2
    Field_msgoutRtcm3xType1087Uart2& accessField_msgoutRtcm3xType1087Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087Uart2 (const version)
    const Field_msgoutRtcm3xType1087Uart2& accessField_msgoutRtcm3xType1087Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1087Usb.
    using Field_msgoutRtcm3xType1087Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1087Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1087Usb
    Field_msgoutRtcm3xType1087Usb& initField_msgoutRtcm3xType1087Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1087Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087Usb
    Field_msgoutRtcm3xType1087Usb& accessField_msgoutRtcm3xType1087Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1087Usb (const version)
    const Field_msgoutRtcm3xType1087Usb& accessField_msgoutRtcm3xType1087Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1087Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1094I2c.
    using Field_msgoutRtcm3xType1094I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1094I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1094I2c
    Field_msgoutRtcm3xType1094I2c& initField_msgoutRtcm3xType1094I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1094I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094I2c
    Field_msgoutRtcm3xType1094I2c& accessField_msgoutRtcm3xType1094I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094I2c (const version)
    const Field_msgoutRtcm3xType1094I2c& accessField_msgoutRtcm3xType1094I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1094Spi.
    using Field_msgoutRtcm3xType1094Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1094Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1094Spi
    Field_msgoutRtcm3xType1094Spi& initField_msgoutRtcm3xType1094Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1094Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094Spi
    Field_msgoutRtcm3xType1094Spi& accessField_msgoutRtcm3xType1094Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094Spi (const version)
    const Field_msgoutRtcm3xType1094Spi& accessField_msgoutRtcm3xType1094Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1094Uart1.
    using Field_msgoutRtcm3xType1094Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1094Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1094Uart1
    Field_msgoutRtcm3xType1094Uart1& initField_msgoutRtcm3xType1094Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1094Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094Uart1
    Field_msgoutRtcm3xType1094Uart1& accessField_msgoutRtcm3xType1094Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094Uart1 (const version)
    const Field_msgoutRtcm3xType1094Uart1& accessField_msgoutRtcm3xType1094Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1094Uart2.
    using Field_msgoutRtcm3xType1094Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1094Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1094Uart2
    Field_msgoutRtcm3xType1094Uart2& initField_msgoutRtcm3xType1094Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1094Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094Uart2
    Field_msgoutRtcm3xType1094Uart2& accessField_msgoutRtcm3xType1094Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094Uart2 (const version)
    const Field_msgoutRtcm3xType1094Uart2& accessField_msgoutRtcm3xType1094Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1094Usb.
    using Field_msgoutRtcm3xType1094Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1094Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1094Usb
    Field_msgoutRtcm3xType1094Usb& initField_msgoutRtcm3xType1094Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1094Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094Usb
    Field_msgoutRtcm3xType1094Usb& accessField_msgoutRtcm3xType1094Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1094Usb (const version)
    const Field_msgoutRtcm3xType1094Usb& accessField_msgoutRtcm3xType1094Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1094Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1097I2c.
    using Field_msgoutRtcm3xType1097I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1097I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1097I2c
    Field_msgoutRtcm3xType1097I2c& initField_msgoutRtcm3xType1097I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1097I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097I2c
    Field_msgoutRtcm3xType1097I2c& accessField_msgoutRtcm3xType1097I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097I2c (const version)
    const Field_msgoutRtcm3xType1097I2c& accessField_msgoutRtcm3xType1097I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1097Spi.
    using Field_msgoutRtcm3xType1097Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1097Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1097Spi
    Field_msgoutRtcm3xType1097Spi& initField_msgoutRtcm3xType1097Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1097Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097Spi
    Field_msgoutRtcm3xType1097Spi& accessField_msgoutRtcm3xType1097Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097Spi (const version)
    const Field_msgoutRtcm3xType1097Spi& accessField_msgoutRtcm3xType1097Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1097Uart1.
    using Field_msgoutRtcm3xType1097Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1097Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1097Uart1
    Field_msgoutRtcm3xType1097Uart1& initField_msgoutRtcm3xType1097Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1097Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097Uart1
    Field_msgoutRtcm3xType1097Uart1& accessField_msgoutRtcm3xType1097Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097Uart1 (const version)
    const Field_msgoutRtcm3xType1097Uart1& accessField_msgoutRtcm3xType1097Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1097Uart2.
    using Field_msgoutRtcm3xType1097Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1097Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1097Uart2
    Field_msgoutRtcm3xType1097Uart2& initField_msgoutRtcm3xType1097Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1097Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097Uart2
    Field_msgoutRtcm3xType1097Uart2& accessField_msgoutRtcm3xType1097Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097Uart2 (const version)
    const Field_msgoutRtcm3xType1097Uart2& accessField_msgoutRtcm3xType1097Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1097Usb.
    using Field_msgoutRtcm3xType1097Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1097Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1097Usb
    Field_msgoutRtcm3xType1097Usb& initField_msgoutRtcm3xType1097Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1097Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097Usb
    Field_msgoutRtcm3xType1097Usb& accessField_msgoutRtcm3xType1097Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1097Usb (const version)
    const Field_msgoutRtcm3xType1097Usb& accessField_msgoutRtcm3xType1097Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1097Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1124I2c.
    using Field_msgoutRtcm3xType1124I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1124I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1124I2c
    Field_msgoutRtcm3xType1124I2c& initField_msgoutRtcm3xType1124I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1124I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124I2c
    Field_msgoutRtcm3xType1124I2c& accessField_msgoutRtcm3xType1124I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124I2c (const version)
    const Field_msgoutRtcm3xType1124I2c& accessField_msgoutRtcm3xType1124I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1124Spi.
    using Field_msgoutRtcm3xType1124Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1124Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1124Spi
    Field_msgoutRtcm3xType1124Spi& initField_msgoutRtcm3xType1124Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1124Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124Spi
    Field_msgoutRtcm3xType1124Spi& accessField_msgoutRtcm3xType1124Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124Spi (const version)
    const Field_msgoutRtcm3xType1124Spi& accessField_msgoutRtcm3xType1124Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1124Uart1.
    using Field_msgoutRtcm3xType1124Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1124Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1124Uart1
    Field_msgoutRtcm3xType1124Uart1& initField_msgoutRtcm3xType1124Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1124Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124Uart1
    Field_msgoutRtcm3xType1124Uart1& accessField_msgoutRtcm3xType1124Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124Uart1 (const version)
    const Field_msgoutRtcm3xType1124Uart1& accessField_msgoutRtcm3xType1124Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1124Uart2.
    using Field_msgoutRtcm3xType1124Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1124Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1124Uart2
    Field_msgoutRtcm3xType1124Uart2& initField_msgoutRtcm3xType1124Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1124Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124Uart2
    Field_msgoutRtcm3xType1124Uart2& accessField_msgoutRtcm3xType1124Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124Uart2 (const version)
    const Field_msgoutRtcm3xType1124Uart2& accessField_msgoutRtcm3xType1124Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1124Usb.
    using Field_msgoutRtcm3xType1124Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1124Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1124Usb
    Field_msgoutRtcm3xType1124Usb& initField_msgoutRtcm3xType1124Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1124Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124Usb
    Field_msgoutRtcm3xType1124Usb& accessField_msgoutRtcm3xType1124Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1124Usb (const version)
    const Field_msgoutRtcm3xType1124Usb& accessField_msgoutRtcm3xType1124Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1124Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1127I2c.
    using Field_msgoutRtcm3xType1127I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1127I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1127I2c
    Field_msgoutRtcm3xType1127I2c& initField_msgoutRtcm3xType1127I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1127I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127I2c
    Field_msgoutRtcm3xType1127I2c& accessField_msgoutRtcm3xType1127I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127I2c (const version)
    const Field_msgoutRtcm3xType1127I2c& accessField_msgoutRtcm3xType1127I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1127Spi.
    using Field_msgoutRtcm3xType1127Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1127Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1127Spi
    Field_msgoutRtcm3xType1127Spi& initField_msgoutRtcm3xType1127Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1127Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127Spi
    Field_msgoutRtcm3xType1127Spi& accessField_msgoutRtcm3xType1127Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127Spi (const version)
    const Field_msgoutRtcm3xType1127Spi& accessField_msgoutRtcm3xType1127Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1127Uart1.
    using Field_msgoutRtcm3xType1127Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1127Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1127Uart1
    Field_msgoutRtcm3xType1127Uart1& initField_msgoutRtcm3xType1127Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1127Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127Uart1
    Field_msgoutRtcm3xType1127Uart1& accessField_msgoutRtcm3xType1127Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127Uart1 (const version)
    const Field_msgoutRtcm3xType1127Uart1& accessField_msgoutRtcm3xType1127Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1127Uart2.
    using Field_msgoutRtcm3xType1127Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1127Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1127Uart2
    Field_msgoutRtcm3xType1127Uart2& initField_msgoutRtcm3xType1127Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1127Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127Uart2
    Field_msgoutRtcm3xType1127Uart2& accessField_msgoutRtcm3xType1127Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127Uart2 (const version)
    const Field_msgoutRtcm3xType1127Uart2& accessField_msgoutRtcm3xType1127Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1127Usb.
    using Field_msgoutRtcm3xType1127Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1127Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1127Usb
    Field_msgoutRtcm3xType1127Usb& initField_msgoutRtcm3xType1127Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1127Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127Usb
    Field_msgoutRtcm3xType1127Usb& accessField_msgoutRtcm3xType1127Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1127Usb (const version)
    const Field_msgoutRtcm3xType1127Usb& accessField_msgoutRtcm3xType1127Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1127Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1230I2c.
    using Field_msgoutRtcm3xType1230I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1230I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1230I2c
    Field_msgoutRtcm3xType1230I2c& initField_msgoutRtcm3xType1230I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1230I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230I2c
    Field_msgoutRtcm3xType1230I2c& accessField_msgoutRtcm3xType1230I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230I2c (const version)
    const Field_msgoutRtcm3xType1230I2c& accessField_msgoutRtcm3xType1230I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1230Spi.
    using Field_msgoutRtcm3xType1230Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1230Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1230Spi
    Field_msgoutRtcm3xType1230Spi& initField_msgoutRtcm3xType1230Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1230Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230Spi
    Field_msgoutRtcm3xType1230Spi& accessField_msgoutRtcm3xType1230Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230Spi (const version)
    const Field_msgoutRtcm3xType1230Spi& accessField_msgoutRtcm3xType1230Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1230Uart1.
    using Field_msgoutRtcm3xType1230Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1230Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1230Uart1
    Field_msgoutRtcm3xType1230Uart1& initField_msgoutRtcm3xType1230Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1230Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230Uart1
    Field_msgoutRtcm3xType1230Uart1& accessField_msgoutRtcm3xType1230Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230Uart1 (const version)
    const Field_msgoutRtcm3xType1230Uart1& accessField_msgoutRtcm3xType1230Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1230Uart2.
    using Field_msgoutRtcm3xType1230Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1230Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1230Uart2
    Field_msgoutRtcm3xType1230Uart2& initField_msgoutRtcm3xType1230Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1230Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230Uart2
    Field_msgoutRtcm3xType1230Uart2& accessField_msgoutRtcm3xType1230Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230Uart2 (const version)
    const Field_msgoutRtcm3xType1230Uart2& accessField_msgoutRtcm3xType1230Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType1230Usb.
    using Field_msgoutRtcm3xType1230Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType1230Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType1230Usb
    Field_msgoutRtcm3xType1230Usb& initField_msgoutRtcm3xType1230Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType1230Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230Usb
    Field_msgoutRtcm3xType1230Usb& accessField_msgoutRtcm3xType1230Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType1230Usb (const version)
    const Field_msgoutRtcm3xType1230Usb& accessField_msgoutRtcm3xType1230Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType1230Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_0I2c.
    using Field_msgoutRtcm3xType4072_0I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_0I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_0I2c
    Field_msgoutRtcm3xType4072_0I2c& initField_msgoutRtcm3xType4072_0I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_0I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0I2c
    Field_msgoutRtcm3xType4072_0I2c& accessField_msgoutRtcm3xType4072_0I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0I2c (const version)
    const Field_msgoutRtcm3xType4072_0I2c& accessField_msgoutRtcm3xType4072_0I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_0Spi.
    using Field_msgoutRtcm3xType4072_0Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_0Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_0Spi
    Field_msgoutRtcm3xType4072_0Spi& initField_msgoutRtcm3xType4072_0Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_0Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0Spi
    Field_msgoutRtcm3xType4072_0Spi& accessField_msgoutRtcm3xType4072_0Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0Spi (const version)
    const Field_msgoutRtcm3xType4072_0Spi& accessField_msgoutRtcm3xType4072_0Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_0Uart1.
    using Field_msgoutRtcm3xType4072_0Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_0Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_0Uart1
    Field_msgoutRtcm3xType4072_0Uart1& initField_msgoutRtcm3xType4072_0Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_0Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0Uart1
    Field_msgoutRtcm3xType4072_0Uart1& accessField_msgoutRtcm3xType4072_0Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0Uart1 (const version)
    const Field_msgoutRtcm3xType4072_0Uart1& accessField_msgoutRtcm3xType4072_0Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_0Uart2.
    using Field_msgoutRtcm3xType4072_0Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_0Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_0Uart2
    Field_msgoutRtcm3xType4072_0Uart2& initField_msgoutRtcm3xType4072_0Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_0Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0Uart2
    Field_msgoutRtcm3xType4072_0Uart2& accessField_msgoutRtcm3xType4072_0Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0Uart2 (const version)
    const Field_msgoutRtcm3xType4072_0Uart2& accessField_msgoutRtcm3xType4072_0Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_0Usb.
    using Field_msgoutRtcm3xType4072_0Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_0Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_0Usb
    Field_msgoutRtcm3xType4072_0Usb& initField_msgoutRtcm3xType4072_0Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_0Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0Usb
    Field_msgoutRtcm3xType4072_0Usb& accessField_msgoutRtcm3xType4072_0Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_0Usb (const version)
    const Field_msgoutRtcm3xType4072_0Usb& accessField_msgoutRtcm3xType4072_0Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_0Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_1I2c.
    using Field_msgoutRtcm3xType4072_1I2c = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_1I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_1I2c
    Field_msgoutRtcm3xType4072_1I2c& initField_msgoutRtcm3xType4072_1I2c()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_1I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1I2c
    Field_msgoutRtcm3xType4072_1I2c& accessField_msgoutRtcm3xType4072_1I2c()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1I2c (const version)
    const Field_msgoutRtcm3xType4072_1I2c& accessField_msgoutRtcm3xType4072_1I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_1Spi.
    using Field_msgoutRtcm3xType4072_1Spi = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_1Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_1Spi
    Field_msgoutRtcm3xType4072_1Spi& initField_msgoutRtcm3xType4072_1Spi()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_1Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1Spi
    Field_msgoutRtcm3xType4072_1Spi& accessField_msgoutRtcm3xType4072_1Spi()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1Spi (const version)
    const Field_msgoutRtcm3xType4072_1Spi& accessField_msgoutRtcm3xType4072_1Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_1Uart1.
    using Field_msgoutRtcm3xType4072_1Uart1 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_1Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_1Uart1
    Field_msgoutRtcm3xType4072_1Uart1& initField_msgoutRtcm3xType4072_1Uart1()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_1Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1Uart1
    Field_msgoutRtcm3xType4072_1Uart1& accessField_msgoutRtcm3xType4072_1Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1Uart1 (const version)
    const Field_msgoutRtcm3xType4072_1Uart1& accessField_msgoutRtcm3xType4072_1Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_1Uart2.
    using Field_msgoutRtcm3xType4072_1Uart2 = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_1Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_1Uart2
    Field_msgoutRtcm3xType4072_1Uart2& initField_msgoutRtcm3xType4072_1Uart2()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_1Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1Uart2
    Field_msgoutRtcm3xType4072_1Uart2& accessField_msgoutRtcm3xType4072_1Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1Uart2 (const version)
    const Field_msgoutRtcm3xType4072_1Uart2& accessField_msgoutRtcm3xType4072_1Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutRtcm3xType4072_1Usb.
    using Field_msgoutRtcm3xType4072_1Usb = typename CfgValPairMembers<TOpt>::MsgoutRtcm3xType4072_1Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutRtcm3xType4072_1Usb
    Field_msgoutRtcm3xType4072_1Usb& initField_msgoutRtcm3xType4072_1Usb()
    {
        return Base::template initField<FieldIdx_msgoutRtcm3xType4072_1Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1Usb
    Field_msgoutRtcm3xType4072_1Usb& accessField_msgoutRtcm3xType4072_1Usb()
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutRtcm3xType4072_1Usb (const version)
    const Field_msgoutRtcm3xType4072_1Usb& accessField_msgoutRtcm3xType4072_1Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutRtcm3xType4072_1Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxLogInfoI2c.
    using Field_msgoutUbxLogInfoI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxLogInfoI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxLogInfoI2c
    Field_msgoutUbxLogInfoI2c& initField_msgoutUbxLogInfoI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxLogInfoI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoI2c
    Field_msgoutUbxLogInfoI2c& accessField_msgoutUbxLogInfoI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoI2c (const version)
    const Field_msgoutUbxLogInfoI2c& accessField_msgoutUbxLogInfoI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxLogInfoSpi.
    using Field_msgoutUbxLogInfoSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxLogInfoSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxLogInfoSpi
    Field_msgoutUbxLogInfoSpi& initField_msgoutUbxLogInfoSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxLogInfoSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoSpi
    Field_msgoutUbxLogInfoSpi& accessField_msgoutUbxLogInfoSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoSpi (const version)
    const Field_msgoutUbxLogInfoSpi& accessField_msgoutUbxLogInfoSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxLogInfoUart1.
    using Field_msgoutUbxLogInfoUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxLogInfoUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxLogInfoUart1
    Field_msgoutUbxLogInfoUart1& initField_msgoutUbxLogInfoUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxLogInfoUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoUart1
    Field_msgoutUbxLogInfoUart1& accessField_msgoutUbxLogInfoUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoUart1 (const version)
    const Field_msgoutUbxLogInfoUart1& accessField_msgoutUbxLogInfoUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxLogInfoUart2.
    using Field_msgoutUbxLogInfoUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxLogInfoUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxLogInfoUart2
    Field_msgoutUbxLogInfoUart2& initField_msgoutUbxLogInfoUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxLogInfoUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoUart2
    Field_msgoutUbxLogInfoUart2& accessField_msgoutUbxLogInfoUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoUart2 (const version)
    const Field_msgoutUbxLogInfoUart2& accessField_msgoutUbxLogInfoUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxLogInfoUsb.
    using Field_msgoutUbxLogInfoUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxLogInfoUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxLogInfoUsb
    Field_msgoutUbxLogInfoUsb& initField_msgoutUbxLogInfoUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxLogInfoUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoUsb
    Field_msgoutUbxLogInfoUsb& accessField_msgoutUbxLogInfoUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxLogInfoUsb (const version)
    const Field_msgoutUbxLogInfoUsb& accessField_msgoutUbxLogInfoUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxLogInfoUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonCommsI2c.
    using Field_msgoutUbxMonCommsI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonCommsI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonCommsI2c
    Field_msgoutUbxMonCommsI2c& initField_msgoutUbxMonCommsI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonCommsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsI2c
    Field_msgoutUbxMonCommsI2c& accessField_msgoutUbxMonCommsI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsI2c (const version)
    const Field_msgoutUbxMonCommsI2c& accessField_msgoutUbxMonCommsI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonCommsSpi.
    using Field_msgoutUbxMonCommsSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonCommsSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonCommsSpi
    Field_msgoutUbxMonCommsSpi& initField_msgoutUbxMonCommsSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonCommsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsSpi
    Field_msgoutUbxMonCommsSpi& accessField_msgoutUbxMonCommsSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsSpi (const version)
    const Field_msgoutUbxMonCommsSpi& accessField_msgoutUbxMonCommsSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonCommsUart1.
    using Field_msgoutUbxMonCommsUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonCommsUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonCommsUart1
    Field_msgoutUbxMonCommsUart1& initField_msgoutUbxMonCommsUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonCommsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsUart1
    Field_msgoutUbxMonCommsUart1& accessField_msgoutUbxMonCommsUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsUart1 (const version)
    const Field_msgoutUbxMonCommsUart1& accessField_msgoutUbxMonCommsUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonCommsUart2.
    using Field_msgoutUbxMonCommsUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonCommsUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonCommsUart2
    Field_msgoutUbxMonCommsUart2& initField_msgoutUbxMonCommsUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonCommsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsUart2
    Field_msgoutUbxMonCommsUart2& accessField_msgoutUbxMonCommsUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsUart2 (const version)
    const Field_msgoutUbxMonCommsUart2& accessField_msgoutUbxMonCommsUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonCommsUsb.
    using Field_msgoutUbxMonCommsUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonCommsUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonCommsUsb
    Field_msgoutUbxMonCommsUsb& initField_msgoutUbxMonCommsUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonCommsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsUsb
    Field_msgoutUbxMonCommsUsb& accessField_msgoutUbxMonCommsUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonCommsUsb (const version)
    const Field_msgoutUbxMonCommsUsb& accessField_msgoutUbxMonCommsUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonCommsUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw2I2c.
    using Field_msgoutUbxMonHw2I2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw2I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw2I2c
    Field_msgoutUbxMonHw2I2c& initField_msgoutUbxMonHw2I2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw2I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2I2c
    Field_msgoutUbxMonHw2I2c& accessField_msgoutUbxMonHw2I2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2I2c (const version)
    const Field_msgoutUbxMonHw2I2c& accessField_msgoutUbxMonHw2I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw2Spi.
    using Field_msgoutUbxMonHw2Spi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw2Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw2Spi
    Field_msgoutUbxMonHw2Spi& initField_msgoutUbxMonHw2Spi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw2Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2Spi
    Field_msgoutUbxMonHw2Spi& accessField_msgoutUbxMonHw2Spi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2Spi (const version)
    const Field_msgoutUbxMonHw2Spi& accessField_msgoutUbxMonHw2Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw2Uart1.
    using Field_msgoutUbxMonHw2Uart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw2Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw2Uart1
    Field_msgoutUbxMonHw2Uart1& initField_msgoutUbxMonHw2Uart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw2Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2Uart1
    Field_msgoutUbxMonHw2Uart1& accessField_msgoutUbxMonHw2Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2Uart1 (const version)
    const Field_msgoutUbxMonHw2Uart1& accessField_msgoutUbxMonHw2Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw2Uart2.
    using Field_msgoutUbxMonHw2Uart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw2Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw2Uart2
    Field_msgoutUbxMonHw2Uart2& initField_msgoutUbxMonHw2Uart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw2Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2Uart2
    Field_msgoutUbxMonHw2Uart2& accessField_msgoutUbxMonHw2Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2Uart2 (const version)
    const Field_msgoutUbxMonHw2Uart2& accessField_msgoutUbxMonHw2Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw2Usb.
    using Field_msgoutUbxMonHw2Usb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw2Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw2Usb
    Field_msgoutUbxMonHw2Usb& initField_msgoutUbxMonHw2Usb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw2Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2Usb
    Field_msgoutUbxMonHw2Usb& accessField_msgoutUbxMonHw2Usb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw2Usb (const version)
    const Field_msgoutUbxMonHw2Usb& accessField_msgoutUbxMonHw2Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw2Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw3I2c.
    using Field_msgoutUbxMonHw3I2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw3I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw3I2c
    Field_msgoutUbxMonHw3I2c& initField_msgoutUbxMonHw3I2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw3I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3I2c
    Field_msgoutUbxMonHw3I2c& accessField_msgoutUbxMonHw3I2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3I2c (const version)
    const Field_msgoutUbxMonHw3I2c& accessField_msgoutUbxMonHw3I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw3Spi.
    using Field_msgoutUbxMonHw3Spi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw3Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw3Spi
    Field_msgoutUbxMonHw3Spi& initField_msgoutUbxMonHw3Spi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw3Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3Spi
    Field_msgoutUbxMonHw3Spi& accessField_msgoutUbxMonHw3Spi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3Spi (const version)
    const Field_msgoutUbxMonHw3Spi& accessField_msgoutUbxMonHw3Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw3Uart1.
    using Field_msgoutUbxMonHw3Uart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw3Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw3Uart1
    Field_msgoutUbxMonHw3Uart1& initField_msgoutUbxMonHw3Uart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw3Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3Uart1
    Field_msgoutUbxMonHw3Uart1& accessField_msgoutUbxMonHw3Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3Uart1 (const version)
    const Field_msgoutUbxMonHw3Uart1& accessField_msgoutUbxMonHw3Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw3Uart2.
    using Field_msgoutUbxMonHw3Uart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw3Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw3Uart2
    Field_msgoutUbxMonHw3Uart2& initField_msgoutUbxMonHw3Uart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw3Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3Uart2
    Field_msgoutUbxMonHw3Uart2& accessField_msgoutUbxMonHw3Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3Uart2 (const version)
    const Field_msgoutUbxMonHw3Uart2& accessField_msgoutUbxMonHw3Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHw3Usb.
    using Field_msgoutUbxMonHw3Usb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHw3Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHw3Usb
    Field_msgoutUbxMonHw3Usb& initField_msgoutUbxMonHw3Usb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHw3Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3Usb
    Field_msgoutUbxMonHw3Usb& accessField_msgoutUbxMonHw3Usb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHw3Usb (const version)
    const Field_msgoutUbxMonHw3Usb& accessField_msgoutUbxMonHw3Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHw3Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHwI2c.
    using Field_msgoutUbxMonHwI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHwI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHwI2c
    Field_msgoutUbxMonHwI2c& initField_msgoutUbxMonHwI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHwI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwI2c
    Field_msgoutUbxMonHwI2c& accessField_msgoutUbxMonHwI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwI2c (const version)
    const Field_msgoutUbxMonHwI2c& accessField_msgoutUbxMonHwI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHwSpi.
    using Field_msgoutUbxMonHwSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHwSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHwSpi
    Field_msgoutUbxMonHwSpi& initField_msgoutUbxMonHwSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHwSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwSpi
    Field_msgoutUbxMonHwSpi& accessField_msgoutUbxMonHwSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwSpi (const version)
    const Field_msgoutUbxMonHwSpi& accessField_msgoutUbxMonHwSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHwUart1.
    using Field_msgoutUbxMonHwUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHwUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHwUart1
    Field_msgoutUbxMonHwUart1& initField_msgoutUbxMonHwUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHwUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwUart1
    Field_msgoutUbxMonHwUart1& accessField_msgoutUbxMonHwUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwUart1 (const version)
    const Field_msgoutUbxMonHwUart1& accessField_msgoutUbxMonHwUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHwUart2.
    using Field_msgoutUbxMonHwUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHwUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHwUart2
    Field_msgoutUbxMonHwUart2& initField_msgoutUbxMonHwUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHwUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwUart2
    Field_msgoutUbxMonHwUart2& accessField_msgoutUbxMonHwUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwUart2 (const version)
    const Field_msgoutUbxMonHwUart2& accessField_msgoutUbxMonHwUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonHwUsb.
    using Field_msgoutUbxMonHwUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonHwUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonHwUsb
    Field_msgoutUbxMonHwUsb& initField_msgoutUbxMonHwUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonHwUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwUsb
    Field_msgoutUbxMonHwUsb& accessField_msgoutUbxMonHwUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonHwUsb (const version)
    const Field_msgoutUbxMonHwUsb& accessField_msgoutUbxMonHwUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonHwUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonIoI2c.
    using Field_msgoutUbxMonIoI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonIoI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonIoI2c
    Field_msgoutUbxMonIoI2c& initField_msgoutUbxMonIoI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonIoI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoI2c
    Field_msgoutUbxMonIoI2c& accessField_msgoutUbxMonIoI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoI2c (const version)
    const Field_msgoutUbxMonIoI2c& accessField_msgoutUbxMonIoI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonIoSpi.
    using Field_msgoutUbxMonIoSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonIoSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonIoSpi
    Field_msgoutUbxMonIoSpi& initField_msgoutUbxMonIoSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonIoSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoSpi
    Field_msgoutUbxMonIoSpi& accessField_msgoutUbxMonIoSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoSpi (const version)
    const Field_msgoutUbxMonIoSpi& accessField_msgoutUbxMonIoSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonIoUart1.
    using Field_msgoutUbxMonIoUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonIoUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonIoUart1
    Field_msgoutUbxMonIoUart1& initField_msgoutUbxMonIoUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonIoUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoUart1
    Field_msgoutUbxMonIoUart1& accessField_msgoutUbxMonIoUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoUart1 (const version)
    const Field_msgoutUbxMonIoUart1& accessField_msgoutUbxMonIoUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonIoUart2.
    using Field_msgoutUbxMonIoUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonIoUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonIoUart2
    Field_msgoutUbxMonIoUart2& initField_msgoutUbxMonIoUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonIoUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoUart2
    Field_msgoutUbxMonIoUart2& accessField_msgoutUbxMonIoUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoUart2 (const version)
    const Field_msgoutUbxMonIoUart2& accessField_msgoutUbxMonIoUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonIoUsb.
    using Field_msgoutUbxMonIoUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonIoUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonIoUsb
    Field_msgoutUbxMonIoUsb& initField_msgoutUbxMonIoUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonIoUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoUsb
    Field_msgoutUbxMonIoUsb& accessField_msgoutUbxMonIoUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonIoUsb (const version)
    const Field_msgoutUbxMonIoUsb& accessField_msgoutUbxMonIoUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonIoUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonMsgppI2c.
    using Field_msgoutUbxMonMsgppI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonMsgppI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonMsgppI2c
    Field_msgoutUbxMonMsgppI2c& initField_msgoutUbxMonMsgppI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonMsgppI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppI2c
    Field_msgoutUbxMonMsgppI2c& accessField_msgoutUbxMonMsgppI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppI2c (const version)
    const Field_msgoutUbxMonMsgppI2c& accessField_msgoutUbxMonMsgppI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonMsgppSpi.
    using Field_msgoutUbxMonMsgppSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonMsgppSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonMsgppSpi
    Field_msgoutUbxMonMsgppSpi& initField_msgoutUbxMonMsgppSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonMsgppSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppSpi
    Field_msgoutUbxMonMsgppSpi& accessField_msgoutUbxMonMsgppSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppSpi (const version)
    const Field_msgoutUbxMonMsgppSpi& accessField_msgoutUbxMonMsgppSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonMsgppUart1.
    using Field_msgoutUbxMonMsgppUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonMsgppUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonMsgppUart1
    Field_msgoutUbxMonMsgppUart1& initField_msgoutUbxMonMsgppUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonMsgppUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppUart1
    Field_msgoutUbxMonMsgppUart1& accessField_msgoutUbxMonMsgppUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppUart1 (const version)
    const Field_msgoutUbxMonMsgppUart1& accessField_msgoutUbxMonMsgppUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonMsgppUart2.
    using Field_msgoutUbxMonMsgppUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonMsgppUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonMsgppUart2
    Field_msgoutUbxMonMsgppUart2& initField_msgoutUbxMonMsgppUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonMsgppUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppUart2
    Field_msgoutUbxMonMsgppUart2& accessField_msgoutUbxMonMsgppUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppUart2 (const version)
    const Field_msgoutUbxMonMsgppUart2& accessField_msgoutUbxMonMsgppUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonMsgppUsb.
    using Field_msgoutUbxMonMsgppUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonMsgppUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonMsgppUsb
    Field_msgoutUbxMonMsgppUsb& initField_msgoutUbxMonMsgppUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonMsgppUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppUsb
    Field_msgoutUbxMonMsgppUsb& accessField_msgoutUbxMonMsgppUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonMsgppUsb (const version)
    const Field_msgoutUbxMonMsgppUsb& accessField_msgoutUbxMonMsgppUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonMsgppUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRfI2c.
    using Field_msgoutUbxMonRfI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRfI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRfI2c
    Field_msgoutUbxMonRfI2c& initField_msgoutUbxMonRfI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRfI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfI2c
    Field_msgoutUbxMonRfI2c& accessField_msgoutUbxMonRfI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfI2c (const version)
    const Field_msgoutUbxMonRfI2c& accessField_msgoutUbxMonRfI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRfSpi.
    using Field_msgoutUbxMonRfSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRfSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRfSpi
    Field_msgoutUbxMonRfSpi& initField_msgoutUbxMonRfSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRfSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfSpi
    Field_msgoutUbxMonRfSpi& accessField_msgoutUbxMonRfSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfSpi (const version)
    const Field_msgoutUbxMonRfSpi& accessField_msgoutUbxMonRfSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRfUart1.
    using Field_msgoutUbxMonRfUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRfUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRfUart1
    Field_msgoutUbxMonRfUart1& initField_msgoutUbxMonRfUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRfUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfUart1
    Field_msgoutUbxMonRfUart1& accessField_msgoutUbxMonRfUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfUart1 (const version)
    const Field_msgoutUbxMonRfUart1& accessField_msgoutUbxMonRfUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRfUart2.
    using Field_msgoutUbxMonRfUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRfUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRfUart2
    Field_msgoutUbxMonRfUart2& initField_msgoutUbxMonRfUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRfUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfUart2
    Field_msgoutUbxMonRfUart2& accessField_msgoutUbxMonRfUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfUart2 (const version)
    const Field_msgoutUbxMonRfUart2& accessField_msgoutUbxMonRfUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRfUsb.
    using Field_msgoutUbxMonRfUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRfUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRfUsb
    Field_msgoutUbxMonRfUsb& initField_msgoutUbxMonRfUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRfUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfUsb
    Field_msgoutUbxMonRfUsb& accessField_msgoutUbxMonRfUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRfUsb (const version)
    const Field_msgoutUbxMonRfUsb& accessField_msgoutUbxMonRfUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRfUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxbufI2c.
    using Field_msgoutUbxMonRxbufI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxbufI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxbufI2c
    Field_msgoutUbxMonRxbufI2c& initField_msgoutUbxMonRxbufI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxbufI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufI2c
    Field_msgoutUbxMonRxbufI2c& accessField_msgoutUbxMonRxbufI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufI2c (const version)
    const Field_msgoutUbxMonRxbufI2c& accessField_msgoutUbxMonRxbufI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxbufSpi.
    using Field_msgoutUbxMonRxbufSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxbufSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxbufSpi
    Field_msgoutUbxMonRxbufSpi& initField_msgoutUbxMonRxbufSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxbufSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufSpi
    Field_msgoutUbxMonRxbufSpi& accessField_msgoutUbxMonRxbufSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufSpi (const version)
    const Field_msgoutUbxMonRxbufSpi& accessField_msgoutUbxMonRxbufSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxbufUart1.
    using Field_msgoutUbxMonRxbufUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxbufUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxbufUart1
    Field_msgoutUbxMonRxbufUart1& initField_msgoutUbxMonRxbufUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxbufUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufUart1
    Field_msgoutUbxMonRxbufUart1& accessField_msgoutUbxMonRxbufUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufUart1 (const version)
    const Field_msgoutUbxMonRxbufUart1& accessField_msgoutUbxMonRxbufUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxbufUart2.
    using Field_msgoutUbxMonRxbufUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxbufUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxbufUart2
    Field_msgoutUbxMonRxbufUart2& initField_msgoutUbxMonRxbufUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxbufUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufUart2
    Field_msgoutUbxMonRxbufUart2& accessField_msgoutUbxMonRxbufUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufUart2 (const version)
    const Field_msgoutUbxMonRxbufUart2& accessField_msgoutUbxMonRxbufUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxbufUsb.
    using Field_msgoutUbxMonRxbufUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxbufUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxbufUsb
    Field_msgoutUbxMonRxbufUsb& initField_msgoutUbxMonRxbufUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxbufUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufUsb
    Field_msgoutUbxMonRxbufUsb& accessField_msgoutUbxMonRxbufUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxbufUsb (const version)
    const Field_msgoutUbxMonRxbufUsb& accessField_msgoutUbxMonRxbufUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxbufUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxrI2c.
    using Field_msgoutUbxMonRxrI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxrI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxrI2c
    Field_msgoutUbxMonRxrI2c& initField_msgoutUbxMonRxrI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxrI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrI2c
    Field_msgoutUbxMonRxrI2c& accessField_msgoutUbxMonRxrI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrI2c (const version)
    const Field_msgoutUbxMonRxrI2c& accessField_msgoutUbxMonRxrI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxrSpi.
    using Field_msgoutUbxMonRxrSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxrSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxrSpi
    Field_msgoutUbxMonRxrSpi& initField_msgoutUbxMonRxrSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxrSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrSpi
    Field_msgoutUbxMonRxrSpi& accessField_msgoutUbxMonRxrSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrSpi (const version)
    const Field_msgoutUbxMonRxrSpi& accessField_msgoutUbxMonRxrSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxrUart1.
    using Field_msgoutUbxMonRxrUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxrUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxrUart1
    Field_msgoutUbxMonRxrUart1& initField_msgoutUbxMonRxrUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxrUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrUart1
    Field_msgoutUbxMonRxrUart1& accessField_msgoutUbxMonRxrUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrUart1 (const version)
    const Field_msgoutUbxMonRxrUart1& accessField_msgoutUbxMonRxrUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxrUart2.
    using Field_msgoutUbxMonRxrUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxrUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxrUart2
    Field_msgoutUbxMonRxrUart2& initField_msgoutUbxMonRxrUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxrUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrUart2
    Field_msgoutUbxMonRxrUart2& accessField_msgoutUbxMonRxrUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrUart2 (const version)
    const Field_msgoutUbxMonRxrUart2& accessField_msgoutUbxMonRxrUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonRxrUsb.
    using Field_msgoutUbxMonRxrUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonRxrUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonRxrUsb
    Field_msgoutUbxMonRxrUsb& initField_msgoutUbxMonRxrUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonRxrUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrUsb
    Field_msgoutUbxMonRxrUsb& accessField_msgoutUbxMonRxrUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonRxrUsb (const version)
    const Field_msgoutUbxMonRxrUsb& accessField_msgoutUbxMonRxrUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonRxrUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonSpanI2c.
    using Field_msgoutUbxMonSpanI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonSpanI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonSpanI2c
    Field_msgoutUbxMonSpanI2c& initField_msgoutUbxMonSpanI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonSpanI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanI2c
    Field_msgoutUbxMonSpanI2c& accessField_msgoutUbxMonSpanI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanI2c (const version)
    const Field_msgoutUbxMonSpanI2c& accessField_msgoutUbxMonSpanI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonSpanSpi.
    using Field_msgoutUbxMonSpanSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonSpanSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonSpanSpi
    Field_msgoutUbxMonSpanSpi& initField_msgoutUbxMonSpanSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonSpanSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanSpi
    Field_msgoutUbxMonSpanSpi& accessField_msgoutUbxMonSpanSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanSpi (const version)
    const Field_msgoutUbxMonSpanSpi& accessField_msgoutUbxMonSpanSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonSpanUart1.
    using Field_msgoutUbxMonSpanUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonSpanUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonSpanUart1
    Field_msgoutUbxMonSpanUart1& initField_msgoutUbxMonSpanUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonSpanUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanUart1
    Field_msgoutUbxMonSpanUart1& accessField_msgoutUbxMonSpanUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanUart1 (const version)
    const Field_msgoutUbxMonSpanUart1& accessField_msgoutUbxMonSpanUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonSpanUart2.
    using Field_msgoutUbxMonSpanUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonSpanUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonSpanUart2
    Field_msgoutUbxMonSpanUart2& initField_msgoutUbxMonSpanUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonSpanUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanUart2
    Field_msgoutUbxMonSpanUart2& accessField_msgoutUbxMonSpanUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanUart2 (const version)
    const Field_msgoutUbxMonSpanUart2& accessField_msgoutUbxMonSpanUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonSpanUsb.
    using Field_msgoutUbxMonSpanUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonSpanUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonSpanUsb
    Field_msgoutUbxMonSpanUsb& initField_msgoutUbxMonSpanUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonSpanUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanUsb
    Field_msgoutUbxMonSpanUsb& accessField_msgoutUbxMonSpanUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonSpanUsb (const version)
    const Field_msgoutUbxMonSpanUsb& accessField_msgoutUbxMonSpanUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonSpanUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonTxbufI2c.
    using Field_msgoutUbxMonTxbufI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxMonTxbufI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonTxbufI2c
    Field_msgoutUbxMonTxbufI2c& initField_msgoutUbxMonTxbufI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonTxbufI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufI2c
    Field_msgoutUbxMonTxbufI2c& accessField_msgoutUbxMonTxbufI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufI2c (const version)
    const Field_msgoutUbxMonTxbufI2c& accessField_msgoutUbxMonTxbufI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonTxbufSpi.
    using Field_msgoutUbxMonTxbufSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxMonTxbufSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonTxbufSpi
    Field_msgoutUbxMonTxbufSpi& initField_msgoutUbxMonTxbufSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonTxbufSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufSpi
    Field_msgoutUbxMonTxbufSpi& accessField_msgoutUbxMonTxbufSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufSpi (const version)
    const Field_msgoutUbxMonTxbufSpi& accessField_msgoutUbxMonTxbufSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonTxbufUart1.
    using Field_msgoutUbxMonTxbufUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonTxbufUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonTxbufUart1
    Field_msgoutUbxMonTxbufUart1& initField_msgoutUbxMonTxbufUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonTxbufUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufUart1
    Field_msgoutUbxMonTxbufUart1& accessField_msgoutUbxMonTxbufUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufUart1 (const version)
    const Field_msgoutUbxMonTxbufUart1& accessField_msgoutUbxMonTxbufUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonTxbufUart2.
    using Field_msgoutUbxMonTxbufUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxMonTxbufUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonTxbufUart2
    Field_msgoutUbxMonTxbufUart2& initField_msgoutUbxMonTxbufUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonTxbufUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufUart2
    Field_msgoutUbxMonTxbufUart2& accessField_msgoutUbxMonTxbufUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufUart2 (const version)
    const Field_msgoutUbxMonTxbufUart2& accessField_msgoutUbxMonTxbufUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxMonTxbufUsb.
    using Field_msgoutUbxMonTxbufUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxMonTxbufUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxMonTxbufUsb
    Field_msgoutUbxMonTxbufUsb& initField_msgoutUbxMonTxbufUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxMonTxbufUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufUsb
    Field_msgoutUbxMonTxbufUsb& accessField_msgoutUbxMonTxbufUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxMonTxbufUsb (const version)
    const Field_msgoutUbxMonTxbufUsb& accessField_msgoutUbxMonTxbufUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxMonTxbufUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavClockI2c.
    using Field_msgoutUbxNavClockI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavClockI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavClockI2c
    Field_msgoutUbxNavClockI2c& initField_msgoutUbxNavClockI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavClockI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockI2c
    Field_msgoutUbxNavClockI2c& accessField_msgoutUbxNavClockI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockI2c (const version)
    const Field_msgoutUbxNavClockI2c& accessField_msgoutUbxNavClockI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavClockSpi.
    using Field_msgoutUbxNavClockSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavClockSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavClockSpi
    Field_msgoutUbxNavClockSpi& initField_msgoutUbxNavClockSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavClockSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockSpi
    Field_msgoutUbxNavClockSpi& accessField_msgoutUbxNavClockSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockSpi (const version)
    const Field_msgoutUbxNavClockSpi& accessField_msgoutUbxNavClockSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavClockUart1.
    using Field_msgoutUbxNavClockUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavClockUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavClockUart1
    Field_msgoutUbxNavClockUart1& initField_msgoutUbxNavClockUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavClockUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockUart1
    Field_msgoutUbxNavClockUart1& accessField_msgoutUbxNavClockUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockUart1 (const version)
    const Field_msgoutUbxNavClockUart1& accessField_msgoutUbxNavClockUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavClockUart2.
    using Field_msgoutUbxNavClockUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavClockUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavClockUart2
    Field_msgoutUbxNavClockUart2& initField_msgoutUbxNavClockUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavClockUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockUart2
    Field_msgoutUbxNavClockUart2& accessField_msgoutUbxNavClockUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockUart2 (const version)
    const Field_msgoutUbxNavClockUart2& accessField_msgoutUbxNavClockUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavClockUsb.
    using Field_msgoutUbxNavClockUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavClockUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavClockUsb
    Field_msgoutUbxNavClockUsb& initField_msgoutUbxNavClockUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavClockUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockUsb
    Field_msgoutUbxNavClockUsb& accessField_msgoutUbxNavClockUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavClockUsb (const version)
    const Field_msgoutUbxNavClockUsb& accessField_msgoutUbxNavClockUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavClockUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavDopI2c.
    using Field_msgoutUbxNavDopI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavDopI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavDopI2c
    Field_msgoutUbxNavDopI2c& initField_msgoutUbxNavDopI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavDopI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopI2c
    Field_msgoutUbxNavDopI2c& accessField_msgoutUbxNavDopI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopI2c (const version)
    const Field_msgoutUbxNavDopI2c& accessField_msgoutUbxNavDopI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavDopSpi.
    using Field_msgoutUbxNavDopSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavDopSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavDopSpi
    Field_msgoutUbxNavDopSpi& initField_msgoutUbxNavDopSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavDopSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopSpi
    Field_msgoutUbxNavDopSpi& accessField_msgoutUbxNavDopSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopSpi (const version)
    const Field_msgoutUbxNavDopSpi& accessField_msgoutUbxNavDopSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavDopUart1.
    using Field_msgoutUbxNavDopUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavDopUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavDopUart1
    Field_msgoutUbxNavDopUart1& initField_msgoutUbxNavDopUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavDopUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopUart1
    Field_msgoutUbxNavDopUart1& accessField_msgoutUbxNavDopUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopUart1 (const version)
    const Field_msgoutUbxNavDopUart1& accessField_msgoutUbxNavDopUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavDopUart2.
    using Field_msgoutUbxNavDopUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavDopUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavDopUart2
    Field_msgoutUbxNavDopUart2& initField_msgoutUbxNavDopUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavDopUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopUart2
    Field_msgoutUbxNavDopUart2& accessField_msgoutUbxNavDopUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopUart2 (const version)
    const Field_msgoutUbxNavDopUart2& accessField_msgoutUbxNavDopUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavDopUsb.
    using Field_msgoutUbxNavDopUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavDopUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavDopUsb
    Field_msgoutUbxNavDopUsb& initField_msgoutUbxNavDopUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavDopUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopUsb
    Field_msgoutUbxNavDopUsb& accessField_msgoutUbxNavDopUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavDopUsb (const version)
    const Field_msgoutUbxNavDopUsb& accessField_msgoutUbxNavDopUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavDopUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavEoeI2c.
    using Field_msgoutUbxNavEoeI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavEoeI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavEoeI2c
    Field_msgoutUbxNavEoeI2c& initField_msgoutUbxNavEoeI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavEoeI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeI2c
    Field_msgoutUbxNavEoeI2c& accessField_msgoutUbxNavEoeI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeI2c (const version)
    const Field_msgoutUbxNavEoeI2c& accessField_msgoutUbxNavEoeI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavEoeSpi.
    using Field_msgoutUbxNavEoeSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavEoeSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavEoeSpi
    Field_msgoutUbxNavEoeSpi& initField_msgoutUbxNavEoeSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavEoeSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeSpi
    Field_msgoutUbxNavEoeSpi& accessField_msgoutUbxNavEoeSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeSpi (const version)
    const Field_msgoutUbxNavEoeSpi& accessField_msgoutUbxNavEoeSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavEoeUart1.
    using Field_msgoutUbxNavEoeUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavEoeUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavEoeUart1
    Field_msgoutUbxNavEoeUart1& initField_msgoutUbxNavEoeUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavEoeUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeUart1
    Field_msgoutUbxNavEoeUart1& accessField_msgoutUbxNavEoeUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeUart1 (const version)
    const Field_msgoutUbxNavEoeUart1& accessField_msgoutUbxNavEoeUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavEoeUart2.
    using Field_msgoutUbxNavEoeUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavEoeUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavEoeUart2
    Field_msgoutUbxNavEoeUart2& initField_msgoutUbxNavEoeUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavEoeUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeUart2
    Field_msgoutUbxNavEoeUart2& accessField_msgoutUbxNavEoeUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeUart2 (const version)
    const Field_msgoutUbxNavEoeUart2& accessField_msgoutUbxNavEoeUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavEoeUsb.
    using Field_msgoutUbxNavEoeUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavEoeUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavEoeUsb
    Field_msgoutUbxNavEoeUsb& initField_msgoutUbxNavEoeUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavEoeUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeUsb
    Field_msgoutUbxNavEoeUsb& accessField_msgoutUbxNavEoeUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavEoeUsb (const version)
    const Field_msgoutUbxNavEoeUsb& accessField_msgoutUbxNavEoeUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavEoeUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavGeofenceI2c.
    using Field_msgoutUbxNavGeofenceI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavGeofenceI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavGeofenceI2c
    Field_msgoutUbxNavGeofenceI2c& initField_msgoutUbxNavGeofenceI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavGeofenceI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceI2c
    Field_msgoutUbxNavGeofenceI2c& accessField_msgoutUbxNavGeofenceI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceI2c (const version)
    const Field_msgoutUbxNavGeofenceI2c& accessField_msgoutUbxNavGeofenceI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavGeofenceSpi.
    using Field_msgoutUbxNavGeofenceSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavGeofenceSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavGeofenceSpi
    Field_msgoutUbxNavGeofenceSpi& initField_msgoutUbxNavGeofenceSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavGeofenceSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceSpi
    Field_msgoutUbxNavGeofenceSpi& accessField_msgoutUbxNavGeofenceSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceSpi (const version)
    const Field_msgoutUbxNavGeofenceSpi& accessField_msgoutUbxNavGeofenceSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavGeofenceUart1.
    using Field_msgoutUbxNavGeofenceUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavGeofenceUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavGeofenceUart1
    Field_msgoutUbxNavGeofenceUart1& initField_msgoutUbxNavGeofenceUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavGeofenceUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceUart1
    Field_msgoutUbxNavGeofenceUart1& accessField_msgoutUbxNavGeofenceUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceUart1 (const version)
    const Field_msgoutUbxNavGeofenceUart1& accessField_msgoutUbxNavGeofenceUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavGeofenceUart2.
    using Field_msgoutUbxNavGeofenceUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavGeofenceUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavGeofenceUart2
    Field_msgoutUbxNavGeofenceUart2& initField_msgoutUbxNavGeofenceUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavGeofenceUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceUart2
    Field_msgoutUbxNavGeofenceUart2& accessField_msgoutUbxNavGeofenceUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceUart2 (const version)
    const Field_msgoutUbxNavGeofenceUart2& accessField_msgoutUbxNavGeofenceUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavGeofenceUsb.
    using Field_msgoutUbxNavGeofenceUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavGeofenceUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavGeofenceUsb
    Field_msgoutUbxNavGeofenceUsb& initField_msgoutUbxNavGeofenceUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavGeofenceUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceUsb
    Field_msgoutUbxNavGeofenceUsb& accessField_msgoutUbxNavGeofenceUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavGeofenceUsb (const version)
    const Field_msgoutUbxNavGeofenceUsb& accessField_msgoutUbxNavGeofenceUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavGeofenceUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposecefI2c.
    using Field_msgoutUbxNavHpposecefI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposecefI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposecefI2c
    Field_msgoutUbxNavHpposecefI2c& initField_msgoutUbxNavHpposecefI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposecefI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefI2c
    Field_msgoutUbxNavHpposecefI2c& accessField_msgoutUbxNavHpposecefI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefI2c (const version)
    const Field_msgoutUbxNavHpposecefI2c& accessField_msgoutUbxNavHpposecefI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposecefSpi.
    using Field_msgoutUbxNavHpposecefSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposecefSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposecefSpi
    Field_msgoutUbxNavHpposecefSpi& initField_msgoutUbxNavHpposecefSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposecefSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefSpi
    Field_msgoutUbxNavHpposecefSpi& accessField_msgoutUbxNavHpposecefSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefSpi (const version)
    const Field_msgoutUbxNavHpposecefSpi& accessField_msgoutUbxNavHpposecefSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposecefUart1.
    using Field_msgoutUbxNavHpposecefUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposecefUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposecefUart1
    Field_msgoutUbxNavHpposecefUart1& initField_msgoutUbxNavHpposecefUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposecefUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefUart1
    Field_msgoutUbxNavHpposecefUart1& accessField_msgoutUbxNavHpposecefUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefUart1 (const version)
    const Field_msgoutUbxNavHpposecefUart1& accessField_msgoutUbxNavHpposecefUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposecefUart2.
    using Field_msgoutUbxNavHpposecefUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposecefUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposecefUart2
    Field_msgoutUbxNavHpposecefUart2& initField_msgoutUbxNavHpposecefUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposecefUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefUart2
    Field_msgoutUbxNavHpposecefUart2& accessField_msgoutUbxNavHpposecefUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefUart2 (const version)
    const Field_msgoutUbxNavHpposecefUart2& accessField_msgoutUbxNavHpposecefUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposecefUsb.
    using Field_msgoutUbxNavHpposecefUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposecefUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposecefUsb
    Field_msgoutUbxNavHpposecefUsb& initField_msgoutUbxNavHpposecefUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposecefUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefUsb
    Field_msgoutUbxNavHpposecefUsb& accessField_msgoutUbxNavHpposecefUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposecefUsb (const version)
    const Field_msgoutUbxNavHpposecefUsb& accessField_msgoutUbxNavHpposecefUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposecefUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposllhI2c.
    using Field_msgoutUbxNavHpposllhI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposllhI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposllhI2c
    Field_msgoutUbxNavHpposllhI2c& initField_msgoutUbxNavHpposllhI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposllhI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhI2c
    Field_msgoutUbxNavHpposllhI2c& accessField_msgoutUbxNavHpposllhI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhI2c (const version)
    const Field_msgoutUbxNavHpposllhI2c& accessField_msgoutUbxNavHpposllhI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposllhSpi.
    using Field_msgoutUbxNavHpposllhSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposllhSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposllhSpi
    Field_msgoutUbxNavHpposllhSpi& initField_msgoutUbxNavHpposllhSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposllhSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhSpi
    Field_msgoutUbxNavHpposllhSpi& accessField_msgoutUbxNavHpposllhSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhSpi (const version)
    const Field_msgoutUbxNavHpposllhSpi& accessField_msgoutUbxNavHpposllhSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposllhUart1.
    using Field_msgoutUbxNavHpposllhUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposllhUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposllhUart1
    Field_msgoutUbxNavHpposllhUart1& initField_msgoutUbxNavHpposllhUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposllhUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhUart1
    Field_msgoutUbxNavHpposllhUart1& accessField_msgoutUbxNavHpposllhUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhUart1 (const version)
    const Field_msgoutUbxNavHpposllhUart1& accessField_msgoutUbxNavHpposllhUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposllhUart2.
    using Field_msgoutUbxNavHpposllhUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposllhUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposllhUart2
    Field_msgoutUbxNavHpposllhUart2& initField_msgoutUbxNavHpposllhUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposllhUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhUart2
    Field_msgoutUbxNavHpposllhUart2& accessField_msgoutUbxNavHpposllhUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhUart2 (const version)
    const Field_msgoutUbxNavHpposllhUart2& accessField_msgoutUbxNavHpposllhUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavHpposllhUsb.
    using Field_msgoutUbxNavHpposllhUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavHpposllhUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavHpposllhUsb
    Field_msgoutUbxNavHpposllhUsb& initField_msgoutUbxNavHpposllhUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavHpposllhUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhUsb
    Field_msgoutUbxNavHpposllhUsb& accessField_msgoutUbxNavHpposllhUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavHpposllhUsb (const version)
    const Field_msgoutUbxNavHpposllhUsb& accessField_msgoutUbxNavHpposllhUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavHpposllhUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOdoI2c.
    using Field_msgoutUbxNavOdoI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOdoI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOdoI2c
    Field_msgoutUbxNavOdoI2c& initField_msgoutUbxNavOdoI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOdoI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoI2c
    Field_msgoutUbxNavOdoI2c& accessField_msgoutUbxNavOdoI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoI2c (const version)
    const Field_msgoutUbxNavOdoI2c& accessField_msgoutUbxNavOdoI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOdoSpi.
    using Field_msgoutUbxNavOdoSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOdoSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOdoSpi
    Field_msgoutUbxNavOdoSpi& initField_msgoutUbxNavOdoSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOdoSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoSpi
    Field_msgoutUbxNavOdoSpi& accessField_msgoutUbxNavOdoSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoSpi (const version)
    const Field_msgoutUbxNavOdoSpi& accessField_msgoutUbxNavOdoSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOdoUart1.
    using Field_msgoutUbxNavOdoUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOdoUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOdoUart1
    Field_msgoutUbxNavOdoUart1& initField_msgoutUbxNavOdoUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOdoUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoUart1
    Field_msgoutUbxNavOdoUart1& accessField_msgoutUbxNavOdoUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoUart1 (const version)
    const Field_msgoutUbxNavOdoUart1& accessField_msgoutUbxNavOdoUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOdoUart2.
    using Field_msgoutUbxNavOdoUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOdoUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOdoUart2
    Field_msgoutUbxNavOdoUart2& initField_msgoutUbxNavOdoUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOdoUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoUart2
    Field_msgoutUbxNavOdoUart2& accessField_msgoutUbxNavOdoUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoUart2 (const version)
    const Field_msgoutUbxNavOdoUart2& accessField_msgoutUbxNavOdoUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOdoUsb.
    using Field_msgoutUbxNavOdoUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOdoUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOdoUsb
    Field_msgoutUbxNavOdoUsb& initField_msgoutUbxNavOdoUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOdoUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoUsb
    Field_msgoutUbxNavOdoUsb& accessField_msgoutUbxNavOdoUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOdoUsb (const version)
    const Field_msgoutUbxNavOdoUsb& accessField_msgoutUbxNavOdoUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOdoUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOrbI2c.
    using Field_msgoutUbxNavOrbI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOrbI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOrbI2c
    Field_msgoutUbxNavOrbI2c& initField_msgoutUbxNavOrbI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOrbI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbI2c
    Field_msgoutUbxNavOrbI2c& accessField_msgoutUbxNavOrbI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbI2c (const version)
    const Field_msgoutUbxNavOrbI2c& accessField_msgoutUbxNavOrbI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOrbSpi.
    using Field_msgoutUbxNavOrbSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOrbSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOrbSpi
    Field_msgoutUbxNavOrbSpi& initField_msgoutUbxNavOrbSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOrbSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbSpi
    Field_msgoutUbxNavOrbSpi& accessField_msgoutUbxNavOrbSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbSpi (const version)
    const Field_msgoutUbxNavOrbSpi& accessField_msgoutUbxNavOrbSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOrbUart1.
    using Field_msgoutUbxNavOrbUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOrbUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOrbUart1
    Field_msgoutUbxNavOrbUart1& initField_msgoutUbxNavOrbUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOrbUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbUart1
    Field_msgoutUbxNavOrbUart1& accessField_msgoutUbxNavOrbUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbUart1 (const version)
    const Field_msgoutUbxNavOrbUart1& accessField_msgoutUbxNavOrbUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOrbUart2.
    using Field_msgoutUbxNavOrbUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOrbUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOrbUart2
    Field_msgoutUbxNavOrbUart2& initField_msgoutUbxNavOrbUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOrbUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbUart2
    Field_msgoutUbxNavOrbUart2& accessField_msgoutUbxNavOrbUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbUart2 (const version)
    const Field_msgoutUbxNavOrbUart2& accessField_msgoutUbxNavOrbUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavOrbUsb.
    using Field_msgoutUbxNavOrbUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavOrbUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavOrbUsb
    Field_msgoutUbxNavOrbUsb& initField_msgoutUbxNavOrbUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavOrbUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbUsb
    Field_msgoutUbxNavOrbUsb& accessField_msgoutUbxNavOrbUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavOrbUsb (const version)
    const Field_msgoutUbxNavOrbUsb& accessField_msgoutUbxNavOrbUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavOrbUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosecefI2c.
    using Field_msgoutUbxNavPosecefI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosecefI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosecefI2c
    Field_msgoutUbxNavPosecefI2c& initField_msgoutUbxNavPosecefI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosecefI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefI2c
    Field_msgoutUbxNavPosecefI2c& accessField_msgoutUbxNavPosecefI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefI2c (const version)
    const Field_msgoutUbxNavPosecefI2c& accessField_msgoutUbxNavPosecefI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosecefSpi.
    using Field_msgoutUbxNavPosecefSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosecefSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosecefSpi
    Field_msgoutUbxNavPosecefSpi& initField_msgoutUbxNavPosecefSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosecefSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefSpi
    Field_msgoutUbxNavPosecefSpi& accessField_msgoutUbxNavPosecefSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefSpi (const version)
    const Field_msgoutUbxNavPosecefSpi& accessField_msgoutUbxNavPosecefSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosecefUart1.
    using Field_msgoutUbxNavPosecefUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosecefUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosecefUart1
    Field_msgoutUbxNavPosecefUart1& initField_msgoutUbxNavPosecefUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosecefUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefUart1
    Field_msgoutUbxNavPosecefUart1& accessField_msgoutUbxNavPosecefUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefUart1 (const version)
    const Field_msgoutUbxNavPosecefUart1& accessField_msgoutUbxNavPosecefUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosecefUart2.
    using Field_msgoutUbxNavPosecefUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosecefUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosecefUart2
    Field_msgoutUbxNavPosecefUart2& initField_msgoutUbxNavPosecefUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosecefUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefUart2
    Field_msgoutUbxNavPosecefUart2& accessField_msgoutUbxNavPosecefUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefUart2 (const version)
    const Field_msgoutUbxNavPosecefUart2& accessField_msgoutUbxNavPosecefUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosecefUsb.
    using Field_msgoutUbxNavPosecefUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosecefUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosecefUsb
    Field_msgoutUbxNavPosecefUsb& initField_msgoutUbxNavPosecefUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosecefUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefUsb
    Field_msgoutUbxNavPosecefUsb& accessField_msgoutUbxNavPosecefUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosecefUsb (const version)
    const Field_msgoutUbxNavPosecefUsb& accessField_msgoutUbxNavPosecefUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosecefUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosllhI2c.
    using Field_msgoutUbxNavPosllhI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosllhI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosllhI2c
    Field_msgoutUbxNavPosllhI2c& initField_msgoutUbxNavPosllhI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosllhI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhI2c
    Field_msgoutUbxNavPosllhI2c& accessField_msgoutUbxNavPosllhI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhI2c (const version)
    const Field_msgoutUbxNavPosllhI2c& accessField_msgoutUbxNavPosllhI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosllhSpi.
    using Field_msgoutUbxNavPosllhSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosllhSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosllhSpi
    Field_msgoutUbxNavPosllhSpi& initField_msgoutUbxNavPosllhSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosllhSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhSpi
    Field_msgoutUbxNavPosllhSpi& accessField_msgoutUbxNavPosllhSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhSpi (const version)
    const Field_msgoutUbxNavPosllhSpi& accessField_msgoutUbxNavPosllhSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosllhUart1.
    using Field_msgoutUbxNavPosllhUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosllhUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosllhUart1
    Field_msgoutUbxNavPosllhUart1& initField_msgoutUbxNavPosllhUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosllhUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhUart1
    Field_msgoutUbxNavPosllhUart1& accessField_msgoutUbxNavPosllhUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhUart1 (const version)
    const Field_msgoutUbxNavPosllhUart1& accessField_msgoutUbxNavPosllhUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosllhUart2.
    using Field_msgoutUbxNavPosllhUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosllhUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosllhUart2
    Field_msgoutUbxNavPosllhUart2& initField_msgoutUbxNavPosllhUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosllhUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhUart2
    Field_msgoutUbxNavPosllhUart2& accessField_msgoutUbxNavPosllhUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhUart2 (const version)
    const Field_msgoutUbxNavPosllhUart2& accessField_msgoutUbxNavPosllhUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPosllhUsb.
    using Field_msgoutUbxNavPosllhUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPosllhUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPosllhUsb
    Field_msgoutUbxNavPosllhUsb& initField_msgoutUbxNavPosllhUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPosllhUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhUsb
    Field_msgoutUbxNavPosllhUsb& accessField_msgoutUbxNavPosllhUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPosllhUsb (const version)
    const Field_msgoutUbxNavPosllhUsb& accessField_msgoutUbxNavPosllhUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPosllhUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPvtI2c.
    using Field_msgoutUbxNavPvtI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPvtI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPvtI2c
    Field_msgoutUbxNavPvtI2c& initField_msgoutUbxNavPvtI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPvtI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtI2c
    Field_msgoutUbxNavPvtI2c& accessField_msgoutUbxNavPvtI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtI2c (const version)
    const Field_msgoutUbxNavPvtI2c& accessField_msgoutUbxNavPvtI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPvtSpi.
    using Field_msgoutUbxNavPvtSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPvtSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPvtSpi
    Field_msgoutUbxNavPvtSpi& initField_msgoutUbxNavPvtSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPvtSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtSpi
    Field_msgoutUbxNavPvtSpi& accessField_msgoutUbxNavPvtSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtSpi (const version)
    const Field_msgoutUbxNavPvtSpi& accessField_msgoutUbxNavPvtSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPvtUart1.
    using Field_msgoutUbxNavPvtUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPvtUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPvtUart1
    Field_msgoutUbxNavPvtUart1& initField_msgoutUbxNavPvtUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPvtUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtUart1
    Field_msgoutUbxNavPvtUart1& accessField_msgoutUbxNavPvtUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtUart1 (const version)
    const Field_msgoutUbxNavPvtUart1& accessField_msgoutUbxNavPvtUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPvtUart2.
    using Field_msgoutUbxNavPvtUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPvtUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPvtUart2
    Field_msgoutUbxNavPvtUart2& initField_msgoutUbxNavPvtUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPvtUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtUart2
    Field_msgoutUbxNavPvtUart2& accessField_msgoutUbxNavPvtUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtUart2 (const version)
    const Field_msgoutUbxNavPvtUart2& accessField_msgoutUbxNavPvtUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavPvtUsb.
    using Field_msgoutUbxNavPvtUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavPvtUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavPvtUsb
    Field_msgoutUbxNavPvtUsb& initField_msgoutUbxNavPvtUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavPvtUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtUsb
    Field_msgoutUbxNavPvtUsb& accessField_msgoutUbxNavPvtUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavPvtUsb (const version)
    const Field_msgoutUbxNavPvtUsb& accessField_msgoutUbxNavPvtUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavPvtUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavRelposnedI2c.
    using Field_msgoutUbxNavRelposnedI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavRelposnedI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavRelposnedI2c
    Field_msgoutUbxNavRelposnedI2c& initField_msgoutUbxNavRelposnedI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavRelposnedI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedI2c
    Field_msgoutUbxNavRelposnedI2c& accessField_msgoutUbxNavRelposnedI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedI2c (const version)
    const Field_msgoutUbxNavRelposnedI2c& accessField_msgoutUbxNavRelposnedI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavRelposnedSpi.
    using Field_msgoutUbxNavRelposnedSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavRelposnedSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavRelposnedSpi
    Field_msgoutUbxNavRelposnedSpi& initField_msgoutUbxNavRelposnedSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavRelposnedSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedSpi
    Field_msgoutUbxNavRelposnedSpi& accessField_msgoutUbxNavRelposnedSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedSpi (const version)
    const Field_msgoutUbxNavRelposnedSpi& accessField_msgoutUbxNavRelposnedSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavRelposnedUart1.
    using Field_msgoutUbxNavRelposnedUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavRelposnedUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavRelposnedUart1
    Field_msgoutUbxNavRelposnedUart1& initField_msgoutUbxNavRelposnedUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavRelposnedUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedUart1
    Field_msgoutUbxNavRelposnedUart1& accessField_msgoutUbxNavRelposnedUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedUart1 (const version)
    const Field_msgoutUbxNavRelposnedUart1& accessField_msgoutUbxNavRelposnedUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavRelposnedUart2.
    using Field_msgoutUbxNavRelposnedUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavRelposnedUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavRelposnedUart2
    Field_msgoutUbxNavRelposnedUart2& initField_msgoutUbxNavRelposnedUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavRelposnedUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedUart2
    Field_msgoutUbxNavRelposnedUart2& accessField_msgoutUbxNavRelposnedUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedUart2 (const version)
    const Field_msgoutUbxNavRelposnedUart2& accessField_msgoutUbxNavRelposnedUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavRelposnedUsb.
    using Field_msgoutUbxNavRelposnedUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavRelposnedUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavRelposnedUsb
    Field_msgoutUbxNavRelposnedUsb& initField_msgoutUbxNavRelposnedUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavRelposnedUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedUsb
    Field_msgoutUbxNavRelposnedUsb& accessField_msgoutUbxNavRelposnedUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavRelposnedUsb (const version)
    const Field_msgoutUbxNavRelposnedUsb& accessField_msgoutUbxNavRelposnedUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavRelposnedUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSatI2c.
    using Field_msgoutUbxNavSatI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSatI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSatI2c
    Field_msgoutUbxNavSatI2c& initField_msgoutUbxNavSatI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSatI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatI2c
    Field_msgoutUbxNavSatI2c& accessField_msgoutUbxNavSatI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatI2c (const version)
    const Field_msgoutUbxNavSatI2c& accessField_msgoutUbxNavSatI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSatSpi.
    using Field_msgoutUbxNavSatSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSatSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSatSpi
    Field_msgoutUbxNavSatSpi& initField_msgoutUbxNavSatSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSatSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatSpi
    Field_msgoutUbxNavSatSpi& accessField_msgoutUbxNavSatSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatSpi (const version)
    const Field_msgoutUbxNavSatSpi& accessField_msgoutUbxNavSatSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSatUart1.
    using Field_msgoutUbxNavSatUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSatUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSatUart1
    Field_msgoutUbxNavSatUart1& initField_msgoutUbxNavSatUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSatUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatUart1
    Field_msgoutUbxNavSatUart1& accessField_msgoutUbxNavSatUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatUart1 (const version)
    const Field_msgoutUbxNavSatUart1& accessField_msgoutUbxNavSatUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSatUart2.
    using Field_msgoutUbxNavSatUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSatUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSatUart2
    Field_msgoutUbxNavSatUart2& initField_msgoutUbxNavSatUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSatUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatUart2
    Field_msgoutUbxNavSatUart2& accessField_msgoutUbxNavSatUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatUart2 (const version)
    const Field_msgoutUbxNavSatUart2& accessField_msgoutUbxNavSatUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSatUsb.
    using Field_msgoutUbxNavSatUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSatUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSatUsb
    Field_msgoutUbxNavSatUsb& initField_msgoutUbxNavSatUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSatUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatUsb
    Field_msgoutUbxNavSatUsb& accessField_msgoutUbxNavSatUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSatUsb (const version)
    const Field_msgoutUbxNavSatUsb& accessField_msgoutUbxNavSatUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSatUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSbasI2c.
    using Field_msgoutUbxNavSbasI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSbasI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSbasI2c
    Field_msgoutUbxNavSbasI2c& initField_msgoutUbxNavSbasI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSbasI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasI2c
    Field_msgoutUbxNavSbasI2c& accessField_msgoutUbxNavSbasI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasI2c (const version)
    const Field_msgoutUbxNavSbasI2c& accessField_msgoutUbxNavSbasI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSbasSpi.
    using Field_msgoutUbxNavSbasSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSbasSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSbasSpi
    Field_msgoutUbxNavSbasSpi& initField_msgoutUbxNavSbasSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSbasSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasSpi
    Field_msgoutUbxNavSbasSpi& accessField_msgoutUbxNavSbasSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasSpi (const version)
    const Field_msgoutUbxNavSbasSpi& accessField_msgoutUbxNavSbasSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSbasUart1.
    using Field_msgoutUbxNavSbasUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSbasUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSbasUart1
    Field_msgoutUbxNavSbasUart1& initField_msgoutUbxNavSbasUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSbasUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasUart1
    Field_msgoutUbxNavSbasUart1& accessField_msgoutUbxNavSbasUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasUart1 (const version)
    const Field_msgoutUbxNavSbasUart1& accessField_msgoutUbxNavSbasUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSbasUart2.
    using Field_msgoutUbxNavSbasUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSbasUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSbasUart2
    Field_msgoutUbxNavSbasUart2& initField_msgoutUbxNavSbasUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSbasUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasUart2
    Field_msgoutUbxNavSbasUart2& accessField_msgoutUbxNavSbasUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasUart2 (const version)
    const Field_msgoutUbxNavSbasUart2& accessField_msgoutUbxNavSbasUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSbasUsb.
    using Field_msgoutUbxNavSbasUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSbasUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSbasUsb
    Field_msgoutUbxNavSbasUsb& initField_msgoutUbxNavSbasUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSbasUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasUsb
    Field_msgoutUbxNavSbasUsb& accessField_msgoutUbxNavSbasUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSbasUsb (const version)
    const Field_msgoutUbxNavSbasUsb& accessField_msgoutUbxNavSbasUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSbasUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSigI2c.
    using Field_msgoutUbxNavSigI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSigI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSigI2c
    Field_msgoutUbxNavSigI2c& initField_msgoutUbxNavSigI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSigI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigI2c
    Field_msgoutUbxNavSigI2c& accessField_msgoutUbxNavSigI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigI2c (const version)
    const Field_msgoutUbxNavSigI2c& accessField_msgoutUbxNavSigI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSigSpi.
    using Field_msgoutUbxNavSigSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSigSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSigSpi
    Field_msgoutUbxNavSigSpi& initField_msgoutUbxNavSigSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSigSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigSpi
    Field_msgoutUbxNavSigSpi& accessField_msgoutUbxNavSigSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigSpi (const version)
    const Field_msgoutUbxNavSigSpi& accessField_msgoutUbxNavSigSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSigUart1.
    using Field_msgoutUbxNavSigUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSigUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSigUart1
    Field_msgoutUbxNavSigUart1& initField_msgoutUbxNavSigUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSigUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigUart1
    Field_msgoutUbxNavSigUart1& accessField_msgoutUbxNavSigUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigUart1 (const version)
    const Field_msgoutUbxNavSigUart1& accessField_msgoutUbxNavSigUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSigUart2.
    using Field_msgoutUbxNavSigUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSigUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSigUart2
    Field_msgoutUbxNavSigUart2& initField_msgoutUbxNavSigUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSigUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigUart2
    Field_msgoutUbxNavSigUart2& accessField_msgoutUbxNavSigUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigUart2 (const version)
    const Field_msgoutUbxNavSigUart2& accessField_msgoutUbxNavSigUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSigUsb.
    using Field_msgoutUbxNavSigUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSigUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSigUsb
    Field_msgoutUbxNavSigUsb& initField_msgoutUbxNavSigUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSigUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigUsb
    Field_msgoutUbxNavSigUsb& accessField_msgoutUbxNavSigUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSigUsb (const version)
    const Field_msgoutUbxNavSigUsb& accessField_msgoutUbxNavSigUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSigUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSlasI2c.
    using Field_msgoutUbxNavSlasI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSlasI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSlasI2c
    Field_msgoutUbxNavSlasI2c& initField_msgoutUbxNavSlasI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSlasI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasI2c
    Field_msgoutUbxNavSlasI2c& accessField_msgoutUbxNavSlasI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasI2c (const version)
    const Field_msgoutUbxNavSlasI2c& accessField_msgoutUbxNavSlasI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSlasSpi.
    using Field_msgoutUbxNavSlasSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSlasSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSlasSpi
    Field_msgoutUbxNavSlasSpi& initField_msgoutUbxNavSlasSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSlasSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasSpi
    Field_msgoutUbxNavSlasSpi& accessField_msgoutUbxNavSlasSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasSpi (const version)
    const Field_msgoutUbxNavSlasSpi& accessField_msgoutUbxNavSlasSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSlasUart1.
    using Field_msgoutUbxNavSlasUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSlasUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSlasUart1
    Field_msgoutUbxNavSlasUart1& initField_msgoutUbxNavSlasUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSlasUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasUart1
    Field_msgoutUbxNavSlasUart1& accessField_msgoutUbxNavSlasUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasUart1 (const version)
    const Field_msgoutUbxNavSlasUart1& accessField_msgoutUbxNavSlasUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSlasUart2.
    using Field_msgoutUbxNavSlasUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSlasUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSlasUart2
    Field_msgoutUbxNavSlasUart2& initField_msgoutUbxNavSlasUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSlasUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasUart2
    Field_msgoutUbxNavSlasUart2& accessField_msgoutUbxNavSlasUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasUart2 (const version)
    const Field_msgoutUbxNavSlasUart2& accessField_msgoutUbxNavSlasUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSlasUsb.
    using Field_msgoutUbxNavSlasUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSlasUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSlasUsb
    Field_msgoutUbxNavSlasUsb& initField_msgoutUbxNavSlasUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSlasUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasUsb
    Field_msgoutUbxNavSlasUsb& accessField_msgoutUbxNavSlasUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSlasUsb (const version)
    const Field_msgoutUbxNavSlasUsb& accessField_msgoutUbxNavSlasUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSlasUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavStatusI2c.
    using Field_msgoutUbxNavStatusI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavStatusI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavStatusI2c
    Field_msgoutUbxNavStatusI2c& initField_msgoutUbxNavStatusI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavStatusI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusI2c
    Field_msgoutUbxNavStatusI2c& accessField_msgoutUbxNavStatusI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusI2c (const version)
    const Field_msgoutUbxNavStatusI2c& accessField_msgoutUbxNavStatusI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavStatusSpi.
    using Field_msgoutUbxNavStatusSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavStatusSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavStatusSpi
    Field_msgoutUbxNavStatusSpi& initField_msgoutUbxNavStatusSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavStatusSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusSpi
    Field_msgoutUbxNavStatusSpi& accessField_msgoutUbxNavStatusSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusSpi (const version)
    const Field_msgoutUbxNavStatusSpi& accessField_msgoutUbxNavStatusSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavStatusUart1.
    using Field_msgoutUbxNavStatusUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavStatusUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavStatusUart1
    Field_msgoutUbxNavStatusUart1& initField_msgoutUbxNavStatusUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavStatusUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusUart1
    Field_msgoutUbxNavStatusUart1& accessField_msgoutUbxNavStatusUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusUart1 (const version)
    const Field_msgoutUbxNavStatusUart1& accessField_msgoutUbxNavStatusUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavStatusUart2.
    using Field_msgoutUbxNavStatusUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavStatusUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavStatusUart2
    Field_msgoutUbxNavStatusUart2& initField_msgoutUbxNavStatusUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavStatusUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusUart2
    Field_msgoutUbxNavStatusUart2& accessField_msgoutUbxNavStatusUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusUart2 (const version)
    const Field_msgoutUbxNavStatusUart2& accessField_msgoutUbxNavStatusUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavStatusUsb.
    using Field_msgoutUbxNavStatusUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavStatusUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavStatusUsb
    Field_msgoutUbxNavStatusUsb& initField_msgoutUbxNavStatusUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavStatusUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusUsb
    Field_msgoutUbxNavStatusUsb& accessField_msgoutUbxNavStatusUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavStatusUsb (const version)
    const Field_msgoutUbxNavStatusUsb& accessField_msgoutUbxNavStatusUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavStatusUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSvinI2c.
    using Field_msgoutUbxNavSvinI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSvinI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSvinI2c
    Field_msgoutUbxNavSvinI2c& initField_msgoutUbxNavSvinI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSvinI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinI2c
    Field_msgoutUbxNavSvinI2c& accessField_msgoutUbxNavSvinI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinI2c (const version)
    const Field_msgoutUbxNavSvinI2c& accessField_msgoutUbxNavSvinI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSvinSpi.
    using Field_msgoutUbxNavSvinSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSvinSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSvinSpi
    Field_msgoutUbxNavSvinSpi& initField_msgoutUbxNavSvinSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSvinSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinSpi
    Field_msgoutUbxNavSvinSpi& accessField_msgoutUbxNavSvinSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinSpi (const version)
    const Field_msgoutUbxNavSvinSpi& accessField_msgoutUbxNavSvinSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSvinUart1.
    using Field_msgoutUbxNavSvinUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSvinUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSvinUart1
    Field_msgoutUbxNavSvinUart1& initField_msgoutUbxNavSvinUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSvinUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinUart1
    Field_msgoutUbxNavSvinUart1& accessField_msgoutUbxNavSvinUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinUart1 (const version)
    const Field_msgoutUbxNavSvinUart1& accessField_msgoutUbxNavSvinUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSvinUart2.
    using Field_msgoutUbxNavSvinUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSvinUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSvinUart2
    Field_msgoutUbxNavSvinUart2& initField_msgoutUbxNavSvinUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSvinUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinUart2
    Field_msgoutUbxNavSvinUart2& accessField_msgoutUbxNavSvinUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinUart2 (const version)
    const Field_msgoutUbxNavSvinUart2& accessField_msgoutUbxNavSvinUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavSvinUsb.
    using Field_msgoutUbxNavSvinUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavSvinUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavSvinUsb
    Field_msgoutUbxNavSvinUsb& initField_msgoutUbxNavSvinUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavSvinUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinUsb
    Field_msgoutUbxNavSvinUsb& accessField_msgoutUbxNavSvinUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavSvinUsb (const version)
    const Field_msgoutUbxNavSvinUsb& accessField_msgoutUbxNavSvinUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavSvinUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimebdsI2c.
    using Field_msgoutUbxNavTimebdsI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimebdsI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimebdsI2c
    Field_msgoutUbxNavTimebdsI2c& initField_msgoutUbxNavTimebdsI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimebdsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsI2c
    Field_msgoutUbxNavTimebdsI2c& accessField_msgoutUbxNavTimebdsI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsI2c (const version)
    const Field_msgoutUbxNavTimebdsI2c& accessField_msgoutUbxNavTimebdsI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimebdsSpi.
    using Field_msgoutUbxNavTimebdsSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimebdsSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimebdsSpi
    Field_msgoutUbxNavTimebdsSpi& initField_msgoutUbxNavTimebdsSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimebdsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsSpi
    Field_msgoutUbxNavTimebdsSpi& accessField_msgoutUbxNavTimebdsSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsSpi (const version)
    const Field_msgoutUbxNavTimebdsSpi& accessField_msgoutUbxNavTimebdsSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimebdsUart1.
    using Field_msgoutUbxNavTimebdsUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimebdsUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimebdsUart1
    Field_msgoutUbxNavTimebdsUart1& initField_msgoutUbxNavTimebdsUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimebdsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsUart1
    Field_msgoutUbxNavTimebdsUart1& accessField_msgoutUbxNavTimebdsUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsUart1 (const version)
    const Field_msgoutUbxNavTimebdsUart1& accessField_msgoutUbxNavTimebdsUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimebdsUart2.
    using Field_msgoutUbxNavTimebdsUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimebdsUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimebdsUart2
    Field_msgoutUbxNavTimebdsUart2& initField_msgoutUbxNavTimebdsUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimebdsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsUart2
    Field_msgoutUbxNavTimebdsUart2& accessField_msgoutUbxNavTimebdsUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsUart2 (const version)
    const Field_msgoutUbxNavTimebdsUart2& accessField_msgoutUbxNavTimebdsUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimebdsUsb.
    using Field_msgoutUbxNavTimebdsUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimebdsUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimebdsUsb
    Field_msgoutUbxNavTimebdsUsb& initField_msgoutUbxNavTimebdsUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimebdsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsUsb
    Field_msgoutUbxNavTimebdsUsb& accessField_msgoutUbxNavTimebdsUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimebdsUsb (const version)
    const Field_msgoutUbxNavTimebdsUsb& accessField_msgoutUbxNavTimebdsUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimebdsUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegalI2c.
    using Field_msgoutUbxNavTimegalI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegalI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegalI2c
    Field_msgoutUbxNavTimegalI2c& initField_msgoutUbxNavTimegalI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegalI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalI2c
    Field_msgoutUbxNavTimegalI2c& accessField_msgoutUbxNavTimegalI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalI2c (const version)
    const Field_msgoutUbxNavTimegalI2c& accessField_msgoutUbxNavTimegalI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegalSpi.
    using Field_msgoutUbxNavTimegalSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegalSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegalSpi
    Field_msgoutUbxNavTimegalSpi& initField_msgoutUbxNavTimegalSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegalSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalSpi
    Field_msgoutUbxNavTimegalSpi& accessField_msgoutUbxNavTimegalSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalSpi (const version)
    const Field_msgoutUbxNavTimegalSpi& accessField_msgoutUbxNavTimegalSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegalUart1.
    using Field_msgoutUbxNavTimegalUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegalUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegalUart1
    Field_msgoutUbxNavTimegalUart1& initField_msgoutUbxNavTimegalUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegalUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalUart1
    Field_msgoutUbxNavTimegalUart1& accessField_msgoutUbxNavTimegalUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalUart1 (const version)
    const Field_msgoutUbxNavTimegalUart1& accessField_msgoutUbxNavTimegalUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegalUart2.
    using Field_msgoutUbxNavTimegalUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegalUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegalUart2
    Field_msgoutUbxNavTimegalUart2& initField_msgoutUbxNavTimegalUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegalUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalUart2
    Field_msgoutUbxNavTimegalUart2& accessField_msgoutUbxNavTimegalUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalUart2 (const version)
    const Field_msgoutUbxNavTimegalUart2& accessField_msgoutUbxNavTimegalUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegalUsb.
    using Field_msgoutUbxNavTimegalUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegalUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegalUsb
    Field_msgoutUbxNavTimegalUsb& initField_msgoutUbxNavTimegalUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegalUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalUsb
    Field_msgoutUbxNavTimegalUsb& accessField_msgoutUbxNavTimegalUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegalUsb (const version)
    const Field_msgoutUbxNavTimegalUsb& accessField_msgoutUbxNavTimegalUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegalUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegloI2c.
    using Field_msgoutUbxNavTimegloI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegloI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegloI2c
    Field_msgoutUbxNavTimegloI2c& initField_msgoutUbxNavTimegloI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegloI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloI2c
    Field_msgoutUbxNavTimegloI2c& accessField_msgoutUbxNavTimegloI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloI2c (const version)
    const Field_msgoutUbxNavTimegloI2c& accessField_msgoutUbxNavTimegloI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegloSpi.
    using Field_msgoutUbxNavTimegloSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegloSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegloSpi
    Field_msgoutUbxNavTimegloSpi& initField_msgoutUbxNavTimegloSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegloSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloSpi
    Field_msgoutUbxNavTimegloSpi& accessField_msgoutUbxNavTimegloSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloSpi (const version)
    const Field_msgoutUbxNavTimegloSpi& accessField_msgoutUbxNavTimegloSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegloUart1.
    using Field_msgoutUbxNavTimegloUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegloUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegloUart1
    Field_msgoutUbxNavTimegloUart1& initField_msgoutUbxNavTimegloUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegloUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloUart1
    Field_msgoutUbxNavTimegloUart1& accessField_msgoutUbxNavTimegloUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloUart1 (const version)
    const Field_msgoutUbxNavTimegloUart1& accessField_msgoutUbxNavTimegloUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegloUart2.
    using Field_msgoutUbxNavTimegloUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegloUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegloUart2
    Field_msgoutUbxNavTimegloUart2& initField_msgoutUbxNavTimegloUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegloUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloUart2
    Field_msgoutUbxNavTimegloUart2& accessField_msgoutUbxNavTimegloUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloUart2 (const version)
    const Field_msgoutUbxNavTimegloUart2& accessField_msgoutUbxNavTimegloUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegloUsb.
    using Field_msgoutUbxNavTimegloUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegloUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegloUsb
    Field_msgoutUbxNavTimegloUsb& initField_msgoutUbxNavTimegloUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegloUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloUsb
    Field_msgoutUbxNavTimegloUsb& accessField_msgoutUbxNavTimegloUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegloUsb (const version)
    const Field_msgoutUbxNavTimegloUsb& accessField_msgoutUbxNavTimegloUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegloUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegpsI2c.
    using Field_msgoutUbxNavTimegpsI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegpsI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegpsI2c
    Field_msgoutUbxNavTimegpsI2c& initField_msgoutUbxNavTimegpsI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegpsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsI2c
    Field_msgoutUbxNavTimegpsI2c& accessField_msgoutUbxNavTimegpsI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsI2c (const version)
    const Field_msgoutUbxNavTimegpsI2c& accessField_msgoutUbxNavTimegpsI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegpsSpi.
    using Field_msgoutUbxNavTimegpsSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegpsSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegpsSpi
    Field_msgoutUbxNavTimegpsSpi& initField_msgoutUbxNavTimegpsSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegpsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsSpi
    Field_msgoutUbxNavTimegpsSpi& accessField_msgoutUbxNavTimegpsSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsSpi (const version)
    const Field_msgoutUbxNavTimegpsSpi& accessField_msgoutUbxNavTimegpsSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegpsUart1.
    using Field_msgoutUbxNavTimegpsUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegpsUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegpsUart1
    Field_msgoutUbxNavTimegpsUart1& initField_msgoutUbxNavTimegpsUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegpsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsUart1
    Field_msgoutUbxNavTimegpsUart1& accessField_msgoutUbxNavTimegpsUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsUart1 (const version)
    const Field_msgoutUbxNavTimegpsUart1& accessField_msgoutUbxNavTimegpsUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegpsUart2.
    using Field_msgoutUbxNavTimegpsUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegpsUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegpsUart2
    Field_msgoutUbxNavTimegpsUart2& initField_msgoutUbxNavTimegpsUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegpsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsUart2
    Field_msgoutUbxNavTimegpsUart2& accessField_msgoutUbxNavTimegpsUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsUart2 (const version)
    const Field_msgoutUbxNavTimegpsUart2& accessField_msgoutUbxNavTimegpsUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimegpsUsb.
    using Field_msgoutUbxNavTimegpsUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimegpsUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimegpsUsb
    Field_msgoutUbxNavTimegpsUsb& initField_msgoutUbxNavTimegpsUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimegpsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsUsb
    Field_msgoutUbxNavTimegpsUsb& accessField_msgoutUbxNavTimegpsUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimegpsUsb (const version)
    const Field_msgoutUbxNavTimegpsUsb& accessField_msgoutUbxNavTimegpsUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimegpsUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimelsI2c.
    using Field_msgoutUbxNavTimelsI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimelsI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimelsI2c
    Field_msgoutUbxNavTimelsI2c& initField_msgoutUbxNavTimelsI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimelsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsI2c
    Field_msgoutUbxNavTimelsI2c& accessField_msgoutUbxNavTimelsI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsI2c (const version)
    const Field_msgoutUbxNavTimelsI2c& accessField_msgoutUbxNavTimelsI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimelsSpi.
    using Field_msgoutUbxNavTimelsSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimelsSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimelsSpi
    Field_msgoutUbxNavTimelsSpi& initField_msgoutUbxNavTimelsSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimelsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsSpi
    Field_msgoutUbxNavTimelsSpi& accessField_msgoutUbxNavTimelsSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsSpi (const version)
    const Field_msgoutUbxNavTimelsSpi& accessField_msgoutUbxNavTimelsSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimelsUart1.
    using Field_msgoutUbxNavTimelsUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimelsUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimelsUart1
    Field_msgoutUbxNavTimelsUart1& initField_msgoutUbxNavTimelsUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimelsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsUart1
    Field_msgoutUbxNavTimelsUart1& accessField_msgoutUbxNavTimelsUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsUart1 (const version)
    const Field_msgoutUbxNavTimelsUart1& accessField_msgoutUbxNavTimelsUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimelsUart2.
    using Field_msgoutUbxNavTimelsUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimelsUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimelsUart2
    Field_msgoutUbxNavTimelsUart2& initField_msgoutUbxNavTimelsUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimelsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsUart2
    Field_msgoutUbxNavTimelsUart2& accessField_msgoutUbxNavTimelsUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsUart2 (const version)
    const Field_msgoutUbxNavTimelsUart2& accessField_msgoutUbxNavTimelsUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimelsUsb.
    using Field_msgoutUbxNavTimelsUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimelsUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimelsUsb
    Field_msgoutUbxNavTimelsUsb& initField_msgoutUbxNavTimelsUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimelsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsUsb
    Field_msgoutUbxNavTimelsUsb& accessField_msgoutUbxNavTimelsUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimelsUsb (const version)
    const Field_msgoutUbxNavTimelsUsb& accessField_msgoutUbxNavTimelsUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimelsUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeqzssI2c.
    using Field_msgoutUbxNavTimeqzssI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeqzssI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeqzssI2c
    Field_msgoutUbxNavTimeqzssI2c& initField_msgoutUbxNavTimeqzssI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeqzssI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssI2c
    Field_msgoutUbxNavTimeqzssI2c& accessField_msgoutUbxNavTimeqzssI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssI2c (const version)
    const Field_msgoutUbxNavTimeqzssI2c& accessField_msgoutUbxNavTimeqzssI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeqzssSpi.
    using Field_msgoutUbxNavTimeqzssSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeqzssSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeqzssSpi
    Field_msgoutUbxNavTimeqzssSpi& initField_msgoutUbxNavTimeqzssSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeqzssSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssSpi
    Field_msgoutUbxNavTimeqzssSpi& accessField_msgoutUbxNavTimeqzssSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssSpi (const version)
    const Field_msgoutUbxNavTimeqzssSpi& accessField_msgoutUbxNavTimeqzssSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeqzssUart1.
    using Field_msgoutUbxNavTimeqzssUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeqzssUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeqzssUart1
    Field_msgoutUbxNavTimeqzssUart1& initField_msgoutUbxNavTimeqzssUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeqzssUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssUart1
    Field_msgoutUbxNavTimeqzssUart1& accessField_msgoutUbxNavTimeqzssUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssUart1 (const version)
    const Field_msgoutUbxNavTimeqzssUart1& accessField_msgoutUbxNavTimeqzssUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeqzssUart2.
    using Field_msgoutUbxNavTimeqzssUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeqzssUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeqzssUart2
    Field_msgoutUbxNavTimeqzssUart2& initField_msgoutUbxNavTimeqzssUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeqzssUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssUart2
    Field_msgoutUbxNavTimeqzssUart2& accessField_msgoutUbxNavTimeqzssUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssUart2 (const version)
    const Field_msgoutUbxNavTimeqzssUart2& accessField_msgoutUbxNavTimeqzssUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeqzssUsb.
    using Field_msgoutUbxNavTimeqzssUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeqzssUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeqzssUsb
    Field_msgoutUbxNavTimeqzssUsb& initField_msgoutUbxNavTimeqzssUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeqzssUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssUsb
    Field_msgoutUbxNavTimeqzssUsb& accessField_msgoutUbxNavTimeqzssUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeqzssUsb (const version)
    const Field_msgoutUbxNavTimeqzssUsb& accessField_msgoutUbxNavTimeqzssUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeqzssUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeutcI2c.
    using Field_msgoutUbxNavTimeutcI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeutcI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeutcI2c
    Field_msgoutUbxNavTimeutcI2c& initField_msgoutUbxNavTimeutcI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeutcI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcI2c
    Field_msgoutUbxNavTimeutcI2c& accessField_msgoutUbxNavTimeutcI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcI2c (const version)
    const Field_msgoutUbxNavTimeutcI2c& accessField_msgoutUbxNavTimeutcI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeutcSpi.
    using Field_msgoutUbxNavTimeutcSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeutcSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeutcSpi
    Field_msgoutUbxNavTimeutcSpi& initField_msgoutUbxNavTimeutcSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeutcSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcSpi
    Field_msgoutUbxNavTimeutcSpi& accessField_msgoutUbxNavTimeutcSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcSpi (const version)
    const Field_msgoutUbxNavTimeutcSpi& accessField_msgoutUbxNavTimeutcSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeutcUart1.
    using Field_msgoutUbxNavTimeutcUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeutcUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeutcUart1
    Field_msgoutUbxNavTimeutcUart1& initField_msgoutUbxNavTimeutcUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeutcUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcUart1
    Field_msgoutUbxNavTimeutcUart1& accessField_msgoutUbxNavTimeutcUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcUart1 (const version)
    const Field_msgoutUbxNavTimeutcUart1& accessField_msgoutUbxNavTimeutcUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeutcUart2.
    using Field_msgoutUbxNavTimeutcUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeutcUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeutcUart2
    Field_msgoutUbxNavTimeutcUart2& initField_msgoutUbxNavTimeutcUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeutcUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcUart2
    Field_msgoutUbxNavTimeutcUart2& accessField_msgoutUbxNavTimeutcUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcUart2 (const version)
    const Field_msgoutUbxNavTimeutcUart2& accessField_msgoutUbxNavTimeutcUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavTimeutcUsb.
    using Field_msgoutUbxNavTimeutcUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavTimeutcUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavTimeutcUsb
    Field_msgoutUbxNavTimeutcUsb& initField_msgoutUbxNavTimeutcUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavTimeutcUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcUsb
    Field_msgoutUbxNavTimeutcUsb& accessField_msgoutUbxNavTimeutcUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavTimeutcUsb (const version)
    const Field_msgoutUbxNavTimeutcUsb& accessField_msgoutUbxNavTimeutcUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavTimeutcUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelecefI2c.
    using Field_msgoutUbxNavVelecefI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelecefI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelecefI2c
    Field_msgoutUbxNavVelecefI2c& initField_msgoutUbxNavVelecefI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelecefI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefI2c
    Field_msgoutUbxNavVelecefI2c& accessField_msgoutUbxNavVelecefI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefI2c (const version)
    const Field_msgoutUbxNavVelecefI2c& accessField_msgoutUbxNavVelecefI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelecefSpi.
    using Field_msgoutUbxNavVelecefSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelecefSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelecefSpi
    Field_msgoutUbxNavVelecefSpi& initField_msgoutUbxNavVelecefSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelecefSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefSpi
    Field_msgoutUbxNavVelecefSpi& accessField_msgoutUbxNavVelecefSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefSpi (const version)
    const Field_msgoutUbxNavVelecefSpi& accessField_msgoutUbxNavVelecefSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelecefUart1.
    using Field_msgoutUbxNavVelecefUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelecefUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelecefUart1
    Field_msgoutUbxNavVelecefUart1& initField_msgoutUbxNavVelecefUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelecefUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefUart1
    Field_msgoutUbxNavVelecefUart1& accessField_msgoutUbxNavVelecefUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefUart1 (const version)
    const Field_msgoutUbxNavVelecefUart1& accessField_msgoutUbxNavVelecefUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelecefUart2.
    using Field_msgoutUbxNavVelecefUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelecefUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelecefUart2
    Field_msgoutUbxNavVelecefUart2& initField_msgoutUbxNavVelecefUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelecefUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefUart2
    Field_msgoutUbxNavVelecefUart2& accessField_msgoutUbxNavVelecefUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefUart2 (const version)
    const Field_msgoutUbxNavVelecefUart2& accessField_msgoutUbxNavVelecefUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelecefUsb.
    using Field_msgoutUbxNavVelecefUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelecefUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelecefUsb
    Field_msgoutUbxNavVelecefUsb& initField_msgoutUbxNavVelecefUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelecefUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefUsb
    Field_msgoutUbxNavVelecefUsb& accessField_msgoutUbxNavVelecefUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelecefUsb (const version)
    const Field_msgoutUbxNavVelecefUsb& accessField_msgoutUbxNavVelecefUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelecefUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelnedI2c.
    using Field_msgoutUbxNavVelnedI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelnedI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelnedI2c
    Field_msgoutUbxNavVelnedI2c& initField_msgoutUbxNavVelnedI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelnedI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedI2c
    Field_msgoutUbxNavVelnedI2c& accessField_msgoutUbxNavVelnedI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedI2c (const version)
    const Field_msgoutUbxNavVelnedI2c& accessField_msgoutUbxNavVelnedI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelnedSpi.
    using Field_msgoutUbxNavVelnedSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelnedSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelnedSpi
    Field_msgoutUbxNavVelnedSpi& initField_msgoutUbxNavVelnedSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelnedSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedSpi
    Field_msgoutUbxNavVelnedSpi& accessField_msgoutUbxNavVelnedSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedSpi (const version)
    const Field_msgoutUbxNavVelnedSpi& accessField_msgoutUbxNavVelnedSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelnedUart1.
    using Field_msgoutUbxNavVelnedUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelnedUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelnedUart1
    Field_msgoutUbxNavVelnedUart1& initField_msgoutUbxNavVelnedUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelnedUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedUart1
    Field_msgoutUbxNavVelnedUart1& accessField_msgoutUbxNavVelnedUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedUart1 (const version)
    const Field_msgoutUbxNavVelnedUart1& accessField_msgoutUbxNavVelnedUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelnedUart2.
    using Field_msgoutUbxNavVelnedUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelnedUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelnedUart2
    Field_msgoutUbxNavVelnedUart2& initField_msgoutUbxNavVelnedUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelnedUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedUart2
    Field_msgoutUbxNavVelnedUart2& accessField_msgoutUbxNavVelnedUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedUart2 (const version)
    const Field_msgoutUbxNavVelnedUart2& accessField_msgoutUbxNavVelnedUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxNavVelnedUsb.
    using Field_msgoutUbxNavVelnedUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxNavVelnedUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxNavVelnedUsb
    Field_msgoutUbxNavVelnedUsb& initField_msgoutUbxNavVelnedUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxNavVelnedUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedUsb
    Field_msgoutUbxNavVelnedUsb& accessField_msgoutUbxNavVelnedUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxNavVelnedUsb (const version)
    const Field_msgoutUbxNavVelnedUsb& accessField_msgoutUbxNavVelnedUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxNavVelnedUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmMeasxI2c.
    using Field_msgoutUbxRxmMeasxI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmMeasxI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmMeasxI2c
    Field_msgoutUbxRxmMeasxI2c& initField_msgoutUbxRxmMeasxI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmMeasxI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxI2c
    Field_msgoutUbxRxmMeasxI2c& accessField_msgoutUbxRxmMeasxI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxI2c (const version)
    const Field_msgoutUbxRxmMeasxI2c& accessField_msgoutUbxRxmMeasxI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmMeasxSpi.
    using Field_msgoutUbxRxmMeasxSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmMeasxSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmMeasxSpi
    Field_msgoutUbxRxmMeasxSpi& initField_msgoutUbxRxmMeasxSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmMeasxSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxSpi
    Field_msgoutUbxRxmMeasxSpi& accessField_msgoutUbxRxmMeasxSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxSpi (const version)
    const Field_msgoutUbxRxmMeasxSpi& accessField_msgoutUbxRxmMeasxSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmMeasxUart1.
    using Field_msgoutUbxRxmMeasxUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmMeasxUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmMeasxUart1
    Field_msgoutUbxRxmMeasxUart1& initField_msgoutUbxRxmMeasxUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmMeasxUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxUart1
    Field_msgoutUbxRxmMeasxUart1& accessField_msgoutUbxRxmMeasxUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxUart1 (const version)
    const Field_msgoutUbxRxmMeasxUart1& accessField_msgoutUbxRxmMeasxUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmMeasxUart2.
    using Field_msgoutUbxRxmMeasxUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmMeasxUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmMeasxUart2
    Field_msgoutUbxRxmMeasxUart2& initField_msgoutUbxRxmMeasxUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmMeasxUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxUart2
    Field_msgoutUbxRxmMeasxUart2& accessField_msgoutUbxRxmMeasxUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxUart2 (const version)
    const Field_msgoutUbxRxmMeasxUart2& accessField_msgoutUbxRxmMeasxUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmMeasxUsb.
    using Field_msgoutUbxRxmMeasxUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmMeasxUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmMeasxUsb
    Field_msgoutUbxRxmMeasxUsb& initField_msgoutUbxRxmMeasxUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmMeasxUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxUsb
    Field_msgoutUbxRxmMeasxUsb& accessField_msgoutUbxRxmMeasxUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmMeasxUsb (const version)
    const Field_msgoutUbxRxmMeasxUsb& accessField_msgoutUbxRxmMeasxUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmMeasxUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRawxI2c.
    using Field_msgoutUbxRxmRawxI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRawxI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRawxI2c
    Field_msgoutUbxRxmRawxI2c& initField_msgoutUbxRxmRawxI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRawxI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxI2c
    Field_msgoutUbxRxmRawxI2c& accessField_msgoutUbxRxmRawxI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxI2c (const version)
    const Field_msgoutUbxRxmRawxI2c& accessField_msgoutUbxRxmRawxI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRawxSpi.
    using Field_msgoutUbxRxmRawxSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRawxSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRawxSpi
    Field_msgoutUbxRxmRawxSpi& initField_msgoutUbxRxmRawxSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRawxSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxSpi
    Field_msgoutUbxRxmRawxSpi& accessField_msgoutUbxRxmRawxSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxSpi (const version)
    const Field_msgoutUbxRxmRawxSpi& accessField_msgoutUbxRxmRawxSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRawxUart1.
    using Field_msgoutUbxRxmRawxUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRawxUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRawxUart1
    Field_msgoutUbxRxmRawxUart1& initField_msgoutUbxRxmRawxUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRawxUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxUart1
    Field_msgoutUbxRxmRawxUart1& accessField_msgoutUbxRxmRawxUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxUart1 (const version)
    const Field_msgoutUbxRxmRawxUart1& accessField_msgoutUbxRxmRawxUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRawxUart2.
    using Field_msgoutUbxRxmRawxUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRawxUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRawxUart2
    Field_msgoutUbxRxmRawxUart2& initField_msgoutUbxRxmRawxUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRawxUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxUart2
    Field_msgoutUbxRxmRawxUart2& accessField_msgoutUbxRxmRawxUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxUart2 (const version)
    const Field_msgoutUbxRxmRawxUart2& accessField_msgoutUbxRxmRawxUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRawxUsb.
    using Field_msgoutUbxRxmRawxUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRawxUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRawxUsb
    Field_msgoutUbxRxmRawxUsb& initField_msgoutUbxRxmRawxUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRawxUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxUsb
    Field_msgoutUbxRxmRawxUsb& accessField_msgoutUbxRxmRawxUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRawxUsb (const version)
    const Field_msgoutUbxRxmRawxUsb& accessField_msgoutUbxRxmRawxUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRawxUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRlmI2c.
    using Field_msgoutUbxRxmRlmI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRlmI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRlmI2c
    Field_msgoutUbxRxmRlmI2c& initField_msgoutUbxRxmRlmI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRlmI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmI2c
    Field_msgoutUbxRxmRlmI2c& accessField_msgoutUbxRxmRlmI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmI2c (const version)
    const Field_msgoutUbxRxmRlmI2c& accessField_msgoutUbxRxmRlmI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRlmSpi.
    using Field_msgoutUbxRxmRlmSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRlmSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRlmSpi
    Field_msgoutUbxRxmRlmSpi& initField_msgoutUbxRxmRlmSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRlmSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmSpi
    Field_msgoutUbxRxmRlmSpi& accessField_msgoutUbxRxmRlmSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmSpi (const version)
    const Field_msgoutUbxRxmRlmSpi& accessField_msgoutUbxRxmRlmSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRlmUart1.
    using Field_msgoutUbxRxmRlmUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRlmUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRlmUart1
    Field_msgoutUbxRxmRlmUart1& initField_msgoutUbxRxmRlmUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRlmUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmUart1
    Field_msgoutUbxRxmRlmUart1& accessField_msgoutUbxRxmRlmUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmUart1 (const version)
    const Field_msgoutUbxRxmRlmUart1& accessField_msgoutUbxRxmRlmUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRlmUart2.
    using Field_msgoutUbxRxmRlmUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRlmUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRlmUart2
    Field_msgoutUbxRxmRlmUart2& initField_msgoutUbxRxmRlmUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRlmUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmUart2
    Field_msgoutUbxRxmRlmUart2& accessField_msgoutUbxRxmRlmUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmUart2 (const version)
    const Field_msgoutUbxRxmRlmUart2& accessField_msgoutUbxRxmRlmUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRlmUsb.
    using Field_msgoutUbxRxmRlmUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRlmUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRlmUsb
    Field_msgoutUbxRxmRlmUsb& initField_msgoutUbxRxmRlmUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRlmUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmUsb
    Field_msgoutUbxRxmRlmUsb& accessField_msgoutUbxRxmRlmUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRlmUsb (const version)
    const Field_msgoutUbxRxmRlmUsb& accessField_msgoutUbxRxmRlmUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRlmUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRtcmI2c.
    using Field_msgoutUbxRxmRtcmI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRtcmI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRtcmI2c
    Field_msgoutUbxRxmRtcmI2c& initField_msgoutUbxRxmRtcmI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRtcmI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmI2c
    Field_msgoutUbxRxmRtcmI2c& accessField_msgoutUbxRxmRtcmI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmI2c (const version)
    const Field_msgoutUbxRxmRtcmI2c& accessField_msgoutUbxRxmRtcmI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRtcmSpi.
    using Field_msgoutUbxRxmRtcmSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRtcmSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRtcmSpi
    Field_msgoutUbxRxmRtcmSpi& initField_msgoutUbxRxmRtcmSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRtcmSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmSpi
    Field_msgoutUbxRxmRtcmSpi& accessField_msgoutUbxRxmRtcmSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmSpi (const version)
    const Field_msgoutUbxRxmRtcmSpi& accessField_msgoutUbxRxmRtcmSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRtcmUart1.
    using Field_msgoutUbxRxmRtcmUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRtcmUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRtcmUart1
    Field_msgoutUbxRxmRtcmUart1& initField_msgoutUbxRxmRtcmUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRtcmUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmUart1
    Field_msgoutUbxRxmRtcmUart1& accessField_msgoutUbxRxmRtcmUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmUart1 (const version)
    const Field_msgoutUbxRxmRtcmUart1& accessField_msgoutUbxRxmRtcmUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRtcmUart2.
    using Field_msgoutUbxRxmRtcmUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRtcmUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRtcmUart2
    Field_msgoutUbxRxmRtcmUart2& initField_msgoutUbxRxmRtcmUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRtcmUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmUart2
    Field_msgoutUbxRxmRtcmUart2& accessField_msgoutUbxRxmRtcmUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmUart2 (const version)
    const Field_msgoutUbxRxmRtcmUart2& accessField_msgoutUbxRxmRtcmUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmRtcmUsb.
    using Field_msgoutUbxRxmRtcmUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmRtcmUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmRtcmUsb
    Field_msgoutUbxRxmRtcmUsb& initField_msgoutUbxRxmRtcmUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmRtcmUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmUsb
    Field_msgoutUbxRxmRtcmUsb& accessField_msgoutUbxRxmRtcmUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmRtcmUsb (const version)
    const Field_msgoutUbxRxmRtcmUsb& accessField_msgoutUbxRxmRtcmUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmRtcmUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmSfrbxI2c.
    using Field_msgoutUbxRxmSfrbxI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmSfrbxI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmSfrbxI2c
    Field_msgoutUbxRxmSfrbxI2c& initField_msgoutUbxRxmSfrbxI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmSfrbxI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxI2c
    Field_msgoutUbxRxmSfrbxI2c& accessField_msgoutUbxRxmSfrbxI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxI2c (const version)
    const Field_msgoutUbxRxmSfrbxI2c& accessField_msgoutUbxRxmSfrbxI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmSfrbxSpi.
    using Field_msgoutUbxRxmSfrbxSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmSfrbxSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmSfrbxSpi
    Field_msgoutUbxRxmSfrbxSpi& initField_msgoutUbxRxmSfrbxSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmSfrbxSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxSpi
    Field_msgoutUbxRxmSfrbxSpi& accessField_msgoutUbxRxmSfrbxSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxSpi (const version)
    const Field_msgoutUbxRxmSfrbxSpi& accessField_msgoutUbxRxmSfrbxSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmSfrbxUart1.
    using Field_msgoutUbxRxmSfrbxUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmSfrbxUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmSfrbxUart1
    Field_msgoutUbxRxmSfrbxUart1& initField_msgoutUbxRxmSfrbxUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmSfrbxUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxUart1
    Field_msgoutUbxRxmSfrbxUart1& accessField_msgoutUbxRxmSfrbxUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxUart1 (const version)
    const Field_msgoutUbxRxmSfrbxUart1& accessField_msgoutUbxRxmSfrbxUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmSfrbxUart2.
    using Field_msgoutUbxRxmSfrbxUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmSfrbxUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmSfrbxUart2
    Field_msgoutUbxRxmSfrbxUart2& initField_msgoutUbxRxmSfrbxUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmSfrbxUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxUart2
    Field_msgoutUbxRxmSfrbxUart2& accessField_msgoutUbxRxmSfrbxUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxUart2 (const version)
    const Field_msgoutUbxRxmSfrbxUart2& accessField_msgoutUbxRxmSfrbxUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxRxmSfrbxUsb.
    using Field_msgoutUbxRxmSfrbxUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxRxmSfrbxUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxRxmSfrbxUsb
    Field_msgoutUbxRxmSfrbxUsb& initField_msgoutUbxRxmSfrbxUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxRxmSfrbxUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxUsb
    Field_msgoutUbxRxmSfrbxUsb& accessField_msgoutUbxRxmSfrbxUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxRxmSfrbxUsb (const version)
    const Field_msgoutUbxRxmSfrbxUsb& accessField_msgoutUbxRxmSfrbxUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxRxmSfrbxUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTm2I2c.
    using Field_msgoutUbxTimTm2I2c = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTm2I2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTm2I2c
    Field_msgoutUbxTimTm2I2c& initField_msgoutUbxTimTm2I2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTm2I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2I2c
    Field_msgoutUbxTimTm2I2c& accessField_msgoutUbxTimTm2I2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2I2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2I2c (const version)
    const Field_msgoutUbxTimTm2I2c& accessField_msgoutUbxTimTm2I2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2I2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTm2Spi.
    using Field_msgoutUbxTimTm2Spi = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTm2Spi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTm2Spi
    Field_msgoutUbxTimTm2Spi& initField_msgoutUbxTimTm2Spi()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTm2Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2Spi
    Field_msgoutUbxTimTm2Spi& accessField_msgoutUbxTimTm2Spi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2Spi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2Spi (const version)
    const Field_msgoutUbxTimTm2Spi& accessField_msgoutUbxTimTm2Spi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2Spi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTm2Uart1.
    using Field_msgoutUbxTimTm2Uart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTm2Uart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTm2Uart1
    Field_msgoutUbxTimTm2Uart1& initField_msgoutUbxTimTm2Uart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTm2Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2Uart1
    Field_msgoutUbxTimTm2Uart1& accessField_msgoutUbxTimTm2Uart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2Uart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2Uart1 (const version)
    const Field_msgoutUbxTimTm2Uart1& accessField_msgoutUbxTimTm2Uart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2Uart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTm2Uart2.
    using Field_msgoutUbxTimTm2Uart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTm2Uart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTm2Uart2
    Field_msgoutUbxTimTm2Uart2& initField_msgoutUbxTimTm2Uart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTm2Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2Uart2
    Field_msgoutUbxTimTm2Uart2& accessField_msgoutUbxTimTm2Uart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2Uart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2Uart2 (const version)
    const Field_msgoutUbxTimTm2Uart2& accessField_msgoutUbxTimTm2Uart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2Uart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTm2Usb.
    using Field_msgoutUbxTimTm2Usb = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTm2Usb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTm2Usb
    Field_msgoutUbxTimTm2Usb& initField_msgoutUbxTimTm2Usb()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTm2Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2Usb
    Field_msgoutUbxTimTm2Usb& accessField_msgoutUbxTimTm2Usb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2Usb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTm2Usb (const version)
    const Field_msgoutUbxTimTm2Usb& accessField_msgoutUbxTimTm2Usb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTm2Usb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTpI2c.
    using Field_msgoutUbxTimTpI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTpI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTpI2c
    Field_msgoutUbxTimTpI2c& initField_msgoutUbxTimTpI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTpI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpI2c
    Field_msgoutUbxTimTpI2c& accessField_msgoutUbxTimTpI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpI2c (const version)
    const Field_msgoutUbxTimTpI2c& accessField_msgoutUbxTimTpI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTpSpi.
    using Field_msgoutUbxTimTpSpi = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTpSpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTpSpi
    Field_msgoutUbxTimTpSpi& initField_msgoutUbxTimTpSpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTpSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpSpi
    Field_msgoutUbxTimTpSpi& accessField_msgoutUbxTimTpSpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpSpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpSpi (const version)
    const Field_msgoutUbxTimTpSpi& accessField_msgoutUbxTimTpSpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpSpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTpUart1.
    using Field_msgoutUbxTimTpUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTpUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTpUart1
    Field_msgoutUbxTimTpUart1& initField_msgoutUbxTimTpUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTpUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpUart1
    Field_msgoutUbxTimTpUart1& accessField_msgoutUbxTimTpUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpUart1 (const version)
    const Field_msgoutUbxTimTpUart1& accessField_msgoutUbxTimTpUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTpUart2.
    using Field_msgoutUbxTimTpUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTpUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTpUart2
    Field_msgoutUbxTimTpUart2& initField_msgoutUbxTimTpUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTpUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpUart2
    Field_msgoutUbxTimTpUart2& accessField_msgoutUbxTimTpUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpUart2 (const version)
    const Field_msgoutUbxTimTpUart2& accessField_msgoutUbxTimTpUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimTpUsb.
    using Field_msgoutUbxTimTpUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxTimTpUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimTpUsb
    Field_msgoutUbxTimTpUsb& initField_msgoutUbxTimTpUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimTpUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpUsb
    Field_msgoutUbxTimTpUsb& accessField_msgoutUbxTimTpUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimTpUsb (const version)
    const Field_msgoutUbxTimTpUsb& accessField_msgoutUbxTimTpUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimTpUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimVrfyI2c.
    using Field_msgoutUbxTimVrfyI2c = typename CfgValPairMembers<TOpt>::MsgoutUbxTimVrfyI2c;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimVrfyI2c
    Field_msgoutUbxTimVrfyI2c& initField_msgoutUbxTimVrfyI2c()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimVrfyI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfyI2c
    Field_msgoutUbxTimVrfyI2c& accessField_msgoutUbxTimVrfyI2c()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfyI2c>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfyI2c (const version)
    const Field_msgoutUbxTimVrfyI2c& accessField_msgoutUbxTimVrfyI2c() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfyI2c>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimVrfySpi.
    using Field_msgoutUbxTimVrfySpi = typename CfgValPairMembers<TOpt>::MsgoutUbxTimVrfySpi;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimVrfySpi
    Field_msgoutUbxTimVrfySpi& initField_msgoutUbxTimVrfySpi()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimVrfySpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfySpi
    Field_msgoutUbxTimVrfySpi& accessField_msgoutUbxTimVrfySpi()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfySpi>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfySpi (const version)
    const Field_msgoutUbxTimVrfySpi& accessField_msgoutUbxTimVrfySpi() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfySpi>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimVrfyUart1.
    using Field_msgoutUbxTimVrfyUart1 = typename CfgValPairMembers<TOpt>::MsgoutUbxTimVrfyUart1;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimVrfyUart1
    Field_msgoutUbxTimVrfyUart1& initField_msgoutUbxTimVrfyUart1()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimVrfyUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfyUart1
    Field_msgoutUbxTimVrfyUart1& accessField_msgoutUbxTimVrfyUart1()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfyUart1>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfyUart1 (const version)
    const Field_msgoutUbxTimVrfyUart1& accessField_msgoutUbxTimVrfyUart1() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfyUart1>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimVrfyUart2.
    using Field_msgoutUbxTimVrfyUart2 = typename CfgValPairMembers<TOpt>::MsgoutUbxTimVrfyUart2;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimVrfyUart2
    Field_msgoutUbxTimVrfyUart2& initField_msgoutUbxTimVrfyUart2()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimVrfyUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfyUart2
    Field_msgoutUbxTimVrfyUart2& accessField_msgoutUbxTimVrfyUart2()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfyUart2>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfyUart2 (const version)
    const Field_msgoutUbxTimVrfyUart2& accessField_msgoutUbxTimVrfyUart2() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfyUart2>();
    }

    /// @brief Member type alias to CfgValPairMembers::MsgoutUbxTimVrfyUsb.
    using Field_msgoutUbxTimVrfyUsb = typename CfgValPairMembers<TOpt>::MsgoutUbxTimVrfyUsb;

    /// @brief Initialize as CfgValPairMembers::MsgoutUbxTimVrfyUsb
    Field_msgoutUbxTimVrfyUsb& initField_msgoutUbxTimVrfyUsb()
    {
        return Base::template initField<FieldIdx_msgoutUbxTimVrfyUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfyUsb
    Field_msgoutUbxTimVrfyUsb& accessField_msgoutUbxTimVrfyUsb()
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfyUsb>();
    }

    /// @brief Access as CfgValPairMembers::MsgoutUbxTimVrfyUsb (const version)
    const Field_msgoutUbxTimVrfyUsb& accessField_msgoutUbxTimVrfyUsb() const
    {
        return Base::template accessField<FieldIdx_msgoutUbxTimVrfyUsb>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavhpgDgnssmode.
    using Field_navhpgDgnssmode = typename CfgValPairMembers<TOpt>::NavhpgDgnssmode;

    /// @brief Initialize as CfgValPairMembers::NavhpgDgnssmode
    Field_navhpgDgnssmode& initField_navhpgDgnssmode()
    {
        return Base::template initField<FieldIdx_navhpgDgnssmode>();
    }

    /// @brief Access as CfgValPairMembers::NavhpgDgnssmode
    Field_navhpgDgnssmode& accessField_navhpgDgnssmode()
    {
        return Base::template accessField<FieldIdx_navhpgDgnssmode>();
    }

    /// @brief Access as CfgValPairMembers::NavhpgDgnssmode (const version)
    const Field_navhpgDgnssmode& accessField_navhpgDgnssmode() const
    {
        return Base::template accessField<FieldIdx_navhpgDgnssmode>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgFixmode.
    using Field_navspgFixmode = typename CfgValPairMembers<TOpt>::NavspgFixmode;

    /// @brief Initialize as CfgValPairMembers::NavspgFixmode
    Field_navspgFixmode& initField_navspgFixmode()
    {
        return Base::template initField<FieldIdx_navspgFixmode>();
    }

    /// @brief Access as CfgValPairMembers::NavspgFixmode
    Field_navspgFixmode& accessField_navspgFixmode()
    {
        return Base::template accessField<FieldIdx_navspgFixmode>();
    }

    /// @brief Access as CfgValPairMembers::NavspgFixmode (const version)
    const Field_navspgFixmode& accessField_navspgFixmode() const
    {
        return Base::template accessField<FieldIdx_navspgFixmode>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgInifix3d.
    using Field_navspgInifix3d = typename CfgValPairMembers<TOpt>::NavspgInifix3d;

    /// @brief Initialize as CfgValPairMembers::NavspgInifix3d
    Field_navspgInifix3d& initField_navspgInifix3d()
    {
        return Base::template initField<FieldIdx_navspgInifix3d>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInifix3d
    Field_navspgInifix3d& accessField_navspgInifix3d()
    {
        return Base::template accessField<FieldIdx_navspgInifix3d>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInifix3d (const version)
    const Field_navspgInifix3d& accessField_navspgInifix3d() const
    {
        return Base::template accessField<FieldIdx_navspgInifix3d>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgWknrollover.
    using Field_navspgWknrollover = typename CfgValPairMembers<TOpt>::NavspgWknrollover;

    /// @brief Initialize as CfgValPairMembers::NavspgWknrollover
    Field_navspgWknrollover& initField_navspgWknrollover()
    {
        return Base::template initField<FieldIdx_navspgWknrollover>();
    }

    /// @brief Access as CfgValPairMembers::NavspgWknrollover
    Field_navspgWknrollover& accessField_navspgWknrollover()
    {
        return Base::template accessField<FieldIdx_navspgWknrollover>();
    }

    /// @brief Access as CfgValPairMembers::NavspgWknrollover (const version)
    const Field_navspgWknrollover& accessField_navspgWknrollover() const
    {
        return Base::template accessField<FieldIdx_navspgWknrollover>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUtcstandard.
    using Field_navspgUtcstandard = typename CfgValPairMembers<TOpt>::NavspgUtcstandard;

    /// @brief Initialize as CfgValPairMembers::NavspgUtcstandard
    Field_navspgUtcstandard& initField_navspgUtcstandard()
    {
        return Base::template initField<FieldIdx_navspgUtcstandard>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUtcstandard
    Field_navspgUtcstandard& accessField_navspgUtcstandard()
    {
        return Base::template accessField<FieldIdx_navspgUtcstandard>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUtcstandard (const version)
    const Field_navspgUtcstandard& accessField_navspgUtcstandard() const
    {
        return Base::template accessField<FieldIdx_navspgUtcstandard>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgDynmodel.
    using Field_navspgDynmodel = typename CfgValPairMembers<TOpt>::NavspgDynmodel;

    /// @brief Initialize as CfgValPairMembers::NavspgDynmodel
    Field_navspgDynmodel& initField_navspgDynmodel()
    {
        return Base::template initField<FieldIdx_navspgDynmodel>();
    }

    /// @brief Access as CfgValPairMembers::NavspgDynmodel
    Field_navspgDynmodel& accessField_navspgDynmodel()
    {
        return Base::template accessField<FieldIdx_navspgDynmodel>();
    }

    /// @brief Access as CfgValPairMembers::NavspgDynmodel (const version)
    const Field_navspgDynmodel& accessField_navspgDynmodel() const
    {
        return Base::template accessField<FieldIdx_navspgDynmodel>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgAckaiding.
    using Field_navspgAckaiding = typename CfgValPairMembers<TOpt>::NavspgAckaiding;

    /// @brief Initialize as CfgValPairMembers::NavspgAckaiding
    Field_navspgAckaiding& initField_navspgAckaiding()
    {
        return Base::template initField<FieldIdx_navspgAckaiding>();
    }

    /// @brief Access as CfgValPairMembers::NavspgAckaiding
    Field_navspgAckaiding& accessField_navspgAckaiding()
    {
        return Base::template accessField<FieldIdx_navspgAckaiding>();
    }

    /// @brief Access as CfgValPairMembers::NavspgAckaiding (const version)
    const Field_navspgAckaiding& accessField_navspgAckaiding() const
    {
        return Base::template accessField<FieldIdx_navspgAckaiding>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUseUsrdat.
    using Field_navspgUseUsrdat = typename CfgValPairMembers<TOpt>::NavspgUseUsrdat;

    /// @brief Initialize as CfgValPairMembers::NavspgUseUsrdat
    Field_navspgUseUsrdat& initField_navspgUseUsrdat()
    {
        return Base::template initField<FieldIdx_navspgUseUsrdat>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUseUsrdat
    Field_navspgUseUsrdat& accessField_navspgUseUsrdat()
    {
        return Base::template accessField<FieldIdx_navspgUseUsrdat>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUseUsrdat (const version)
    const Field_navspgUseUsrdat& accessField_navspgUseUsrdat() const
    {
        return Base::template accessField<FieldIdx_navspgUseUsrdat>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatMaja.
    using Field_navspgUsrdatMaja = typename CfgValPairMembers<TOpt>::NavspgUsrdatMaja;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatMaja
    Field_navspgUsrdatMaja& initField_navspgUsrdatMaja()
    {
        return Base::template initField<FieldIdx_navspgUsrdatMaja>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatMaja
    Field_navspgUsrdatMaja& accessField_navspgUsrdatMaja()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatMaja>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatMaja (const version)
    const Field_navspgUsrdatMaja& accessField_navspgUsrdatMaja() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatMaja>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatFlat.
    using Field_navspgUsrdatFlat = typename CfgValPairMembers<TOpt>::NavspgUsrdatFlat;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatFlat
    Field_navspgUsrdatFlat& initField_navspgUsrdatFlat()
    {
        return Base::template initField<FieldIdx_navspgUsrdatFlat>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatFlat
    Field_navspgUsrdatFlat& accessField_navspgUsrdatFlat()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatFlat>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatFlat (const version)
    const Field_navspgUsrdatFlat& accessField_navspgUsrdatFlat() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatFlat>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatDx.
    using Field_navspgUsrdatDx = typename CfgValPairMembers<TOpt>::NavspgUsrdatDx;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatDx
    Field_navspgUsrdatDx& initField_navspgUsrdatDx()
    {
        return Base::template initField<FieldIdx_navspgUsrdatDx>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatDx
    Field_navspgUsrdatDx& accessField_navspgUsrdatDx()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatDx>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatDx (const version)
    const Field_navspgUsrdatDx& accessField_navspgUsrdatDx() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatDx>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatDy.
    using Field_navspgUsrdatDy = typename CfgValPairMembers<TOpt>::NavspgUsrdatDy;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatDy
    Field_navspgUsrdatDy& initField_navspgUsrdatDy()
    {
        return Base::template initField<FieldIdx_navspgUsrdatDy>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatDy
    Field_navspgUsrdatDy& accessField_navspgUsrdatDy()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatDy>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatDy (const version)
    const Field_navspgUsrdatDy& accessField_navspgUsrdatDy() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatDy>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatDz.
    using Field_navspgUsrdatDz = typename CfgValPairMembers<TOpt>::NavspgUsrdatDz;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatDz
    Field_navspgUsrdatDz& initField_navspgUsrdatDz()
    {
        return Base::template initField<FieldIdx_navspgUsrdatDz>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatDz
    Field_navspgUsrdatDz& accessField_navspgUsrdatDz()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatDz>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatDz (const version)
    const Field_navspgUsrdatDz& accessField_navspgUsrdatDz() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatDz>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatRotx.
    using Field_navspgUsrdatRotx = typename CfgValPairMembers<TOpt>::NavspgUsrdatRotx;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatRotx
    Field_navspgUsrdatRotx& initField_navspgUsrdatRotx()
    {
        return Base::template initField<FieldIdx_navspgUsrdatRotx>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatRotx
    Field_navspgUsrdatRotx& accessField_navspgUsrdatRotx()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatRotx>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatRotx (const version)
    const Field_navspgUsrdatRotx& accessField_navspgUsrdatRotx() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatRotx>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatRoty.
    using Field_navspgUsrdatRoty = typename CfgValPairMembers<TOpt>::NavspgUsrdatRoty;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatRoty
    Field_navspgUsrdatRoty& initField_navspgUsrdatRoty()
    {
        return Base::template initField<FieldIdx_navspgUsrdatRoty>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatRoty
    Field_navspgUsrdatRoty& accessField_navspgUsrdatRoty()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatRoty>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatRoty (const version)
    const Field_navspgUsrdatRoty& accessField_navspgUsrdatRoty() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatRoty>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatRotz.
    using Field_navspgUsrdatRotz = typename CfgValPairMembers<TOpt>::NavspgUsrdatRotz;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatRotz
    Field_navspgUsrdatRotz& initField_navspgUsrdatRotz()
    {
        return Base::template initField<FieldIdx_navspgUsrdatRotz>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatRotz
    Field_navspgUsrdatRotz& accessField_navspgUsrdatRotz()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatRotz>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatRotz (const version)
    const Field_navspgUsrdatRotz& accessField_navspgUsrdatRotz() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatRotz>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgUsrdatScale.
    using Field_navspgUsrdatScale = typename CfgValPairMembers<TOpt>::NavspgUsrdatScale;

    /// @brief Initialize as CfgValPairMembers::NavspgUsrdatScale
    Field_navspgUsrdatScale& initField_navspgUsrdatScale()
    {
        return Base::template initField<FieldIdx_navspgUsrdatScale>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatScale
    Field_navspgUsrdatScale& accessField_navspgUsrdatScale()
    {
        return Base::template accessField<FieldIdx_navspgUsrdatScale>();
    }

    /// @brief Access as CfgValPairMembers::NavspgUsrdatScale (const version)
    const Field_navspgUsrdatScale& accessField_navspgUsrdatScale() const
    {
        return Base::template accessField<FieldIdx_navspgUsrdatScale>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgInfilMinsvs.
    using Field_navspgInfilMinsvs = typename CfgValPairMembers<TOpt>::NavspgInfilMinsvs;

    /// @brief Initialize as CfgValPairMembers::NavspgInfilMinsvs
    Field_navspgInfilMinsvs& initField_navspgInfilMinsvs()
    {
        return Base::template initField<FieldIdx_navspgInfilMinsvs>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilMinsvs
    Field_navspgInfilMinsvs& accessField_navspgInfilMinsvs()
    {
        return Base::template accessField<FieldIdx_navspgInfilMinsvs>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilMinsvs (const version)
    const Field_navspgInfilMinsvs& accessField_navspgInfilMinsvs() const
    {
        return Base::template accessField<FieldIdx_navspgInfilMinsvs>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgInfilMaxsvs.
    using Field_navspgInfilMaxsvs = typename CfgValPairMembers<TOpt>::NavspgInfilMaxsvs;

    /// @brief Initialize as CfgValPairMembers::NavspgInfilMaxsvs
    Field_navspgInfilMaxsvs& initField_navspgInfilMaxsvs()
    {
        return Base::template initField<FieldIdx_navspgInfilMaxsvs>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilMaxsvs
    Field_navspgInfilMaxsvs& accessField_navspgInfilMaxsvs()
    {
        return Base::template accessField<FieldIdx_navspgInfilMaxsvs>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilMaxsvs (const version)
    const Field_navspgInfilMaxsvs& accessField_navspgInfilMaxsvs() const
    {
        return Base::template accessField<FieldIdx_navspgInfilMaxsvs>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgInfilMincno.
    using Field_navspgInfilMincno = typename CfgValPairMembers<TOpt>::NavspgInfilMincno;

    /// @brief Initialize as CfgValPairMembers::NavspgInfilMincno
    Field_navspgInfilMincno& initField_navspgInfilMincno()
    {
        return Base::template initField<FieldIdx_navspgInfilMincno>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilMincno
    Field_navspgInfilMincno& accessField_navspgInfilMincno()
    {
        return Base::template accessField<FieldIdx_navspgInfilMincno>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilMincno (const version)
    const Field_navspgInfilMincno& accessField_navspgInfilMincno() const
    {
        return Base::template accessField<FieldIdx_navspgInfilMincno>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgInfilMinelev.
    using Field_navspgInfilMinelev = typename CfgValPairMembers<TOpt>::NavspgInfilMinelev;

    /// @brief Initialize as CfgValPairMembers::NavspgInfilMinelev
    Field_navspgInfilMinelev& initField_navspgInfilMinelev()
    {
        return Base::template initField<FieldIdx_navspgInfilMinelev>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilMinelev
    Field_navspgInfilMinelev& accessField_navspgInfilMinelev()
    {
        return Base::template accessField<FieldIdx_navspgInfilMinelev>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilMinelev (const version)
    const Field_navspgInfilMinelev& accessField_navspgInfilMinelev() const
    {
        return Base::template accessField<FieldIdx_navspgInfilMinelev>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgInfilNcnothrs.
    using Field_navspgInfilNcnothrs = typename CfgValPairMembers<TOpt>::NavspgInfilNcnothrs;

    /// @brief Initialize as CfgValPairMembers::NavspgInfilNcnothrs
    Field_navspgInfilNcnothrs& initField_navspgInfilNcnothrs()
    {
        return Base::template initField<FieldIdx_navspgInfilNcnothrs>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilNcnothrs
    Field_navspgInfilNcnothrs& accessField_navspgInfilNcnothrs()
    {
        return Base::template accessField<FieldIdx_navspgInfilNcnothrs>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilNcnothrs (const version)
    const Field_navspgInfilNcnothrs& accessField_navspgInfilNcnothrs() const
    {
        return Base::template accessField<FieldIdx_navspgInfilNcnothrs>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgInfilCnothrs.
    using Field_navspgInfilCnothrs = typename CfgValPairMembers<TOpt>::NavspgInfilCnothrs;

    /// @brief Initialize as CfgValPairMembers::NavspgInfilCnothrs
    Field_navspgInfilCnothrs& initField_navspgInfilCnothrs()
    {
        return Base::template initField<FieldIdx_navspgInfilCnothrs>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilCnothrs
    Field_navspgInfilCnothrs& accessField_navspgInfilCnothrs()
    {
        return Base::template accessField<FieldIdx_navspgInfilCnothrs>();
    }

    /// @brief Access as CfgValPairMembers::NavspgInfilCnothrs (const version)
    const Field_navspgInfilCnothrs& accessField_navspgInfilCnothrs() const
    {
        return Base::template accessField<FieldIdx_navspgInfilCnothrs>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgOutfilPdop.
    using Field_navspgOutfilPdop = typename CfgValPairMembers<TOpt>::NavspgOutfilPdop;

    /// @brief Initialize as CfgValPairMembers::NavspgOutfilPdop
    Field_navspgOutfilPdop& initField_navspgOutfilPdop()
    {
        return Base::template initField<FieldIdx_navspgOutfilPdop>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilPdop
    Field_navspgOutfilPdop& accessField_navspgOutfilPdop()
    {
        return Base::template accessField<FieldIdx_navspgOutfilPdop>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilPdop (const version)
    const Field_navspgOutfilPdop& accessField_navspgOutfilPdop() const
    {
        return Base::template accessField<FieldIdx_navspgOutfilPdop>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgOutfilTdop.
    using Field_navspgOutfilTdop = typename CfgValPairMembers<TOpt>::NavspgOutfilTdop;

    /// @brief Initialize as CfgValPairMembers::NavspgOutfilTdop
    Field_navspgOutfilTdop& initField_navspgOutfilTdop()
    {
        return Base::template initField<FieldIdx_navspgOutfilTdop>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilTdop
    Field_navspgOutfilTdop& accessField_navspgOutfilTdop()
    {
        return Base::template accessField<FieldIdx_navspgOutfilTdop>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilTdop (const version)
    const Field_navspgOutfilTdop& accessField_navspgOutfilTdop() const
    {
        return Base::template accessField<FieldIdx_navspgOutfilTdop>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgOutfilPacc.
    using Field_navspgOutfilPacc = typename CfgValPairMembers<TOpt>::NavspgOutfilPacc;

    /// @brief Initialize as CfgValPairMembers::NavspgOutfilPacc
    Field_navspgOutfilPacc& initField_navspgOutfilPacc()
    {
        return Base::template initField<FieldIdx_navspgOutfilPacc>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilPacc
    Field_navspgOutfilPacc& accessField_navspgOutfilPacc()
    {
        return Base::template accessField<FieldIdx_navspgOutfilPacc>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilPacc (const version)
    const Field_navspgOutfilPacc& accessField_navspgOutfilPacc() const
    {
        return Base::template accessField<FieldIdx_navspgOutfilPacc>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgOutfilTacc.
    using Field_navspgOutfilTacc = typename CfgValPairMembers<TOpt>::NavspgOutfilTacc;

    /// @brief Initialize as CfgValPairMembers::NavspgOutfilTacc
    Field_navspgOutfilTacc& initField_navspgOutfilTacc()
    {
        return Base::template initField<FieldIdx_navspgOutfilTacc>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilTacc
    Field_navspgOutfilTacc& accessField_navspgOutfilTacc()
    {
        return Base::template accessField<FieldIdx_navspgOutfilTacc>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilTacc (const version)
    const Field_navspgOutfilTacc& accessField_navspgOutfilTacc() const
    {
        return Base::template accessField<FieldIdx_navspgOutfilTacc>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgOutfilFacc.
    using Field_navspgOutfilFacc = typename CfgValPairMembers<TOpt>::NavspgOutfilFacc;

    /// @brief Initialize as CfgValPairMembers::NavspgOutfilFacc
    Field_navspgOutfilFacc& initField_navspgOutfilFacc()
    {
        return Base::template initField<FieldIdx_navspgOutfilFacc>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilFacc
    Field_navspgOutfilFacc& accessField_navspgOutfilFacc()
    {
        return Base::template accessField<FieldIdx_navspgOutfilFacc>();
    }

    /// @brief Access as CfgValPairMembers::NavspgOutfilFacc (const version)
    const Field_navspgOutfilFacc& accessField_navspgOutfilFacc() const
    {
        return Base::template accessField<FieldIdx_navspgOutfilFacc>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgConstrAlt.
    using Field_navspgConstrAlt = typename CfgValPairMembers<TOpt>::NavspgConstrAlt;

    /// @brief Initialize as CfgValPairMembers::NavspgConstrAlt
    Field_navspgConstrAlt& initField_navspgConstrAlt()
    {
        return Base::template initField<FieldIdx_navspgConstrAlt>();
    }

    /// @brief Access as CfgValPairMembers::NavspgConstrAlt
    Field_navspgConstrAlt& accessField_navspgConstrAlt()
    {
        return Base::template accessField<FieldIdx_navspgConstrAlt>();
    }

    /// @brief Access as CfgValPairMembers::NavspgConstrAlt (const version)
    const Field_navspgConstrAlt& accessField_navspgConstrAlt() const
    {
        return Base::template accessField<FieldIdx_navspgConstrAlt>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgConstrAltvar.
    using Field_navspgConstrAltvar = typename CfgValPairMembers<TOpt>::NavspgConstrAltvar;

    /// @brief Initialize as CfgValPairMembers::NavspgConstrAltvar
    Field_navspgConstrAltvar& initField_navspgConstrAltvar()
    {
        return Base::template initField<FieldIdx_navspgConstrAltvar>();
    }

    /// @brief Access as CfgValPairMembers::NavspgConstrAltvar
    Field_navspgConstrAltvar& accessField_navspgConstrAltvar()
    {
        return Base::template accessField<FieldIdx_navspgConstrAltvar>();
    }

    /// @brief Access as CfgValPairMembers::NavspgConstrAltvar (const version)
    const Field_navspgConstrAltvar& accessField_navspgConstrAltvar() const
    {
        return Base::template accessField<FieldIdx_navspgConstrAltvar>();
    }

    /// @brief Member type alias to CfgValPairMembers::NavspgConstrDgnssto.
    using Field_navspgConstrDgnssto = typename CfgValPairMembers<TOpt>::NavspgConstrDgnssto;

    /// @brief Initialize as CfgValPairMembers::NavspgConstrDgnssto
    Field_navspgConstrDgnssto& initField_navspgConstrDgnssto()
    {
        return Base::template initField<FieldIdx_navspgConstrDgnssto>();
    }

    /// @brief Access as CfgValPairMembers::NavspgConstrDgnssto
    Field_navspgConstrDgnssto& accessField_navspgConstrDgnssto()
    {
        return Base::template accessField<FieldIdx_navspgConstrDgnssto>();
    }

    /// @brief Access as CfgValPairMembers::NavspgConstrDgnssto (const version)
    const Field_navspgConstrDgnssto& accessField_navspgConstrDgnssto() const
    {
        return Base::template accessField<FieldIdx_navspgConstrDgnssto>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaProtver.
    using Field_nmeaProtver = typename CfgValPairMembers<TOpt>::NmeaProtver;

    /// @brief Initialize as CfgValPairMembers::NmeaProtver
    Field_nmeaProtver& initField_nmeaProtver()
    {
        return Base::template initField<FieldIdx_nmeaProtver>();
    }

    /// @brief Access as CfgValPairMembers::NmeaProtver
    Field_nmeaProtver& accessField_nmeaProtver()
    {
        return Base::template accessField<FieldIdx_nmeaProtver>();
    }

    /// @brief Access as CfgValPairMembers::NmeaProtver (const version)
    const Field_nmeaProtver& accessField_nmeaProtver() const
    {
        return Base::template accessField<FieldIdx_nmeaProtver>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaMaxsvs.
    using Field_nmeaMaxsvs = typename CfgValPairMembers<TOpt>::NmeaMaxsvs;

    /// @brief Initialize as CfgValPairMembers::NmeaMaxsvs
    Field_nmeaMaxsvs& initField_nmeaMaxsvs()
    {
        return Base::template initField<FieldIdx_nmeaMaxsvs>();
    }

    /// @brief Access as CfgValPairMembers::NmeaMaxsvs
    Field_nmeaMaxsvs& accessField_nmeaMaxsvs()
    {
        return Base::template accessField<FieldIdx_nmeaMaxsvs>();
    }

    /// @brief Access as CfgValPairMembers::NmeaMaxsvs (const version)
    const Field_nmeaMaxsvs& accessField_nmeaMaxsvs() const
    {
        return Base::template accessField<FieldIdx_nmeaMaxsvs>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaCompat.
    using Field_nmeaCompat = typename CfgValPairMembers<TOpt>::NmeaCompat;

    /// @brief Initialize as CfgValPairMembers::NmeaCompat
    Field_nmeaCompat& initField_nmeaCompat()
    {
        return Base::template initField<FieldIdx_nmeaCompat>();
    }

    /// @brief Access as CfgValPairMembers::NmeaCompat
    Field_nmeaCompat& accessField_nmeaCompat()
    {
        return Base::template accessField<FieldIdx_nmeaCompat>();
    }

    /// @brief Access as CfgValPairMembers::NmeaCompat (const version)
    const Field_nmeaCompat& accessField_nmeaCompat() const
    {
        return Base::template accessField<FieldIdx_nmeaCompat>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaConsider.
    using Field_nmeaConsider = typename CfgValPairMembers<TOpt>::NmeaConsider;

    /// @brief Initialize as CfgValPairMembers::NmeaConsider
    Field_nmeaConsider& initField_nmeaConsider()
    {
        return Base::template initField<FieldIdx_nmeaConsider>();
    }

    /// @brief Access as CfgValPairMembers::NmeaConsider
    Field_nmeaConsider& accessField_nmeaConsider()
    {
        return Base::template accessField<FieldIdx_nmeaConsider>();
    }

    /// @brief Access as CfgValPairMembers::NmeaConsider (const version)
    const Field_nmeaConsider& accessField_nmeaConsider() const
    {
        return Base::template accessField<FieldIdx_nmeaConsider>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaLimit82.
    using Field_nmeaLimit82 = typename CfgValPairMembers<TOpt>::NmeaLimit82;

    /// @brief Initialize as CfgValPairMembers::NmeaLimit82
    Field_nmeaLimit82& initField_nmeaLimit82()
    {
        return Base::template initField<FieldIdx_nmeaLimit82>();
    }

    /// @brief Access as CfgValPairMembers::NmeaLimit82
    Field_nmeaLimit82& accessField_nmeaLimit82()
    {
        return Base::template accessField<FieldIdx_nmeaLimit82>();
    }

    /// @brief Access as CfgValPairMembers::NmeaLimit82 (const version)
    const Field_nmeaLimit82& accessField_nmeaLimit82() const
    {
        return Base::template accessField<FieldIdx_nmeaLimit82>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaHighprec.
    using Field_nmeaHighprec = typename CfgValPairMembers<TOpt>::NmeaHighprec;

    /// @brief Initialize as CfgValPairMembers::NmeaHighprec
    Field_nmeaHighprec& initField_nmeaHighprec()
    {
        return Base::template initField<FieldIdx_nmeaHighprec>();
    }

    /// @brief Access as CfgValPairMembers::NmeaHighprec
    Field_nmeaHighprec& accessField_nmeaHighprec()
    {
        return Base::template accessField<FieldIdx_nmeaHighprec>();
    }

    /// @brief Access as CfgValPairMembers::NmeaHighprec (const version)
    const Field_nmeaHighprec& accessField_nmeaHighprec() const
    {
        return Base::template accessField<FieldIdx_nmeaHighprec>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaSvnumbering.
    using Field_nmeaSvnumbering = typename CfgValPairMembers<TOpt>::NmeaSvnumbering;

    /// @brief Initialize as CfgValPairMembers::NmeaSvnumbering
    Field_nmeaSvnumbering& initField_nmeaSvnumbering()
    {
        return Base::template initField<FieldIdx_nmeaSvnumbering>();
    }

    /// @brief Access as CfgValPairMembers::NmeaSvnumbering
    Field_nmeaSvnumbering& accessField_nmeaSvnumbering()
    {
        return Base::template accessField<FieldIdx_nmeaSvnumbering>();
    }

    /// @brief Access as CfgValPairMembers::NmeaSvnumbering (const version)
    const Field_nmeaSvnumbering& accessField_nmeaSvnumbering() const
    {
        return Base::template accessField<FieldIdx_nmeaSvnumbering>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaFiltGps.
    using Field_nmeaFiltGps = typename CfgValPairMembers<TOpt>::NmeaFiltGps;

    /// @brief Initialize as CfgValPairMembers::NmeaFiltGps
    Field_nmeaFiltGps& initField_nmeaFiltGps()
    {
        return Base::template initField<FieldIdx_nmeaFiltGps>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltGps
    Field_nmeaFiltGps& accessField_nmeaFiltGps()
    {
        return Base::template accessField<FieldIdx_nmeaFiltGps>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltGps (const version)
    const Field_nmeaFiltGps& accessField_nmeaFiltGps() const
    {
        return Base::template accessField<FieldIdx_nmeaFiltGps>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaFiltSbas.
    using Field_nmeaFiltSbas = typename CfgValPairMembers<TOpt>::NmeaFiltSbas;

    /// @brief Initialize as CfgValPairMembers::NmeaFiltSbas
    Field_nmeaFiltSbas& initField_nmeaFiltSbas()
    {
        return Base::template initField<FieldIdx_nmeaFiltSbas>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltSbas
    Field_nmeaFiltSbas& accessField_nmeaFiltSbas()
    {
        return Base::template accessField<FieldIdx_nmeaFiltSbas>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltSbas (const version)
    const Field_nmeaFiltSbas& accessField_nmeaFiltSbas() const
    {
        return Base::template accessField<FieldIdx_nmeaFiltSbas>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaFiltGal.
    using Field_nmeaFiltGal = typename CfgValPairMembers<TOpt>::NmeaFiltGal;

    /// @brief Initialize as CfgValPairMembers::NmeaFiltGal
    Field_nmeaFiltGal& initField_nmeaFiltGal()
    {
        return Base::template initField<FieldIdx_nmeaFiltGal>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltGal
    Field_nmeaFiltGal& accessField_nmeaFiltGal()
    {
        return Base::template accessField<FieldIdx_nmeaFiltGal>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltGal (const version)
    const Field_nmeaFiltGal& accessField_nmeaFiltGal() const
    {
        return Base::template accessField<FieldIdx_nmeaFiltGal>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaFiltQzss.
    using Field_nmeaFiltQzss = typename CfgValPairMembers<TOpt>::NmeaFiltQzss;

    /// @brief Initialize as CfgValPairMembers::NmeaFiltQzss
    Field_nmeaFiltQzss& initField_nmeaFiltQzss()
    {
        return Base::template initField<FieldIdx_nmeaFiltQzss>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltQzss
    Field_nmeaFiltQzss& accessField_nmeaFiltQzss()
    {
        return Base::template accessField<FieldIdx_nmeaFiltQzss>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltQzss (const version)
    const Field_nmeaFiltQzss& accessField_nmeaFiltQzss() const
    {
        return Base::template accessField<FieldIdx_nmeaFiltQzss>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaFiltGlo.
    using Field_nmeaFiltGlo = typename CfgValPairMembers<TOpt>::NmeaFiltGlo;

    /// @brief Initialize as CfgValPairMembers::NmeaFiltGlo
    Field_nmeaFiltGlo& initField_nmeaFiltGlo()
    {
        return Base::template initField<FieldIdx_nmeaFiltGlo>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltGlo
    Field_nmeaFiltGlo& accessField_nmeaFiltGlo()
    {
        return Base::template accessField<FieldIdx_nmeaFiltGlo>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltGlo (const version)
    const Field_nmeaFiltGlo& accessField_nmeaFiltGlo() const
    {
        return Base::template accessField<FieldIdx_nmeaFiltGlo>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaFiltBds.
    using Field_nmeaFiltBds = typename CfgValPairMembers<TOpt>::NmeaFiltBds;

    /// @brief Initialize as CfgValPairMembers::NmeaFiltBds
    Field_nmeaFiltBds& initField_nmeaFiltBds()
    {
        return Base::template initField<FieldIdx_nmeaFiltBds>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltBds
    Field_nmeaFiltBds& accessField_nmeaFiltBds()
    {
        return Base::template accessField<FieldIdx_nmeaFiltBds>();
    }

    /// @brief Access as CfgValPairMembers::NmeaFiltBds (const version)
    const Field_nmeaFiltBds& accessField_nmeaFiltBds() const
    {
        return Base::template accessField<FieldIdx_nmeaFiltBds>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaOutInvfix.
    using Field_nmeaOutInvfix = typename CfgValPairMembers<TOpt>::NmeaOutInvfix;

    /// @brief Initialize as CfgValPairMembers::NmeaOutInvfix
    Field_nmeaOutInvfix& initField_nmeaOutInvfix()
    {
        return Base::template initField<FieldIdx_nmeaOutInvfix>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutInvfix
    Field_nmeaOutInvfix& accessField_nmeaOutInvfix()
    {
        return Base::template accessField<FieldIdx_nmeaOutInvfix>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutInvfix (const version)
    const Field_nmeaOutInvfix& accessField_nmeaOutInvfix() const
    {
        return Base::template accessField<FieldIdx_nmeaOutInvfix>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaOutMskfix.
    using Field_nmeaOutMskfix = typename CfgValPairMembers<TOpt>::NmeaOutMskfix;

    /// @brief Initialize as CfgValPairMembers::NmeaOutMskfix
    Field_nmeaOutMskfix& initField_nmeaOutMskfix()
    {
        return Base::template initField<FieldIdx_nmeaOutMskfix>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutMskfix
    Field_nmeaOutMskfix& accessField_nmeaOutMskfix()
    {
        return Base::template accessField<FieldIdx_nmeaOutMskfix>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutMskfix (const version)
    const Field_nmeaOutMskfix& accessField_nmeaOutMskfix() const
    {
        return Base::template accessField<FieldIdx_nmeaOutMskfix>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaOutInvtime.
    using Field_nmeaOutInvtime = typename CfgValPairMembers<TOpt>::NmeaOutInvtime;

    /// @brief Initialize as CfgValPairMembers::NmeaOutInvtime
    Field_nmeaOutInvtime& initField_nmeaOutInvtime()
    {
        return Base::template initField<FieldIdx_nmeaOutInvtime>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutInvtime
    Field_nmeaOutInvtime& accessField_nmeaOutInvtime()
    {
        return Base::template accessField<FieldIdx_nmeaOutInvtime>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutInvtime (const version)
    const Field_nmeaOutInvtime& accessField_nmeaOutInvtime() const
    {
        return Base::template accessField<FieldIdx_nmeaOutInvtime>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaOutInvdate.
    using Field_nmeaOutInvdate = typename CfgValPairMembers<TOpt>::NmeaOutInvdate;

    /// @brief Initialize as CfgValPairMembers::NmeaOutInvdate
    Field_nmeaOutInvdate& initField_nmeaOutInvdate()
    {
        return Base::template initField<FieldIdx_nmeaOutInvdate>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutInvdate
    Field_nmeaOutInvdate& accessField_nmeaOutInvdate()
    {
        return Base::template accessField<FieldIdx_nmeaOutInvdate>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutInvdate (const version)
    const Field_nmeaOutInvdate& accessField_nmeaOutInvdate() const
    {
        return Base::template accessField<FieldIdx_nmeaOutInvdate>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaOutOnlygps.
    using Field_nmeaOutOnlygps = typename CfgValPairMembers<TOpt>::NmeaOutOnlygps;

    /// @brief Initialize as CfgValPairMembers::NmeaOutOnlygps
    Field_nmeaOutOnlygps& initField_nmeaOutOnlygps()
    {
        return Base::template initField<FieldIdx_nmeaOutOnlygps>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutOnlygps
    Field_nmeaOutOnlygps& accessField_nmeaOutOnlygps()
    {
        return Base::template accessField<FieldIdx_nmeaOutOnlygps>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutOnlygps (const version)
    const Field_nmeaOutOnlygps& accessField_nmeaOutOnlygps() const
    {
        return Base::template accessField<FieldIdx_nmeaOutOnlygps>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaOutFrozencog.
    using Field_nmeaOutFrozencog = typename CfgValPairMembers<TOpt>::NmeaOutFrozencog;

    /// @brief Initialize as CfgValPairMembers::NmeaOutFrozencog
    Field_nmeaOutFrozencog& initField_nmeaOutFrozencog()
    {
        return Base::template initField<FieldIdx_nmeaOutFrozencog>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutFrozencog
    Field_nmeaOutFrozencog& accessField_nmeaOutFrozencog()
    {
        return Base::template accessField<FieldIdx_nmeaOutFrozencog>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutFrozencog (const version)
    const Field_nmeaOutFrozencog& accessField_nmeaOutFrozencog() const
    {
        return Base::template accessField<FieldIdx_nmeaOutFrozencog>();
    }

    /// @brief Member type alias to CfgValPairMembers::NmeaOutMaintalkerid.
    using Field_nmeaOutMaintalkerid = typename CfgValPairMembers<TOpt>::NmeaOutMaintalkerid;

    /// @brief Initialize as CfgValPairMembers::NmeaOutMaintalkerid
    Field_nmeaOutMaintalkerid& initField_nmeaOutMaintalkerid()
    {
        return Base::template initField<FieldIdx_nmeaOutMaintalkerid>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutMaintalkerid
    Field_nmeaOutMaintalkerid& accessField_nmeaOutMaintalkerid()
    {
        return Base::template accessField<FieldIdx_nmeaOutMaintalkerid>();
    }

    /// @brief Access as CfgValPairMembers::NmeaOutMaintalkerid (const version)
    const Field_nmeaOutMaintalkerid& accessField_nmeaOutMaintalkerid() const
    {
        return Base::template accessField<FieldIdx_nmeaOutMaintalkerid>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoUseOdo.
    using Field_odoUseOdo = typename CfgValPairMembers<TOpt>::OdoUseOdo;

    /// @brief Initialize as CfgValPairMembers::OdoUseOdo
    Field_odoUseOdo& initField_odoUseOdo()
    {
        return Base::template initField<FieldIdx_odoUseOdo>();
    }

    /// @brief Access as CfgValPairMembers::OdoUseOdo
    Field_odoUseOdo& accessField_odoUseOdo()
    {
        return Base::template accessField<FieldIdx_odoUseOdo>();
    }

    /// @brief Access as CfgValPairMembers::OdoUseOdo (const version)
    const Field_odoUseOdo& accessField_odoUseOdo() const
    {
        return Base::template accessField<FieldIdx_odoUseOdo>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoUseCog.
    using Field_odoUseCog = typename CfgValPairMembers<TOpt>::OdoUseCog;

    /// @brief Initialize as CfgValPairMembers::OdoUseCog
    Field_odoUseCog& initField_odoUseCog()
    {
        return Base::template initField<FieldIdx_odoUseCog>();
    }

    /// @brief Access as CfgValPairMembers::OdoUseCog
    Field_odoUseCog& accessField_odoUseCog()
    {
        return Base::template accessField<FieldIdx_odoUseCog>();
    }

    /// @brief Access as CfgValPairMembers::OdoUseCog (const version)
    const Field_odoUseCog& accessField_odoUseCog() const
    {
        return Base::template accessField<FieldIdx_odoUseCog>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoOutlpvel.
    using Field_odoOutlpvel = typename CfgValPairMembers<TOpt>::OdoOutlpvel;

    /// @brief Initialize as CfgValPairMembers::OdoOutlpvel
    Field_odoOutlpvel& initField_odoOutlpvel()
    {
        return Base::template initField<FieldIdx_odoOutlpvel>();
    }

    /// @brief Access as CfgValPairMembers::OdoOutlpvel
    Field_odoOutlpvel& accessField_odoOutlpvel()
    {
        return Base::template accessField<FieldIdx_odoOutlpvel>();
    }

    /// @brief Access as CfgValPairMembers::OdoOutlpvel (const version)
    const Field_odoOutlpvel& accessField_odoOutlpvel() const
    {
        return Base::template accessField<FieldIdx_odoOutlpvel>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoOutlpcog.
    using Field_odoOutlpcog = typename CfgValPairMembers<TOpt>::OdoOutlpcog;

    /// @brief Initialize as CfgValPairMembers::OdoOutlpcog
    Field_odoOutlpcog& initField_odoOutlpcog()
    {
        return Base::template initField<FieldIdx_odoOutlpcog>();
    }

    /// @brief Access as CfgValPairMembers::OdoOutlpcog
    Field_odoOutlpcog& accessField_odoOutlpcog()
    {
        return Base::template accessField<FieldIdx_odoOutlpcog>();
    }

    /// @brief Access as CfgValPairMembers::OdoOutlpcog (const version)
    const Field_odoOutlpcog& accessField_odoOutlpcog() const
    {
        return Base::template accessField<FieldIdx_odoOutlpcog>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoProfile.
    using Field_odoProfile = typename CfgValPairMembers<TOpt>::OdoProfile;

    /// @brief Initialize as CfgValPairMembers::OdoProfile
    Field_odoProfile& initField_odoProfile()
    {
        return Base::template initField<FieldIdx_odoProfile>();
    }

    /// @brief Access as CfgValPairMembers::OdoProfile
    Field_odoProfile& accessField_odoProfile()
    {
        return Base::template accessField<FieldIdx_odoProfile>();
    }

    /// @brief Access as CfgValPairMembers::OdoProfile (const version)
    const Field_odoProfile& accessField_odoProfile() const
    {
        return Base::template accessField<FieldIdx_odoProfile>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoCogmaxspeed.
    using Field_odoCogmaxspeed = typename CfgValPairMembers<TOpt>::OdoCogmaxspeed;

    /// @brief Initialize as CfgValPairMembers::OdoCogmaxspeed
    Field_odoCogmaxspeed& initField_odoCogmaxspeed()
    {
        return Base::template initField<FieldIdx_odoCogmaxspeed>();
    }

    /// @brief Access as CfgValPairMembers::OdoCogmaxspeed
    Field_odoCogmaxspeed& accessField_odoCogmaxspeed()
    {
        return Base::template accessField<FieldIdx_odoCogmaxspeed>();
    }

    /// @brief Access as CfgValPairMembers::OdoCogmaxspeed (const version)
    const Field_odoCogmaxspeed& accessField_odoCogmaxspeed() const
    {
        return Base::template accessField<FieldIdx_odoCogmaxspeed>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoCogmaxposacc.
    using Field_odoCogmaxposacc = typename CfgValPairMembers<TOpt>::OdoCogmaxposacc;

    /// @brief Initialize as CfgValPairMembers::OdoCogmaxposacc
    Field_odoCogmaxposacc& initField_odoCogmaxposacc()
    {
        return Base::template initField<FieldIdx_odoCogmaxposacc>();
    }

    /// @brief Access as CfgValPairMembers::OdoCogmaxposacc
    Field_odoCogmaxposacc& accessField_odoCogmaxposacc()
    {
        return Base::template accessField<FieldIdx_odoCogmaxposacc>();
    }

    /// @brief Access as CfgValPairMembers::OdoCogmaxposacc (const version)
    const Field_odoCogmaxposacc& accessField_odoCogmaxposacc() const
    {
        return Base::template accessField<FieldIdx_odoCogmaxposacc>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoVellpgain.
    using Field_odoVellpgain = typename CfgValPairMembers<TOpt>::OdoVellpgain;

    /// @brief Initialize as CfgValPairMembers::OdoVellpgain
    Field_odoVellpgain& initField_odoVellpgain()
    {
        return Base::template initField<FieldIdx_odoVellpgain>();
    }

    /// @brief Access as CfgValPairMembers::OdoVellpgain
    Field_odoVellpgain& accessField_odoVellpgain()
    {
        return Base::template accessField<FieldIdx_odoVellpgain>();
    }

    /// @brief Access as CfgValPairMembers::OdoVellpgain (const version)
    const Field_odoVellpgain& accessField_odoVellpgain() const
    {
        return Base::template accessField<FieldIdx_odoVellpgain>();
    }

    /// @brief Member type alias to CfgValPairMembers::OdoCoglpgain.
    using Field_odoCoglpgain = typename CfgValPairMembers<TOpt>::OdoCoglpgain;

    /// @brief Initialize as CfgValPairMembers::OdoCoglpgain
    Field_odoCoglpgain& initField_odoCoglpgain()
    {
        return Base::template initField<FieldIdx_odoCoglpgain>();
    }

    /// @brief Access as CfgValPairMembers::OdoCoglpgain
    Field_odoCoglpgain& accessField_odoCoglpgain()
    {
        return Base::template accessField<FieldIdx_odoCoglpgain>();
    }

    /// @brief Access as CfgValPairMembers::OdoCoglpgain (const version)
    const Field_odoCoglpgain& accessField_odoCoglpgain() const
    {
        return Base::template accessField<FieldIdx_odoCoglpgain>();
    }

    /// @brief Member type alias to CfgValPairMembers::QzssUseSlasDgnss.
    using Field_qzssUseSlasDgnss = typename CfgValPairMembers<TOpt>::QzssUseSlasDgnss;

    /// @brief Initialize as CfgValPairMembers::QzssUseSlasDgnss
    Field_qzssUseSlasDgnss& initField_qzssUseSlasDgnss()
    {
        return Base::template initField<FieldIdx_qzssUseSlasDgnss>();
    }

    /// @brief Access as CfgValPairMembers::QzssUseSlasDgnss
    Field_qzssUseSlasDgnss& accessField_qzssUseSlasDgnss()
    {
        return Base::template accessField<FieldIdx_qzssUseSlasDgnss>();
    }

    /// @brief Access as CfgValPairMembers::QzssUseSlasDgnss (const version)
    const Field_qzssUseSlasDgnss& accessField_qzssUseSlasDgnss() const
    {
        return Base::template accessField<FieldIdx_qzssUseSlasDgnss>();
    }

    /// @brief Member type alias to CfgValPairMembers::QzssUseSlasTestmode.
    using Field_qzssUseSlasTestmode = typename CfgValPairMembers<TOpt>::QzssUseSlasTestmode;

    /// @brief Initialize as CfgValPairMembers::QzssUseSlasTestmode
    Field_qzssUseSlasTestmode& initField_qzssUseSlasTestmode()
    {
        return Base::template initField<FieldIdx_qzssUseSlasTestmode>();
    }

    /// @brief Access as CfgValPairMembers::QzssUseSlasTestmode
    Field_qzssUseSlasTestmode& accessField_qzssUseSlasTestmode()
    {
        return Base::template accessField<FieldIdx_qzssUseSlasTestmode>();
    }

    /// @brief Access as CfgValPairMembers::QzssUseSlasTestmode (const version)
    const Field_qzssUseSlasTestmode& accessField_qzssUseSlasTestmode() const
    {
        return Base::template accessField<FieldIdx_qzssUseSlasTestmode>();
    }

    /// @brief Member type alias to CfgValPairMembers::QzssUseSlasRaimUncorr.
    using Field_qzssUseSlasRaimUncorr = typename CfgValPairMembers<TOpt>::QzssUseSlasRaimUncorr;

    /// @brief Initialize as CfgValPairMembers::QzssUseSlasRaimUncorr
    Field_qzssUseSlasRaimUncorr& initField_qzssUseSlasRaimUncorr()
    {
        return Base::template initField<FieldIdx_qzssUseSlasRaimUncorr>();
    }

    /// @brief Access as CfgValPairMembers::QzssUseSlasRaimUncorr
    Field_qzssUseSlasRaimUncorr& accessField_qzssUseSlasRaimUncorr()
    {
        return Base::template accessField<FieldIdx_qzssUseSlasRaimUncorr>();
    }

    /// @brief Access as CfgValPairMembers::QzssUseSlasRaimUncorr (const version)
    const Field_qzssUseSlasRaimUncorr& accessField_qzssUseSlasRaimUncorr() const
    {
        return Base::template accessField<FieldIdx_qzssUseSlasRaimUncorr>();
    }

    /// @brief Member type alias to CfgValPairMembers::RateMeas.
    using Field_rateMeas = typename CfgValPairMembers<TOpt>::RateMeas;

    /// @brief Initialize as CfgValPairMembers::RateMeas
    Field_rateMeas& initField_rateMeas()
    {
        return Base::template initField<FieldIdx_rateMeas>();
    }

    /// @brief Access as CfgValPairMembers::RateMeas
    Field_rateMeas& accessField_rateMeas()
    {
        return Base::template accessField<FieldIdx_rateMeas>();
    }

    /// @brief Access as CfgValPairMembers::RateMeas (const version)
    const Field_rateMeas& accessField_rateMeas() const
    {
        return Base::template accessField<FieldIdx_rateMeas>();
    }

    /// @brief Member type alias to CfgValPairMembers::RateNav.
    using Field_rateNav = typename CfgValPairMembers<TOpt>::RateNav;

    /// @brief Initialize as CfgValPairMembers::RateNav
    Field_rateNav& initField_rateNav()
    {
        return Base::template initField<FieldIdx_rateNav>();
    }

    /// @brief Access as CfgValPairMembers::RateNav
    Field_rateNav& accessField_rateNav()
    {
        return Base::template accessField<FieldIdx_rateNav>();
    }

    /// @brief Access as CfgValPairMembers::RateNav (const version)
    const Field_rateNav& accessField_rateNav() const
    {
        return Base::template accessField<FieldIdx_rateNav>();
    }

    /// @brief Member type alias to CfgValPairMembers::RateTimeref.
    using Field_rateTimeref = typename CfgValPairMembers<TOpt>::RateTimeref;

    /// @brief Initialize as CfgValPairMembers::RateTimeref
    Field_rateTimeref& initField_rateTimeref()
    {
        return Base::template initField<FieldIdx_rateTimeref>();
    }

    /// @brief Access as CfgValPairMembers::RateTimeref
    Field_rateTimeref& accessField_rateTimeref()
    {
        return Base::template accessField<FieldIdx_rateTimeref>();
    }

    /// @brief Access as CfgValPairMembers::RateTimeref (const version)
    const Field_rateTimeref& accessField_rateTimeref() const
    {
        return Base::template accessField<FieldIdx_rateTimeref>();
    }

    /// @brief Member type alias to CfgValPairMembers::RinvDump.
    using Field_rinvDump = typename CfgValPairMembers<TOpt>::RinvDump;

    /// @brief Initialize as CfgValPairMembers::RinvDump
    Field_rinvDump& initField_rinvDump()
    {
        return Base::template initField<FieldIdx_rinvDump>();
    }

    /// @brief Access as CfgValPairMembers::RinvDump
    Field_rinvDump& accessField_rinvDump()
    {
        return Base::template accessField<FieldIdx_rinvDump>();
    }

    /// @brief Access as CfgValPairMembers::RinvDump (const version)
    const Field_rinvDump& accessField_rinvDump() const
    {
        return Base::template accessField<FieldIdx_rinvDump>();
    }

    /// @brief Member type alias to CfgValPairMembers::RinvBinary.
    using Field_rinvBinary = typename CfgValPairMembers<TOpt>::RinvBinary;

    /// @brief Initialize as CfgValPairMembers::RinvBinary
    Field_rinvBinary& initField_rinvBinary()
    {
        return Base::template initField<FieldIdx_rinvBinary>();
    }

    /// @brief Access as CfgValPairMembers::RinvBinary
    Field_rinvBinary& accessField_rinvBinary()
    {
        return Base::template accessField<FieldIdx_rinvBinary>();
    }

    /// @brief Access as CfgValPairMembers::RinvBinary (const version)
    const Field_rinvBinary& accessField_rinvBinary() const
    {
        return Base::template accessField<FieldIdx_rinvBinary>();
    }

    /// @brief Member type alias to CfgValPairMembers::RinvDataSize.
    using Field_rinvDataSize = typename CfgValPairMembers<TOpt>::RinvDataSize;

    /// @brief Initialize as CfgValPairMembers::RinvDataSize
    Field_rinvDataSize& initField_rinvDataSize()
    {
        return Base::template initField<FieldIdx_rinvDataSize>();
    }

    /// @brief Access as CfgValPairMembers::RinvDataSize
    Field_rinvDataSize& accessField_rinvDataSize()
    {
        return Base::template accessField<FieldIdx_rinvDataSize>();
    }

    /// @brief Access as CfgValPairMembers::RinvDataSize (const version)
    const Field_rinvDataSize& accessField_rinvDataSize() const
    {
        return Base::template accessField<FieldIdx_rinvDataSize>();
    }

    /// @brief Member type alias to CfgValPairMembers::RinvChunk0.
    using Field_rinvChunk0 = typename CfgValPairMembers<TOpt>::RinvChunk0;

    /// @brief Initialize as CfgValPairMembers::RinvChunk0
    Field_rinvChunk0& initField_rinvChunk0()
    {
        return Base::template initField<FieldIdx_rinvChunk0>();
    }

    /// @brief Access as CfgValPairMembers::RinvChunk0
    Field_rinvChunk0& accessField_rinvChunk0()
    {
        return Base::template accessField<FieldIdx_rinvChunk0>();
    }

    /// @brief Access as CfgValPairMembers::RinvChunk0 (const version)
    const Field_rinvChunk0& accessField_rinvChunk0() const
    {
        return Base::template accessField<FieldIdx_rinvChunk0>();
    }

    /// @brief Member type alias to CfgValPairMembers::RinvChunk1.
    using Field_rinvChunk1 = typename CfgValPairMembers<TOpt>::RinvChunk1;

    /// @brief Initialize as CfgValPairMembers::RinvChunk1
    Field_rinvChunk1& initField_rinvChunk1()
    {
        return Base::template initField<FieldIdx_rinvChunk1>();
    }

    /// @brief Access as CfgValPairMembers::RinvChunk1
    Field_rinvChunk1& accessField_rinvChunk1()
    {
        return Base::template accessField<FieldIdx_rinvChunk1>();
    }

    /// @brief Access as CfgValPairMembers::RinvChunk1 (const version)
    const Field_rinvChunk1& accessField_rinvChunk1() const
    {
        return Base::template accessField<FieldIdx_rinvChunk1>();
    }

    /// @brief Member type alias to CfgValPairMembers::RinvChunk2.
    using Field_rinvChunk2 = typename CfgValPairMembers<TOpt>::RinvChunk2;

    /// @brief Initialize as CfgValPairMembers::RinvChunk2
    Field_rinvChunk2& initField_rinvChunk2()
    {
        return Base::template initField<FieldIdx_rinvChunk2>();
    }

    /// @brief Access as CfgValPairMembers::RinvChunk2
    Field_rinvChunk2& accessField_rinvChunk2()
    {
        return Base::template accessField<FieldIdx_rinvChunk2>();
    }

    /// @brief Access as CfgValPairMembers::RinvChunk2 (const version)
    const Field_rinvChunk2& accessField_rinvChunk2() const
    {
        return Base::template accessField<FieldIdx_rinvChunk2>();
    }

    /// @brief Member type alias to CfgValPairMembers::RinvChunk3.
    using Field_rinvChunk3 = typename CfgValPairMembers<TOpt>::RinvChunk3;

    /// @brief Initialize as CfgValPairMembers::RinvChunk3
    Field_rinvChunk3& initField_rinvChunk3()
    {
        return Base::template initField<FieldIdx_rinvChunk3>();
    }

    /// @brief Access as CfgValPairMembers::RinvChunk3
    Field_rinvChunk3& accessField_rinvChunk3()
    {
        return Base::template accessField<FieldIdx_rinvChunk3>();
    }

    /// @brief Access as CfgValPairMembers::RinvChunk3 (const version)
    const Field_rinvChunk3& accessField_rinvChunk3() const
    {
        return Base::template accessField<FieldIdx_rinvChunk3>();
    }

    /// @brief Member type alias to CfgValPairMembers::RtcmDf003Out.
    using Field_rtcmDf003Out = typename CfgValPairMembers<TOpt>::RtcmDf003Out;

    /// @brief Initialize as CfgValPairMembers::RtcmDf003Out
    Field_rtcmDf003Out& initField_rtcmDf003Out()
    {
        return Base::template initField<FieldIdx_rtcmDf003Out>();
    }

    /// @brief Access as CfgValPairMembers::RtcmDf003Out
    Field_rtcmDf003Out& accessField_rtcmDf003Out()
    {
        return Base::template accessField<FieldIdx_rtcmDf003Out>();
    }

    /// @brief Access as CfgValPairMembers::RtcmDf003Out (const version)
    const Field_rtcmDf003Out& accessField_rtcmDf003Out() const
    {
        return Base::template accessField<FieldIdx_rtcmDf003Out>();
    }

    /// @brief Member type alias to CfgValPairMembers::RtcmDf003In.
    using Field_rtcmDf003In = typename CfgValPairMembers<TOpt>::RtcmDf003In;

    /// @brief Initialize as CfgValPairMembers::RtcmDf003In
    Field_rtcmDf003In& initField_rtcmDf003In()
    {
        return Base::template initField<FieldIdx_rtcmDf003In>();
    }

    /// @brief Access as CfgValPairMembers::RtcmDf003In
    Field_rtcmDf003In& accessField_rtcmDf003In()
    {
        return Base::template accessField<FieldIdx_rtcmDf003In>();
    }

    /// @brief Access as CfgValPairMembers::RtcmDf003In (const version)
    const Field_rtcmDf003In& accessField_rtcmDf003In() const
    {
        return Base::template accessField<FieldIdx_rtcmDf003In>();
    }

    /// @brief Member type alias to CfgValPairMembers::RtcmDf003InFilter.
    using Field_rtcmDf003InFilter = typename CfgValPairMembers<TOpt>::RtcmDf003InFilter;

    /// @brief Initialize as CfgValPairMembers::RtcmDf003InFilter
    Field_rtcmDf003InFilter& initField_rtcmDf003InFilter()
    {
        return Base::template initField<FieldIdx_rtcmDf003InFilter>();
    }

    /// @brief Access as CfgValPairMembers::RtcmDf003InFilter
    Field_rtcmDf003InFilter& accessField_rtcmDf003InFilter()
    {
        return Base::template accessField<FieldIdx_rtcmDf003InFilter>();
    }

    /// @brief Access as CfgValPairMembers::RtcmDf003InFilter (const version)
    const Field_rtcmDf003InFilter& accessField_rtcmDf003InFilter() const
    {
        return Base::template accessField<FieldIdx_rtcmDf003InFilter>();
    }

    /// @brief Member type alias to CfgValPairMembers::SbasUseTestmode.
    using Field_sbasUseTestmode = typename CfgValPairMembers<TOpt>::SbasUseTestmode;

    /// @brief Initialize as CfgValPairMembers::SbasUseTestmode
    Field_sbasUseTestmode& initField_sbasUseTestmode()
    {
        return Base::template initField<FieldIdx_sbasUseTestmode>();
    }

    /// @brief Access as CfgValPairMembers::SbasUseTestmode
    Field_sbasUseTestmode& accessField_sbasUseTestmode()
    {
        return Base::template accessField<FieldIdx_sbasUseTestmode>();
    }

    /// @brief Access as CfgValPairMembers::SbasUseTestmode (const version)
    const Field_sbasUseTestmode& accessField_sbasUseTestmode() const
    {
        return Base::template accessField<FieldIdx_sbasUseTestmode>();
    }

    /// @brief Member type alias to CfgValPairMembers::SbasUseRanging.
    using Field_sbasUseRanging = typename CfgValPairMembers<TOpt>::SbasUseRanging;

    /// @brief Initialize as CfgValPairMembers::SbasUseRanging
    Field_sbasUseRanging& initField_sbasUseRanging()
    {
        return Base::template initField<FieldIdx_sbasUseRanging>();
    }

    /// @brief Access as CfgValPairMembers::SbasUseRanging
    Field_sbasUseRanging& accessField_sbasUseRanging()
    {
        return Base::template accessField<FieldIdx_sbasUseRanging>();
    }

    /// @brief Access as CfgValPairMembers::SbasUseRanging (const version)
    const Field_sbasUseRanging& accessField_sbasUseRanging() const
    {
        return Base::template accessField<FieldIdx_sbasUseRanging>();
    }

    /// @brief Member type alias to CfgValPairMembers::SbasUseDiffcorr.
    using Field_sbasUseDiffcorr = typename CfgValPairMembers<TOpt>::SbasUseDiffcorr;

    /// @brief Initialize as CfgValPairMembers::SbasUseDiffcorr
    Field_sbasUseDiffcorr& initField_sbasUseDiffcorr()
    {
        return Base::template initField<FieldIdx_sbasUseDiffcorr>();
    }

    /// @brief Access as CfgValPairMembers::SbasUseDiffcorr
    Field_sbasUseDiffcorr& accessField_sbasUseDiffcorr()
    {
        return Base::template accessField<FieldIdx_sbasUseDiffcorr>();
    }

    /// @brief Access as CfgValPairMembers::SbasUseDiffcorr (const version)
    const Field_sbasUseDiffcorr& accessField_sbasUseDiffcorr() const
    {
        return Base::template accessField<FieldIdx_sbasUseDiffcorr>();
    }

    /// @brief Member type alias to CfgValPairMembers::SbasUseIntegrity.
    using Field_sbasUseIntegrity = typename CfgValPairMembers<TOpt>::SbasUseIntegrity;

    /// @brief Initialize as CfgValPairMembers::SbasUseIntegrity
    Field_sbasUseIntegrity& initField_sbasUseIntegrity()
    {
        return Base::template initField<FieldIdx_sbasUseIntegrity>();
    }

    /// @brief Access as CfgValPairMembers::SbasUseIntegrity
    Field_sbasUseIntegrity& accessField_sbasUseIntegrity()
    {
        return Base::template accessField<FieldIdx_sbasUseIntegrity>();
    }

    /// @brief Access as CfgValPairMembers::SbasUseIntegrity (const version)
    const Field_sbasUseIntegrity& accessField_sbasUseIntegrity() const
    {
        return Base::template accessField<FieldIdx_sbasUseIntegrity>();
    }

    /// @brief Member type alias to CfgValPairMembers::SbasPrnscanmask.
    using Field_sbasPrnscanmask = typename CfgValPairMembers<TOpt>::SbasPrnscanmask;

    /// @brief Initialize as CfgValPairMembers::SbasPrnscanmask
    Field_sbasPrnscanmask& initField_sbasPrnscanmask()
    {
        return Base::template initField<FieldIdx_sbasPrnscanmask>();
    }

    /// @brief Access as CfgValPairMembers::SbasPrnscanmask
    Field_sbasPrnscanmask& accessField_sbasPrnscanmask()
    {
        return Base::template accessField<FieldIdx_sbasPrnscanmask>();
    }

    /// @brief Access as CfgValPairMembers::SbasPrnscanmask (const version)
    const Field_sbasPrnscanmask& accessField_sbasPrnscanmask() const
    {
        return Base::template accessField<FieldIdx_sbasPrnscanmask>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGpsEna.
    using Field_signalGpsEna = typename CfgValPairMembers<TOpt>::SignalGpsEna;

    /// @brief Initialize as CfgValPairMembers::SignalGpsEna
    Field_signalGpsEna& initField_signalGpsEna()
    {
        return Base::template initField<FieldIdx_signalGpsEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGpsEna
    Field_signalGpsEna& accessField_signalGpsEna()
    {
        return Base::template accessField<FieldIdx_signalGpsEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGpsEna (const version)
    const Field_signalGpsEna& accessField_signalGpsEna() const
    {
        return Base::template accessField<FieldIdx_signalGpsEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGpsL1caEna.
    using Field_signalGpsL1caEna = typename CfgValPairMembers<TOpt>::SignalGpsL1caEna;

    /// @brief Initialize as CfgValPairMembers::SignalGpsL1caEna
    Field_signalGpsL1caEna& initField_signalGpsL1caEna()
    {
        return Base::template initField<FieldIdx_signalGpsL1caEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGpsL1caEna
    Field_signalGpsL1caEna& accessField_signalGpsL1caEna()
    {
        return Base::template accessField<FieldIdx_signalGpsL1caEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGpsL1caEna (const version)
    const Field_signalGpsL1caEna& accessField_signalGpsL1caEna() const
    {
        return Base::template accessField<FieldIdx_signalGpsL1caEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGpsL2cEna.
    using Field_signalGpsL2cEna = typename CfgValPairMembers<TOpt>::SignalGpsL2cEna;

    /// @brief Initialize as CfgValPairMembers::SignalGpsL2cEna
    Field_signalGpsL2cEna& initField_signalGpsL2cEna()
    {
        return Base::template initField<FieldIdx_signalGpsL2cEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGpsL2cEna
    Field_signalGpsL2cEna& accessField_signalGpsL2cEna()
    {
        return Base::template accessField<FieldIdx_signalGpsL2cEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGpsL2cEna (const version)
    const Field_signalGpsL2cEna& accessField_signalGpsL2cEna() const
    {
        return Base::template accessField<FieldIdx_signalGpsL2cEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalSbasEna.
    using Field_signalSbasEna = typename CfgValPairMembers<TOpt>::SignalSbasEna;

    /// @brief Initialize as CfgValPairMembers::SignalSbasEna
    Field_signalSbasEna& initField_signalSbasEna()
    {
        return Base::template initField<FieldIdx_signalSbasEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalSbasEna
    Field_signalSbasEna& accessField_signalSbasEna()
    {
        return Base::template accessField<FieldIdx_signalSbasEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalSbasEna (const version)
    const Field_signalSbasEna& accessField_signalSbasEna() const
    {
        return Base::template accessField<FieldIdx_signalSbasEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalSbasL1caEna.
    using Field_signalSbasL1caEna = typename CfgValPairMembers<TOpt>::SignalSbasL1caEna;

    /// @brief Initialize as CfgValPairMembers::SignalSbasL1caEna
    Field_signalSbasL1caEna& initField_signalSbasL1caEna()
    {
        return Base::template initField<FieldIdx_signalSbasL1caEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalSbasL1caEna
    Field_signalSbasL1caEna& accessField_signalSbasL1caEna()
    {
        return Base::template accessField<FieldIdx_signalSbasL1caEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalSbasL1caEna (const version)
    const Field_signalSbasL1caEna& accessField_signalSbasL1caEna() const
    {
        return Base::template accessField<FieldIdx_signalSbasL1caEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGalEna.
    using Field_signalGalEna = typename CfgValPairMembers<TOpt>::SignalGalEna;

    /// @brief Initialize as CfgValPairMembers::SignalGalEna
    Field_signalGalEna& initField_signalGalEna()
    {
        return Base::template initField<FieldIdx_signalGalEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGalEna
    Field_signalGalEna& accessField_signalGalEna()
    {
        return Base::template accessField<FieldIdx_signalGalEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGalEna (const version)
    const Field_signalGalEna& accessField_signalGalEna() const
    {
        return Base::template accessField<FieldIdx_signalGalEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGalE1Ena.
    using Field_signalGalE1Ena = typename CfgValPairMembers<TOpt>::SignalGalE1Ena;

    /// @brief Initialize as CfgValPairMembers::SignalGalE1Ena
    Field_signalGalE1Ena& initField_signalGalE1Ena()
    {
        return Base::template initField<FieldIdx_signalGalE1Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalGalE1Ena
    Field_signalGalE1Ena& accessField_signalGalE1Ena()
    {
        return Base::template accessField<FieldIdx_signalGalE1Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalGalE1Ena (const version)
    const Field_signalGalE1Ena& accessField_signalGalE1Ena() const
    {
        return Base::template accessField<FieldIdx_signalGalE1Ena>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGalE5bEna.
    using Field_signalGalE5bEna = typename CfgValPairMembers<TOpt>::SignalGalE5bEna;

    /// @brief Initialize as CfgValPairMembers::SignalGalE5bEna
    Field_signalGalE5bEna& initField_signalGalE5bEna()
    {
        return Base::template initField<FieldIdx_signalGalE5bEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGalE5bEna
    Field_signalGalE5bEna& accessField_signalGalE5bEna()
    {
        return Base::template accessField<FieldIdx_signalGalE5bEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGalE5bEna (const version)
    const Field_signalGalE5bEna& accessField_signalGalE5bEna() const
    {
        return Base::template accessField<FieldIdx_signalGalE5bEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalBdsEna.
    using Field_signalBdsEna = typename CfgValPairMembers<TOpt>::SignalBdsEna;

    /// @brief Initialize as CfgValPairMembers::SignalBdsEna
    Field_signalBdsEna& initField_signalBdsEna()
    {
        return Base::template initField<FieldIdx_signalBdsEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalBdsEna
    Field_signalBdsEna& accessField_signalBdsEna()
    {
        return Base::template accessField<FieldIdx_signalBdsEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalBdsEna (const version)
    const Field_signalBdsEna& accessField_signalBdsEna() const
    {
        return Base::template accessField<FieldIdx_signalBdsEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalBdsB1Ena.
    using Field_signalBdsB1Ena = typename CfgValPairMembers<TOpt>::SignalBdsB1Ena;

    /// @brief Initialize as CfgValPairMembers::SignalBdsB1Ena
    Field_signalBdsB1Ena& initField_signalBdsB1Ena()
    {
        return Base::template initField<FieldIdx_signalBdsB1Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalBdsB1Ena
    Field_signalBdsB1Ena& accessField_signalBdsB1Ena()
    {
        return Base::template accessField<FieldIdx_signalBdsB1Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalBdsB1Ena (const version)
    const Field_signalBdsB1Ena& accessField_signalBdsB1Ena() const
    {
        return Base::template accessField<FieldIdx_signalBdsB1Ena>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalBdsB2Ena.
    using Field_signalBdsB2Ena = typename CfgValPairMembers<TOpt>::SignalBdsB2Ena;

    /// @brief Initialize as CfgValPairMembers::SignalBdsB2Ena
    Field_signalBdsB2Ena& initField_signalBdsB2Ena()
    {
        return Base::template initField<FieldIdx_signalBdsB2Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalBdsB2Ena
    Field_signalBdsB2Ena& accessField_signalBdsB2Ena()
    {
        return Base::template accessField<FieldIdx_signalBdsB2Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalBdsB2Ena (const version)
    const Field_signalBdsB2Ena& accessField_signalBdsB2Ena() const
    {
        return Base::template accessField<FieldIdx_signalBdsB2Ena>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalQzssEna.
    using Field_signalQzssEna = typename CfgValPairMembers<TOpt>::SignalQzssEna;

    /// @brief Initialize as CfgValPairMembers::SignalQzssEna
    Field_signalQzssEna& initField_signalQzssEna()
    {
        return Base::template initField<FieldIdx_signalQzssEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalQzssEna
    Field_signalQzssEna& accessField_signalQzssEna()
    {
        return Base::template accessField<FieldIdx_signalQzssEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalQzssEna (const version)
    const Field_signalQzssEna& accessField_signalQzssEna() const
    {
        return Base::template accessField<FieldIdx_signalQzssEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalQzssL1caEna.
    using Field_signalQzssL1caEna = typename CfgValPairMembers<TOpt>::SignalQzssL1caEna;

    /// @brief Initialize as CfgValPairMembers::SignalQzssL1caEna
    Field_signalQzssL1caEna& initField_signalQzssL1caEna()
    {
        return Base::template initField<FieldIdx_signalQzssL1caEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalQzssL1caEna
    Field_signalQzssL1caEna& accessField_signalQzssL1caEna()
    {
        return Base::template accessField<FieldIdx_signalQzssL1caEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalQzssL1caEna (const version)
    const Field_signalQzssL1caEna& accessField_signalQzssL1caEna() const
    {
        return Base::template accessField<FieldIdx_signalQzssL1caEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalQzssL1sEna.
    using Field_signalQzssL1sEna = typename CfgValPairMembers<TOpt>::SignalQzssL1sEna;

    /// @brief Initialize as CfgValPairMembers::SignalQzssL1sEna
    Field_signalQzssL1sEna& initField_signalQzssL1sEna()
    {
        return Base::template initField<FieldIdx_signalQzssL1sEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalQzssL1sEna
    Field_signalQzssL1sEna& accessField_signalQzssL1sEna()
    {
        return Base::template accessField<FieldIdx_signalQzssL1sEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalQzssL1sEna (const version)
    const Field_signalQzssL1sEna& accessField_signalQzssL1sEna() const
    {
        return Base::template accessField<FieldIdx_signalQzssL1sEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalQzssL2cEna.
    using Field_signalQzssL2cEna = typename CfgValPairMembers<TOpt>::SignalQzssL2cEna;

    /// @brief Initialize as CfgValPairMembers::SignalQzssL2cEna
    Field_signalQzssL2cEna& initField_signalQzssL2cEna()
    {
        return Base::template initField<FieldIdx_signalQzssL2cEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalQzssL2cEna
    Field_signalQzssL2cEna& accessField_signalQzssL2cEna()
    {
        return Base::template accessField<FieldIdx_signalQzssL2cEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalQzssL2cEna (const version)
    const Field_signalQzssL2cEna& accessField_signalQzssL2cEna() const
    {
        return Base::template accessField<FieldIdx_signalQzssL2cEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGloEna.
    using Field_signalGloEna = typename CfgValPairMembers<TOpt>::SignalGloEna;

    /// @brief Initialize as CfgValPairMembers::SignalGloEna
    Field_signalGloEna& initField_signalGloEna()
    {
        return Base::template initField<FieldIdx_signalGloEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGloEna
    Field_signalGloEna& accessField_signalGloEna()
    {
        return Base::template accessField<FieldIdx_signalGloEna>();
    }

    /// @brief Access as CfgValPairMembers::SignalGloEna (const version)
    const Field_signalGloEna& accessField_signalGloEna() const
    {
        return Base::template accessField<FieldIdx_signalGloEna>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGloL1Ena.
    using Field_signalGloL1Ena = typename CfgValPairMembers<TOpt>::SignalGloL1Ena;

    /// @brief Initialize as CfgValPairMembers::SignalGloL1Ena
    Field_signalGloL1Ena& initField_signalGloL1Ena()
    {
        return Base::template initField<FieldIdx_signalGloL1Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalGloL1Ena
    Field_signalGloL1Ena& accessField_signalGloL1Ena()
    {
        return Base::template accessField<FieldIdx_signalGloL1Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalGloL1Ena (const version)
    const Field_signalGloL1Ena& accessField_signalGloL1Ena() const
    {
        return Base::template accessField<FieldIdx_signalGloL1Ena>();
    }

    /// @brief Member type alias to CfgValPairMembers::SignalGloL2Ena.
    using Field_signalGloL2Ena = typename CfgValPairMembers<TOpt>::SignalGloL2Ena;

    /// @brief Initialize as CfgValPairMembers::SignalGloL2Ena
    Field_signalGloL2Ena& initField_signalGloL2Ena()
    {
        return Base::template initField<FieldIdx_signalGloL2Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalGloL2Ena
    Field_signalGloL2Ena& accessField_signalGloL2Ena()
    {
        return Base::template accessField<FieldIdx_signalGloL2Ena>();
    }

    /// @brief Access as CfgValPairMembers::SignalGloL2Ena (const version)
    const Field_signalGloL2Ena& accessField_signalGloL2Ena() const
    {
        return Base::template accessField<FieldIdx_signalGloL2Ena>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpiMaxff.
    using Field_spiMaxff = typename CfgValPairMembers<TOpt>::SpiMaxff;

    /// @brief Initialize as CfgValPairMembers::SpiMaxff
    Field_spiMaxff& initField_spiMaxff()
    {
        return Base::template initField<FieldIdx_spiMaxff>();
    }

    /// @brief Access as CfgValPairMembers::SpiMaxff
    Field_spiMaxff& accessField_spiMaxff()
    {
        return Base::template accessField<FieldIdx_spiMaxff>();
    }

    /// @brief Access as CfgValPairMembers::SpiMaxff (const version)
    const Field_spiMaxff& accessField_spiMaxff() const
    {
        return Base::template accessField<FieldIdx_spiMaxff>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpiCpolarity.
    using Field_spiCpolarity = typename CfgValPairMembers<TOpt>::SpiCpolarity;

    /// @brief Initialize as CfgValPairMembers::SpiCpolarity
    Field_spiCpolarity& initField_spiCpolarity()
    {
        return Base::template initField<FieldIdx_spiCpolarity>();
    }

    /// @brief Access as CfgValPairMembers::SpiCpolarity
    Field_spiCpolarity& accessField_spiCpolarity()
    {
        return Base::template accessField<FieldIdx_spiCpolarity>();
    }

    /// @brief Access as CfgValPairMembers::SpiCpolarity (const version)
    const Field_spiCpolarity& accessField_spiCpolarity() const
    {
        return Base::template accessField<FieldIdx_spiCpolarity>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpiCphase.
    using Field_spiCphase = typename CfgValPairMembers<TOpt>::SpiCphase;

    /// @brief Initialize as CfgValPairMembers::SpiCphase
    Field_spiCphase& initField_spiCphase()
    {
        return Base::template initField<FieldIdx_spiCphase>();
    }

    /// @brief Access as CfgValPairMembers::SpiCphase
    Field_spiCphase& accessField_spiCphase()
    {
        return Base::template accessField<FieldIdx_spiCphase>();
    }

    /// @brief Access as CfgValPairMembers::SpiCphase (const version)
    const Field_spiCphase& accessField_spiCphase() const
    {
        return Base::template accessField<FieldIdx_spiCphase>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpiExtendedtimeout.
    using Field_spiExtendedtimeout = typename CfgValPairMembers<TOpt>::SpiExtendedtimeout;

    /// @brief Initialize as CfgValPairMembers::SpiExtendedtimeout
    Field_spiExtendedtimeout& initField_spiExtendedtimeout()
    {
        return Base::template initField<FieldIdx_spiExtendedtimeout>();
    }

    /// @brief Access as CfgValPairMembers::SpiExtendedtimeout
    Field_spiExtendedtimeout& accessField_spiExtendedtimeout()
    {
        return Base::template accessField<FieldIdx_spiExtendedtimeout>();
    }

    /// @brief Access as CfgValPairMembers::SpiExtendedtimeout (const version)
    const Field_spiExtendedtimeout& accessField_spiExtendedtimeout() const
    {
        return Base::template accessField<FieldIdx_spiExtendedtimeout>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpiEnabled.
    using Field_spiEnabled = typename CfgValPairMembers<TOpt>::SpiEnabled;

    /// @brief Initialize as CfgValPairMembers::SpiEnabled
    Field_spiEnabled& initField_spiEnabled()
    {
        return Base::template initField<FieldIdx_spiEnabled>();
    }

    /// @brief Access as CfgValPairMembers::SpiEnabled
    Field_spiEnabled& accessField_spiEnabled()
    {
        return Base::template accessField<FieldIdx_spiEnabled>();
    }

    /// @brief Access as CfgValPairMembers::SpiEnabled (const version)
    const Field_spiEnabled& accessField_spiEnabled() const
    {
        return Base::template accessField<FieldIdx_spiEnabled>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpiinprotUbx.
    using Field_spiinprotUbx = typename CfgValPairMembers<TOpt>::SpiinprotUbx;

    /// @brief Initialize as CfgValPairMembers::SpiinprotUbx
    Field_spiinprotUbx& initField_spiinprotUbx()
    {
        return Base::template initField<FieldIdx_spiinprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::SpiinprotUbx
    Field_spiinprotUbx& accessField_spiinprotUbx()
    {
        return Base::template accessField<FieldIdx_spiinprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::SpiinprotUbx (const version)
    const Field_spiinprotUbx& accessField_spiinprotUbx() const
    {
        return Base::template accessField<FieldIdx_spiinprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpiinprotNmea.
    using Field_spiinprotNmea = typename CfgValPairMembers<TOpt>::SpiinprotNmea;

    /// @brief Initialize as CfgValPairMembers::SpiinprotNmea
    Field_spiinprotNmea& initField_spiinprotNmea()
    {
        return Base::template initField<FieldIdx_spiinprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::SpiinprotNmea
    Field_spiinprotNmea& accessField_spiinprotNmea()
    {
        return Base::template accessField<FieldIdx_spiinprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::SpiinprotNmea (const version)
    const Field_spiinprotNmea& accessField_spiinprotNmea() const
    {
        return Base::template accessField<FieldIdx_spiinprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpiinprotRtcm3x.
    using Field_spiinprotRtcm3x = typename CfgValPairMembers<TOpt>::SpiinprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::SpiinprotRtcm3x
    Field_spiinprotRtcm3x& initField_spiinprotRtcm3x()
    {
        return Base::template initField<FieldIdx_spiinprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::SpiinprotRtcm3x
    Field_spiinprotRtcm3x& accessField_spiinprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_spiinprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::SpiinprotRtcm3x (const version)
    const Field_spiinprotRtcm3x& accessField_spiinprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_spiinprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpioutprotUbx.
    using Field_spioutprotUbx = typename CfgValPairMembers<TOpt>::SpioutprotUbx;

    /// @brief Initialize as CfgValPairMembers::SpioutprotUbx
    Field_spioutprotUbx& initField_spioutprotUbx()
    {
        return Base::template initField<FieldIdx_spioutprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::SpioutprotUbx
    Field_spioutprotUbx& accessField_spioutprotUbx()
    {
        return Base::template accessField<FieldIdx_spioutprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::SpioutprotUbx (const version)
    const Field_spioutprotUbx& accessField_spioutprotUbx() const
    {
        return Base::template accessField<FieldIdx_spioutprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpioutprotNmea.
    using Field_spioutprotNmea = typename CfgValPairMembers<TOpt>::SpioutprotNmea;

    /// @brief Initialize as CfgValPairMembers::SpioutprotNmea
    Field_spioutprotNmea& initField_spioutprotNmea()
    {
        return Base::template initField<FieldIdx_spioutprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::SpioutprotNmea
    Field_spioutprotNmea& accessField_spioutprotNmea()
    {
        return Base::template accessField<FieldIdx_spioutprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::SpioutprotNmea (const version)
    const Field_spioutprotNmea& accessField_spioutprotNmea() const
    {
        return Base::template accessField<FieldIdx_spioutprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::SpioutprotRtcm3x.
    using Field_spioutprotRtcm3x = typename CfgValPairMembers<TOpt>::SpioutprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::SpioutprotRtcm3x
    Field_spioutprotRtcm3x& initField_spioutprotRtcm3x()
    {
        return Base::template initField<FieldIdx_spioutprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::SpioutprotRtcm3x
    Field_spioutprotRtcm3x& accessField_spioutprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_spioutprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::SpioutprotRtcm3x (const version)
    const Field_spioutprotRtcm3x& accessField_spioutprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_spioutprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeMode.
    using Field_tmodeMode = typename CfgValPairMembers<TOpt>::TmodeMode;

    /// @brief Initialize as CfgValPairMembers::TmodeMode
    Field_tmodeMode& initField_tmodeMode()
    {
        return Base::template initField<FieldIdx_tmodeMode>();
    }

    /// @brief Access as CfgValPairMembers::TmodeMode
    Field_tmodeMode& accessField_tmodeMode()
    {
        return Base::template accessField<FieldIdx_tmodeMode>();
    }

    /// @brief Access as CfgValPairMembers::TmodeMode (const version)
    const Field_tmodeMode& accessField_tmodeMode() const
    {
        return Base::template accessField<FieldIdx_tmodeMode>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodePosType.
    using Field_tmodePosType = typename CfgValPairMembers<TOpt>::TmodePosType;

    /// @brief Initialize as CfgValPairMembers::TmodePosType
    Field_tmodePosType& initField_tmodePosType()
    {
        return Base::template initField<FieldIdx_tmodePosType>();
    }

    /// @brief Access as CfgValPairMembers::TmodePosType
    Field_tmodePosType& accessField_tmodePosType()
    {
        return Base::template accessField<FieldIdx_tmodePosType>();
    }

    /// @brief Access as CfgValPairMembers::TmodePosType (const version)
    const Field_tmodePosType& accessField_tmodePosType() const
    {
        return Base::template accessField<FieldIdx_tmodePosType>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeEcefX.
    using Field_tmodeEcefX = typename CfgValPairMembers<TOpt>::TmodeEcefX;

    /// @brief Initialize as CfgValPairMembers::TmodeEcefX
    Field_tmodeEcefX& initField_tmodeEcefX()
    {
        return Base::template initField<FieldIdx_tmodeEcefX>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefX
    Field_tmodeEcefX& accessField_tmodeEcefX()
    {
        return Base::template accessField<FieldIdx_tmodeEcefX>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefX (const version)
    const Field_tmodeEcefX& accessField_tmodeEcefX() const
    {
        return Base::template accessField<FieldIdx_tmodeEcefX>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeEcefY.
    using Field_tmodeEcefY = typename CfgValPairMembers<TOpt>::TmodeEcefY;

    /// @brief Initialize as CfgValPairMembers::TmodeEcefY
    Field_tmodeEcefY& initField_tmodeEcefY()
    {
        return Base::template initField<FieldIdx_tmodeEcefY>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefY
    Field_tmodeEcefY& accessField_tmodeEcefY()
    {
        return Base::template accessField<FieldIdx_tmodeEcefY>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefY (const version)
    const Field_tmodeEcefY& accessField_tmodeEcefY() const
    {
        return Base::template accessField<FieldIdx_tmodeEcefY>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeEcefZ.
    using Field_tmodeEcefZ = typename CfgValPairMembers<TOpt>::TmodeEcefZ;

    /// @brief Initialize as CfgValPairMembers::TmodeEcefZ
    Field_tmodeEcefZ& initField_tmodeEcefZ()
    {
        return Base::template initField<FieldIdx_tmodeEcefZ>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefZ
    Field_tmodeEcefZ& accessField_tmodeEcefZ()
    {
        return Base::template accessField<FieldIdx_tmodeEcefZ>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefZ (const version)
    const Field_tmodeEcefZ& accessField_tmodeEcefZ() const
    {
        return Base::template accessField<FieldIdx_tmodeEcefZ>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeEcefXHp.
    using Field_tmodeEcefXHp = typename CfgValPairMembers<TOpt>::TmodeEcefXHp;

    /// @brief Initialize as CfgValPairMembers::TmodeEcefXHp
    Field_tmodeEcefXHp& initField_tmodeEcefXHp()
    {
        return Base::template initField<FieldIdx_tmodeEcefXHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefXHp
    Field_tmodeEcefXHp& accessField_tmodeEcefXHp()
    {
        return Base::template accessField<FieldIdx_tmodeEcefXHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefXHp (const version)
    const Field_tmodeEcefXHp& accessField_tmodeEcefXHp() const
    {
        return Base::template accessField<FieldIdx_tmodeEcefXHp>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeEcefYHp.
    using Field_tmodeEcefYHp = typename CfgValPairMembers<TOpt>::TmodeEcefYHp;

    /// @brief Initialize as CfgValPairMembers::TmodeEcefYHp
    Field_tmodeEcefYHp& initField_tmodeEcefYHp()
    {
        return Base::template initField<FieldIdx_tmodeEcefYHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefYHp
    Field_tmodeEcefYHp& accessField_tmodeEcefYHp()
    {
        return Base::template accessField<FieldIdx_tmodeEcefYHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefYHp (const version)
    const Field_tmodeEcefYHp& accessField_tmodeEcefYHp() const
    {
        return Base::template accessField<FieldIdx_tmodeEcefYHp>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeEcefZHp.
    using Field_tmodeEcefZHp = typename CfgValPairMembers<TOpt>::TmodeEcefZHp;

    /// @brief Initialize as CfgValPairMembers::TmodeEcefZHp
    Field_tmodeEcefZHp& initField_tmodeEcefZHp()
    {
        return Base::template initField<FieldIdx_tmodeEcefZHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefZHp
    Field_tmodeEcefZHp& accessField_tmodeEcefZHp()
    {
        return Base::template accessField<FieldIdx_tmodeEcefZHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeEcefZHp (const version)
    const Field_tmodeEcefZHp& accessField_tmodeEcefZHp() const
    {
        return Base::template accessField<FieldIdx_tmodeEcefZHp>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeLat.
    using Field_tmodeLat = typename CfgValPairMembers<TOpt>::TmodeLat;

    /// @brief Initialize as CfgValPairMembers::TmodeLat
    Field_tmodeLat& initField_tmodeLat()
    {
        return Base::template initField<FieldIdx_tmodeLat>();
    }

    /// @brief Access as CfgValPairMembers::TmodeLat
    Field_tmodeLat& accessField_tmodeLat()
    {
        return Base::template accessField<FieldIdx_tmodeLat>();
    }

    /// @brief Access as CfgValPairMembers::TmodeLat (const version)
    const Field_tmodeLat& accessField_tmodeLat() const
    {
        return Base::template accessField<FieldIdx_tmodeLat>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeLon.
    using Field_tmodeLon = typename CfgValPairMembers<TOpt>::TmodeLon;

    /// @brief Initialize as CfgValPairMembers::TmodeLon
    Field_tmodeLon& initField_tmodeLon()
    {
        return Base::template initField<FieldIdx_tmodeLon>();
    }

    /// @brief Access as CfgValPairMembers::TmodeLon
    Field_tmodeLon& accessField_tmodeLon()
    {
        return Base::template accessField<FieldIdx_tmodeLon>();
    }

    /// @brief Access as CfgValPairMembers::TmodeLon (const version)
    const Field_tmodeLon& accessField_tmodeLon() const
    {
        return Base::template accessField<FieldIdx_tmodeLon>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeHeight.
    using Field_tmodeHeight = typename CfgValPairMembers<TOpt>::TmodeHeight;

    /// @brief Initialize as CfgValPairMembers::TmodeHeight
    Field_tmodeHeight& initField_tmodeHeight()
    {
        return Base::template initField<FieldIdx_tmodeHeight>();
    }

    /// @brief Access as CfgValPairMembers::TmodeHeight
    Field_tmodeHeight& accessField_tmodeHeight()
    {
        return Base::template accessField<FieldIdx_tmodeHeight>();
    }

    /// @brief Access as CfgValPairMembers::TmodeHeight (const version)
    const Field_tmodeHeight& accessField_tmodeHeight() const
    {
        return Base::template accessField<FieldIdx_tmodeHeight>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeLatHp.
    using Field_tmodeLatHp = typename CfgValPairMembers<TOpt>::TmodeLatHp;

    /// @brief Initialize as CfgValPairMembers::TmodeLatHp
    Field_tmodeLatHp& initField_tmodeLatHp()
    {
        return Base::template initField<FieldIdx_tmodeLatHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeLatHp
    Field_tmodeLatHp& accessField_tmodeLatHp()
    {
        return Base::template accessField<FieldIdx_tmodeLatHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeLatHp (const version)
    const Field_tmodeLatHp& accessField_tmodeLatHp() const
    {
        return Base::template accessField<FieldIdx_tmodeLatHp>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeLonHp.
    using Field_tmodeLonHp = typename CfgValPairMembers<TOpt>::TmodeLonHp;

    /// @brief Initialize as CfgValPairMembers::TmodeLonHp
    Field_tmodeLonHp& initField_tmodeLonHp()
    {
        return Base::template initField<FieldIdx_tmodeLonHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeLonHp
    Field_tmodeLonHp& accessField_tmodeLonHp()
    {
        return Base::template accessField<FieldIdx_tmodeLonHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeLonHp (const version)
    const Field_tmodeLonHp& accessField_tmodeLonHp() const
    {
        return Base::template accessField<FieldIdx_tmodeLonHp>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeHeightHp.
    using Field_tmodeHeightHp = typename CfgValPairMembers<TOpt>::TmodeHeightHp;

    /// @brief Initialize as CfgValPairMembers::TmodeHeightHp
    Field_tmodeHeightHp& initField_tmodeHeightHp()
    {
        return Base::template initField<FieldIdx_tmodeHeightHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeHeightHp
    Field_tmodeHeightHp& accessField_tmodeHeightHp()
    {
        return Base::template accessField<FieldIdx_tmodeHeightHp>();
    }

    /// @brief Access as CfgValPairMembers::TmodeHeightHp (const version)
    const Field_tmodeHeightHp& accessField_tmodeHeightHp() const
    {
        return Base::template accessField<FieldIdx_tmodeHeightHp>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeFixedPosAcc.
    using Field_tmodeFixedPosAcc = typename CfgValPairMembers<TOpt>::TmodeFixedPosAcc;

    /// @brief Initialize as CfgValPairMembers::TmodeFixedPosAcc
    Field_tmodeFixedPosAcc& initField_tmodeFixedPosAcc()
    {
        return Base::template initField<FieldIdx_tmodeFixedPosAcc>();
    }

    /// @brief Access as CfgValPairMembers::TmodeFixedPosAcc
    Field_tmodeFixedPosAcc& accessField_tmodeFixedPosAcc()
    {
        return Base::template accessField<FieldIdx_tmodeFixedPosAcc>();
    }

    /// @brief Access as CfgValPairMembers::TmodeFixedPosAcc (const version)
    const Field_tmodeFixedPosAcc& accessField_tmodeFixedPosAcc() const
    {
        return Base::template accessField<FieldIdx_tmodeFixedPosAcc>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeSvinMinDur.
    using Field_tmodeSvinMinDur = typename CfgValPairMembers<TOpt>::TmodeSvinMinDur;

    /// @brief Initialize as CfgValPairMembers::TmodeSvinMinDur
    Field_tmodeSvinMinDur& initField_tmodeSvinMinDur()
    {
        return Base::template initField<FieldIdx_tmodeSvinMinDur>();
    }

    /// @brief Access as CfgValPairMembers::TmodeSvinMinDur
    Field_tmodeSvinMinDur& accessField_tmodeSvinMinDur()
    {
        return Base::template accessField<FieldIdx_tmodeSvinMinDur>();
    }

    /// @brief Access as CfgValPairMembers::TmodeSvinMinDur (const version)
    const Field_tmodeSvinMinDur& accessField_tmodeSvinMinDur() const
    {
        return Base::template accessField<FieldIdx_tmodeSvinMinDur>();
    }

    /// @brief Member type alias to CfgValPairMembers::TmodeSvinAccLimit.
    using Field_tmodeSvinAccLimit = typename CfgValPairMembers<TOpt>::TmodeSvinAccLimit;

    /// @brief Initialize as CfgValPairMembers::TmodeSvinAccLimit
    Field_tmodeSvinAccLimit& initField_tmodeSvinAccLimit()
    {
        return Base::template initField<FieldIdx_tmodeSvinAccLimit>();
    }

    /// @brief Access as CfgValPairMembers::TmodeSvinAccLimit
    Field_tmodeSvinAccLimit& accessField_tmodeSvinAccLimit()
    {
        return Base::template accessField<FieldIdx_tmodeSvinAccLimit>();
    }

    /// @brief Access as CfgValPairMembers::TmodeSvinAccLimit (const version)
    const Field_tmodeSvinAccLimit& accessField_tmodeSvinAccLimit() const
    {
        return Base::template accessField<FieldIdx_tmodeSvinAccLimit>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpPulseDef.
    using Field_tpPulseDef = typename CfgValPairMembers<TOpt>::TpPulseDef;

    /// @brief Initialize as CfgValPairMembers::TpPulseDef
    Field_tpPulseDef& initField_tpPulseDef()
    {
        return Base::template initField<FieldIdx_tpPulseDef>();
    }

    /// @brief Access as CfgValPairMembers::TpPulseDef
    Field_tpPulseDef& accessField_tpPulseDef()
    {
        return Base::template accessField<FieldIdx_tpPulseDef>();
    }

    /// @brief Access as CfgValPairMembers::TpPulseDef (const version)
    const Field_tpPulseDef& accessField_tpPulseDef() const
    {
        return Base::template accessField<FieldIdx_tpPulseDef>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpPulseLengthDef.
    using Field_tpPulseLengthDef = typename CfgValPairMembers<TOpt>::TpPulseLengthDef;

    /// @brief Initialize as CfgValPairMembers::TpPulseLengthDef
    Field_tpPulseLengthDef& initField_tpPulseLengthDef()
    {
        return Base::template initField<FieldIdx_tpPulseLengthDef>();
    }

    /// @brief Access as CfgValPairMembers::TpPulseLengthDef
    Field_tpPulseLengthDef& accessField_tpPulseLengthDef()
    {
        return Base::template accessField<FieldIdx_tpPulseLengthDef>();
    }

    /// @brief Access as CfgValPairMembers::TpPulseLengthDef (const version)
    const Field_tpPulseLengthDef& accessField_tpPulseLengthDef() const
    {
        return Base::template accessField<FieldIdx_tpPulseLengthDef>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpAntCabledelay.
    using Field_tpAntCabledelay = typename CfgValPairMembers<TOpt>::TpAntCabledelay;

    /// @brief Initialize as CfgValPairMembers::TpAntCabledelay
    Field_tpAntCabledelay& initField_tpAntCabledelay()
    {
        return Base::template initField<FieldIdx_tpAntCabledelay>();
    }

    /// @brief Access as CfgValPairMembers::TpAntCabledelay
    Field_tpAntCabledelay& accessField_tpAntCabledelay()
    {
        return Base::template accessField<FieldIdx_tpAntCabledelay>();
    }

    /// @brief Access as CfgValPairMembers::TpAntCabledelay (const version)
    const Field_tpAntCabledelay& accessField_tpAntCabledelay() const
    {
        return Base::template accessField<FieldIdx_tpAntCabledelay>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpPeriodTp1.
    using Field_tpPeriodTp1 = typename CfgValPairMembers<TOpt>::TpPeriodTp1;

    /// @brief Initialize as CfgValPairMembers::TpPeriodTp1
    Field_tpPeriodTp1& initField_tpPeriodTp1()
    {
        return Base::template initField<FieldIdx_tpPeriodTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpPeriodTp1
    Field_tpPeriodTp1& accessField_tpPeriodTp1()
    {
        return Base::template accessField<FieldIdx_tpPeriodTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpPeriodTp1 (const version)
    const Field_tpPeriodTp1& accessField_tpPeriodTp1() const
    {
        return Base::template accessField<FieldIdx_tpPeriodTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpPeriodLockTp1.
    using Field_tpPeriodLockTp1 = typename CfgValPairMembers<TOpt>::TpPeriodLockTp1;

    /// @brief Initialize as CfgValPairMembers::TpPeriodLockTp1
    Field_tpPeriodLockTp1& initField_tpPeriodLockTp1()
    {
        return Base::template initField<FieldIdx_tpPeriodLockTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpPeriodLockTp1
    Field_tpPeriodLockTp1& accessField_tpPeriodLockTp1()
    {
        return Base::template accessField<FieldIdx_tpPeriodLockTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpPeriodLockTp1 (const version)
    const Field_tpPeriodLockTp1& accessField_tpPeriodLockTp1() const
    {
        return Base::template accessField<FieldIdx_tpPeriodLockTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpFreqTp1.
    using Field_tpFreqTp1 = typename CfgValPairMembers<TOpt>::TpFreqTp1;

    /// @brief Initialize as CfgValPairMembers::TpFreqTp1
    Field_tpFreqTp1& initField_tpFreqTp1()
    {
        return Base::template initField<FieldIdx_tpFreqTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpFreqTp1
    Field_tpFreqTp1& accessField_tpFreqTp1()
    {
        return Base::template accessField<FieldIdx_tpFreqTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpFreqTp1 (const version)
    const Field_tpFreqTp1& accessField_tpFreqTp1() const
    {
        return Base::template accessField<FieldIdx_tpFreqTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpFreqLockTp1.
    using Field_tpFreqLockTp1 = typename CfgValPairMembers<TOpt>::TpFreqLockTp1;

    /// @brief Initialize as CfgValPairMembers::TpFreqLockTp1
    Field_tpFreqLockTp1& initField_tpFreqLockTp1()
    {
        return Base::template initField<FieldIdx_tpFreqLockTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpFreqLockTp1
    Field_tpFreqLockTp1& accessField_tpFreqLockTp1()
    {
        return Base::template accessField<FieldIdx_tpFreqLockTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpFreqLockTp1 (const version)
    const Field_tpFreqLockTp1& accessField_tpFreqLockTp1() const
    {
        return Base::template accessField<FieldIdx_tpFreqLockTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpLenTp1.
    using Field_tpLenTp1 = typename CfgValPairMembers<TOpt>::TpLenTp1;

    /// @brief Initialize as CfgValPairMembers::TpLenTp1
    Field_tpLenTp1& initField_tpLenTp1()
    {
        return Base::template initField<FieldIdx_tpLenTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpLenTp1
    Field_tpLenTp1& accessField_tpLenTp1()
    {
        return Base::template accessField<FieldIdx_tpLenTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpLenTp1 (const version)
    const Field_tpLenTp1& accessField_tpLenTp1() const
    {
        return Base::template accessField<FieldIdx_tpLenTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpLenLockTp1.
    using Field_tpLenLockTp1 = typename CfgValPairMembers<TOpt>::TpLenLockTp1;

    /// @brief Initialize as CfgValPairMembers::TpLenLockTp1
    Field_tpLenLockTp1& initField_tpLenLockTp1()
    {
        return Base::template initField<FieldIdx_tpLenLockTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpLenLockTp1
    Field_tpLenLockTp1& accessField_tpLenLockTp1()
    {
        return Base::template accessField<FieldIdx_tpLenLockTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpLenLockTp1 (const version)
    const Field_tpLenLockTp1& accessField_tpLenLockTp1() const
    {
        return Base::template accessField<FieldIdx_tpLenLockTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpDutyTp1.
    using Field_tpDutyTp1 = typename CfgValPairMembers<TOpt>::TpDutyTp1;

    /// @brief Initialize as CfgValPairMembers::TpDutyTp1
    Field_tpDutyTp1& initField_tpDutyTp1()
    {
        return Base::template initField<FieldIdx_tpDutyTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpDutyTp1
    Field_tpDutyTp1& accessField_tpDutyTp1()
    {
        return Base::template accessField<FieldIdx_tpDutyTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpDutyTp1 (const version)
    const Field_tpDutyTp1& accessField_tpDutyTp1() const
    {
        return Base::template accessField<FieldIdx_tpDutyTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpDutyLockTp1.
    using Field_tpDutyLockTp1 = typename CfgValPairMembers<TOpt>::TpDutyLockTp1;

    /// @brief Initialize as CfgValPairMembers::TpDutyLockTp1
    Field_tpDutyLockTp1& initField_tpDutyLockTp1()
    {
        return Base::template initField<FieldIdx_tpDutyLockTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpDutyLockTp1
    Field_tpDutyLockTp1& accessField_tpDutyLockTp1()
    {
        return Base::template accessField<FieldIdx_tpDutyLockTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpDutyLockTp1 (const version)
    const Field_tpDutyLockTp1& accessField_tpDutyLockTp1() const
    {
        return Base::template accessField<FieldIdx_tpDutyLockTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpUserDelayTp1.
    using Field_tpUserDelayTp1 = typename CfgValPairMembers<TOpt>::TpUserDelayTp1;

    /// @brief Initialize as CfgValPairMembers::TpUserDelayTp1
    Field_tpUserDelayTp1& initField_tpUserDelayTp1()
    {
        return Base::template initField<FieldIdx_tpUserDelayTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpUserDelayTp1
    Field_tpUserDelayTp1& accessField_tpUserDelayTp1()
    {
        return Base::template accessField<FieldIdx_tpUserDelayTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpUserDelayTp1 (const version)
    const Field_tpUserDelayTp1& accessField_tpUserDelayTp1() const
    {
        return Base::template accessField<FieldIdx_tpUserDelayTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpTp1Ena.
    using Field_tpTp1Ena = typename CfgValPairMembers<TOpt>::TpTp1Ena;

    /// @brief Initialize as CfgValPairMembers::TpTp1Ena
    Field_tpTp1Ena& initField_tpTp1Ena()
    {
        return Base::template initField<FieldIdx_tpTp1Ena>();
    }

    /// @brief Access as CfgValPairMembers::TpTp1Ena
    Field_tpTp1Ena& accessField_tpTp1Ena()
    {
        return Base::template accessField<FieldIdx_tpTp1Ena>();
    }

    /// @brief Access as CfgValPairMembers::TpTp1Ena (const version)
    const Field_tpTp1Ena& accessField_tpTp1Ena() const
    {
        return Base::template accessField<FieldIdx_tpTp1Ena>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpSyncGnssTp1.
    using Field_tpSyncGnssTp1 = typename CfgValPairMembers<TOpt>::TpSyncGnssTp1;

    /// @brief Initialize as CfgValPairMembers::TpSyncGnssTp1
    Field_tpSyncGnssTp1& initField_tpSyncGnssTp1()
    {
        return Base::template initField<FieldIdx_tpSyncGnssTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpSyncGnssTp1
    Field_tpSyncGnssTp1& accessField_tpSyncGnssTp1()
    {
        return Base::template accessField<FieldIdx_tpSyncGnssTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpSyncGnssTp1 (const version)
    const Field_tpSyncGnssTp1& accessField_tpSyncGnssTp1() const
    {
        return Base::template accessField<FieldIdx_tpSyncGnssTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpUseLockedTp1.
    using Field_tpUseLockedTp1 = typename CfgValPairMembers<TOpt>::TpUseLockedTp1;

    /// @brief Initialize as CfgValPairMembers::TpUseLockedTp1
    Field_tpUseLockedTp1& initField_tpUseLockedTp1()
    {
        return Base::template initField<FieldIdx_tpUseLockedTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpUseLockedTp1
    Field_tpUseLockedTp1& accessField_tpUseLockedTp1()
    {
        return Base::template accessField<FieldIdx_tpUseLockedTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpUseLockedTp1 (const version)
    const Field_tpUseLockedTp1& accessField_tpUseLockedTp1() const
    {
        return Base::template accessField<FieldIdx_tpUseLockedTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpAlignToTowTp1.
    using Field_tpAlignToTowTp1 = typename CfgValPairMembers<TOpt>::TpAlignToTowTp1;

    /// @brief Initialize as CfgValPairMembers::TpAlignToTowTp1
    Field_tpAlignToTowTp1& initField_tpAlignToTowTp1()
    {
        return Base::template initField<FieldIdx_tpAlignToTowTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpAlignToTowTp1
    Field_tpAlignToTowTp1& accessField_tpAlignToTowTp1()
    {
        return Base::template accessField<FieldIdx_tpAlignToTowTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpAlignToTowTp1 (const version)
    const Field_tpAlignToTowTp1& accessField_tpAlignToTowTp1() const
    {
        return Base::template accessField<FieldIdx_tpAlignToTowTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpPolTp1.
    using Field_tpPolTp1 = typename CfgValPairMembers<TOpt>::TpPolTp1;

    /// @brief Initialize as CfgValPairMembers::TpPolTp1
    Field_tpPolTp1& initField_tpPolTp1()
    {
        return Base::template initField<FieldIdx_tpPolTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpPolTp1
    Field_tpPolTp1& accessField_tpPolTp1()
    {
        return Base::template accessField<FieldIdx_tpPolTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpPolTp1 (const version)
    const Field_tpPolTp1& accessField_tpPolTp1() const
    {
        return Base::template accessField<FieldIdx_tpPolTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TpTimegridTp1.
    using Field_tpTimegridTp1 = typename CfgValPairMembers<TOpt>::TpTimegridTp1;

    /// @brief Initialize as CfgValPairMembers::TpTimegridTp1
    Field_tpTimegridTp1& initField_tpTimegridTp1()
    {
        return Base::template initField<FieldIdx_tpTimegridTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpTimegridTp1
    Field_tpTimegridTp1& accessField_tpTimegridTp1()
    {
        return Base::template accessField<FieldIdx_tpTimegridTp1>();
    }

    /// @brief Access as CfgValPairMembers::TpTimegridTp1 (const version)
    const Field_tpTimegridTp1& accessField_tpTimegridTp1() const
    {
        return Base::template accessField<FieldIdx_tpTimegridTp1>();
    }

    /// @brief Member type alias to CfgValPairMembers::TxreadyEnabled.
    using Field_txreadyEnabled = typename CfgValPairMembers<TOpt>::TxreadyEnabled;

    /// @brief Initialize as CfgValPairMembers::TxreadyEnabled
    Field_txreadyEnabled& initField_txreadyEnabled()
    {
        return Base::template initField<FieldIdx_txreadyEnabled>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyEnabled
    Field_txreadyEnabled& accessField_txreadyEnabled()
    {
        return Base::template accessField<FieldIdx_txreadyEnabled>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyEnabled (const version)
    const Field_txreadyEnabled& accessField_txreadyEnabled() const
    {
        return Base::template accessField<FieldIdx_txreadyEnabled>();
    }

    /// @brief Member type alias to CfgValPairMembers::TxreadyPolarity.
    using Field_txreadyPolarity = typename CfgValPairMembers<TOpt>::TxreadyPolarity;

    /// @brief Initialize as CfgValPairMembers::TxreadyPolarity
    Field_txreadyPolarity& initField_txreadyPolarity()
    {
        return Base::template initField<FieldIdx_txreadyPolarity>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyPolarity
    Field_txreadyPolarity& accessField_txreadyPolarity()
    {
        return Base::template accessField<FieldIdx_txreadyPolarity>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyPolarity (const version)
    const Field_txreadyPolarity& accessField_txreadyPolarity() const
    {
        return Base::template accessField<FieldIdx_txreadyPolarity>();
    }

    /// @brief Member type alias to CfgValPairMembers::TxreadyPin.
    using Field_txreadyPin = typename CfgValPairMembers<TOpt>::TxreadyPin;

    /// @brief Initialize as CfgValPairMembers::TxreadyPin
    Field_txreadyPin& initField_txreadyPin()
    {
        return Base::template initField<FieldIdx_txreadyPin>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyPin
    Field_txreadyPin& accessField_txreadyPin()
    {
        return Base::template accessField<FieldIdx_txreadyPin>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyPin (const version)
    const Field_txreadyPin& accessField_txreadyPin() const
    {
        return Base::template accessField<FieldIdx_txreadyPin>();
    }

    /// @brief Member type alias to CfgValPairMembers::TxreadyThreshold.
    using Field_txreadyThreshold = typename CfgValPairMembers<TOpt>::TxreadyThreshold;

    /// @brief Initialize as CfgValPairMembers::TxreadyThreshold
    Field_txreadyThreshold& initField_txreadyThreshold()
    {
        return Base::template initField<FieldIdx_txreadyThreshold>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyThreshold
    Field_txreadyThreshold& accessField_txreadyThreshold()
    {
        return Base::template accessField<FieldIdx_txreadyThreshold>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyThreshold (const version)
    const Field_txreadyThreshold& accessField_txreadyThreshold() const
    {
        return Base::template accessField<FieldIdx_txreadyThreshold>();
    }

    /// @brief Member type alias to CfgValPairMembers::TxreadyInterface.
    using Field_txreadyInterface = typename CfgValPairMembers<TOpt>::TxreadyInterface;

    /// @brief Initialize as CfgValPairMembers::TxreadyInterface
    Field_txreadyInterface& initField_txreadyInterface()
    {
        return Base::template initField<FieldIdx_txreadyInterface>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyInterface
    Field_txreadyInterface& accessField_txreadyInterface()
    {
        return Base::template accessField<FieldIdx_txreadyInterface>();
    }

    /// @brief Access as CfgValPairMembers::TxreadyInterface (const version)
    const Field_txreadyInterface& accessField_txreadyInterface() const
    {
        return Base::template accessField<FieldIdx_txreadyInterface>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1Baudrate.
    using Field_uart1Baudrate = typename CfgValPairMembers<TOpt>::Uart1Baudrate;

    /// @brief Initialize as CfgValPairMembers::Uart1Baudrate
    Field_uart1Baudrate& initField_uart1Baudrate()
    {
        return Base::template initField<FieldIdx_uart1Baudrate>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Baudrate
    Field_uart1Baudrate& accessField_uart1Baudrate()
    {
        return Base::template accessField<FieldIdx_uart1Baudrate>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Baudrate (const version)
    const Field_uart1Baudrate& accessField_uart1Baudrate() const
    {
        return Base::template accessField<FieldIdx_uart1Baudrate>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1Stopbits.
    using Field_uart1Stopbits = typename CfgValPairMembers<TOpt>::Uart1Stopbits;

    /// @brief Initialize as CfgValPairMembers::Uart1Stopbits
    Field_uart1Stopbits& initField_uart1Stopbits()
    {
        return Base::template initField<FieldIdx_uart1Stopbits>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Stopbits
    Field_uart1Stopbits& accessField_uart1Stopbits()
    {
        return Base::template accessField<FieldIdx_uart1Stopbits>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Stopbits (const version)
    const Field_uart1Stopbits& accessField_uart1Stopbits() const
    {
        return Base::template accessField<FieldIdx_uart1Stopbits>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1Databits.
    using Field_uart1Databits = typename CfgValPairMembers<TOpt>::Uart1Databits;

    /// @brief Initialize as CfgValPairMembers::Uart1Databits
    Field_uart1Databits& initField_uart1Databits()
    {
        return Base::template initField<FieldIdx_uart1Databits>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Databits
    Field_uart1Databits& accessField_uart1Databits()
    {
        return Base::template accessField<FieldIdx_uart1Databits>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Databits (const version)
    const Field_uart1Databits& accessField_uart1Databits() const
    {
        return Base::template accessField<FieldIdx_uart1Databits>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1Parity.
    using Field_uart1Parity = typename CfgValPairMembers<TOpt>::Uart1Parity;

    /// @brief Initialize as CfgValPairMembers::Uart1Parity
    Field_uart1Parity& initField_uart1Parity()
    {
        return Base::template initField<FieldIdx_uart1Parity>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Parity
    Field_uart1Parity& accessField_uart1Parity()
    {
        return Base::template accessField<FieldIdx_uart1Parity>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Parity (const version)
    const Field_uart1Parity& accessField_uart1Parity() const
    {
        return Base::template accessField<FieldIdx_uart1Parity>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1Enabled.
    using Field_uart1Enabled = typename CfgValPairMembers<TOpt>::Uart1Enabled;

    /// @brief Initialize as CfgValPairMembers::Uart1Enabled
    Field_uart1Enabled& initField_uart1Enabled()
    {
        return Base::template initField<FieldIdx_uart1Enabled>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Enabled
    Field_uart1Enabled& accessField_uart1Enabled()
    {
        return Base::template accessField<FieldIdx_uart1Enabled>();
    }

    /// @brief Access as CfgValPairMembers::Uart1Enabled (const version)
    const Field_uart1Enabled& accessField_uart1Enabled() const
    {
        return Base::template accessField<FieldIdx_uart1Enabled>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1inprotUbx.
    using Field_uart1inprotUbx = typename CfgValPairMembers<TOpt>::Uart1inprotUbx;

    /// @brief Initialize as CfgValPairMembers::Uart1inprotUbx
    Field_uart1inprotUbx& initField_uart1inprotUbx()
    {
        return Base::template initField<FieldIdx_uart1inprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::Uart1inprotUbx
    Field_uart1inprotUbx& accessField_uart1inprotUbx()
    {
        return Base::template accessField<FieldIdx_uart1inprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::Uart1inprotUbx (const version)
    const Field_uart1inprotUbx& accessField_uart1inprotUbx() const
    {
        return Base::template accessField<FieldIdx_uart1inprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1inprotNmea.
    using Field_uart1inprotNmea = typename CfgValPairMembers<TOpt>::Uart1inprotNmea;

    /// @brief Initialize as CfgValPairMembers::Uart1inprotNmea
    Field_uart1inprotNmea& initField_uart1inprotNmea()
    {
        return Base::template initField<FieldIdx_uart1inprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::Uart1inprotNmea
    Field_uart1inprotNmea& accessField_uart1inprotNmea()
    {
        return Base::template accessField<FieldIdx_uart1inprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::Uart1inprotNmea (const version)
    const Field_uart1inprotNmea& accessField_uart1inprotNmea() const
    {
        return Base::template accessField<FieldIdx_uart1inprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1inprotRtcm3x.
    using Field_uart1inprotRtcm3x = typename CfgValPairMembers<TOpt>::Uart1inprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::Uart1inprotRtcm3x
    Field_uart1inprotRtcm3x& initField_uart1inprotRtcm3x()
    {
        return Base::template initField<FieldIdx_uart1inprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::Uart1inprotRtcm3x
    Field_uart1inprotRtcm3x& accessField_uart1inprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_uart1inprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::Uart1inprotRtcm3x (const version)
    const Field_uart1inprotRtcm3x& accessField_uart1inprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_uart1inprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1outprotUbx.
    using Field_uart1outprotUbx = typename CfgValPairMembers<TOpt>::Uart1outprotUbx;

    /// @brief Initialize as CfgValPairMembers::Uart1outprotUbx
    Field_uart1outprotUbx& initField_uart1outprotUbx()
    {
        return Base::template initField<FieldIdx_uart1outprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::Uart1outprotUbx
    Field_uart1outprotUbx& accessField_uart1outprotUbx()
    {
        return Base::template accessField<FieldIdx_uart1outprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::Uart1outprotUbx (const version)
    const Field_uart1outprotUbx& accessField_uart1outprotUbx() const
    {
        return Base::template accessField<FieldIdx_uart1outprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1outprotNmea.
    using Field_uart1outprotNmea = typename CfgValPairMembers<TOpt>::Uart1outprotNmea;

    /// @brief Initialize as CfgValPairMembers::Uart1outprotNmea
    Field_uart1outprotNmea& initField_uart1outprotNmea()
    {
        return Base::template initField<FieldIdx_uart1outprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::Uart1outprotNmea
    Field_uart1outprotNmea& accessField_uart1outprotNmea()
    {
        return Base::template accessField<FieldIdx_uart1outprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::Uart1outprotNmea (const version)
    const Field_uart1outprotNmea& accessField_uart1outprotNmea() const
    {
        return Base::template accessField<FieldIdx_uart1outprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart1outprotRtcm3x.
    using Field_uart1outprotRtcm3x = typename CfgValPairMembers<TOpt>::Uart1outprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::Uart1outprotRtcm3x
    Field_uart1outprotRtcm3x& initField_uart1outprotRtcm3x()
    {
        return Base::template initField<FieldIdx_uart1outprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::Uart1outprotRtcm3x
    Field_uart1outprotRtcm3x& accessField_uart1outprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_uart1outprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::Uart1outprotRtcm3x (const version)
    const Field_uart1outprotRtcm3x& accessField_uart1outprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_uart1outprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2Baudrate.
    using Field_uart2Baudrate = typename CfgValPairMembers<TOpt>::Uart2Baudrate;

    /// @brief Initialize as CfgValPairMembers::Uart2Baudrate
    Field_uart2Baudrate& initField_uart2Baudrate()
    {
        return Base::template initField<FieldIdx_uart2Baudrate>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Baudrate
    Field_uart2Baudrate& accessField_uart2Baudrate()
    {
        return Base::template accessField<FieldIdx_uart2Baudrate>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Baudrate (const version)
    const Field_uart2Baudrate& accessField_uart2Baudrate() const
    {
        return Base::template accessField<FieldIdx_uart2Baudrate>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2Stopbits.
    using Field_uart2Stopbits = typename CfgValPairMembers<TOpt>::Uart2Stopbits;

    /// @brief Initialize as CfgValPairMembers::Uart2Stopbits
    Field_uart2Stopbits& initField_uart2Stopbits()
    {
        return Base::template initField<FieldIdx_uart2Stopbits>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Stopbits
    Field_uart2Stopbits& accessField_uart2Stopbits()
    {
        return Base::template accessField<FieldIdx_uart2Stopbits>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Stopbits (const version)
    const Field_uart2Stopbits& accessField_uart2Stopbits() const
    {
        return Base::template accessField<FieldIdx_uart2Stopbits>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2Databits.
    using Field_uart2Databits = typename CfgValPairMembers<TOpt>::Uart2Databits;

    /// @brief Initialize as CfgValPairMembers::Uart2Databits
    Field_uart2Databits& initField_uart2Databits()
    {
        return Base::template initField<FieldIdx_uart2Databits>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Databits
    Field_uart2Databits& accessField_uart2Databits()
    {
        return Base::template accessField<FieldIdx_uart2Databits>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Databits (const version)
    const Field_uart2Databits& accessField_uart2Databits() const
    {
        return Base::template accessField<FieldIdx_uart2Databits>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2Parity.
    using Field_uart2Parity = typename CfgValPairMembers<TOpt>::Uart2Parity;

    /// @brief Initialize as CfgValPairMembers::Uart2Parity
    Field_uart2Parity& initField_uart2Parity()
    {
        return Base::template initField<FieldIdx_uart2Parity>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Parity
    Field_uart2Parity& accessField_uart2Parity()
    {
        return Base::template accessField<FieldIdx_uart2Parity>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Parity (const version)
    const Field_uart2Parity& accessField_uart2Parity() const
    {
        return Base::template accessField<FieldIdx_uart2Parity>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2Enabled.
    using Field_uart2Enabled = typename CfgValPairMembers<TOpt>::Uart2Enabled;

    /// @brief Initialize as CfgValPairMembers::Uart2Enabled
    Field_uart2Enabled& initField_uart2Enabled()
    {
        return Base::template initField<FieldIdx_uart2Enabled>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Enabled
    Field_uart2Enabled& accessField_uart2Enabled()
    {
        return Base::template accessField<FieldIdx_uart2Enabled>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Enabled (const version)
    const Field_uart2Enabled& accessField_uart2Enabled() const
    {
        return Base::template accessField<FieldIdx_uart2Enabled>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2Remap.
    using Field_uart2Remap = typename CfgValPairMembers<TOpt>::Uart2Remap;

    /// @brief Initialize as CfgValPairMembers::Uart2Remap
    Field_uart2Remap& initField_uart2Remap()
    {
        return Base::template initField<FieldIdx_uart2Remap>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Remap
    Field_uart2Remap& accessField_uart2Remap()
    {
        return Base::template accessField<FieldIdx_uart2Remap>();
    }

    /// @brief Access as CfgValPairMembers::Uart2Remap (const version)
    const Field_uart2Remap& accessField_uart2Remap() const
    {
        return Base::template accessField<FieldIdx_uart2Remap>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2inprotUbx.
    using Field_uart2inprotUbx = typename CfgValPairMembers<TOpt>::Uart2inprotUbx;

    /// @brief Initialize as CfgValPairMembers::Uart2inprotUbx
    Field_uart2inprotUbx& initField_uart2inprotUbx()
    {
        return Base::template initField<FieldIdx_uart2inprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::Uart2inprotUbx
    Field_uart2inprotUbx& accessField_uart2inprotUbx()
    {
        return Base::template accessField<FieldIdx_uart2inprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::Uart2inprotUbx (const version)
    const Field_uart2inprotUbx& accessField_uart2inprotUbx() const
    {
        return Base::template accessField<FieldIdx_uart2inprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2inprotNmea.
    using Field_uart2inprotNmea = typename CfgValPairMembers<TOpt>::Uart2inprotNmea;

    /// @brief Initialize as CfgValPairMembers::Uart2inprotNmea
    Field_uart2inprotNmea& initField_uart2inprotNmea()
    {
        return Base::template initField<FieldIdx_uart2inprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::Uart2inprotNmea
    Field_uart2inprotNmea& accessField_uart2inprotNmea()
    {
        return Base::template accessField<FieldIdx_uart2inprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::Uart2inprotNmea (const version)
    const Field_uart2inprotNmea& accessField_uart2inprotNmea() const
    {
        return Base::template accessField<FieldIdx_uart2inprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2inprotRtcm3x.
    using Field_uart2inprotRtcm3x = typename CfgValPairMembers<TOpt>::Uart2inprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::Uart2inprotRtcm3x
    Field_uart2inprotRtcm3x& initField_uart2inprotRtcm3x()
    {
        return Base::template initField<FieldIdx_uart2inprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::Uart2inprotRtcm3x
    Field_uart2inprotRtcm3x& accessField_uart2inprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_uart2inprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::Uart2inprotRtcm3x (const version)
    const Field_uart2inprotRtcm3x& accessField_uart2inprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_uart2inprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2outprotUbx.
    using Field_uart2outprotUbx = typename CfgValPairMembers<TOpt>::Uart2outprotUbx;

    /// @brief Initialize as CfgValPairMembers::Uart2outprotUbx
    Field_uart2outprotUbx& initField_uart2outprotUbx()
    {
        return Base::template initField<FieldIdx_uart2outprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::Uart2outprotUbx
    Field_uart2outprotUbx& accessField_uart2outprotUbx()
    {
        return Base::template accessField<FieldIdx_uart2outprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::Uart2outprotUbx (const version)
    const Field_uart2outprotUbx& accessField_uart2outprotUbx() const
    {
        return Base::template accessField<FieldIdx_uart2outprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2outprotNmea.
    using Field_uart2outprotNmea = typename CfgValPairMembers<TOpt>::Uart2outprotNmea;

    /// @brief Initialize as CfgValPairMembers::Uart2outprotNmea
    Field_uart2outprotNmea& initField_uart2outprotNmea()
    {
        return Base::template initField<FieldIdx_uart2outprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::Uart2outprotNmea
    Field_uart2outprotNmea& accessField_uart2outprotNmea()
    {
        return Base::template accessField<FieldIdx_uart2outprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::Uart2outprotNmea (const version)
    const Field_uart2outprotNmea& accessField_uart2outprotNmea() const
    {
        return Base::template accessField<FieldIdx_uart2outprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::Uart2outprotRtcm3x.
    using Field_uart2outprotRtcm3x = typename CfgValPairMembers<TOpt>::Uart2outprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::Uart2outprotRtcm3x
    Field_uart2outprotRtcm3x& initField_uart2outprotRtcm3x()
    {
        return Base::template initField<FieldIdx_uart2outprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::Uart2outprotRtcm3x
    Field_uart2outprotRtcm3x& accessField_uart2outprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_uart2outprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::Uart2outprotRtcm3x (const version)
    const Field_uart2outprotRtcm3x& accessField_uart2outprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_uart2outprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbEnabled.
    using Field_usbEnabled = typename CfgValPairMembers<TOpt>::UsbEnabled;

    /// @brief Initialize as CfgValPairMembers::UsbEnabled
    Field_usbEnabled& initField_usbEnabled()
    {
        return Base::template initField<FieldIdx_usbEnabled>();
    }

    /// @brief Access as CfgValPairMembers::UsbEnabled
    Field_usbEnabled& accessField_usbEnabled()
    {
        return Base::template accessField<FieldIdx_usbEnabled>();
    }

    /// @brief Access as CfgValPairMembers::UsbEnabled (const version)
    const Field_usbEnabled& accessField_usbEnabled() const
    {
        return Base::template accessField<FieldIdx_usbEnabled>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbSelfpow.
    using Field_usbSelfpow = typename CfgValPairMembers<TOpt>::UsbSelfpow;

    /// @brief Initialize as CfgValPairMembers::UsbSelfpow
    Field_usbSelfpow& initField_usbSelfpow()
    {
        return Base::template initField<FieldIdx_usbSelfpow>();
    }

    /// @brief Access as CfgValPairMembers::UsbSelfpow
    Field_usbSelfpow& accessField_usbSelfpow()
    {
        return Base::template accessField<FieldIdx_usbSelfpow>();
    }

    /// @brief Access as CfgValPairMembers::UsbSelfpow (const version)
    const Field_usbSelfpow& accessField_usbSelfpow() const
    {
        return Base::template accessField<FieldIdx_usbSelfpow>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbVendorId.
    using Field_usbVendorId = typename CfgValPairMembers<TOpt>::UsbVendorId;

    /// @brief Initialize as CfgValPairMembers::UsbVendorId
    Field_usbVendorId& initField_usbVendorId()
    {
        return Base::template initField<FieldIdx_usbVendorId>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorId
    Field_usbVendorId& accessField_usbVendorId()
    {
        return Base::template accessField<FieldIdx_usbVendorId>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorId (const version)
    const Field_usbVendorId& accessField_usbVendorId() const
    {
        return Base::template accessField<FieldIdx_usbVendorId>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbProductId.
    using Field_usbProductId = typename CfgValPairMembers<TOpt>::UsbProductId;

    /// @brief Initialize as CfgValPairMembers::UsbProductId
    Field_usbProductId& initField_usbProductId()
    {
        return Base::template initField<FieldIdx_usbProductId>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductId
    Field_usbProductId& accessField_usbProductId()
    {
        return Base::template accessField<FieldIdx_usbProductId>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductId (const version)
    const Field_usbProductId& accessField_usbProductId() const
    {
        return Base::template accessField<FieldIdx_usbProductId>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbPower.
    using Field_usbPower = typename CfgValPairMembers<TOpt>::UsbPower;

    /// @brief Initialize as CfgValPairMembers::UsbPower
    Field_usbPower& initField_usbPower()
    {
        return Base::template initField<FieldIdx_usbPower>();
    }

    /// @brief Access as CfgValPairMembers::UsbPower
    Field_usbPower& accessField_usbPower()
    {
        return Base::template accessField<FieldIdx_usbPower>();
    }

    /// @brief Access as CfgValPairMembers::UsbPower (const version)
    const Field_usbPower& accessField_usbPower() const
    {
        return Base::template accessField<FieldIdx_usbPower>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbVendorStr0.
    using Field_usbVendorStr0 = typename CfgValPairMembers<TOpt>::UsbVendorStr0;

    /// @brief Initialize as CfgValPairMembers::UsbVendorStr0
    Field_usbVendorStr0& initField_usbVendorStr0()
    {
        return Base::template initField<FieldIdx_usbVendorStr0>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorStr0
    Field_usbVendorStr0& accessField_usbVendorStr0()
    {
        return Base::template accessField<FieldIdx_usbVendorStr0>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorStr0 (const version)
    const Field_usbVendorStr0& accessField_usbVendorStr0() const
    {
        return Base::template accessField<FieldIdx_usbVendorStr0>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbVendorStr1.
    using Field_usbVendorStr1 = typename CfgValPairMembers<TOpt>::UsbVendorStr1;

    /// @brief Initialize as CfgValPairMembers::UsbVendorStr1
    Field_usbVendorStr1& initField_usbVendorStr1()
    {
        return Base::template initField<FieldIdx_usbVendorStr1>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorStr1
    Field_usbVendorStr1& accessField_usbVendorStr1()
    {
        return Base::template accessField<FieldIdx_usbVendorStr1>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorStr1 (const version)
    const Field_usbVendorStr1& accessField_usbVendorStr1() const
    {
        return Base::template accessField<FieldIdx_usbVendorStr1>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbVendorStr2.
    using Field_usbVendorStr2 = typename CfgValPairMembers<TOpt>::UsbVendorStr2;

    /// @brief Initialize as CfgValPairMembers::UsbVendorStr2
    Field_usbVendorStr2& initField_usbVendorStr2()
    {
        return Base::template initField<FieldIdx_usbVendorStr2>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorStr2
    Field_usbVendorStr2& accessField_usbVendorStr2()
    {
        return Base::template accessField<FieldIdx_usbVendorStr2>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorStr2 (const version)
    const Field_usbVendorStr2& accessField_usbVendorStr2() const
    {
        return Base::template accessField<FieldIdx_usbVendorStr2>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbVendorStr3.
    using Field_usbVendorStr3 = typename CfgValPairMembers<TOpt>::UsbVendorStr3;

    /// @brief Initialize as CfgValPairMembers::UsbVendorStr3
    Field_usbVendorStr3& initField_usbVendorStr3()
    {
        return Base::template initField<FieldIdx_usbVendorStr3>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorStr3
    Field_usbVendorStr3& accessField_usbVendorStr3()
    {
        return Base::template accessField<FieldIdx_usbVendorStr3>();
    }

    /// @brief Access as CfgValPairMembers::UsbVendorStr3 (const version)
    const Field_usbVendorStr3& accessField_usbVendorStr3() const
    {
        return Base::template accessField<FieldIdx_usbVendorStr3>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbProductStr0.
    using Field_usbProductStr0 = typename CfgValPairMembers<TOpt>::UsbProductStr0;

    /// @brief Initialize as CfgValPairMembers::UsbProductStr0
    Field_usbProductStr0& initField_usbProductStr0()
    {
        return Base::template initField<FieldIdx_usbProductStr0>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductStr0
    Field_usbProductStr0& accessField_usbProductStr0()
    {
        return Base::template accessField<FieldIdx_usbProductStr0>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductStr0 (const version)
    const Field_usbProductStr0& accessField_usbProductStr0() const
    {
        return Base::template accessField<FieldIdx_usbProductStr0>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbProductStr1.
    using Field_usbProductStr1 = typename CfgValPairMembers<TOpt>::UsbProductStr1;

    /// @brief Initialize as CfgValPairMembers::UsbProductStr1
    Field_usbProductStr1& initField_usbProductStr1()
    {
        return Base::template initField<FieldIdx_usbProductStr1>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductStr1
    Field_usbProductStr1& accessField_usbProductStr1()
    {
        return Base::template accessField<FieldIdx_usbProductStr1>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductStr1 (const version)
    const Field_usbProductStr1& accessField_usbProductStr1() const
    {
        return Base::template accessField<FieldIdx_usbProductStr1>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbProductStr2.
    using Field_usbProductStr2 = typename CfgValPairMembers<TOpt>::UsbProductStr2;

    /// @brief Initialize as CfgValPairMembers::UsbProductStr2
    Field_usbProductStr2& initField_usbProductStr2()
    {
        return Base::template initField<FieldIdx_usbProductStr2>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductStr2
    Field_usbProductStr2& accessField_usbProductStr2()
    {
        return Base::template accessField<FieldIdx_usbProductStr2>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductStr2 (const version)
    const Field_usbProductStr2& accessField_usbProductStr2() const
    {
        return Base::template accessField<FieldIdx_usbProductStr2>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbProductStr3.
    using Field_usbProductStr3 = typename CfgValPairMembers<TOpt>::UsbProductStr3;

    /// @brief Initialize as CfgValPairMembers::UsbProductStr3
    Field_usbProductStr3& initField_usbProductStr3()
    {
        return Base::template initField<FieldIdx_usbProductStr3>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductStr3
    Field_usbProductStr3& accessField_usbProductStr3()
    {
        return Base::template accessField<FieldIdx_usbProductStr3>();
    }

    /// @brief Access as CfgValPairMembers::UsbProductStr3 (const version)
    const Field_usbProductStr3& accessField_usbProductStr3() const
    {
        return Base::template accessField<FieldIdx_usbProductStr3>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbSerialNoStr0.
    using Field_usbSerialNoStr0 = typename CfgValPairMembers<TOpt>::UsbSerialNoStr0;

    /// @brief Initialize as CfgValPairMembers::UsbSerialNoStr0
    Field_usbSerialNoStr0& initField_usbSerialNoStr0()
    {
        return Base::template initField<FieldIdx_usbSerialNoStr0>();
    }

    /// @brief Access as CfgValPairMembers::UsbSerialNoStr0
    Field_usbSerialNoStr0& accessField_usbSerialNoStr0()
    {
        return Base::template accessField<FieldIdx_usbSerialNoStr0>();
    }

    /// @brief Access as CfgValPairMembers::UsbSerialNoStr0 (const version)
    const Field_usbSerialNoStr0& accessField_usbSerialNoStr0() const
    {
        return Base::template accessField<FieldIdx_usbSerialNoStr0>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbSerialNoStr1.
    using Field_usbSerialNoStr1 = typename CfgValPairMembers<TOpt>::UsbSerialNoStr1;

    /// @brief Initialize as CfgValPairMembers::UsbSerialNoStr1
    Field_usbSerialNoStr1& initField_usbSerialNoStr1()
    {
        return Base::template initField<FieldIdx_usbSerialNoStr1>();
    }

    /// @brief Access as CfgValPairMembers::UsbSerialNoStr1
    Field_usbSerialNoStr1& accessField_usbSerialNoStr1()
    {
        return Base::template accessField<FieldIdx_usbSerialNoStr1>();
    }

    /// @brief Access as CfgValPairMembers::UsbSerialNoStr1 (const version)
    const Field_usbSerialNoStr1& accessField_usbSerialNoStr1() const
    {
        return Base::template accessField<FieldIdx_usbSerialNoStr1>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbSerialNoStr2.
    using Field_usbSerialNoStr2 = typename CfgValPairMembers<TOpt>::UsbSerialNoStr2;

    /// @brief Initialize as CfgValPairMembers::UsbSerialNoStr2
    Field_usbSerialNoStr2& initField_usbSerialNoStr2()
    {
        return Base::template initField<FieldIdx_usbSerialNoStr2>();
    }

    /// @brief Access as CfgValPairMembers::UsbSerialNoStr2
    Field_usbSerialNoStr2& accessField_usbSerialNoStr2()
    {
        return Base::template accessField<FieldIdx_usbSerialNoStr2>();
    }

    /// @brief Access as CfgValPairMembers::UsbSerialNoStr2 (const version)
    const Field_usbSerialNoStr2& accessField_usbSerialNoStr2() const
    {
        return Base::template accessField<FieldIdx_usbSerialNoStr2>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbSerialNoStr3.
    using Field_usbSerialNoStr3 = typename CfgValPairMembers<TOpt>::UsbSerialNoStr3;

    /// @brief Initialize as CfgValPairMembers::UsbSerialNoStr3
    Field_usbSerialNoStr3& initField_usbSerialNoStr3()
    {
        return Base::template initField<FieldIdx_usbSerialNoStr3>();
    }

    /// @brief Access as CfgValPairMembers::UsbSerialNoStr3
    Field_usbSerialNoStr3& accessField_usbSerialNoStr3()
    {
        return Base::template accessField<FieldIdx_usbSerialNoStr3>();
    }

    /// @brief Access as CfgValPairMembers::UsbSerialNoStr3 (const version)
    const Field_usbSerialNoStr3& accessField_usbSerialNoStr3() const
    {
        return Base::template accessField<FieldIdx_usbSerialNoStr3>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbinprotUbx.
    using Field_usbinprotUbx = typename CfgValPairMembers<TOpt>::UsbinprotUbx;

    /// @brief Initialize as CfgValPairMembers::UsbinprotUbx
    Field_usbinprotUbx& initField_usbinprotUbx()
    {
        return Base::template initField<FieldIdx_usbinprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::UsbinprotUbx
    Field_usbinprotUbx& accessField_usbinprotUbx()
    {
        return Base::template accessField<FieldIdx_usbinprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::UsbinprotUbx (const version)
    const Field_usbinprotUbx& accessField_usbinprotUbx() const
    {
        return Base::template accessField<FieldIdx_usbinprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbinprotNmea.
    using Field_usbinprotNmea = typename CfgValPairMembers<TOpt>::UsbinprotNmea;

    /// @brief Initialize as CfgValPairMembers::UsbinprotNmea
    Field_usbinprotNmea& initField_usbinprotNmea()
    {
        return Base::template initField<FieldIdx_usbinprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::UsbinprotNmea
    Field_usbinprotNmea& accessField_usbinprotNmea()
    {
        return Base::template accessField<FieldIdx_usbinprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::UsbinprotNmea (const version)
    const Field_usbinprotNmea& accessField_usbinprotNmea() const
    {
        return Base::template accessField<FieldIdx_usbinprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsbinprotRtcm3x.
    using Field_usbinprotRtcm3x = typename CfgValPairMembers<TOpt>::UsbinprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::UsbinprotRtcm3x
    Field_usbinprotRtcm3x& initField_usbinprotRtcm3x()
    {
        return Base::template initField<FieldIdx_usbinprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::UsbinprotRtcm3x
    Field_usbinprotRtcm3x& accessField_usbinprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_usbinprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::UsbinprotRtcm3x (const version)
    const Field_usbinprotRtcm3x& accessField_usbinprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_usbinprotRtcm3x>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsboutprotUbx.
    using Field_usboutprotUbx = typename CfgValPairMembers<TOpt>::UsboutprotUbx;

    /// @brief Initialize as CfgValPairMembers::UsboutprotUbx
    Field_usboutprotUbx& initField_usboutprotUbx()
    {
        return Base::template initField<FieldIdx_usboutprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::UsboutprotUbx
    Field_usboutprotUbx& accessField_usboutprotUbx()
    {
        return Base::template accessField<FieldIdx_usboutprotUbx>();
    }

    /// @brief Access as CfgValPairMembers::UsboutprotUbx (const version)
    const Field_usboutprotUbx& accessField_usboutprotUbx() const
    {
        return Base::template accessField<FieldIdx_usboutprotUbx>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsboutprotNmea.
    using Field_usboutprotNmea = typename CfgValPairMembers<TOpt>::UsboutprotNmea;

    /// @brief Initialize as CfgValPairMembers::UsboutprotNmea
    Field_usboutprotNmea& initField_usboutprotNmea()
    {
        return Base::template initField<FieldIdx_usboutprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::UsboutprotNmea
    Field_usboutprotNmea& accessField_usboutprotNmea()
    {
        return Base::template accessField<FieldIdx_usboutprotNmea>();
    }

    /// @brief Access as CfgValPairMembers::UsboutprotNmea (const version)
    const Field_usboutprotNmea& accessField_usboutprotNmea() const
    {
        return Base::template accessField<FieldIdx_usboutprotNmea>();
    }

    /// @brief Member type alias to CfgValPairMembers::UsboutprotRtcm3x.
    using Field_usboutprotRtcm3x = typename CfgValPairMembers<TOpt>::UsboutprotRtcm3x;

    /// @brief Initialize as CfgValPairMembers::UsboutprotRtcm3x
    Field_usboutprotRtcm3x& initField_usboutprotRtcm3x()
    {
        return Base::template initField<FieldIdx_usboutprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::UsboutprotRtcm3x
    Field_usboutprotRtcm3x& accessField_usboutprotRtcm3x()
    {
        return Base::template accessField<FieldIdx_usboutprotRtcm3x>();
    }

    /// @brief Access as CfgValPairMembers::UsboutprotRtcm3x (const version)
    const Field_usboutprotRtcm3x& accessField_usboutprotRtcm3x() const
    {
        return Base::template accessField<FieldIdx_usboutprotRtcm3x>();
    }

    /// @brief Optimized currFieldExec functionality.
    /// @details Replaces the currFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) 
    {
        switch (Base::currentField()) {
        case FieldIdx_bdsUsePrn1to5:
            memFieldDispatch<FieldIdx_bdsUsePrn1to5>(accessField_bdsUsePrn1to5(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceConflvl:
            memFieldDispatch<FieldIdx_geofenceConflvl>(accessField_geofenceConflvl(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUsePio:
            memFieldDispatch<FieldIdx_geofenceUsePio>(accessField_geofenceUsePio(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofencePinpol:
            memFieldDispatch<FieldIdx_geofencePinpol>(accessField_geofencePinpol(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUseFence1:
            memFieldDispatch<FieldIdx_geofenceUseFence1>(accessField_geofenceUseFence1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence1Lat:
            memFieldDispatch<FieldIdx_geofenceFence1Lat>(accessField_geofenceFence1Lat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence1Lon:
            memFieldDispatch<FieldIdx_geofenceFence1Lon>(accessField_geofenceFence1Lon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence1Rad:
            memFieldDispatch<FieldIdx_geofenceFence1Rad>(accessField_geofenceFence1Rad(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUseFence2:
            memFieldDispatch<FieldIdx_geofenceUseFence2>(accessField_geofenceUseFence2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence2Lat:
            memFieldDispatch<FieldIdx_geofenceFence2Lat>(accessField_geofenceFence2Lat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence2Lon:
            memFieldDispatch<FieldIdx_geofenceFence2Lon>(accessField_geofenceFence2Lon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence2Rad:
            memFieldDispatch<FieldIdx_geofenceFence2Rad>(accessField_geofenceFence2Rad(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUseFence3:
            memFieldDispatch<FieldIdx_geofenceUseFence3>(accessField_geofenceUseFence3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence3Lat:
            memFieldDispatch<FieldIdx_geofenceFence3Lat>(accessField_geofenceFence3Lat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence3Lon:
            memFieldDispatch<FieldIdx_geofenceFence3Lon>(accessField_geofenceFence3Lon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence3Rad:
            memFieldDispatch<FieldIdx_geofenceFence3Rad>(accessField_geofenceFence3Rad(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUseFence4:
            memFieldDispatch<FieldIdx_geofenceUseFence4>(accessField_geofenceUseFence4(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence4Lat:
            memFieldDispatch<FieldIdx_geofenceFence4Lat>(accessField_geofenceFence4Lat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence4Lon:
            memFieldDispatch<FieldIdx_geofenceFence4Lon>(accessField_geofenceFence4Lon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence4Rad:
            memFieldDispatch<FieldIdx_geofenceFence4Rad>(accessField_geofenceFence4Rad(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgValctrl:
            memFieldDispatch<FieldIdx_hwAntCfgValctrl>(accessField_hwAntCfgValctrl(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgShortdet:
            memFieldDispatch<FieldIdx_hwAntCfgShortdet>(accessField_hwAntCfgShortdet(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgShortdetPol:
            memFieldDispatch<FieldIdx_hwAntCfgShortdetPol>(accessField_hwAntCfgShortdetPol(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgOpendet:
            memFieldDispatch<FieldIdx_hwAntCfgOpendet>(accessField_hwAntCfgOpendet(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgOpendetPol:
            memFieldDispatch<FieldIdx_hwAntCfgOpendetPol>(accessField_hwAntCfgOpendetPol(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgPwrdown:
            memFieldDispatch<FieldIdx_hwAntCfgPwrdown>(accessField_hwAntCfgPwrdown(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgPwrdownPol:
            memFieldDispatch<FieldIdx_hwAntCfgPwrdownPol>(accessField_hwAntCfgPwrdownPol(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgRecover:
            memFieldDispatch<FieldIdx_hwAntCfgRecover>(accessField_hwAntCfgRecover(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupSwitchPin:
            memFieldDispatch<FieldIdx_hwAntSupSwitchPin>(accessField_hwAntSupSwitchPin(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupShortPin:
            memFieldDispatch<FieldIdx_hwAntSupShortPin>(accessField_hwAntSupShortPin(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupOpenPin:
            memFieldDispatch<FieldIdx_hwAntSupOpenPin>(accessField_hwAntSupOpenPin(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupEngine:
            memFieldDispatch<FieldIdx_hwAntSupEngine>(accessField_hwAntSupEngine(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupShortThr:
            memFieldDispatch<FieldIdx_hwAntSupShortThr>(accessField_hwAntSupShortThr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupOpenThr:
            memFieldDispatch<FieldIdx_hwAntSupOpenThr>(accessField_hwAntSupOpenThr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cAddress:
            memFieldDispatch<FieldIdx_i2cAddress>(accessField_i2cAddress(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cExtendedtimeout:
            memFieldDispatch<FieldIdx_i2cExtendedtimeout>(accessField_i2cExtendedtimeout(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cEnabled:
            memFieldDispatch<FieldIdx_i2cEnabled>(accessField_i2cEnabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cInprotUbx:
            memFieldDispatch<FieldIdx_i2cInprotUbx>(accessField_i2cInprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cInprotNmea:
            memFieldDispatch<FieldIdx_i2cInprotNmea>(accessField_i2cInprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cInprotRtcm3x:
            memFieldDispatch<FieldIdx_i2cInprotRtcm3x>(accessField_i2cInprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cOutprotUbx:
            memFieldDispatch<FieldIdx_i2cOutprotUbx>(accessField_i2cOutprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cOutprotNmea:
            memFieldDispatch<FieldIdx_i2cOutprotNmea>(accessField_i2cOutprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cOutprotRtcm3x:
            memFieldDispatch<FieldIdx_i2cOutprotRtcm3x>(accessField_i2cOutprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxI2c:
            memFieldDispatch<FieldIdx_infmsgUbxI2c>(accessField_infmsgUbxI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxUart1:
            memFieldDispatch<FieldIdx_infmsgUbxUart1>(accessField_infmsgUbxUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxUart2:
            memFieldDispatch<FieldIdx_infmsgUbxUart2>(accessField_infmsgUbxUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxUsb:
            memFieldDispatch<FieldIdx_infmsgUbxUsb>(accessField_infmsgUbxUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxSpi:
            memFieldDispatch<FieldIdx_infmsgUbxSpi>(accessField_infmsgUbxSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaI2c:
            memFieldDispatch<FieldIdx_infmsgNmeaI2c>(accessField_infmsgNmeaI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaUart1:
            memFieldDispatch<FieldIdx_infmsgNmeaUart1>(accessField_infmsgNmeaUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaUart2:
            memFieldDispatch<FieldIdx_infmsgNmeaUart2>(accessField_infmsgNmeaUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaUsb:
            memFieldDispatch<FieldIdx_infmsgNmeaUsb>(accessField_infmsgNmeaUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaSpi:
            memFieldDispatch<FieldIdx_infmsgNmeaSpi>(accessField_infmsgNmeaSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_itfmBbThreshold:
            memFieldDispatch<FieldIdx_itfmBbThreshold>(accessField_itfmBbThreshold(), std::forward<TFunc>(func));
            break;
        case FieldIdx_itfmCwThreshold:
            memFieldDispatch<FieldIdx_itfmCwThreshold>(accessField_itfmCwThreshold(), std::forward<TFunc>(func));
            break;
        case FieldIdx_itfmEnable:
            memFieldDispatch<FieldIdx_itfmEnable>(accessField_itfmEnable(), std::forward<TFunc>(func));
            break;
        case FieldIdx_itfmAntSetting:
            memFieldDispatch<FieldIdx_itfmAntSetting>(accessField_itfmAntSetting(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterRecordEna:
            memFieldDispatch<FieldIdx_logfilterRecordEna>(accessField_logfilterRecordEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterOncePerWakeUpEna:
            memFieldDispatch<FieldIdx_logfilterOncePerWakeUpEna>(accessField_logfilterOncePerWakeUpEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterApplyAllFilters:
            memFieldDispatch<FieldIdx_logfilterApplyAllFilters>(accessField_logfilterApplyAllFilters(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterMinInterval:
            memFieldDispatch<FieldIdx_logfilterMinInterval>(accessField_logfilterMinInterval(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterTimeThrs:
            memFieldDispatch<FieldIdx_logfilterTimeThrs>(accessField_logfilterTimeThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterSpeedThrs:
            memFieldDispatch<FieldIdx_logfilterSpeedThrs>(accessField_logfilterSpeedThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterPositionThrs:
            memFieldDispatch<FieldIdx_logfilterPositionThrs>(accessField_logfilterPositionThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_motGnssSpeedThrs:
            memFieldDispatch<FieldIdx_motGnssSpeedThrs>(accessField_motGnssSpeedThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_motGnssDistThrs:
            memFieldDispatch<FieldIdx_motGnssDistThrs>(accessField_motGnssDistThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmI2c>(accessField_msgoutNmeaIdDtmI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmSpi>(accessField_msgoutNmeaIdDtmSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmUart1>(accessField_msgoutNmeaIdDtmUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmUart2>(accessField_msgoutNmeaIdDtmUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmUsb>(accessField_msgoutNmeaIdDtmUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsI2c>(accessField_msgoutNmeaIdGbsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsSpi>(accessField_msgoutNmeaIdGbsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsUart1>(accessField_msgoutNmeaIdGbsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsUart2>(accessField_msgoutNmeaIdGbsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsUsb>(accessField_msgoutNmeaIdGbsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaI2c>(accessField_msgoutNmeaIdGgaI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaSpi>(accessField_msgoutNmeaIdGgaSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaUart1>(accessField_msgoutNmeaIdGgaUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaUart2>(accessField_msgoutNmeaIdGgaUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaUsb>(accessField_msgoutNmeaIdGgaUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllI2c>(accessField_msgoutNmeaIdGllI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllSpi>(accessField_msgoutNmeaIdGllSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllUart1>(accessField_msgoutNmeaIdGllUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllUart2>(accessField_msgoutNmeaIdGllUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllUsb>(accessField_msgoutNmeaIdGllUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsI2c>(accessField_msgoutNmeaIdGnsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsSpi>(accessField_msgoutNmeaIdGnsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsUart1>(accessField_msgoutNmeaIdGnsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsUart2>(accessField_msgoutNmeaIdGnsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsUsb>(accessField_msgoutNmeaIdGnsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsI2c>(accessField_msgoutNmeaIdGrsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsSpi>(accessField_msgoutNmeaIdGrsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsUart1>(accessField_msgoutNmeaIdGrsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsUart2>(accessField_msgoutNmeaIdGrsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsUsb>(accessField_msgoutNmeaIdGrsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaI2c>(accessField_msgoutNmeaIdGsaI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaSpi>(accessField_msgoutNmeaIdGsaSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaUart1>(accessField_msgoutNmeaIdGsaUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaUart2>(accessField_msgoutNmeaIdGsaUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaUsb>(accessField_msgoutNmeaIdGsaUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstI2c>(accessField_msgoutNmeaIdGstI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstSpi>(accessField_msgoutNmeaIdGstSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstUart1>(accessField_msgoutNmeaIdGstUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstUart2>(accessField_msgoutNmeaIdGstUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstUsb>(accessField_msgoutNmeaIdGstUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvI2c>(accessField_msgoutNmeaIdGsvI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvSpi>(accessField_msgoutNmeaIdGsvSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvUart1>(accessField_msgoutNmeaIdGsvUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvUart2>(accessField_msgoutNmeaIdGsvUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvUsb>(accessField_msgoutNmeaIdGsvUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmI2c>(accessField_msgoutNmeaIdRlmI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmSpi>(accessField_msgoutNmeaIdRlmSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmUart1>(accessField_msgoutNmeaIdRlmUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmUart2>(accessField_msgoutNmeaIdRlmUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmUsb>(accessField_msgoutNmeaIdRlmUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcI2c>(accessField_msgoutNmeaIdRmcI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcSpi>(accessField_msgoutNmeaIdRmcSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcUart1>(accessField_msgoutNmeaIdRmcUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcUart2>(accessField_msgoutNmeaIdRmcUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcUsb>(accessField_msgoutNmeaIdRmcUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwI2c>(accessField_msgoutNmeaIdVlwI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwSpi>(accessField_msgoutNmeaIdVlwSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwUart1>(accessField_msgoutNmeaIdVlwUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwUart2>(accessField_msgoutNmeaIdVlwUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwUsb>(accessField_msgoutNmeaIdVlwUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgI2c>(accessField_msgoutNmeaIdVtgI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgSpi>(accessField_msgoutNmeaIdVtgSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgUart1>(accessField_msgoutNmeaIdVtgUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgUart2>(accessField_msgoutNmeaIdVtgUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgUsb>(accessField_msgoutNmeaIdVtgUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaI2c>(accessField_msgoutNmeaIdZdaI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaSpi>(accessField_msgoutNmeaIdZdaSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaUart1>(accessField_msgoutNmeaIdZdaUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaUart2>(accessField_msgoutNmeaIdZdaUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaUsb>(accessField_msgoutNmeaIdZdaUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypI2c:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypI2c>(accessField_msgoutPubxIdPolypI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypSpi:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypSpi>(accessField_msgoutPubxIdPolypSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypUart1:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypUart1>(accessField_msgoutPubxIdPolypUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypUart2:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypUart2>(accessField_msgoutPubxIdPolypUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypUsb:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypUsb>(accessField_msgoutPubxIdPolypUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysI2c:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysI2c>(accessField_msgoutPubxIdPolysI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysSpi:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysSpi>(accessField_msgoutPubxIdPolysSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysUart1:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysUart1>(accessField_msgoutPubxIdPolysUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysUart2:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysUart2>(accessField_msgoutPubxIdPolysUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysUsb:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysUsb>(accessField_msgoutPubxIdPolysUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytI2c:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytI2c>(accessField_msgoutPubxIdPolytI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytSpi:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytSpi>(accessField_msgoutPubxIdPolytSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytUart1:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytUart1>(accessField_msgoutPubxIdPolytUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytUart2:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytUart2>(accessField_msgoutPubxIdPolytUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytUsb:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytUsb>(accessField_msgoutPubxIdPolytUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005I2c>(accessField_msgoutRtcm3xType1005I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005Spi>(accessField_msgoutRtcm3xType1005Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005Uart1>(accessField_msgoutRtcm3xType1005Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005Uart2>(accessField_msgoutRtcm3xType1005Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005Usb>(accessField_msgoutRtcm3xType1005Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074I2c>(accessField_msgoutRtcm3xType1074I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074Spi>(accessField_msgoutRtcm3xType1074Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074Uart1>(accessField_msgoutRtcm3xType1074Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074Uart2>(accessField_msgoutRtcm3xType1074Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074Usb>(accessField_msgoutRtcm3xType1074Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077I2c>(accessField_msgoutRtcm3xType1077I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077Spi>(accessField_msgoutRtcm3xType1077Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077Uart1>(accessField_msgoutRtcm3xType1077Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077Uart2>(accessField_msgoutRtcm3xType1077Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077Usb>(accessField_msgoutRtcm3xType1077Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084I2c>(accessField_msgoutRtcm3xType1084I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084Spi>(accessField_msgoutRtcm3xType1084Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084Uart1>(accessField_msgoutRtcm3xType1084Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084Uart2>(accessField_msgoutRtcm3xType1084Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084Usb>(accessField_msgoutRtcm3xType1084Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087I2c>(accessField_msgoutRtcm3xType1087I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087Spi>(accessField_msgoutRtcm3xType1087Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087Uart1>(accessField_msgoutRtcm3xType1087Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087Uart2>(accessField_msgoutRtcm3xType1087Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087Usb>(accessField_msgoutRtcm3xType1087Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094I2c>(accessField_msgoutRtcm3xType1094I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094Spi>(accessField_msgoutRtcm3xType1094Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094Uart1>(accessField_msgoutRtcm3xType1094Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094Uart2>(accessField_msgoutRtcm3xType1094Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094Usb>(accessField_msgoutRtcm3xType1094Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097I2c>(accessField_msgoutRtcm3xType1097I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097Spi>(accessField_msgoutRtcm3xType1097Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097Uart1>(accessField_msgoutRtcm3xType1097Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097Uart2>(accessField_msgoutRtcm3xType1097Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097Usb>(accessField_msgoutRtcm3xType1097Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124I2c>(accessField_msgoutRtcm3xType1124I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124Spi>(accessField_msgoutRtcm3xType1124Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124Uart1>(accessField_msgoutRtcm3xType1124Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124Uart2>(accessField_msgoutRtcm3xType1124Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124Usb>(accessField_msgoutRtcm3xType1124Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127I2c>(accessField_msgoutRtcm3xType1127I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127Spi>(accessField_msgoutRtcm3xType1127Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127Uart1>(accessField_msgoutRtcm3xType1127Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127Uart2>(accessField_msgoutRtcm3xType1127Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127Usb>(accessField_msgoutRtcm3xType1127Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230I2c>(accessField_msgoutRtcm3xType1230I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230Spi>(accessField_msgoutRtcm3xType1230Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230Uart1>(accessField_msgoutRtcm3xType1230Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230Uart2>(accessField_msgoutRtcm3xType1230Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230Usb>(accessField_msgoutRtcm3xType1230Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0I2c>(accessField_msgoutRtcm3xType4072_0I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0Spi>(accessField_msgoutRtcm3xType4072_0Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0Uart1>(accessField_msgoutRtcm3xType4072_0Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0Uart2>(accessField_msgoutRtcm3xType4072_0Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0Usb>(accessField_msgoutRtcm3xType4072_0Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1I2c>(accessField_msgoutRtcm3xType4072_1I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1Spi>(accessField_msgoutRtcm3xType4072_1Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1Uart1>(accessField_msgoutRtcm3xType4072_1Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1Uart2>(accessField_msgoutRtcm3xType4072_1Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1Usb>(accessField_msgoutRtcm3xType4072_1Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoI2c:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoI2c>(accessField_msgoutUbxLogInfoI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoSpi:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoSpi>(accessField_msgoutUbxLogInfoSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoUart1:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoUart1>(accessField_msgoutUbxLogInfoUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoUart2:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoUart2>(accessField_msgoutUbxLogInfoUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoUsb:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoUsb>(accessField_msgoutUbxLogInfoUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsI2c>(accessField_msgoutUbxMonCommsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsSpi>(accessField_msgoutUbxMonCommsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsUart1>(accessField_msgoutUbxMonCommsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsUart2>(accessField_msgoutUbxMonCommsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsUsb>(accessField_msgoutUbxMonCommsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2I2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2I2c>(accessField_msgoutUbxMonHw2I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2Spi:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2Spi>(accessField_msgoutUbxMonHw2Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2Uart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2Uart1>(accessField_msgoutUbxMonHw2Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2Uart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2Uart2>(accessField_msgoutUbxMonHw2Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2Usb:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2Usb>(accessField_msgoutUbxMonHw2Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3I2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3I2c>(accessField_msgoutUbxMonHw3I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3Spi:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3Spi>(accessField_msgoutUbxMonHw3Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3Uart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3Uart1>(accessField_msgoutUbxMonHw3Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3Uart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3Uart2>(accessField_msgoutUbxMonHw3Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3Usb:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3Usb>(accessField_msgoutUbxMonHw3Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwI2c>(accessField_msgoutUbxMonHwI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwSpi>(accessField_msgoutUbxMonHwSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwUart1>(accessField_msgoutUbxMonHwUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwUart2>(accessField_msgoutUbxMonHwUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwUsb>(accessField_msgoutUbxMonHwUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoI2c>(accessField_msgoutUbxMonIoI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoSpi>(accessField_msgoutUbxMonIoSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoUart1>(accessField_msgoutUbxMonIoUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoUart2>(accessField_msgoutUbxMonIoUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoUsb>(accessField_msgoutUbxMonIoUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppI2c>(accessField_msgoutUbxMonMsgppI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppSpi>(accessField_msgoutUbxMonMsgppSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppUart1>(accessField_msgoutUbxMonMsgppUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppUart2>(accessField_msgoutUbxMonMsgppUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppUsb>(accessField_msgoutUbxMonMsgppUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfI2c>(accessField_msgoutUbxMonRfI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfSpi>(accessField_msgoutUbxMonRfSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfUart1>(accessField_msgoutUbxMonRfUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfUart2>(accessField_msgoutUbxMonRfUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfUsb>(accessField_msgoutUbxMonRfUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufI2c>(accessField_msgoutUbxMonRxbufI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufSpi>(accessField_msgoutUbxMonRxbufSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufUart1>(accessField_msgoutUbxMonRxbufUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufUart2>(accessField_msgoutUbxMonRxbufUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufUsb>(accessField_msgoutUbxMonRxbufUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrI2c>(accessField_msgoutUbxMonRxrI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrSpi>(accessField_msgoutUbxMonRxrSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrUart1>(accessField_msgoutUbxMonRxrUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrUart2>(accessField_msgoutUbxMonRxrUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrUsb>(accessField_msgoutUbxMonRxrUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanI2c>(accessField_msgoutUbxMonSpanI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanSpi>(accessField_msgoutUbxMonSpanSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanUart1>(accessField_msgoutUbxMonSpanUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanUart2>(accessField_msgoutUbxMonSpanUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanUsb>(accessField_msgoutUbxMonSpanUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufI2c>(accessField_msgoutUbxMonTxbufI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufSpi>(accessField_msgoutUbxMonTxbufSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufUart1>(accessField_msgoutUbxMonTxbufUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufUart2>(accessField_msgoutUbxMonTxbufUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufUsb>(accessField_msgoutUbxMonTxbufUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockI2c>(accessField_msgoutUbxNavClockI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockSpi>(accessField_msgoutUbxNavClockSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockUart1>(accessField_msgoutUbxNavClockUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockUart2>(accessField_msgoutUbxNavClockUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockUsb>(accessField_msgoutUbxNavClockUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopI2c>(accessField_msgoutUbxNavDopI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopSpi>(accessField_msgoutUbxNavDopSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopUart1>(accessField_msgoutUbxNavDopUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopUart2>(accessField_msgoutUbxNavDopUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopUsb>(accessField_msgoutUbxNavDopUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeI2c>(accessField_msgoutUbxNavEoeI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeSpi>(accessField_msgoutUbxNavEoeSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeUart1>(accessField_msgoutUbxNavEoeUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeUart2>(accessField_msgoutUbxNavEoeUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeUsb>(accessField_msgoutUbxNavEoeUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceI2c>(accessField_msgoutUbxNavGeofenceI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceSpi>(accessField_msgoutUbxNavGeofenceSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceUart1>(accessField_msgoutUbxNavGeofenceUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceUart2>(accessField_msgoutUbxNavGeofenceUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceUsb>(accessField_msgoutUbxNavGeofenceUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefI2c>(accessField_msgoutUbxNavHpposecefI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefSpi>(accessField_msgoutUbxNavHpposecefSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefUart1>(accessField_msgoutUbxNavHpposecefUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefUart2>(accessField_msgoutUbxNavHpposecefUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefUsb>(accessField_msgoutUbxNavHpposecefUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhI2c>(accessField_msgoutUbxNavHpposllhI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhSpi>(accessField_msgoutUbxNavHpposllhSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhUart1>(accessField_msgoutUbxNavHpposllhUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhUart2>(accessField_msgoutUbxNavHpposllhUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhUsb>(accessField_msgoutUbxNavHpposllhUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoI2c>(accessField_msgoutUbxNavOdoI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoSpi>(accessField_msgoutUbxNavOdoSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoUart1>(accessField_msgoutUbxNavOdoUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoUart2>(accessField_msgoutUbxNavOdoUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoUsb>(accessField_msgoutUbxNavOdoUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbI2c>(accessField_msgoutUbxNavOrbI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbSpi>(accessField_msgoutUbxNavOrbSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbUart1>(accessField_msgoutUbxNavOrbUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbUart2>(accessField_msgoutUbxNavOrbUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbUsb>(accessField_msgoutUbxNavOrbUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefI2c>(accessField_msgoutUbxNavPosecefI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefSpi>(accessField_msgoutUbxNavPosecefSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefUart1>(accessField_msgoutUbxNavPosecefUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefUart2>(accessField_msgoutUbxNavPosecefUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefUsb>(accessField_msgoutUbxNavPosecefUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhI2c>(accessField_msgoutUbxNavPosllhI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhSpi>(accessField_msgoutUbxNavPosllhSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhUart1>(accessField_msgoutUbxNavPosllhUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhUart2>(accessField_msgoutUbxNavPosllhUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhUsb>(accessField_msgoutUbxNavPosllhUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtI2c>(accessField_msgoutUbxNavPvtI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtSpi>(accessField_msgoutUbxNavPvtSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtUart1>(accessField_msgoutUbxNavPvtUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtUart2>(accessField_msgoutUbxNavPvtUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtUsb>(accessField_msgoutUbxNavPvtUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedI2c>(accessField_msgoutUbxNavRelposnedI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedSpi>(accessField_msgoutUbxNavRelposnedSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedUart1>(accessField_msgoutUbxNavRelposnedUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedUart2>(accessField_msgoutUbxNavRelposnedUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedUsb>(accessField_msgoutUbxNavRelposnedUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatI2c>(accessField_msgoutUbxNavSatI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatSpi>(accessField_msgoutUbxNavSatSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatUart1>(accessField_msgoutUbxNavSatUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatUart2>(accessField_msgoutUbxNavSatUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatUsb>(accessField_msgoutUbxNavSatUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasI2c>(accessField_msgoutUbxNavSbasI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasSpi>(accessField_msgoutUbxNavSbasSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasUart1>(accessField_msgoutUbxNavSbasUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasUart2>(accessField_msgoutUbxNavSbasUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasUsb>(accessField_msgoutUbxNavSbasUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigI2c>(accessField_msgoutUbxNavSigI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigSpi>(accessField_msgoutUbxNavSigSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigUart1>(accessField_msgoutUbxNavSigUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigUart2>(accessField_msgoutUbxNavSigUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigUsb>(accessField_msgoutUbxNavSigUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasI2c>(accessField_msgoutUbxNavSlasI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasSpi>(accessField_msgoutUbxNavSlasSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasUart1>(accessField_msgoutUbxNavSlasUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasUart2>(accessField_msgoutUbxNavSlasUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasUsb>(accessField_msgoutUbxNavSlasUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusI2c>(accessField_msgoutUbxNavStatusI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusSpi>(accessField_msgoutUbxNavStatusSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusUart1>(accessField_msgoutUbxNavStatusUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusUart2>(accessField_msgoutUbxNavStatusUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusUsb>(accessField_msgoutUbxNavStatusUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinI2c>(accessField_msgoutUbxNavSvinI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinSpi>(accessField_msgoutUbxNavSvinSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinUart1>(accessField_msgoutUbxNavSvinUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinUart2>(accessField_msgoutUbxNavSvinUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinUsb>(accessField_msgoutUbxNavSvinUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsI2c>(accessField_msgoutUbxNavTimebdsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsSpi>(accessField_msgoutUbxNavTimebdsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsUart1>(accessField_msgoutUbxNavTimebdsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsUart2>(accessField_msgoutUbxNavTimebdsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsUsb>(accessField_msgoutUbxNavTimebdsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalI2c>(accessField_msgoutUbxNavTimegalI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalSpi>(accessField_msgoutUbxNavTimegalSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalUart1>(accessField_msgoutUbxNavTimegalUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalUart2>(accessField_msgoutUbxNavTimegalUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalUsb>(accessField_msgoutUbxNavTimegalUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloI2c>(accessField_msgoutUbxNavTimegloI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloSpi>(accessField_msgoutUbxNavTimegloSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloUart1>(accessField_msgoutUbxNavTimegloUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloUart2>(accessField_msgoutUbxNavTimegloUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloUsb>(accessField_msgoutUbxNavTimegloUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsI2c>(accessField_msgoutUbxNavTimegpsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsSpi>(accessField_msgoutUbxNavTimegpsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsUart1>(accessField_msgoutUbxNavTimegpsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsUart2>(accessField_msgoutUbxNavTimegpsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsUsb>(accessField_msgoutUbxNavTimegpsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsI2c>(accessField_msgoutUbxNavTimelsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsSpi>(accessField_msgoutUbxNavTimelsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsUart1>(accessField_msgoutUbxNavTimelsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsUart2>(accessField_msgoutUbxNavTimelsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsUsb>(accessField_msgoutUbxNavTimelsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssI2c>(accessField_msgoutUbxNavTimeqzssI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssSpi>(accessField_msgoutUbxNavTimeqzssSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssUart1>(accessField_msgoutUbxNavTimeqzssUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssUart2>(accessField_msgoutUbxNavTimeqzssUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssUsb>(accessField_msgoutUbxNavTimeqzssUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcI2c>(accessField_msgoutUbxNavTimeutcI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcSpi>(accessField_msgoutUbxNavTimeutcSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcUart1>(accessField_msgoutUbxNavTimeutcUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcUart2>(accessField_msgoutUbxNavTimeutcUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcUsb>(accessField_msgoutUbxNavTimeutcUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefI2c>(accessField_msgoutUbxNavVelecefI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefSpi>(accessField_msgoutUbxNavVelecefSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefUart1>(accessField_msgoutUbxNavVelecefUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefUart2>(accessField_msgoutUbxNavVelecefUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefUsb>(accessField_msgoutUbxNavVelecefUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedI2c>(accessField_msgoutUbxNavVelnedI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedSpi>(accessField_msgoutUbxNavVelnedSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedUart1>(accessField_msgoutUbxNavVelnedUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedUart2>(accessField_msgoutUbxNavVelnedUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedUsb>(accessField_msgoutUbxNavVelnedUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxI2c>(accessField_msgoutUbxRxmMeasxI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxSpi>(accessField_msgoutUbxRxmMeasxSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxUart1>(accessField_msgoutUbxRxmMeasxUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxUart2>(accessField_msgoutUbxRxmMeasxUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxUsb>(accessField_msgoutUbxRxmMeasxUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxI2c>(accessField_msgoutUbxRxmRawxI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxSpi>(accessField_msgoutUbxRxmRawxSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxUart1>(accessField_msgoutUbxRxmRawxUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxUart2>(accessField_msgoutUbxRxmRawxUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxUsb>(accessField_msgoutUbxRxmRawxUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmI2c>(accessField_msgoutUbxRxmRlmI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmSpi>(accessField_msgoutUbxRxmRlmSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmUart1>(accessField_msgoutUbxRxmRlmUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmUart2>(accessField_msgoutUbxRxmRlmUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmUsb>(accessField_msgoutUbxRxmRlmUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmI2c>(accessField_msgoutUbxRxmRtcmI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmSpi>(accessField_msgoutUbxRxmRtcmSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmUart1>(accessField_msgoutUbxRxmRtcmUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmUart2>(accessField_msgoutUbxRxmRtcmUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmUsb>(accessField_msgoutUbxRxmRtcmUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxI2c>(accessField_msgoutUbxRxmSfrbxI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxSpi>(accessField_msgoutUbxRxmSfrbxSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxUart1>(accessField_msgoutUbxRxmSfrbxUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxUart2>(accessField_msgoutUbxRxmSfrbxUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxUsb>(accessField_msgoutUbxRxmSfrbxUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2I2c:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2I2c>(accessField_msgoutUbxTimTm2I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2Spi:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2Spi>(accessField_msgoutUbxTimTm2Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2Uart1:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2Uart1>(accessField_msgoutUbxTimTm2Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2Uart2:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2Uart2>(accessField_msgoutUbxTimTm2Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2Usb:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2Usb>(accessField_msgoutUbxTimTm2Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpI2c:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpI2c>(accessField_msgoutUbxTimTpI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpSpi:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpSpi>(accessField_msgoutUbxTimTpSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpUart1:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpUart1>(accessField_msgoutUbxTimTpUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpUart2:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpUart2>(accessField_msgoutUbxTimTpUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpUsb:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpUsb>(accessField_msgoutUbxTimTpUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfyI2c:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfyI2c>(accessField_msgoutUbxTimVrfyI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfySpi:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfySpi>(accessField_msgoutUbxTimVrfySpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfyUart1:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfyUart1>(accessField_msgoutUbxTimVrfyUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfyUart2:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfyUart2>(accessField_msgoutUbxTimVrfyUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfyUsb:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfyUsb>(accessField_msgoutUbxTimVrfyUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navhpgDgnssmode:
            memFieldDispatch<FieldIdx_navhpgDgnssmode>(accessField_navhpgDgnssmode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgFixmode:
            memFieldDispatch<FieldIdx_navspgFixmode>(accessField_navspgFixmode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInifix3d:
            memFieldDispatch<FieldIdx_navspgInifix3d>(accessField_navspgInifix3d(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgWknrollover:
            memFieldDispatch<FieldIdx_navspgWknrollover>(accessField_navspgWknrollover(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUtcstandard:
            memFieldDispatch<FieldIdx_navspgUtcstandard>(accessField_navspgUtcstandard(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgDynmodel:
            memFieldDispatch<FieldIdx_navspgDynmodel>(accessField_navspgDynmodel(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgAckaiding:
            memFieldDispatch<FieldIdx_navspgAckaiding>(accessField_navspgAckaiding(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUseUsrdat:
            memFieldDispatch<FieldIdx_navspgUseUsrdat>(accessField_navspgUseUsrdat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatMaja:
            memFieldDispatch<FieldIdx_navspgUsrdatMaja>(accessField_navspgUsrdatMaja(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatFlat:
            memFieldDispatch<FieldIdx_navspgUsrdatFlat>(accessField_navspgUsrdatFlat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatDx:
            memFieldDispatch<FieldIdx_navspgUsrdatDx>(accessField_navspgUsrdatDx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatDy:
            memFieldDispatch<FieldIdx_navspgUsrdatDy>(accessField_navspgUsrdatDy(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatDz:
            memFieldDispatch<FieldIdx_navspgUsrdatDz>(accessField_navspgUsrdatDz(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatRotx:
            memFieldDispatch<FieldIdx_navspgUsrdatRotx>(accessField_navspgUsrdatRotx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatRoty:
            memFieldDispatch<FieldIdx_navspgUsrdatRoty>(accessField_navspgUsrdatRoty(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatRotz:
            memFieldDispatch<FieldIdx_navspgUsrdatRotz>(accessField_navspgUsrdatRotz(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatScale:
            memFieldDispatch<FieldIdx_navspgUsrdatScale>(accessField_navspgUsrdatScale(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilMinsvs:
            memFieldDispatch<FieldIdx_navspgInfilMinsvs>(accessField_navspgInfilMinsvs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilMaxsvs:
            memFieldDispatch<FieldIdx_navspgInfilMaxsvs>(accessField_navspgInfilMaxsvs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilMincno:
            memFieldDispatch<FieldIdx_navspgInfilMincno>(accessField_navspgInfilMincno(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilMinelev:
            memFieldDispatch<FieldIdx_navspgInfilMinelev>(accessField_navspgInfilMinelev(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilNcnothrs:
            memFieldDispatch<FieldIdx_navspgInfilNcnothrs>(accessField_navspgInfilNcnothrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilCnothrs:
            memFieldDispatch<FieldIdx_navspgInfilCnothrs>(accessField_navspgInfilCnothrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilPdop:
            memFieldDispatch<FieldIdx_navspgOutfilPdop>(accessField_navspgOutfilPdop(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilTdop:
            memFieldDispatch<FieldIdx_navspgOutfilTdop>(accessField_navspgOutfilTdop(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilPacc:
            memFieldDispatch<FieldIdx_navspgOutfilPacc>(accessField_navspgOutfilPacc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilTacc:
            memFieldDispatch<FieldIdx_navspgOutfilTacc>(accessField_navspgOutfilTacc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilFacc:
            memFieldDispatch<FieldIdx_navspgOutfilFacc>(accessField_navspgOutfilFacc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgConstrAlt:
            memFieldDispatch<FieldIdx_navspgConstrAlt>(accessField_navspgConstrAlt(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgConstrAltvar:
            memFieldDispatch<FieldIdx_navspgConstrAltvar>(accessField_navspgConstrAltvar(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgConstrDgnssto:
            memFieldDispatch<FieldIdx_navspgConstrDgnssto>(accessField_navspgConstrDgnssto(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaProtver:
            memFieldDispatch<FieldIdx_nmeaProtver>(accessField_nmeaProtver(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaMaxsvs:
            memFieldDispatch<FieldIdx_nmeaMaxsvs>(accessField_nmeaMaxsvs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaCompat:
            memFieldDispatch<FieldIdx_nmeaCompat>(accessField_nmeaCompat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaConsider:
            memFieldDispatch<FieldIdx_nmeaConsider>(accessField_nmeaConsider(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaLimit82:
            memFieldDispatch<FieldIdx_nmeaLimit82>(accessField_nmeaLimit82(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaHighprec:
            memFieldDispatch<FieldIdx_nmeaHighprec>(accessField_nmeaHighprec(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaSvnumbering:
            memFieldDispatch<FieldIdx_nmeaSvnumbering>(accessField_nmeaSvnumbering(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltGps:
            memFieldDispatch<FieldIdx_nmeaFiltGps>(accessField_nmeaFiltGps(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltSbas:
            memFieldDispatch<FieldIdx_nmeaFiltSbas>(accessField_nmeaFiltSbas(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltGal:
            memFieldDispatch<FieldIdx_nmeaFiltGal>(accessField_nmeaFiltGal(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltQzss:
            memFieldDispatch<FieldIdx_nmeaFiltQzss>(accessField_nmeaFiltQzss(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltGlo:
            memFieldDispatch<FieldIdx_nmeaFiltGlo>(accessField_nmeaFiltGlo(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltBds:
            memFieldDispatch<FieldIdx_nmeaFiltBds>(accessField_nmeaFiltBds(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutInvfix:
            memFieldDispatch<FieldIdx_nmeaOutInvfix>(accessField_nmeaOutInvfix(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutMskfix:
            memFieldDispatch<FieldIdx_nmeaOutMskfix>(accessField_nmeaOutMskfix(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutInvtime:
            memFieldDispatch<FieldIdx_nmeaOutInvtime>(accessField_nmeaOutInvtime(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutInvdate:
            memFieldDispatch<FieldIdx_nmeaOutInvdate>(accessField_nmeaOutInvdate(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutOnlygps:
            memFieldDispatch<FieldIdx_nmeaOutOnlygps>(accessField_nmeaOutOnlygps(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutFrozencog:
            memFieldDispatch<FieldIdx_nmeaOutFrozencog>(accessField_nmeaOutFrozencog(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutMaintalkerid:
            memFieldDispatch<FieldIdx_nmeaOutMaintalkerid>(accessField_nmeaOutMaintalkerid(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoUseOdo:
            memFieldDispatch<FieldIdx_odoUseOdo>(accessField_odoUseOdo(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoUseCog:
            memFieldDispatch<FieldIdx_odoUseCog>(accessField_odoUseCog(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoOutlpvel:
            memFieldDispatch<FieldIdx_odoOutlpvel>(accessField_odoOutlpvel(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoOutlpcog:
            memFieldDispatch<FieldIdx_odoOutlpcog>(accessField_odoOutlpcog(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoProfile:
            memFieldDispatch<FieldIdx_odoProfile>(accessField_odoProfile(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoCogmaxspeed:
            memFieldDispatch<FieldIdx_odoCogmaxspeed>(accessField_odoCogmaxspeed(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoCogmaxposacc:
            memFieldDispatch<FieldIdx_odoCogmaxposacc>(accessField_odoCogmaxposacc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoVellpgain:
            memFieldDispatch<FieldIdx_odoVellpgain>(accessField_odoVellpgain(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoCoglpgain:
            memFieldDispatch<FieldIdx_odoCoglpgain>(accessField_odoCoglpgain(), std::forward<TFunc>(func));
            break;
        case FieldIdx_qzssUseSlasDgnss:
            memFieldDispatch<FieldIdx_qzssUseSlasDgnss>(accessField_qzssUseSlasDgnss(), std::forward<TFunc>(func));
            break;
        case FieldIdx_qzssUseSlasTestmode:
            memFieldDispatch<FieldIdx_qzssUseSlasTestmode>(accessField_qzssUseSlasTestmode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_qzssUseSlasRaimUncorr:
            memFieldDispatch<FieldIdx_qzssUseSlasRaimUncorr>(accessField_qzssUseSlasRaimUncorr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rateMeas:
            memFieldDispatch<FieldIdx_rateMeas>(accessField_rateMeas(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rateNav:
            memFieldDispatch<FieldIdx_rateNav>(accessField_rateNav(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rateTimeref:
            memFieldDispatch<FieldIdx_rateTimeref>(accessField_rateTimeref(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvDump:
            memFieldDispatch<FieldIdx_rinvDump>(accessField_rinvDump(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvBinary:
            memFieldDispatch<FieldIdx_rinvBinary>(accessField_rinvBinary(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvDataSize:
            memFieldDispatch<FieldIdx_rinvDataSize>(accessField_rinvDataSize(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvChunk0:
            memFieldDispatch<FieldIdx_rinvChunk0>(accessField_rinvChunk0(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvChunk1:
            memFieldDispatch<FieldIdx_rinvChunk1>(accessField_rinvChunk1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvChunk2:
            memFieldDispatch<FieldIdx_rinvChunk2>(accessField_rinvChunk2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvChunk3:
            memFieldDispatch<FieldIdx_rinvChunk3>(accessField_rinvChunk3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rtcmDf003Out:
            memFieldDispatch<FieldIdx_rtcmDf003Out>(accessField_rtcmDf003Out(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rtcmDf003In:
            memFieldDispatch<FieldIdx_rtcmDf003In>(accessField_rtcmDf003In(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rtcmDf003InFilter:
            memFieldDispatch<FieldIdx_rtcmDf003InFilter>(accessField_rtcmDf003InFilter(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasUseTestmode:
            memFieldDispatch<FieldIdx_sbasUseTestmode>(accessField_sbasUseTestmode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasUseRanging:
            memFieldDispatch<FieldIdx_sbasUseRanging>(accessField_sbasUseRanging(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasUseDiffcorr:
            memFieldDispatch<FieldIdx_sbasUseDiffcorr>(accessField_sbasUseDiffcorr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasUseIntegrity:
            memFieldDispatch<FieldIdx_sbasUseIntegrity>(accessField_sbasUseIntegrity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasPrnscanmask:
            memFieldDispatch<FieldIdx_sbasPrnscanmask>(accessField_sbasPrnscanmask(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGpsEna:
            memFieldDispatch<FieldIdx_signalGpsEna>(accessField_signalGpsEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGpsL1caEna:
            memFieldDispatch<FieldIdx_signalGpsL1caEna>(accessField_signalGpsL1caEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGpsL2cEna:
            memFieldDispatch<FieldIdx_signalGpsL2cEna>(accessField_signalGpsL2cEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalSbasEna:
            memFieldDispatch<FieldIdx_signalSbasEna>(accessField_signalSbasEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalSbasL1caEna:
            memFieldDispatch<FieldIdx_signalSbasL1caEna>(accessField_signalSbasL1caEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGalEna:
            memFieldDispatch<FieldIdx_signalGalEna>(accessField_signalGalEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGalE1Ena:
            memFieldDispatch<FieldIdx_signalGalE1Ena>(accessField_signalGalE1Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGalE5bEna:
            memFieldDispatch<FieldIdx_signalGalE5bEna>(accessField_signalGalE5bEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalBdsEna:
            memFieldDispatch<FieldIdx_signalBdsEna>(accessField_signalBdsEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalBdsB1Ena:
            memFieldDispatch<FieldIdx_signalBdsB1Ena>(accessField_signalBdsB1Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalBdsB2Ena:
            memFieldDispatch<FieldIdx_signalBdsB2Ena>(accessField_signalBdsB2Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalQzssEna:
            memFieldDispatch<FieldIdx_signalQzssEna>(accessField_signalQzssEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalQzssL1caEna:
            memFieldDispatch<FieldIdx_signalQzssL1caEna>(accessField_signalQzssL1caEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalQzssL1sEna:
            memFieldDispatch<FieldIdx_signalQzssL1sEna>(accessField_signalQzssL1sEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalQzssL2cEna:
            memFieldDispatch<FieldIdx_signalQzssL2cEna>(accessField_signalQzssL2cEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGloEna:
            memFieldDispatch<FieldIdx_signalGloEna>(accessField_signalGloEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGloL1Ena:
            memFieldDispatch<FieldIdx_signalGloL1Ena>(accessField_signalGloL1Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGloL2Ena:
            memFieldDispatch<FieldIdx_signalGloL2Ena>(accessField_signalGloL2Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiMaxff:
            memFieldDispatch<FieldIdx_spiMaxff>(accessField_spiMaxff(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiCpolarity:
            memFieldDispatch<FieldIdx_spiCpolarity>(accessField_spiCpolarity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiCphase:
            memFieldDispatch<FieldIdx_spiCphase>(accessField_spiCphase(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiExtendedtimeout:
            memFieldDispatch<FieldIdx_spiExtendedtimeout>(accessField_spiExtendedtimeout(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiEnabled:
            memFieldDispatch<FieldIdx_spiEnabled>(accessField_spiEnabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiinprotUbx:
            memFieldDispatch<FieldIdx_spiinprotUbx>(accessField_spiinprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiinprotNmea:
            memFieldDispatch<FieldIdx_spiinprotNmea>(accessField_spiinprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiinprotRtcm3x:
            memFieldDispatch<FieldIdx_spiinprotRtcm3x>(accessField_spiinprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spioutprotUbx:
            memFieldDispatch<FieldIdx_spioutprotUbx>(accessField_spioutprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spioutprotNmea:
            memFieldDispatch<FieldIdx_spioutprotNmea>(accessField_spioutprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spioutprotRtcm3x:
            memFieldDispatch<FieldIdx_spioutprotRtcm3x>(accessField_spioutprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeMode:
            memFieldDispatch<FieldIdx_tmodeMode>(accessField_tmodeMode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodePosType:
            memFieldDispatch<FieldIdx_tmodePosType>(accessField_tmodePosType(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefX:
            memFieldDispatch<FieldIdx_tmodeEcefX>(accessField_tmodeEcefX(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefY:
            memFieldDispatch<FieldIdx_tmodeEcefY>(accessField_tmodeEcefY(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefZ:
            memFieldDispatch<FieldIdx_tmodeEcefZ>(accessField_tmodeEcefZ(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefXHp:
            memFieldDispatch<FieldIdx_tmodeEcefXHp>(accessField_tmodeEcefXHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefYHp:
            memFieldDispatch<FieldIdx_tmodeEcefYHp>(accessField_tmodeEcefYHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefZHp:
            memFieldDispatch<FieldIdx_tmodeEcefZHp>(accessField_tmodeEcefZHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeLat:
            memFieldDispatch<FieldIdx_tmodeLat>(accessField_tmodeLat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeLon:
            memFieldDispatch<FieldIdx_tmodeLon>(accessField_tmodeLon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeHeight:
            memFieldDispatch<FieldIdx_tmodeHeight>(accessField_tmodeHeight(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeLatHp:
            memFieldDispatch<FieldIdx_tmodeLatHp>(accessField_tmodeLatHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeLonHp:
            memFieldDispatch<FieldIdx_tmodeLonHp>(accessField_tmodeLonHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeHeightHp:
            memFieldDispatch<FieldIdx_tmodeHeightHp>(accessField_tmodeHeightHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeFixedPosAcc:
            memFieldDispatch<FieldIdx_tmodeFixedPosAcc>(accessField_tmodeFixedPosAcc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeSvinMinDur:
            memFieldDispatch<FieldIdx_tmodeSvinMinDur>(accessField_tmodeSvinMinDur(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeSvinAccLimit:
            memFieldDispatch<FieldIdx_tmodeSvinAccLimit>(accessField_tmodeSvinAccLimit(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPulseDef:
            memFieldDispatch<FieldIdx_tpPulseDef>(accessField_tpPulseDef(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPulseLengthDef:
            memFieldDispatch<FieldIdx_tpPulseLengthDef>(accessField_tpPulseLengthDef(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpAntCabledelay:
            memFieldDispatch<FieldIdx_tpAntCabledelay>(accessField_tpAntCabledelay(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPeriodTp1:
            memFieldDispatch<FieldIdx_tpPeriodTp1>(accessField_tpPeriodTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPeriodLockTp1:
            memFieldDispatch<FieldIdx_tpPeriodLockTp1>(accessField_tpPeriodLockTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpFreqTp1:
            memFieldDispatch<FieldIdx_tpFreqTp1>(accessField_tpFreqTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpFreqLockTp1:
            memFieldDispatch<FieldIdx_tpFreqLockTp1>(accessField_tpFreqLockTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpLenTp1:
            memFieldDispatch<FieldIdx_tpLenTp1>(accessField_tpLenTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpLenLockTp1:
            memFieldDispatch<FieldIdx_tpLenLockTp1>(accessField_tpLenLockTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpDutyTp1:
            memFieldDispatch<FieldIdx_tpDutyTp1>(accessField_tpDutyTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpDutyLockTp1:
            memFieldDispatch<FieldIdx_tpDutyLockTp1>(accessField_tpDutyLockTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpUserDelayTp1:
            memFieldDispatch<FieldIdx_tpUserDelayTp1>(accessField_tpUserDelayTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpTp1Ena:
            memFieldDispatch<FieldIdx_tpTp1Ena>(accessField_tpTp1Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpSyncGnssTp1:
            memFieldDispatch<FieldIdx_tpSyncGnssTp1>(accessField_tpSyncGnssTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpUseLockedTp1:
            memFieldDispatch<FieldIdx_tpUseLockedTp1>(accessField_tpUseLockedTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpAlignToTowTp1:
            memFieldDispatch<FieldIdx_tpAlignToTowTp1>(accessField_tpAlignToTowTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPolTp1:
            memFieldDispatch<FieldIdx_tpPolTp1>(accessField_tpPolTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpTimegridTp1:
            memFieldDispatch<FieldIdx_tpTimegridTp1>(accessField_tpTimegridTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyEnabled:
            memFieldDispatch<FieldIdx_txreadyEnabled>(accessField_txreadyEnabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyPolarity:
            memFieldDispatch<FieldIdx_txreadyPolarity>(accessField_txreadyPolarity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyPin:
            memFieldDispatch<FieldIdx_txreadyPin>(accessField_txreadyPin(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyThreshold:
            memFieldDispatch<FieldIdx_txreadyThreshold>(accessField_txreadyThreshold(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyInterface:
            memFieldDispatch<FieldIdx_txreadyInterface>(accessField_txreadyInterface(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Baudrate:
            memFieldDispatch<FieldIdx_uart1Baudrate>(accessField_uart1Baudrate(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Stopbits:
            memFieldDispatch<FieldIdx_uart1Stopbits>(accessField_uart1Stopbits(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Databits:
            memFieldDispatch<FieldIdx_uart1Databits>(accessField_uart1Databits(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Parity:
            memFieldDispatch<FieldIdx_uart1Parity>(accessField_uart1Parity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Enabled:
            memFieldDispatch<FieldIdx_uart1Enabled>(accessField_uart1Enabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1inprotUbx:
            memFieldDispatch<FieldIdx_uart1inprotUbx>(accessField_uart1inprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1inprotNmea:
            memFieldDispatch<FieldIdx_uart1inprotNmea>(accessField_uart1inprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1inprotRtcm3x:
            memFieldDispatch<FieldIdx_uart1inprotRtcm3x>(accessField_uart1inprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1outprotUbx:
            memFieldDispatch<FieldIdx_uart1outprotUbx>(accessField_uart1outprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1outprotNmea:
            memFieldDispatch<FieldIdx_uart1outprotNmea>(accessField_uart1outprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1outprotRtcm3x:
            memFieldDispatch<FieldIdx_uart1outprotRtcm3x>(accessField_uart1outprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Baudrate:
            memFieldDispatch<FieldIdx_uart2Baudrate>(accessField_uart2Baudrate(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Stopbits:
            memFieldDispatch<FieldIdx_uart2Stopbits>(accessField_uart2Stopbits(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Databits:
            memFieldDispatch<FieldIdx_uart2Databits>(accessField_uart2Databits(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Parity:
            memFieldDispatch<FieldIdx_uart2Parity>(accessField_uart2Parity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Enabled:
            memFieldDispatch<FieldIdx_uart2Enabled>(accessField_uart2Enabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Remap:
            memFieldDispatch<FieldIdx_uart2Remap>(accessField_uart2Remap(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2inprotUbx:
            memFieldDispatch<FieldIdx_uart2inprotUbx>(accessField_uart2inprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2inprotNmea:
            memFieldDispatch<FieldIdx_uart2inprotNmea>(accessField_uart2inprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2inprotRtcm3x:
            memFieldDispatch<FieldIdx_uart2inprotRtcm3x>(accessField_uart2inprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2outprotUbx:
            memFieldDispatch<FieldIdx_uart2outprotUbx>(accessField_uart2outprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2outprotNmea:
            memFieldDispatch<FieldIdx_uart2outprotNmea>(accessField_uart2outprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2outprotRtcm3x:
            memFieldDispatch<FieldIdx_uart2outprotRtcm3x>(accessField_uart2outprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbEnabled:
            memFieldDispatch<FieldIdx_usbEnabled>(accessField_usbEnabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSelfpow:
            memFieldDispatch<FieldIdx_usbSelfpow>(accessField_usbSelfpow(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorId:
            memFieldDispatch<FieldIdx_usbVendorId>(accessField_usbVendorId(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductId:
            memFieldDispatch<FieldIdx_usbProductId>(accessField_usbProductId(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbPower:
            memFieldDispatch<FieldIdx_usbPower>(accessField_usbPower(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorStr0:
            memFieldDispatch<FieldIdx_usbVendorStr0>(accessField_usbVendorStr0(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorStr1:
            memFieldDispatch<FieldIdx_usbVendorStr1>(accessField_usbVendorStr1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorStr2:
            memFieldDispatch<FieldIdx_usbVendorStr2>(accessField_usbVendorStr2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorStr3:
            memFieldDispatch<FieldIdx_usbVendorStr3>(accessField_usbVendorStr3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductStr0:
            memFieldDispatch<FieldIdx_usbProductStr0>(accessField_usbProductStr0(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductStr1:
            memFieldDispatch<FieldIdx_usbProductStr1>(accessField_usbProductStr1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductStr2:
            memFieldDispatch<FieldIdx_usbProductStr2>(accessField_usbProductStr2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductStr3:
            memFieldDispatch<FieldIdx_usbProductStr3>(accessField_usbProductStr3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSerialNoStr0:
            memFieldDispatch<FieldIdx_usbSerialNoStr0>(accessField_usbSerialNoStr0(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSerialNoStr1:
            memFieldDispatch<FieldIdx_usbSerialNoStr1>(accessField_usbSerialNoStr1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSerialNoStr2:
            memFieldDispatch<FieldIdx_usbSerialNoStr2>(accessField_usbSerialNoStr2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSerialNoStr3:
            memFieldDispatch<FieldIdx_usbSerialNoStr3>(accessField_usbSerialNoStr3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbinprotUbx:
            memFieldDispatch<FieldIdx_usbinprotUbx>(accessField_usbinprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbinprotNmea:
            memFieldDispatch<FieldIdx_usbinprotNmea>(accessField_usbinprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbinprotRtcm3x:
            memFieldDispatch<FieldIdx_usbinprotRtcm3x>(accessField_usbinprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usboutprotUbx:
            memFieldDispatch<FieldIdx_usboutprotUbx>(accessField_usboutprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usboutprotNmea:
            memFieldDispatch<FieldIdx_usboutprotNmea>(accessField_usboutprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usboutprotRtcm3x:
            memFieldDispatch<FieldIdx_usboutprotRtcm3x>(accessField_usboutprotRtcm3x(), std::forward<TFunc>(func));
            break;
        default:
            static constexpr bool Invalid_field_execution = false;
            static_cast<void>(Invalid_field_execution);
            COMMS_ASSERT(Invalid_field_execution);
            break;
        }
    }

    /// @brief Optimized currFieldExec functionality (const variant).
    /// @details Replaces the currFieldExec() member function defined
    ///    by @b comms::field::Variant.
    template <typename TFunc>
    void currFieldExec(TFunc&& func) const
    {
        switch (Base::currentField()) {
        case FieldIdx_bdsUsePrn1to5:
            memFieldDispatch<FieldIdx_bdsUsePrn1to5>(accessField_bdsUsePrn1to5(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceConflvl:
            memFieldDispatch<FieldIdx_geofenceConflvl>(accessField_geofenceConflvl(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUsePio:
            memFieldDispatch<FieldIdx_geofenceUsePio>(accessField_geofenceUsePio(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofencePinpol:
            memFieldDispatch<FieldIdx_geofencePinpol>(accessField_geofencePinpol(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUseFence1:
            memFieldDispatch<FieldIdx_geofenceUseFence1>(accessField_geofenceUseFence1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence1Lat:
            memFieldDispatch<FieldIdx_geofenceFence1Lat>(accessField_geofenceFence1Lat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence1Lon:
            memFieldDispatch<FieldIdx_geofenceFence1Lon>(accessField_geofenceFence1Lon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence1Rad:
            memFieldDispatch<FieldIdx_geofenceFence1Rad>(accessField_geofenceFence1Rad(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUseFence2:
            memFieldDispatch<FieldIdx_geofenceUseFence2>(accessField_geofenceUseFence2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence2Lat:
            memFieldDispatch<FieldIdx_geofenceFence2Lat>(accessField_geofenceFence2Lat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence2Lon:
            memFieldDispatch<FieldIdx_geofenceFence2Lon>(accessField_geofenceFence2Lon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence2Rad:
            memFieldDispatch<FieldIdx_geofenceFence2Rad>(accessField_geofenceFence2Rad(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUseFence3:
            memFieldDispatch<FieldIdx_geofenceUseFence3>(accessField_geofenceUseFence3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence3Lat:
            memFieldDispatch<FieldIdx_geofenceFence3Lat>(accessField_geofenceFence3Lat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence3Lon:
            memFieldDispatch<FieldIdx_geofenceFence3Lon>(accessField_geofenceFence3Lon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence3Rad:
            memFieldDispatch<FieldIdx_geofenceFence3Rad>(accessField_geofenceFence3Rad(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceUseFence4:
            memFieldDispatch<FieldIdx_geofenceUseFence4>(accessField_geofenceUseFence4(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence4Lat:
            memFieldDispatch<FieldIdx_geofenceFence4Lat>(accessField_geofenceFence4Lat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence4Lon:
            memFieldDispatch<FieldIdx_geofenceFence4Lon>(accessField_geofenceFence4Lon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_geofenceFence4Rad:
            memFieldDispatch<FieldIdx_geofenceFence4Rad>(accessField_geofenceFence4Rad(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgValctrl:
            memFieldDispatch<FieldIdx_hwAntCfgValctrl>(accessField_hwAntCfgValctrl(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgShortdet:
            memFieldDispatch<FieldIdx_hwAntCfgShortdet>(accessField_hwAntCfgShortdet(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgShortdetPol:
            memFieldDispatch<FieldIdx_hwAntCfgShortdetPol>(accessField_hwAntCfgShortdetPol(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgOpendet:
            memFieldDispatch<FieldIdx_hwAntCfgOpendet>(accessField_hwAntCfgOpendet(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgOpendetPol:
            memFieldDispatch<FieldIdx_hwAntCfgOpendetPol>(accessField_hwAntCfgOpendetPol(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgPwrdown:
            memFieldDispatch<FieldIdx_hwAntCfgPwrdown>(accessField_hwAntCfgPwrdown(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgPwrdownPol:
            memFieldDispatch<FieldIdx_hwAntCfgPwrdownPol>(accessField_hwAntCfgPwrdownPol(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntCfgRecover:
            memFieldDispatch<FieldIdx_hwAntCfgRecover>(accessField_hwAntCfgRecover(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupSwitchPin:
            memFieldDispatch<FieldIdx_hwAntSupSwitchPin>(accessField_hwAntSupSwitchPin(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupShortPin:
            memFieldDispatch<FieldIdx_hwAntSupShortPin>(accessField_hwAntSupShortPin(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupOpenPin:
            memFieldDispatch<FieldIdx_hwAntSupOpenPin>(accessField_hwAntSupOpenPin(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupEngine:
            memFieldDispatch<FieldIdx_hwAntSupEngine>(accessField_hwAntSupEngine(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupShortThr:
            memFieldDispatch<FieldIdx_hwAntSupShortThr>(accessField_hwAntSupShortThr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_hwAntSupOpenThr:
            memFieldDispatch<FieldIdx_hwAntSupOpenThr>(accessField_hwAntSupOpenThr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cAddress:
            memFieldDispatch<FieldIdx_i2cAddress>(accessField_i2cAddress(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cExtendedtimeout:
            memFieldDispatch<FieldIdx_i2cExtendedtimeout>(accessField_i2cExtendedtimeout(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cEnabled:
            memFieldDispatch<FieldIdx_i2cEnabled>(accessField_i2cEnabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cInprotUbx:
            memFieldDispatch<FieldIdx_i2cInprotUbx>(accessField_i2cInprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cInprotNmea:
            memFieldDispatch<FieldIdx_i2cInprotNmea>(accessField_i2cInprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cInprotRtcm3x:
            memFieldDispatch<FieldIdx_i2cInprotRtcm3x>(accessField_i2cInprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cOutprotUbx:
            memFieldDispatch<FieldIdx_i2cOutprotUbx>(accessField_i2cOutprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cOutprotNmea:
            memFieldDispatch<FieldIdx_i2cOutprotNmea>(accessField_i2cOutprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_i2cOutprotRtcm3x:
            memFieldDispatch<FieldIdx_i2cOutprotRtcm3x>(accessField_i2cOutprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxI2c:
            memFieldDispatch<FieldIdx_infmsgUbxI2c>(accessField_infmsgUbxI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxUart1:
            memFieldDispatch<FieldIdx_infmsgUbxUart1>(accessField_infmsgUbxUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxUart2:
            memFieldDispatch<FieldIdx_infmsgUbxUart2>(accessField_infmsgUbxUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxUsb:
            memFieldDispatch<FieldIdx_infmsgUbxUsb>(accessField_infmsgUbxUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgUbxSpi:
            memFieldDispatch<FieldIdx_infmsgUbxSpi>(accessField_infmsgUbxSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaI2c:
            memFieldDispatch<FieldIdx_infmsgNmeaI2c>(accessField_infmsgNmeaI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaUart1:
            memFieldDispatch<FieldIdx_infmsgNmeaUart1>(accessField_infmsgNmeaUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaUart2:
            memFieldDispatch<FieldIdx_infmsgNmeaUart2>(accessField_infmsgNmeaUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaUsb:
            memFieldDispatch<FieldIdx_infmsgNmeaUsb>(accessField_infmsgNmeaUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_infmsgNmeaSpi:
            memFieldDispatch<FieldIdx_infmsgNmeaSpi>(accessField_infmsgNmeaSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_itfmBbThreshold:
            memFieldDispatch<FieldIdx_itfmBbThreshold>(accessField_itfmBbThreshold(), std::forward<TFunc>(func));
            break;
        case FieldIdx_itfmCwThreshold:
            memFieldDispatch<FieldIdx_itfmCwThreshold>(accessField_itfmCwThreshold(), std::forward<TFunc>(func));
            break;
        case FieldIdx_itfmEnable:
            memFieldDispatch<FieldIdx_itfmEnable>(accessField_itfmEnable(), std::forward<TFunc>(func));
            break;
        case FieldIdx_itfmAntSetting:
            memFieldDispatch<FieldIdx_itfmAntSetting>(accessField_itfmAntSetting(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterRecordEna:
            memFieldDispatch<FieldIdx_logfilterRecordEna>(accessField_logfilterRecordEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterOncePerWakeUpEna:
            memFieldDispatch<FieldIdx_logfilterOncePerWakeUpEna>(accessField_logfilterOncePerWakeUpEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterApplyAllFilters:
            memFieldDispatch<FieldIdx_logfilterApplyAllFilters>(accessField_logfilterApplyAllFilters(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterMinInterval:
            memFieldDispatch<FieldIdx_logfilterMinInterval>(accessField_logfilterMinInterval(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterTimeThrs:
            memFieldDispatch<FieldIdx_logfilterTimeThrs>(accessField_logfilterTimeThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterSpeedThrs:
            memFieldDispatch<FieldIdx_logfilterSpeedThrs>(accessField_logfilterSpeedThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_logfilterPositionThrs:
            memFieldDispatch<FieldIdx_logfilterPositionThrs>(accessField_logfilterPositionThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_motGnssSpeedThrs:
            memFieldDispatch<FieldIdx_motGnssSpeedThrs>(accessField_motGnssSpeedThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_motGnssDistThrs:
            memFieldDispatch<FieldIdx_motGnssDistThrs>(accessField_motGnssDistThrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmI2c>(accessField_msgoutNmeaIdDtmI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmSpi>(accessField_msgoutNmeaIdDtmSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmUart1>(accessField_msgoutNmeaIdDtmUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmUart2>(accessField_msgoutNmeaIdDtmUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdDtmUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdDtmUsb>(accessField_msgoutNmeaIdDtmUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsI2c>(accessField_msgoutNmeaIdGbsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsSpi>(accessField_msgoutNmeaIdGbsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsUart1>(accessField_msgoutNmeaIdGbsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsUart2>(accessField_msgoutNmeaIdGbsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGbsUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGbsUsb>(accessField_msgoutNmeaIdGbsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaI2c>(accessField_msgoutNmeaIdGgaI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaSpi>(accessField_msgoutNmeaIdGgaSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaUart1>(accessField_msgoutNmeaIdGgaUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaUart2>(accessField_msgoutNmeaIdGgaUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGgaUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGgaUsb>(accessField_msgoutNmeaIdGgaUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllI2c>(accessField_msgoutNmeaIdGllI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllSpi>(accessField_msgoutNmeaIdGllSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllUart1>(accessField_msgoutNmeaIdGllUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllUart2>(accessField_msgoutNmeaIdGllUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGllUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGllUsb>(accessField_msgoutNmeaIdGllUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsI2c>(accessField_msgoutNmeaIdGnsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsSpi>(accessField_msgoutNmeaIdGnsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsUart1>(accessField_msgoutNmeaIdGnsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsUart2>(accessField_msgoutNmeaIdGnsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGnsUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGnsUsb>(accessField_msgoutNmeaIdGnsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsI2c>(accessField_msgoutNmeaIdGrsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsSpi>(accessField_msgoutNmeaIdGrsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsUart1>(accessField_msgoutNmeaIdGrsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsUart2>(accessField_msgoutNmeaIdGrsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGrsUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGrsUsb>(accessField_msgoutNmeaIdGrsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaI2c>(accessField_msgoutNmeaIdGsaI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaSpi>(accessField_msgoutNmeaIdGsaSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaUart1>(accessField_msgoutNmeaIdGsaUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaUart2>(accessField_msgoutNmeaIdGsaUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsaUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsaUsb>(accessField_msgoutNmeaIdGsaUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstI2c>(accessField_msgoutNmeaIdGstI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstSpi>(accessField_msgoutNmeaIdGstSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstUart1>(accessField_msgoutNmeaIdGstUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstUart2>(accessField_msgoutNmeaIdGstUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGstUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGstUsb>(accessField_msgoutNmeaIdGstUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvI2c>(accessField_msgoutNmeaIdGsvI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvSpi>(accessField_msgoutNmeaIdGsvSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvUart1>(accessField_msgoutNmeaIdGsvUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvUart2>(accessField_msgoutNmeaIdGsvUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdGsvUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdGsvUsb>(accessField_msgoutNmeaIdGsvUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmI2c>(accessField_msgoutNmeaIdRlmI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmSpi>(accessField_msgoutNmeaIdRlmSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmUart1>(accessField_msgoutNmeaIdRlmUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmUart2>(accessField_msgoutNmeaIdRlmUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRlmUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRlmUsb>(accessField_msgoutNmeaIdRlmUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcI2c>(accessField_msgoutNmeaIdRmcI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcSpi>(accessField_msgoutNmeaIdRmcSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcUart1>(accessField_msgoutNmeaIdRmcUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcUart2>(accessField_msgoutNmeaIdRmcUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdRmcUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdRmcUsb>(accessField_msgoutNmeaIdRmcUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwI2c>(accessField_msgoutNmeaIdVlwI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwSpi>(accessField_msgoutNmeaIdVlwSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwUart1>(accessField_msgoutNmeaIdVlwUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwUart2>(accessField_msgoutNmeaIdVlwUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVlwUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVlwUsb>(accessField_msgoutNmeaIdVlwUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgI2c>(accessField_msgoutNmeaIdVtgI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgSpi>(accessField_msgoutNmeaIdVtgSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgUart1>(accessField_msgoutNmeaIdVtgUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgUart2>(accessField_msgoutNmeaIdVtgUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdVtgUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdVtgUsb>(accessField_msgoutNmeaIdVtgUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaI2c:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaI2c>(accessField_msgoutNmeaIdZdaI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaSpi:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaSpi>(accessField_msgoutNmeaIdZdaSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaUart1:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaUart1>(accessField_msgoutNmeaIdZdaUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaUart2:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaUart2>(accessField_msgoutNmeaIdZdaUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutNmeaIdZdaUsb:
            memFieldDispatch<FieldIdx_msgoutNmeaIdZdaUsb>(accessField_msgoutNmeaIdZdaUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypI2c:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypI2c>(accessField_msgoutPubxIdPolypI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypSpi:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypSpi>(accessField_msgoutPubxIdPolypSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypUart1:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypUart1>(accessField_msgoutPubxIdPolypUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypUart2:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypUart2>(accessField_msgoutPubxIdPolypUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolypUsb:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolypUsb>(accessField_msgoutPubxIdPolypUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysI2c:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysI2c>(accessField_msgoutPubxIdPolysI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysSpi:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysSpi>(accessField_msgoutPubxIdPolysSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysUart1:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysUart1>(accessField_msgoutPubxIdPolysUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysUart2:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysUart2>(accessField_msgoutPubxIdPolysUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolysUsb:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolysUsb>(accessField_msgoutPubxIdPolysUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytI2c:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytI2c>(accessField_msgoutPubxIdPolytI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytSpi:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytSpi>(accessField_msgoutPubxIdPolytSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytUart1:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytUart1>(accessField_msgoutPubxIdPolytUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytUart2:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytUart2>(accessField_msgoutPubxIdPolytUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutPubxIdPolytUsb:
            memFieldDispatch<FieldIdx_msgoutPubxIdPolytUsb>(accessField_msgoutPubxIdPolytUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005I2c>(accessField_msgoutRtcm3xType1005I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005Spi>(accessField_msgoutRtcm3xType1005Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005Uart1>(accessField_msgoutRtcm3xType1005Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005Uart2>(accessField_msgoutRtcm3xType1005Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1005Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1005Usb>(accessField_msgoutRtcm3xType1005Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074I2c>(accessField_msgoutRtcm3xType1074I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074Spi>(accessField_msgoutRtcm3xType1074Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074Uart1>(accessField_msgoutRtcm3xType1074Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074Uart2>(accessField_msgoutRtcm3xType1074Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1074Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1074Usb>(accessField_msgoutRtcm3xType1074Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077I2c>(accessField_msgoutRtcm3xType1077I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077Spi>(accessField_msgoutRtcm3xType1077Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077Uart1>(accessField_msgoutRtcm3xType1077Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077Uart2>(accessField_msgoutRtcm3xType1077Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1077Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1077Usb>(accessField_msgoutRtcm3xType1077Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084I2c>(accessField_msgoutRtcm3xType1084I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084Spi>(accessField_msgoutRtcm3xType1084Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084Uart1>(accessField_msgoutRtcm3xType1084Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084Uart2>(accessField_msgoutRtcm3xType1084Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1084Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1084Usb>(accessField_msgoutRtcm3xType1084Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087I2c>(accessField_msgoutRtcm3xType1087I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087Spi>(accessField_msgoutRtcm3xType1087Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087Uart1>(accessField_msgoutRtcm3xType1087Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087Uart2>(accessField_msgoutRtcm3xType1087Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1087Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1087Usb>(accessField_msgoutRtcm3xType1087Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094I2c>(accessField_msgoutRtcm3xType1094I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094Spi>(accessField_msgoutRtcm3xType1094Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094Uart1>(accessField_msgoutRtcm3xType1094Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094Uart2>(accessField_msgoutRtcm3xType1094Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1094Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1094Usb>(accessField_msgoutRtcm3xType1094Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097I2c>(accessField_msgoutRtcm3xType1097I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097Spi>(accessField_msgoutRtcm3xType1097Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097Uart1>(accessField_msgoutRtcm3xType1097Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097Uart2>(accessField_msgoutRtcm3xType1097Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1097Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1097Usb>(accessField_msgoutRtcm3xType1097Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124I2c>(accessField_msgoutRtcm3xType1124I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124Spi>(accessField_msgoutRtcm3xType1124Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124Uart1>(accessField_msgoutRtcm3xType1124Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124Uart2>(accessField_msgoutRtcm3xType1124Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1124Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1124Usb>(accessField_msgoutRtcm3xType1124Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127I2c>(accessField_msgoutRtcm3xType1127I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127Spi>(accessField_msgoutRtcm3xType1127Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127Uart1>(accessField_msgoutRtcm3xType1127Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127Uart2>(accessField_msgoutRtcm3xType1127Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1127Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1127Usb>(accessField_msgoutRtcm3xType1127Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230I2c>(accessField_msgoutRtcm3xType1230I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230Spi>(accessField_msgoutRtcm3xType1230Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230Uart1>(accessField_msgoutRtcm3xType1230Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230Uart2>(accessField_msgoutRtcm3xType1230Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType1230Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType1230Usb>(accessField_msgoutRtcm3xType1230Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0I2c>(accessField_msgoutRtcm3xType4072_0I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0Spi>(accessField_msgoutRtcm3xType4072_0Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0Uart1>(accessField_msgoutRtcm3xType4072_0Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0Uart2>(accessField_msgoutRtcm3xType4072_0Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_0Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_0Usb>(accessField_msgoutRtcm3xType4072_0Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1I2c:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1I2c>(accessField_msgoutRtcm3xType4072_1I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1Spi:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1Spi>(accessField_msgoutRtcm3xType4072_1Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1Uart1:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1Uart1>(accessField_msgoutRtcm3xType4072_1Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1Uart2:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1Uart2>(accessField_msgoutRtcm3xType4072_1Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutRtcm3xType4072_1Usb:
            memFieldDispatch<FieldIdx_msgoutRtcm3xType4072_1Usb>(accessField_msgoutRtcm3xType4072_1Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoI2c:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoI2c>(accessField_msgoutUbxLogInfoI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoSpi:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoSpi>(accessField_msgoutUbxLogInfoSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoUart1:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoUart1>(accessField_msgoutUbxLogInfoUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoUart2:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoUart2>(accessField_msgoutUbxLogInfoUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxLogInfoUsb:
            memFieldDispatch<FieldIdx_msgoutUbxLogInfoUsb>(accessField_msgoutUbxLogInfoUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsI2c>(accessField_msgoutUbxMonCommsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsSpi>(accessField_msgoutUbxMonCommsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsUart1>(accessField_msgoutUbxMonCommsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsUart2>(accessField_msgoutUbxMonCommsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonCommsUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonCommsUsb>(accessField_msgoutUbxMonCommsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2I2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2I2c>(accessField_msgoutUbxMonHw2I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2Spi:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2Spi>(accessField_msgoutUbxMonHw2Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2Uart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2Uart1>(accessField_msgoutUbxMonHw2Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2Uart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2Uart2>(accessField_msgoutUbxMonHw2Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw2Usb:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw2Usb>(accessField_msgoutUbxMonHw2Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3I2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3I2c>(accessField_msgoutUbxMonHw3I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3Spi:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3Spi>(accessField_msgoutUbxMonHw3Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3Uart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3Uart1>(accessField_msgoutUbxMonHw3Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3Uart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3Uart2>(accessField_msgoutUbxMonHw3Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHw3Usb:
            memFieldDispatch<FieldIdx_msgoutUbxMonHw3Usb>(accessField_msgoutUbxMonHw3Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwI2c>(accessField_msgoutUbxMonHwI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwSpi>(accessField_msgoutUbxMonHwSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwUart1>(accessField_msgoutUbxMonHwUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwUart2>(accessField_msgoutUbxMonHwUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonHwUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonHwUsb>(accessField_msgoutUbxMonHwUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoI2c>(accessField_msgoutUbxMonIoI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoSpi>(accessField_msgoutUbxMonIoSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoUart1>(accessField_msgoutUbxMonIoUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoUart2>(accessField_msgoutUbxMonIoUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonIoUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonIoUsb>(accessField_msgoutUbxMonIoUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppI2c>(accessField_msgoutUbxMonMsgppI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppSpi>(accessField_msgoutUbxMonMsgppSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppUart1>(accessField_msgoutUbxMonMsgppUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppUart2>(accessField_msgoutUbxMonMsgppUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonMsgppUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonMsgppUsb>(accessField_msgoutUbxMonMsgppUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfI2c>(accessField_msgoutUbxMonRfI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfSpi>(accessField_msgoutUbxMonRfSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfUart1>(accessField_msgoutUbxMonRfUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfUart2>(accessField_msgoutUbxMonRfUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRfUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonRfUsb>(accessField_msgoutUbxMonRfUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufI2c>(accessField_msgoutUbxMonRxbufI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufSpi>(accessField_msgoutUbxMonRxbufSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufUart1>(accessField_msgoutUbxMonRxbufUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufUart2>(accessField_msgoutUbxMonRxbufUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxbufUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxbufUsb>(accessField_msgoutUbxMonRxbufUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrI2c>(accessField_msgoutUbxMonRxrI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrSpi>(accessField_msgoutUbxMonRxrSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrUart1>(accessField_msgoutUbxMonRxrUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrUart2>(accessField_msgoutUbxMonRxrUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonRxrUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonRxrUsb>(accessField_msgoutUbxMonRxrUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanI2c>(accessField_msgoutUbxMonSpanI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanSpi>(accessField_msgoutUbxMonSpanSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanUart1>(accessField_msgoutUbxMonSpanUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanUart2>(accessField_msgoutUbxMonSpanUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonSpanUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonSpanUsb>(accessField_msgoutUbxMonSpanUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufI2c:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufI2c>(accessField_msgoutUbxMonTxbufI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufSpi:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufSpi>(accessField_msgoutUbxMonTxbufSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufUart1:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufUart1>(accessField_msgoutUbxMonTxbufUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufUart2:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufUart2>(accessField_msgoutUbxMonTxbufUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxMonTxbufUsb:
            memFieldDispatch<FieldIdx_msgoutUbxMonTxbufUsb>(accessField_msgoutUbxMonTxbufUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockI2c>(accessField_msgoutUbxNavClockI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockSpi>(accessField_msgoutUbxNavClockSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockUart1>(accessField_msgoutUbxNavClockUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockUart2>(accessField_msgoutUbxNavClockUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavClockUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavClockUsb>(accessField_msgoutUbxNavClockUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopI2c>(accessField_msgoutUbxNavDopI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopSpi>(accessField_msgoutUbxNavDopSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopUart1>(accessField_msgoutUbxNavDopUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopUart2>(accessField_msgoutUbxNavDopUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavDopUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavDopUsb>(accessField_msgoutUbxNavDopUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeI2c>(accessField_msgoutUbxNavEoeI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeSpi>(accessField_msgoutUbxNavEoeSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeUart1>(accessField_msgoutUbxNavEoeUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeUart2>(accessField_msgoutUbxNavEoeUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavEoeUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavEoeUsb>(accessField_msgoutUbxNavEoeUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceI2c>(accessField_msgoutUbxNavGeofenceI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceSpi>(accessField_msgoutUbxNavGeofenceSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceUart1>(accessField_msgoutUbxNavGeofenceUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceUart2>(accessField_msgoutUbxNavGeofenceUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavGeofenceUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavGeofenceUsb>(accessField_msgoutUbxNavGeofenceUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefI2c>(accessField_msgoutUbxNavHpposecefI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefSpi>(accessField_msgoutUbxNavHpposecefSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefUart1>(accessField_msgoutUbxNavHpposecefUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefUart2>(accessField_msgoutUbxNavHpposecefUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposecefUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposecefUsb>(accessField_msgoutUbxNavHpposecefUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhI2c>(accessField_msgoutUbxNavHpposllhI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhSpi>(accessField_msgoutUbxNavHpposllhSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhUart1>(accessField_msgoutUbxNavHpposllhUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhUart2>(accessField_msgoutUbxNavHpposllhUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavHpposllhUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavHpposllhUsb>(accessField_msgoutUbxNavHpposllhUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoI2c>(accessField_msgoutUbxNavOdoI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoSpi>(accessField_msgoutUbxNavOdoSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoUart1>(accessField_msgoutUbxNavOdoUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoUart2>(accessField_msgoutUbxNavOdoUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOdoUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavOdoUsb>(accessField_msgoutUbxNavOdoUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbI2c>(accessField_msgoutUbxNavOrbI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbSpi>(accessField_msgoutUbxNavOrbSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbUart1>(accessField_msgoutUbxNavOrbUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbUart2>(accessField_msgoutUbxNavOrbUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavOrbUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavOrbUsb>(accessField_msgoutUbxNavOrbUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefI2c>(accessField_msgoutUbxNavPosecefI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefSpi>(accessField_msgoutUbxNavPosecefSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefUart1>(accessField_msgoutUbxNavPosecefUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefUart2>(accessField_msgoutUbxNavPosecefUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosecefUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosecefUsb>(accessField_msgoutUbxNavPosecefUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhI2c>(accessField_msgoutUbxNavPosllhI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhSpi>(accessField_msgoutUbxNavPosllhSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhUart1>(accessField_msgoutUbxNavPosllhUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhUart2>(accessField_msgoutUbxNavPosllhUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPosllhUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavPosllhUsb>(accessField_msgoutUbxNavPosllhUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtI2c>(accessField_msgoutUbxNavPvtI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtSpi>(accessField_msgoutUbxNavPvtSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtUart1>(accessField_msgoutUbxNavPvtUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtUart2>(accessField_msgoutUbxNavPvtUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavPvtUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavPvtUsb>(accessField_msgoutUbxNavPvtUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedI2c>(accessField_msgoutUbxNavRelposnedI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedSpi>(accessField_msgoutUbxNavRelposnedSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedUart1>(accessField_msgoutUbxNavRelposnedUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedUart2>(accessField_msgoutUbxNavRelposnedUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavRelposnedUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavRelposnedUsb>(accessField_msgoutUbxNavRelposnedUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatI2c>(accessField_msgoutUbxNavSatI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatSpi>(accessField_msgoutUbxNavSatSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatUart1>(accessField_msgoutUbxNavSatUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatUart2>(accessField_msgoutUbxNavSatUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSatUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSatUsb>(accessField_msgoutUbxNavSatUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasI2c>(accessField_msgoutUbxNavSbasI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasSpi>(accessField_msgoutUbxNavSbasSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasUart1>(accessField_msgoutUbxNavSbasUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasUart2>(accessField_msgoutUbxNavSbasUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSbasUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSbasUsb>(accessField_msgoutUbxNavSbasUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigI2c>(accessField_msgoutUbxNavSigI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigSpi>(accessField_msgoutUbxNavSigSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigUart1>(accessField_msgoutUbxNavSigUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigUart2>(accessField_msgoutUbxNavSigUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSigUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSigUsb>(accessField_msgoutUbxNavSigUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasI2c>(accessField_msgoutUbxNavSlasI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasSpi>(accessField_msgoutUbxNavSlasSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasUart1>(accessField_msgoutUbxNavSlasUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasUart2>(accessField_msgoutUbxNavSlasUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSlasUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSlasUsb>(accessField_msgoutUbxNavSlasUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusI2c>(accessField_msgoutUbxNavStatusI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusSpi>(accessField_msgoutUbxNavStatusSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusUart1>(accessField_msgoutUbxNavStatusUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusUart2>(accessField_msgoutUbxNavStatusUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavStatusUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavStatusUsb>(accessField_msgoutUbxNavStatusUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinI2c>(accessField_msgoutUbxNavSvinI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinSpi>(accessField_msgoutUbxNavSvinSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinUart1>(accessField_msgoutUbxNavSvinUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinUart2>(accessField_msgoutUbxNavSvinUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavSvinUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavSvinUsb>(accessField_msgoutUbxNavSvinUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsI2c>(accessField_msgoutUbxNavTimebdsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsSpi>(accessField_msgoutUbxNavTimebdsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsUart1>(accessField_msgoutUbxNavTimebdsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsUart2>(accessField_msgoutUbxNavTimebdsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimebdsUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimebdsUsb>(accessField_msgoutUbxNavTimebdsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalI2c>(accessField_msgoutUbxNavTimegalI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalSpi>(accessField_msgoutUbxNavTimegalSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalUart1>(accessField_msgoutUbxNavTimegalUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalUart2>(accessField_msgoutUbxNavTimegalUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegalUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegalUsb>(accessField_msgoutUbxNavTimegalUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloI2c>(accessField_msgoutUbxNavTimegloI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloSpi>(accessField_msgoutUbxNavTimegloSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloUart1>(accessField_msgoutUbxNavTimegloUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloUart2>(accessField_msgoutUbxNavTimegloUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegloUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegloUsb>(accessField_msgoutUbxNavTimegloUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsI2c>(accessField_msgoutUbxNavTimegpsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsSpi>(accessField_msgoutUbxNavTimegpsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsUart1>(accessField_msgoutUbxNavTimegpsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsUart2>(accessField_msgoutUbxNavTimegpsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimegpsUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimegpsUsb>(accessField_msgoutUbxNavTimegpsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsI2c>(accessField_msgoutUbxNavTimelsI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsSpi>(accessField_msgoutUbxNavTimelsSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsUart1>(accessField_msgoutUbxNavTimelsUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsUart2>(accessField_msgoutUbxNavTimelsUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimelsUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimelsUsb>(accessField_msgoutUbxNavTimelsUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssI2c>(accessField_msgoutUbxNavTimeqzssI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssSpi>(accessField_msgoutUbxNavTimeqzssSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssUart1>(accessField_msgoutUbxNavTimeqzssUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssUart2>(accessField_msgoutUbxNavTimeqzssUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeqzssUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeqzssUsb>(accessField_msgoutUbxNavTimeqzssUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcI2c>(accessField_msgoutUbxNavTimeutcI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcSpi>(accessField_msgoutUbxNavTimeutcSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcUart1>(accessField_msgoutUbxNavTimeutcUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcUart2>(accessField_msgoutUbxNavTimeutcUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavTimeutcUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavTimeutcUsb>(accessField_msgoutUbxNavTimeutcUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefI2c>(accessField_msgoutUbxNavVelecefI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefSpi>(accessField_msgoutUbxNavVelecefSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefUart1>(accessField_msgoutUbxNavVelecefUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefUart2>(accessField_msgoutUbxNavVelecefUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelecefUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelecefUsb>(accessField_msgoutUbxNavVelecefUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedI2c:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedI2c>(accessField_msgoutUbxNavVelnedI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedSpi:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedSpi>(accessField_msgoutUbxNavVelnedSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedUart1:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedUart1>(accessField_msgoutUbxNavVelnedUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedUart2:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedUart2>(accessField_msgoutUbxNavVelnedUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxNavVelnedUsb:
            memFieldDispatch<FieldIdx_msgoutUbxNavVelnedUsb>(accessField_msgoutUbxNavVelnedUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxI2c>(accessField_msgoutUbxRxmMeasxI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxSpi>(accessField_msgoutUbxRxmMeasxSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxUart1>(accessField_msgoutUbxRxmMeasxUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxUart2>(accessField_msgoutUbxRxmMeasxUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmMeasxUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmMeasxUsb>(accessField_msgoutUbxRxmMeasxUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxI2c>(accessField_msgoutUbxRxmRawxI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxSpi>(accessField_msgoutUbxRxmRawxSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxUart1>(accessField_msgoutUbxRxmRawxUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxUart2>(accessField_msgoutUbxRxmRawxUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRawxUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRawxUsb>(accessField_msgoutUbxRxmRawxUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmI2c>(accessField_msgoutUbxRxmRlmI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmSpi>(accessField_msgoutUbxRxmRlmSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmUart1>(accessField_msgoutUbxRxmRlmUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmUart2>(accessField_msgoutUbxRxmRlmUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRlmUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRlmUsb>(accessField_msgoutUbxRxmRlmUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmI2c>(accessField_msgoutUbxRxmRtcmI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmSpi>(accessField_msgoutUbxRxmRtcmSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmUart1>(accessField_msgoutUbxRxmRtcmUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmUart2>(accessField_msgoutUbxRxmRtcmUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmRtcmUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmRtcmUsb>(accessField_msgoutUbxRxmRtcmUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxI2c:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxI2c>(accessField_msgoutUbxRxmSfrbxI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxSpi:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxSpi>(accessField_msgoutUbxRxmSfrbxSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxUart1:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxUart1>(accessField_msgoutUbxRxmSfrbxUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxUart2:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxUart2>(accessField_msgoutUbxRxmSfrbxUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxRxmSfrbxUsb:
            memFieldDispatch<FieldIdx_msgoutUbxRxmSfrbxUsb>(accessField_msgoutUbxRxmSfrbxUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2I2c:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2I2c>(accessField_msgoutUbxTimTm2I2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2Spi:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2Spi>(accessField_msgoutUbxTimTm2Spi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2Uart1:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2Uart1>(accessField_msgoutUbxTimTm2Uart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2Uart2:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2Uart2>(accessField_msgoutUbxTimTm2Uart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTm2Usb:
            memFieldDispatch<FieldIdx_msgoutUbxTimTm2Usb>(accessField_msgoutUbxTimTm2Usb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpI2c:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpI2c>(accessField_msgoutUbxTimTpI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpSpi:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpSpi>(accessField_msgoutUbxTimTpSpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpUart1:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpUart1>(accessField_msgoutUbxTimTpUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpUart2:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpUart2>(accessField_msgoutUbxTimTpUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimTpUsb:
            memFieldDispatch<FieldIdx_msgoutUbxTimTpUsb>(accessField_msgoutUbxTimTpUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfyI2c:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfyI2c>(accessField_msgoutUbxTimVrfyI2c(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfySpi:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfySpi>(accessField_msgoutUbxTimVrfySpi(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfyUart1:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfyUart1>(accessField_msgoutUbxTimVrfyUart1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfyUart2:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfyUart2>(accessField_msgoutUbxTimVrfyUart2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_msgoutUbxTimVrfyUsb:
            memFieldDispatch<FieldIdx_msgoutUbxTimVrfyUsb>(accessField_msgoutUbxTimVrfyUsb(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navhpgDgnssmode:
            memFieldDispatch<FieldIdx_navhpgDgnssmode>(accessField_navhpgDgnssmode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgFixmode:
            memFieldDispatch<FieldIdx_navspgFixmode>(accessField_navspgFixmode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInifix3d:
            memFieldDispatch<FieldIdx_navspgInifix3d>(accessField_navspgInifix3d(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgWknrollover:
            memFieldDispatch<FieldIdx_navspgWknrollover>(accessField_navspgWknrollover(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUtcstandard:
            memFieldDispatch<FieldIdx_navspgUtcstandard>(accessField_navspgUtcstandard(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgDynmodel:
            memFieldDispatch<FieldIdx_navspgDynmodel>(accessField_navspgDynmodel(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgAckaiding:
            memFieldDispatch<FieldIdx_navspgAckaiding>(accessField_navspgAckaiding(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUseUsrdat:
            memFieldDispatch<FieldIdx_navspgUseUsrdat>(accessField_navspgUseUsrdat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatMaja:
            memFieldDispatch<FieldIdx_navspgUsrdatMaja>(accessField_navspgUsrdatMaja(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatFlat:
            memFieldDispatch<FieldIdx_navspgUsrdatFlat>(accessField_navspgUsrdatFlat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatDx:
            memFieldDispatch<FieldIdx_navspgUsrdatDx>(accessField_navspgUsrdatDx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatDy:
            memFieldDispatch<FieldIdx_navspgUsrdatDy>(accessField_navspgUsrdatDy(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatDz:
            memFieldDispatch<FieldIdx_navspgUsrdatDz>(accessField_navspgUsrdatDz(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatRotx:
            memFieldDispatch<FieldIdx_navspgUsrdatRotx>(accessField_navspgUsrdatRotx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatRoty:
            memFieldDispatch<FieldIdx_navspgUsrdatRoty>(accessField_navspgUsrdatRoty(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatRotz:
            memFieldDispatch<FieldIdx_navspgUsrdatRotz>(accessField_navspgUsrdatRotz(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgUsrdatScale:
            memFieldDispatch<FieldIdx_navspgUsrdatScale>(accessField_navspgUsrdatScale(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilMinsvs:
            memFieldDispatch<FieldIdx_navspgInfilMinsvs>(accessField_navspgInfilMinsvs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilMaxsvs:
            memFieldDispatch<FieldIdx_navspgInfilMaxsvs>(accessField_navspgInfilMaxsvs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilMincno:
            memFieldDispatch<FieldIdx_navspgInfilMincno>(accessField_navspgInfilMincno(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilMinelev:
            memFieldDispatch<FieldIdx_navspgInfilMinelev>(accessField_navspgInfilMinelev(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilNcnothrs:
            memFieldDispatch<FieldIdx_navspgInfilNcnothrs>(accessField_navspgInfilNcnothrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgInfilCnothrs:
            memFieldDispatch<FieldIdx_navspgInfilCnothrs>(accessField_navspgInfilCnothrs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilPdop:
            memFieldDispatch<FieldIdx_navspgOutfilPdop>(accessField_navspgOutfilPdop(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilTdop:
            memFieldDispatch<FieldIdx_navspgOutfilTdop>(accessField_navspgOutfilTdop(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilPacc:
            memFieldDispatch<FieldIdx_navspgOutfilPacc>(accessField_navspgOutfilPacc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilTacc:
            memFieldDispatch<FieldIdx_navspgOutfilTacc>(accessField_navspgOutfilTacc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgOutfilFacc:
            memFieldDispatch<FieldIdx_navspgOutfilFacc>(accessField_navspgOutfilFacc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgConstrAlt:
            memFieldDispatch<FieldIdx_navspgConstrAlt>(accessField_navspgConstrAlt(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgConstrAltvar:
            memFieldDispatch<FieldIdx_navspgConstrAltvar>(accessField_navspgConstrAltvar(), std::forward<TFunc>(func));
            break;
        case FieldIdx_navspgConstrDgnssto:
            memFieldDispatch<FieldIdx_navspgConstrDgnssto>(accessField_navspgConstrDgnssto(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaProtver:
            memFieldDispatch<FieldIdx_nmeaProtver>(accessField_nmeaProtver(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaMaxsvs:
            memFieldDispatch<FieldIdx_nmeaMaxsvs>(accessField_nmeaMaxsvs(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaCompat:
            memFieldDispatch<FieldIdx_nmeaCompat>(accessField_nmeaCompat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaConsider:
            memFieldDispatch<FieldIdx_nmeaConsider>(accessField_nmeaConsider(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaLimit82:
            memFieldDispatch<FieldIdx_nmeaLimit82>(accessField_nmeaLimit82(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaHighprec:
            memFieldDispatch<FieldIdx_nmeaHighprec>(accessField_nmeaHighprec(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaSvnumbering:
            memFieldDispatch<FieldIdx_nmeaSvnumbering>(accessField_nmeaSvnumbering(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltGps:
            memFieldDispatch<FieldIdx_nmeaFiltGps>(accessField_nmeaFiltGps(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltSbas:
            memFieldDispatch<FieldIdx_nmeaFiltSbas>(accessField_nmeaFiltSbas(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltGal:
            memFieldDispatch<FieldIdx_nmeaFiltGal>(accessField_nmeaFiltGal(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltQzss:
            memFieldDispatch<FieldIdx_nmeaFiltQzss>(accessField_nmeaFiltQzss(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltGlo:
            memFieldDispatch<FieldIdx_nmeaFiltGlo>(accessField_nmeaFiltGlo(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaFiltBds:
            memFieldDispatch<FieldIdx_nmeaFiltBds>(accessField_nmeaFiltBds(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutInvfix:
            memFieldDispatch<FieldIdx_nmeaOutInvfix>(accessField_nmeaOutInvfix(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutMskfix:
            memFieldDispatch<FieldIdx_nmeaOutMskfix>(accessField_nmeaOutMskfix(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutInvtime:
            memFieldDispatch<FieldIdx_nmeaOutInvtime>(accessField_nmeaOutInvtime(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutInvdate:
            memFieldDispatch<FieldIdx_nmeaOutInvdate>(accessField_nmeaOutInvdate(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutOnlygps:
            memFieldDispatch<FieldIdx_nmeaOutOnlygps>(accessField_nmeaOutOnlygps(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutFrozencog:
            memFieldDispatch<FieldIdx_nmeaOutFrozencog>(accessField_nmeaOutFrozencog(), std::forward<TFunc>(func));
            break;
        case FieldIdx_nmeaOutMaintalkerid:
            memFieldDispatch<FieldIdx_nmeaOutMaintalkerid>(accessField_nmeaOutMaintalkerid(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoUseOdo:
            memFieldDispatch<FieldIdx_odoUseOdo>(accessField_odoUseOdo(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoUseCog:
            memFieldDispatch<FieldIdx_odoUseCog>(accessField_odoUseCog(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoOutlpvel:
            memFieldDispatch<FieldIdx_odoOutlpvel>(accessField_odoOutlpvel(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoOutlpcog:
            memFieldDispatch<FieldIdx_odoOutlpcog>(accessField_odoOutlpcog(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoProfile:
            memFieldDispatch<FieldIdx_odoProfile>(accessField_odoProfile(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoCogmaxspeed:
            memFieldDispatch<FieldIdx_odoCogmaxspeed>(accessField_odoCogmaxspeed(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoCogmaxposacc:
            memFieldDispatch<FieldIdx_odoCogmaxposacc>(accessField_odoCogmaxposacc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoVellpgain:
            memFieldDispatch<FieldIdx_odoVellpgain>(accessField_odoVellpgain(), std::forward<TFunc>(func));
            break;
        case FieldIdx_odoCoglpgain:
            memFieldDispatch<FieldIdx_odoCoglpgain>(accessField_odoCoglpgain(), std::forward<TFunc>(func));
            break;
        case FieldIdx_qzssUseSlasDgnss:
            memFieldDispatch<FieldIdx_qzssUseSlasDgnss>(accessField_qzssUseSlasDgnss(), std::forward<TFunc>(func));
            break;
        case FieldIdx_qzssUseSlasTestmode:
            memFieldDispatch<FieldIdx_qzssUseSlasTestmode>(accessField_qzssUseSlasTestmode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_qzssUseSlasRaimUncorr:
            memFieldDispatch<FieldIdx_qzssUseSlasRaimUncorr>(accessField_qzssUseSlasRaimUncorr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rateMeas:
            memFieldDispatch<FieldIdx_rateMeas>(accessField_rateMeas(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rateNav:
            memFieldDispatch<FieldIdx_rateNav>(accessField_rateNav(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rateTimeref:
            memFieldDispatch<FieldIdx_rateTimeref>(accessField_rateTimeref(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvDump:
            memFieldDispatch<FieldIdx_rinvDump>(accessField_rinvDump(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvBinary:
            memFieldDispatch<FieldIdx_rinvBinary>(accessField_rinvBinary(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvDataSize:
            memFieldDispatch<FieldIdx_rinvDataSize>(accessField_rinvDataSize(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvChunk0:
            memFieldDispatch<FieldIdx_rinvChunk0>(accessField_rinvChunk0(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvChunk1:
            memFieldDispatch<FieldIdx_rinvChunk1>(accessField_rinvChunk1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvChunk2:
            memFieldDispatch<FieldIdx_rinvChunk2>(accessField_rinvChunk2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rinvChunk3:
            memFieldDispatch<FieldIdx_rinvChunk3>(accessField_rinvChunk3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rtcmDf003Out:
            memFieldDispatch<FieldIdx_rtcmDf003Out>(accessField_rtcmDf003Out(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rtcmDf003In:
            memFieldDispatch<FieldIdx_rtcmDf003In>(accessField_rtcmDf003In(), std::forward<TFunc>(func));
            break;
        case FieldIdx_rtcmDf003InFilter:
            memFieldDispatch<FieldIdx_rtcmDf003InFilter>(accessField_rtcmDf003InFilter(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasUseTestmode:
            memFieldDispatch<FieldIdx_sbasUseTestmode>(accessField_sbasUseTestmode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasUseRanging:
            memFieldDispatch<FieldIdx_sbasUseRanging>(accessField_sbasUseRanging(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasUseDiffcorr:
            memFieldDispatch<FieldIdx_sbasUseDiffcorr>(accessField_sbasUseDiffcorr(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasUseIntegrity:
            memFieldDispatch<FieldIdx_sbasUseIntegrity>(accessField_sbasUseIntegrity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_sbasPrnscanmask:
            memFieldDispatch<FieldIdx_sbasPrnscanmask>(accessField_sbasPrnscanmask(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGpsEna:
            memFieldDispatch<FieldIdx_signalGpsEna>(accessField_signalGpsEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGpsL1caEna:
            memFieldDispatch<FieldIdx_signalGpsL1caEna>(accessField_signalGpsL1caEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGpsL2cEna:
            memFieldDispatch<FieldIdx_signalGpsL2cEna>(accessField_signalGpsL2cEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalSbasEna:
            memFieldDispatch<FieldIdx_signalSbasEna>(accessField_signalSbasEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalSbasL1caEna:
            memFieldDispatch<FieldIdx_signalSbasL1caEna>(accessField_signalSbasL1caEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGalEna:
            memFieldDispatch<FieldIdx_signalGalEna>(accessField_signalGalEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGalE1Ena:
            memFieldDispatch<FieldIdx_signalGalE1Ena>(accessField_signalGalE1Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGalE5bEna:
            memFieldDispatch<FieldIdx_signalGalE5bEna>(accessField_signalGalE5bEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalBdsEna:
            memFieldDispatch<FieldIdx_signalBdsEna>(accessField_signalBdsEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalBdsB1Ena:
            memFieldDispatch<FieldIdx_signalBdsB1Ena>(accessField_signalBdsB1Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalBdsB2Ena:
            memFieldDispatch<FieldIdx_signalBdsB2Ena>(accessField_signalBdsB2Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalQzssEna:
            memFieldDispatch<FieldIdx_signalQzssEna>(accessField_signalQzssEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalQzssL1caEna:
            memFieldDispatch<FieldIdx_signalQzssL1caEna>(accessField_signalQzssL1caEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalQzssL1sEna:
            memFieldDispatch<FieldIdx_signalQzssL1sEna>(accessField_signalQzssL1sEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalQzssL2cEna:
            memFieldDispatch<FieldIdx_signalQzssL2cEna>(accessField_signalQzssL2cEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGloEna:
            memFieldDispatch<FieldIdx_signalGloEna>(accessField_signalGloEna(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGloL1Ena:
            memFieldDispatch<FieldIdx_signalGloL1Ena>(accessField_signalGloL1Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_signalGloL2Ena:
            memFieldDispatch<FieldIdx_signalGloL2Ena>(accessField_signalGloL2Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiMaxff:
            memFieldDispatch<FieldIdx_spiMaxff>(accessField_spiMaxff(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiCpolarity:
            memFieldDispatch<FieldIdx_spiCpolarity>(accessField_spiCpolarity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiCphase:
            memFieldDispatch<FieldIdx_spiCphase>(accessField_spiCphase(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiExtendedtimeout:
            memFieldDispatch<FieldIdx_spiExtendedtimeout>(accessField_spiExtendedtimeout(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiEnabled:
            memFieldDispatch<FieldIdx_spiEnabled>(accessField_spiEnabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiinprotUbx:
            memFieldDispatch<FieldIdx_spiinprotUbx>(accessField_spiinprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiinprotNmea:
            memFieldDispatch<FieldIdx_spiinprotNmea>(accessField_spiinprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spiinprotRtcm3x:
            memFieldDispatch<FieldIdx_spiinprotRtcm3x>(accessField_spiinprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spioutprotUbx:
            memFieldDispatch<FieldIdx_spioutprotUbx>(accessField_spioutprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spioutprotNmea:
            memFieldDispatch<FieldIdx_spioutprotNmea>(accessField_spioutprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_spioutprotRtcm3x:
            memFieldDispatch<FieldIdx_spioutprotRtcm3x>(accessField_spioutprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeMode:
            memFieldDispatch<FieldIdx_tmodeMode>(accessField_tmodeMode(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodePosType:
            memFieldDispatch<FieldIdx_tmodePosType>(accessField_tmodePosType(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefX:
            memFieldDispatch<FieldIdx_tmodeEcefX>(accessField_tmodeEcefX(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefY:
            memFieldDispatch<FieldIdx_tmodeEcefY>(accessField_tmodeEcefY(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefZ:
            memFieldDispatch<FieldIdx_tmodeEcefZ>(accessField_tmodeEcefZ(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefXHp:
            memFieldDispatch<FieldIdx_tmodeEcefXHp>(accessField_tmodeEcefXHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefYHp:
            memFieldDispatch<FieldIdx_tmodeEcefYHp>(accessField_tmodeEcefYHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeEcefZHp:
            memFieldDispatch<FieldIdx_tmodeEcefZHp>(accessField_tmodeEcefZHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeLat:
            memFieldDispatch<FieldIdx_tmodeLat>(accessField_tmodeLat(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeLon:
            memFieldDispatch<FieldIdx_tmodeLon>(accessField_tmodeLon(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeHeight:
            memFieldDispatch<FieldIdx_tmodeHeight>(accessField_tmodeHeight(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeLatHp:
            memFieldDispatch<FieldIdx_tmodeLatHp>(accessField_tmodeLatHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeLonHp:
            memFieldDispatch<FieldIdx_tmodeLonHp>(accessField_tmodeLonHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeHeightHp:
            memFieldDispatch<FieldIdx_tmodeHeightHp>(accessField_tmodeHeightHp(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeFixedPosAcc:
            memFieldDispatch<FieldIdx_tmodeFixedPosAcc>(accessField_tmodeFixedPosAcc(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeSvinMinDur:
            memFieldDispatch<FieldIdx_tmodeSvinMinDur>(accessField_tmodeSvinMinDur(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tmodeSvinAccLimit:
            memFieldDispatch<FieldIdx_tmodeSvinAccLimit>(accessField_tmodeSvinAccLimit(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPulseDef:
            memFieldDispatch<FieldIdx_tpPulseDef>(accessField_tpPulseDef(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPulseLengthDef:
            memFieldDispatch<FieldIdx_tpPulseLengthDef>(accessField_tpPulseLengthDef(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpAntCabledelay:
            memFieldDispatch<FieldIdx_tpAntCabledelay>(accessField_tpAntCabledelay(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPeriodTp1:
            memFieldDispatch<FieldIdx_tpPeriodTp1>(accessField_tpPeriodTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPeriodLockTp1:
            memFieldDispatch<FieldIdx_tpPeriodLockTp1>(accessField_tpPeriodLockTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpFreqTp1:
            memFieldDispatch<FieldIdx_tpFreqTp1>(accessField_tpFreqTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpFreqLockTp1:
            memFieldDispatch<FieldIdx_tpFreqLockTp1>(accessField_tpFreqLockTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpLenTp1:
            memFieldDispatch<FieldIdx_tpLenTp1>(accessField_tpLenTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpLenLockTp1:
            memFieldDispatch<FieldIdx_tpLenLockTp1>(accessField_tpLenLockTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpDutyTp1:
            memFieldDispatch<FieldIdx_tpDutyTp1>(accessField_tpDutyTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpDutyLockTp1:
            memFieldDispatch<FieldIdx_tpDutyLockTp1>(accessField_tpDutyLockTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpUserDelayTp1:
            memFieldDispatch<FieldIdx_tpUserDelayTp1>(accessField_tpUserDelayTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpTp1Ena:
            memFieldDispatch<FieldIdx_tpTp1Ena>(accessField_tpTp1Ena(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpSyncGnssTp1:
            memFieldDispatch<FieldIdx_tpSyncGnssTp1>(accessField_tpSyncGnssTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpUseLockedTp1:
            memFieldDispatch<FieldIdx_tpUseLockedTp1>(accessField_tpUseLockedTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpAlignToTowTp1:
            memFieldDispatch<FieldIdx_tpAlignToTowTp1>(accessField_tpAlignToTowTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpPolTp1:
            memFieldDispatch<FieldIdx_tpPolTp1>(accessField_tpPolTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_tpTimegridTp1:
            memFieldDispatch<FieldIdx_tpTimegridTp1>(accessField_tpTimegridTp1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyEnabled:
            memFieldDispatch<FieldIdx_txreadyEnabled>(accessField_txreadyEnabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyPolarity:
            memFieldDispatch<FieldIdx_txreadyPolarity>(accessField_txreadyPolarity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyPin:
            memFieldDispatch<FieldIdx_txreadyPin>(accessField_txreadyPin(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyThreshold:
            memFieldDispatch<FieldIdx_txreadyThreshold>(accessField_txreadyThreshold(), std::forward<TFunc>(func));
            break;
        case FieldIdx_txreadyInterface:
            memFieldDispatch<FieldIdx_txreadyInterface>(accessField_txreadyInterface(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Baudrate:
            memFieldDispatch<FieldIdx_uart1Baudrate>(accessField_uart1Baudrate(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Stopbits:
            memFieldDispatch<FieldIdx_uart1Stopbits>(accessField_uart1Stopbits(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Databits:
            memFieldDispatch<FieldIdx_uart1Databits>(accessField_uart1Databits(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Parity:
            memFieldDispatch<FieldIdx_uart1Parity>(accessField_uart1Parity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1Enabled:
            memFieldDispatch<FieldIdx_uart1Enabled>(accessField_uart1Enabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1inprotUbx:
            memFieldDispatch<FieldIdx_uart1inprotUbx>(accessField_uart1inprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1inprotNmea:
            memFieldDispatch<FieldIdx_uart1inprotNmea>(accessField_uart1inprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1inprotRtcm3x:
            memFieldDispatch<FieldIdx_uart1inprotRtcm3x>(accessField_uart1inprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1outprotUbx:
            memFieldDispatch<FieldIdx_uart1outprotUbx>(accessField_uart1outprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1outprotNmea:
            memFieldDispatch<FieldIdx_uart1outprotNmea>(accessField_uart1outprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart1outprotRtcm3x:
            memFieldDispatch<FieldIdx_uart1outprotRtcm3x>(accessField_uart1outprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Baudrate:
            memFieldDispatch<FieldIdx_uart2Baudrate>(accessField_uart2Baudrate(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Stopbits:
            memFieldDispatch<FieldIdx_uart2Stopbits>(accessField_uart2Stopbits(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Databits:
            memFieldDispatch<FieldIdx_uart2Databits>(accessField_uart2Databits(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Parity:
            memFieldDispatch<FieldIdx_uart2Parity>(accessField_uart2Parity(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Enabled:
            memFieldDispatch<FieldIdx_uart2Enabled>(accessField_uart2Enabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2Remap:
            memFieldDispatch<FieldIdx_uart2Remap>(accessField_uart2Remap(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2inprotUbx:
            memFieldDispatch<FieldIdx_uart2inprotUbx>(accessField_uart2inprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2inprotNmea:
            memFieldDispatch<FieldIdx_uart2inprotNmea>(accessField_uart2inprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2inprotRtcm3x:
            memFieldDispatch<FieldIdx_uart2inprotRtcm3x>(accessField_uart2inprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2outprotUbx:
            memFieldDispatch<FieldIdx_uart2outprotUbx>(accessField_uart2outprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2outprotNmea:
            memFieldDispatch<FieldIdx_uart2outprotNmea>(accessField_uart2outprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_uart2outprotRtcm3x:
            memFieldDispatch<FieldIdx_uart2outprotRtcm3x>(accessField_uart2outprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbEnabled:
            memFieldDispatch<FieldIdx_usbEnabled>(accessField_usbEnabled(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSelfpow:
            memFieldDispatch<FieldIdx_usbSelfpow>(accessField_usbSelfpow(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorId:
            memFieldDispatch<FieldIdx_usbVendorId>(accessField_usbVendorId(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductId:
            memFieldDispatch<FieldIdx_usbProductId>(accessField_usbProductId(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbPower:
            memFieldDispatch<FieldIdx_usbPower>(accessField_usbPower(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorStr0:
            memFieldDispatch<FieldIdx_usbVendorStr0>(accessField_usbVendorStr0(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorStr1:
            memFieldDispatch<FieldIdx_usbVendorStr1>(accessField_usbVendorStr1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorStr2:
            memFieldDispatch<FieldIdx_usbVendorStr2>(accessField_usbVendorStr2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbVendorStr3:
            memFieldDispatch<FieldIdx_usbVendorStr3>(accessField_usbVendorStr3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductStr0:
            memFieldDispatch<FieldIdx_usbProductStr0>(accessField_usbProductStr0(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductStr1:
            memFieldDispatch<FieldIdx_usbProductStr1>(accessField_usbProductStr1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductStr2:
            memFieldDispatch<FieldIdx_usbProductStr2>(accessField_usbProductStr2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbProductStr3:
            memFieldDispatch<FieldIdx_usbProductStr3>(accessField_usbProductStr3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSerialNoStr0:
            memFieldDispatch<FieldIdx_usbSerialNoStr0>(accessField_usbSerialNoStr0(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSerialNoStr1:
            memFieldDispatch<FieldIdx_usbSerialNoStr1>(accessField_usbSerialNoStr1(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSerialNoStr2:
            memFieldDispatch<FieldIdx_usbSerialNoStr2>(accessField_usbSerialNoStr2(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbSerialNoStr3:
            memFieldDispatch<FieldIdx_usbSerialNoStr3>(accessField_usbSerialNoStr3(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbinprotUbx:
            memFieldDispatch<FieldIdx_usbinprotUbx>(accessField_usbinprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbinprotNmea:
            memFieldDispatch<FieldIdx_usbinprotNmea>(accessField_usbinprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usbinprotRtcm3x:
            memFieldDispatch<FieldIdx_usbinprotRtcm3x>(accessField_usbinprotRtcm3x(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usboutprotUbx:
            memFieldDispatch<FieldIdx_usboutprotUbx>(accessField_usboutprotUbx(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usboutprotNmea:
            memFieldDispatch<FieldIdx_usboutprotNmea>(accessField_usboutprotNmea(), std::forward<TFunc>(func));
            break;
        case FieldIdx_usboutprotRtcm3x:
            memFieldDispatch<FieldIdx_usboutprotRtcm3x>(accessField_usboutprotRtcm3x(), std::forward<TFunc>(func));
            break;
        default:
            static constexpr bool Invalid_field_execution = false;
            static_cast<void>(Invalid_field_execution);
            COMMS_ASSERT(Invalid_field_execution);
            break;
        }
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return ublox::field::CfgValPairCommon::name();
    }

    COMMS_MSVC_WARNING_PUSH
    COMMS_MSVC_WARNING_DISABLE(4702)
    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus read(TIter& iter, std::size_t len)
    {
        using CommonKeyField=
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FailOnInvalid<>
            >;
        CommonKeyField commonKeyField;

        auto origIter = iter;
        auto es = commonKeyField.read(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }

        auto consumedLen = static_cast<std::size_t>(std::distance(origIter, iter));
        COMMS_ASSERT(consumedLen <= len);
        len -= consumedLen;

        switch (commonKeyField.getValue()) {
        case 271843348UL /* 0x10340014UL */:
            {
                auto& field_bdsUsePrn1to5 = initField_bdsUsePrn1to5();
                COMMS_ASSERT(field_bdsUsePrn1to5.field_key().getValue() == commonKeyField.getValue());
                return field_bdsUsePrn1to5.template readFrom<1>(iter, len);
            }
        case 539230225UL /* 0x20240011UL */:
            {
                auto& field_geofenceConflvl = initField_geofenceConflvl();
                COMMS_ASSERT(field_geofenceConflvl.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceConflvl.template readFrom<1>(iter, len);
            }
        case 270794770UL /* 0x10240012UL */:
            {
                auto& field_geofenceUsePio = initField_geofenceUsePio();
                COMMS_ASSERT(field_geofenceUsePio.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceUsePio.template readFrom<1>(iter, len);
            }
        case 539230227UL /* 0x20240013UL */:
            {
                auto& field_geofencePinpol = initField_geofencePinpol();
                COMMS_ASSERT(field_geofencePinpol.field_key().getValue() == commonKeyField.getValue());
                return field_geofencePinpol.template readFrom<1>(iter, len);
            }
        case 270794784UL /* 0x10240020UL */:
            {
                auto& field_geofenceUseFence1 = initField_geofenceUseFence1();
                COMMS_ASSERT(field_geofenceUseFence1.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceUseFence1.template readFrom<1>(iter, len);
            }
        case 1076101153UL /* 0x40240021UL */:
            {
                auto& field_geofenceFence1Lat = initField_geofenceFence1Lat();
                COMMS_ASSERT(field_geofenceFence1Lat.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence1Lat.template readFrom<1>(iter, len);
            }
        case 1076101154UL /* 0x40240022UL */:
            {
                auto& field_geofenceFence1Lon = initField_geofenceFence1Lon();
                COMMS_ASSERT(field_geofenceFence1Lon.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence1Lon.template readFrom<1>(iter, len);
            }
        case 1076101155UL /* 0x40240023UL */:
            {
                auto& field_geofenceFence1Rad = initField_geofenceFence1Rad();
                COMMS_ASSERT(field_geofenceFence1Rad.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence1Rad.template readFrom<1>(iter, len);
            }
        case 270794800UL /* 0x10240030UL */:
            {
                auto& field_geofenceUseFence2 = initField_geofenceUseFence2();
                COMMS_ASSERT(field_geofenceUseFence2.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceUseFence2.template readFrom<1>(iter, len);
            }
        case 1076101169UL /* 0x40240031UL */:
            {
                auto& field_geofenceFence2Lat = initField_geofenceFence2Lat();
                COMMS_ASSERT(field_geofenceFence2Lat.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence2Lat.template readFrom<1>(iter, len);
            }
        case 1076101170UL /* 0x40240032UL */:
            {
                auto& field_geofenceFence2Lon = initField_geofenceFence2Lon();
                COMMS_ASSERT(field_geofenceFence2Lon.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence2Lon.template readFrom<1>(iter, len);
            }
        case 1076101171UL /* 0x40240033UL */:
            {
                auto& field_geofenceFence2Rad = initField_geofenceFence2Rad();
                COMMS_ASSERT(field_geofenceFence2Rad.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence2Rad.template readFrom<1>(iter, len);
            }
        case 270794816UL /* 0x10240040UL */:
            {
                auto& field_geofenceUseFence3 = initField_geofenceUseFence3();
                COMMS_ASSERT(field_geofenceUseFence3.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceUseFence3.template readFrom<1>(iter, len);
            }
        case 1076101185UL /* 0x40240041UL */:
            {
                auto& field_geofenceFence3Lat = initField_geofenceFence3Lat();
                COMMS_ASSERT(field_geofenceFence3Lat.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence3Lat.template readFrom<1>(iter, len);
            }
        case 1076101186UL /* 0x40240042UL */:
            {
                auto& field_geofenceFence3Lon = initField_geofenceFence3Lon();
                COMMS_ASSERT(field_geofenceFence3Lon.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence3Lon.template readFrom<1>(iter, len);
            }
        case 1076101187UL /* 0x40240043UL */:
            {
                auto& field_geofenceFence3Rad = initField_geofenceFence3Rad();
                COMMS_ASSERT(field_geofenceFence3Rad.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence3Rad.template readFrom<1>(iter, len);
            }
        case 270794832UL /* 0x10240050UL */:
            {
                auto& field_geofenceUseFence4 = initField_geofenceUseFence4();
                COMMS_ASSERT(field_geofenceUseFence4.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceUseFence4.template readFrom<1>(iter, len);
            }
        case 1076101201UL /* 0x40240051UL */:
            {
                auto& field_geofenceFence4Lat = initField_geofenceFence4Lat();
                COMMS_ASSERT(field_geofenceFence4Lat.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence4Lat.template readFrom<1>(iter, len);
            }
        case 1076101202UL /* 0x40240052UL */:
            {
                auto& field_geofenceFence4Lon = initField_geofenceFence4Lon();
                COMMS_ASSERT(field_geofenceFence4Lon.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence4Lon.template readFrom<1>(iter, len);
            }
        case 1076101203UL /* 0x40240053UL */:
            {
                auto& field_geofenceFence4Rad = initField_geofenceFence4Rad();
                COMMS_ASSERT(field_geofenceFence4Rad.field_key().getValue() == commonKeyField.getValue());
                return field_geofenceFence4Rad.template readFrom<1>(iter, len);
            }
        case 279117870UL /* 0x10A3002EUL */:
            {
                auto& field_hwAntCfgValctrl = initField_hwAntCfgValctrl();
                COMMS_ASSERT(field_hwAntCfgValctrl.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntCfgValctrl.template readFrom<1>(iter, len);
            }
        case 279117871UL /* 0x10A3002FUL */:
            {
                auto& field_hwAntCfgShortdet = initField_hwAntCfgShortdet();
                COMMS_ASSERT(field_hwAntCfgShortdet.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntCfgShortdet.template readFrom<1>(iter, len);
            }
        case 279117872UL /* 0x10A30030UL */:
            {
                auto& field_hwAntCfgShortdetPol = initField_hwAntCfgShortdetPol();
                COMMS_ASSERT(field_hwAntCfgShortdetPol.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntCfgShortdetPol.template readFrom<1>(iter, len);
            }
        case 279117873UL /* 0x10A30031UL */:
            {
                auto& field_hwAntCfgOpendet = initField_hwAntCfgOpendet();
                COMMS_ASSERT(field_hwAntCfgOpendet.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntCfgOpendet.template readFrom<1>(iter, len);
            }
        case 279117874UL /* 0x10A30032UL */:
            {
                auto& field_hwAntCfgOpendetPol = initField_hwAntCfgOpendetPol();
                COMMS_ASSERT(field_hwAntCfgOpendetPol.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntCfgOpendetPol.template readFrom<1>(iter, len);
            }
        case 279117875UL /* 0x10A30033UL */:
            {
                auto& field_hwAntCfgPwrdown = initField_hwAntCfgPwrdown();
                COMMS_ASSERT(field_hwAntCfgPwrdown.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntCfgPwrdown.template readFrom<1>(iter, len);
            }
        case 279117876UL /* 0x10A30034UL */:
            {
                auto& field_hwAntCfgPwrdownPol = initField_hwAntCfgPwrdownPol();
                COMMS_ASSERT(field_hwAntCfgPwrdownPol.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntCfgPwrdownPol.template readFrom<1>(iter, len);
            }
        case 279117877UL /* 0x10A30035UL */:
            {
                auto& field_hwAntCfgRecover = initField_hwAntCfgRecover();
                COMMS_ASSERT(field_hwAntCfgRecover.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntCfgRecover.template readFrom<1>(iter, len);
            }
        case 547553334UL /* 0x20A30036UL */:
            {
                auto& field_hwAntSupSwitchPin = initField_hwAntSupSwitchPin();
                COMMS_ASSERT(field_hwAntSupSwitchPin.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntSupSwitchPin.template readFrom<1>(iter, len);
            }
        case 547553335UL /* 0x20A30037UL */:
            {
                auto& field_hwAntSupShortPin = initField_hwAntSupShortPin();
                COMMS_ASSERT(field_hwAntSupShortPin.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntSupShortPin.template readFrom<1>(iter, len);
            }
        case 547553336UL /* 0x20A30038UL */:
            {
                auto& field_hwAntSupOpenPin = initField_hwAntSupOpenPin();
                COMMS_ASSERT(field_hwAntSupOpenPin.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntSupOpenPin.template readFrom<1>(iter, len);
            }
        case 547553364UL /* 0x20A30054UL */:
            {
                auto& field_hwAntSupEngine = initField_hwAntSupEngine();
                COMMS_ASSERT(field_hwAntSupEngine.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntSupEngine.template readFrom<1>(iter, len);
            }
        case 547553365UL /* 0x20A30055UL */:
            {
                auto& field_hwAntSupShortThr = initField_hwAntSupShortThr();
                COMMS_ASSERT(field_hwAntSupShortThr.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntSupShortThr.template readFrom<1>(iter, len);
            }
        case 547553366UL /* 0x20A30056UL */:
            {
                auto& field_hwAntSupOpenThr = initField_hwAntSupOpenThr();
                COMMS_ASSERT(field_hwAntSupOpenThr.field_key().getValue() == commonKeyField.getValue());
                return field_hwAntSupOpenThr.template readFrom<1>(iter, len);
            }
        case 542179329UL /* 0x20510001UL */:
            {
                auto& field_i2cAddress = initField_i2cAddress();
                COMMS_ASSERT(field_i2cAddress.field_key().getValue() == commonKeyField.getValue());
                return field_i2cAddress.template readFrom<1>(iter, len);
            }
        case 273743874UL /* 0x10510002UL */:
            {
                auto& field_i2cExtendedtimeout = initField_i2cExtendedtimeout();
                COMMS_ASSERT(field_i2cExtendedtimeout.field_key().getValue() == commonKeyField.getValue());
                return field_i2cExtendedtimeout.template readFrom<1>(iter, len);
            }
        case 542179331UL /* 0x20510003UL */:
            {
                auto& field_i2cEnabled = initField_i2cEnabled();
                COMMS_ASSERT(field_i2cEnabled.field_key().getValue() == commonKeyField.getValue());
                return field_i2cEnabled.template readFrom<1>(iter, len);
            }
        case 275841025UL /* 0x10710001UL */:
            {
                auto& field_i2cInprotUbx = initField_i2cInprotUbx();
                COMMS_ASSERT(field_i2cInprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_i2cInprotUbx.template readFrom<1>(iter, len);
            }
        case 275841026UL /* 0x10710002UL */:
            {
                auto& field_i2cInprotNmea = initField_i2cInprotNmea();
                COMMS_ASSERT(field_i2cInprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_i2cInprotNmea.template readFrom<1>(iter, len);
            }
        case 275841028UL /* 0x10710004UL */:
            {
                auto& field_i2cInprotRtcm3x = initField_i2cInprotRtcm3x();
                COMMS_ASSERT(field_i2cInprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_i2cInprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 275906561UL /* 0x10720001UL */:
            {
                auto& field_i2cOutprotUbx = initField_i2cOutprotUbx();
                COMMS_ASSERT(field_i2cOutprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_i2cOutprotUbx.template readFrom<1>(iter, len);
            }
        case 275906562UL /* 0x10720002UL */:
            {
                auto& field_i2cOutprotNmea = initField_i2cOutprotNmea();
                COMMS_ASSERT(field_i2cOutprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_i2cOutprotNmea.template readFrom<1>(iter, len);
            }
        case 275906564UL /* 0x10720004UL */:
            {
                auto& field_i2cOutprotRtcm3x = initField_i2cOutprotRtcm3x();
                COMMS_ASSERT(field_i2cOutprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_i2cOutprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 546439169UL /* 0x20920001UL */:
            {
                auto& field_infmsgUbxI2c = initField_infmsgUbxI2c();
                COMMS_ASSERT(field_infmsgUbxI2c.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgUbxI2c.template readFrom<1>(iter, len);
            }
        case 546439170UL /* 0x20920002UL */:
            {
                auto& field_infmsgUbxUart1 = initField_infmsgUbxUart1();
                COMMS_ASSERT(field_infmsgUbxUart1.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgUbxUart1.template readFrom<1>(iter, len);
            }
        case 546439171UL /* 0x20920003UL */:
            {
                auto& field_infmsgUbxUart2 = initField_infmsgUbxUart2();
                COMMS_ASSERT(field_infmsgUbxUart2.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgUbxUart2.template readFrom<1>(iter, len);
            }
        case 546439172UL /* 0x20920004UL */:
            {
                auto& field_infmsgUbxUsb = initField_infmsgUbxUsb();
                COMMS_ASSERT(field_infmsgUbxUsb.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgUbxUsb.template readFrom<1>(iter, len);
            }
        case 546439173UL /* 0x20920005UL */:
            {
                auto& field_infmsgUbxSpi = initField_infmsgUbxSpi();
                COMMS_ASSERT(field_infmsgUbxSpi.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgUbxSpi.template readFrom<1>(iter, len);
            }
        case 546439174UL /* 0x20920006UL */:
            {
                auto& field_infmsgNmeaI2c = initField_infmsgNmeaI2c();
                COMMS_ASSERT(field_infmsgNmeaI2c.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgNmeaI2c.template readFrom<1>(iter, len);
            }
        case 546439175UL /* 0x20920007UL */:
            {
                auto& field_infmsgNmeaUart1 = initField_infmsgNmeaUart1();
                COMMS_ASSERT(field_infmsgNmeaUart1.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgNmeaUart1.template readFrom<1>(iter, len);
            }
        case 546439176UL /* 0x20920008UL */:
            {
                auto& field_infmsgNmeaUart2 = initField_infmsgNmeaUart2();
                COMMS_ASSERT(field_infmsgNmeaUart2.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgNmeaUart2.template readFrom<1>(iter, len);
            }
        case 546439177UL /* 0x20920009UL */:
            {
                auto& field_infmsgNmeaUsb = initField_infmsgNmeaUsb();
                COMMS_ASSERT(field_infmsgNmeaUsb.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgNmeaUsb.template readFrom<1>(iter, len);
            }
        case 546439178UL /* 0x2092000AUL */:
            {
                auto& field_infmsgNmeaSpi = initField_infmsgNmeaSpi();
                COMMS_ASSERT(field_infmsgNmeaSpi.field_key().getValue() == commonKeyField.getValue());
                return field_infmsgNmeaSpi.template readFrom<1>(iter, len);
            }
        case 541130753UL /* 0x20410001UL */:
            {
                auto& field_itfmBbThreshold = initField_itfmBbThreshold();
                COMMS_ASSERT(field_itfmBbThreshold.field_key().getValue() == commonKeyField.getValue());
                return field_itfmBbThreshold.template readFrom<1>(iter, len);
            }
        case 541130754UL /* 0x20410002UL */:
            {
                auto& field_itfmCwThreshold = initField_itfmCwThreshold();
                COMMS_ASSERT(field_itfmCwThreshold.field_key().getValue() == commonKeyField.getValue());
                return field_itfmCwThreshold.template readFrom<1>(iter, len);
            }
        case 272695309UL /* 0x1041000DUL */:
            {
                auto& field_itfmEnable = initField_itfmEnable();
                COMMS_ASSERT(field_itfmEnable.field_key().getValue() == commonKeyField.getValue());
                return field_itfmEnable.template readFrom<1>(iter, len);
            }
        case 541130768UL /* 0x20410010UL */:
            {
                auto& field_itfmAntSetting = initField_itfmAntSetting();
                COMMS_ASSERT(field_itfmAntSetting.field_key().getValue() == commonKeyField.getValue());
                return field_itfmAntSetting.template readFrom<1>(iter, len);
            }
        case 282984450UL /* 0x10DE0002UL */:
            {
                auto& field_logfilterRecordEna = initField_logfilterRecordEna();
                COMMS_ASSERT(field_logfilterRecordEna.field_key().getValue() == commonKeyField.getValue());
                return field_logfilterRecordEna.template readFrom<1>(iter, len);
            }
        case 282984451UL /* 0x10DE0003UL */:
            {
                auto& field_logfilterOncePerWakeUpEna = initField_logfilterOncePerWakeUpEna();
                COMMS_ASSERT(field_logfilterOncePerWakeUpEna.field_key().getValue() == commonKeyField.getValue());
                return field_logfilterOncePerWakeUpEna.template readFrom<1>(iter, len);
            }
        case 282984452UL /* 0x10DE0004UL */:
            {
                auto& field_logfilterApplyAllFilters = initField_logfilterApplyAllFilters();
                COMMS_ASSERT(field_logfilterApplyAllFilters.field_key().getValue() == commonKeyField.getValue());
                return field_logfilterApplyAllFilters.template readFrom<1>(iter, len);
            }
        case 819855365UL /* 0x30DE0005UL */:
            {
                auto& field_logfilterMinInterval = initField_logfilterMinInterval();
                COMMS_ASSERT(field_logfilterMinInterval.field_key().getValue() == commonKeyField.getValue());
                return field_logfilterMinInterval.template readFrom<1>(iter, len);
            }
        case 819855366UL /* 0x30DE0006UL */:
            {
                auto& field_logfilterTimeThrs = initField_logfilterTimeThrs();
                COMMS_ASSERT(field_logfilterTimeThrs.field_key().getValue() == commonKeyField.getValue());
                return field_logfilterTimeThrs.template readFrom<1>(iter, len);
            }
        case 819855367UL /* 0x30DE0007UL */:
            {
                auto& field_logfilterSpeedThrs = initField_logfilterSpeedThrs();
                COMMS_ASSERT(field_logfilterSpeedThrs.field_key().getValue() == commonKeyField.getValue());
                return field_logfilterSpeedThrs.template readFrom<1>(iter, len);
            }
        case 1088290824UL /* 0x40DE0008UL */:
            {
                auto& field_logfilterPositionThrs = initField_logfilterPositionThrs();
                COMMS_ASSERT(field_logfilterPositionThrs.field_key().getValue() == commonKeyField.getValue());
                return field_logfilterPositionThrs.template readFrom<1>(iter, len);
            }
        case 539295800UL /* 0x20250038UL */:
            {
                auto& field_motGnssSpeedThrs = initField_motGnssSpeedThrs();
                COMMS_ASSERT(field_motGnssSpeedThrs.field_key().getValue() == commonKeyField.getValue());
                return field_motGnssSpeedThrs.template readFrom<1>(iter, len);
            }
        case 807731259UL /* 0x3025003BUL */:
            {
                auto& field_motGnssDistThrs = initField_motGnssDistThrs();
                COMMS_ASSERT(field_motGnssDistThrs.field_key().getValue() == commonKeyField.getValue());
                return field_motGnssDistThrs.template readFrom<1>(iter, len);
            }
        case 546373798UL /* 0x209100A6UL */:
            {
                auto& field_msgoutNmeaIdDtmI2c = initField_msgoutNmeaIdDtmI2c();
                COMMS_ASSERT(field_msgoutNmeaIdDtmI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdDtmI2c.template readFrom<1>(iter, len);
            }
        case 546373802UL /* 0x209100AAUL */:
            {
                auto& field_msgoutNmeaIdDtmSpi = initField_msgoutNmeaIdDtmSpi();
                COMMS_ASSERT(field_msgoutNmeaIdDtmSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdDtmSpi.template readFrom<1>(iter, len);
            }
        case 546373799UL /* 0x209100A7UL */:
            {
                auto& field_msgoutNmeaIdDtmUart1 = initField_msgoutNmeaIdDtmUart1();
                COMMS_ASSERT(field_msgoutNmeaIdDtmUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdDtmUart1.template readFrom<1>(iter, len);
            }
        case 546373800UL /* 0x209100A8UL */:
            {
                auto& field_msgoutNmeaIdDtmUart2 = initField_msgoutNmeaIdDtmUart2();
                COMMS_ASSERT(field_msgoutNmeaIdDtmUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdDtmUart2.template readFrom<1>(iter, len);
            }
        case 546373801UL /* 0x209100A9UL */:
            {
                auto& field_msgoutNmeaIdDtmUsb = initField_msgoutNmeaIdDtmUsb();
                COMMS_ASSERT(field_msgoutNmeaIdDtmUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdDtmUsb.template readFrom<1>(iter, len);
            }
        case 546373853UL /* 0x209100DDUL */:
            {
                auto& field_msgoutNmeaIdGbsI2c = initField_msgoutNmeaIdGbsI2c();
                COMMS_ASSERT(field_msgoutNmeaIdGbsI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGbsI2c.template readFrom<1>(iter, len);
            }
        case 546373857UL /* 0x209100E1UL */:
            {
                auto& field_msgoutNmeaIdGbsSpi = initField_msgoutNmeaIdGbsSpi();
                COMMS_ASSERT(field_msgoutNmeaIdGbsSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGbsSpi.template readFrom<1>(iter, len);
            }
        case 546373854UL /* 0x209100DEUL */:
            {
                auto& field_msgoutNmeaIdGbsUart1 = initField_msgoutNmeaIdGbsUart1();
                COMMS_ASSERT(field_msgoutNmeaIdGbsUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGbsUart1.template readFrom<1>(iter, len);
            }
        case 546373855UL /* 0x209100DFUL */:
            {
                auto& field_msgoutNmeaIdGbsUart2 = initField_msgoutNmeaIdGbsUart2();
                COMMS_ASSERT(field_msgoutNmeaIdGbsUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGbsUart2.template readFrom<1>(iter, len);
            }
        case 546373856UL /* 0x209100E0UL */:
            {
                auto& field_msgoutNmeaIdGbsUsb = initField_msgoutNmeaIdGbsUsb();
                COMMS_ASSERT(field_msgoutNmeaIdGbsUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGbsUsb.template readFrom<1>(iter, len);
            }
        case 546373818UL /* 0x209100BAUL */:
            {
                auto& field_msgoutNmeaIdGgaI2c = initField_msgoutNmeaIdGgaI2c();
                COMMS_ASSERT(field_msgoutNmeaIdGgaI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGgaI2c.template readFrom<1>(iter, len);
            }
        case 546373822UL /* 0x209100BEUL */:
            {
                auto& field_msgoutNmeaIdGgaSpi = initField_msgoutNmeaIdGgaSpi();
                COMMS_ASSERT(field_msgoutNmeaIdGgaSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGgaSpi.template readFrom<1>(iter, len);
            }
        case 546373819UL /* 0x209100BBUL */:
            {
                auto& field_msgoutNmeaIdGgaUart1 = initField_msgoutNmeaIdGgaUart1();
                COMMS_ASSERT(field_msgoutNmeaIdGgaUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGgaUart1.template readFrom<1>(iter, len);
            }
        case 546373820UL /* 0x209100BCUL */:
            {
                auto& field_msgoutNmeaIdGgaUart2 = initField_msgoutNmeaIdGgaUart2();
                COMMS_ASSERT(field_msgoutNmeaIdGgaUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGgaUart2.template readFrom<1>(iter, len);
            }
        case 546373821UL /* 0x209100BDUL */:
            {
                auto& field_msgoutNmeaIdGgaUsb = initField_msgoutNmeaIdGgaUsb();
                COMMS_ASSERT(field_msgoutNmeaIdGgaUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGgaUsb.template readFrom<1>(iter, len);
            }
        case 546373833UL /* 0x209100C9UL */:
            {
                auto& field_msgoutNmeaIdGllI2c = initField_msgoutNmeaIdGllI2c();
                COMMS_ASSERT(field_msgoutNmeaIdGllI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGllI2c.template readFrom<1>(iter, len);
            }
        case 546373837UL /* 0x209100CDUL */:
            {
                auto& field_msgoutNmeaIdGllSpi = initField_msgoutNmeaIdGllSpi();
                COMMS_ASSERT(field_msgoutNmeaIdGllSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGllSpi.template readFrom<1>(iter, len);
            }
        case 546373834UL /* 0x209100CAUL */:
            {
                auto& field_msgoutNmeaIdGllUart1 = initField_msgoutNmeaIdGllUart1();
                COMMS_ASSERT(field_msgoutNmeaIdGllUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGllUart1.template readFrom<1>(iter, len);
            }
        case 546373835UL /* 0x209100CBUL */:
            {
                auto& field_msgoutNmeaIdGllUart2 = initField_msgoutNmeaIdGllUart2();
                COMMS_ASSERT(field_msgoutNmeaIdGllUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGllUart2.template readFrom<1>(iter, len);
            }
        case 546373836UL /* 0x209100CCUL */:
            {
                auto& field_msgoutNmeaIdGllUsb = initField_msgoutNmeaIdGllUsb();
                COMMS_ASSERT(field_msgoutNmeaIdGllUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGllUsb.template readFrom<1>(iter, len);
            }
        case 546373813UL /* 0x209100B5UL */:
            {
                auto& field_msgoutNmeaIdGnsI2c = initField_msgoutNmeaIdGnsI2c();
                COMMS_ASSERT(field_msgoutNmeaIdGnsI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGnsI2c.template readFrom<1>(iter, len);
            }
        case 546373817UL /* 0x209100B9UL */:
            {
                auto& field_msgoutNmeaIdGnsSpi = initField_msgoutNmeaIdGnsSpi();
                COMMS_ASSERT(field_msgoutNmeaIdGnsSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGnsSpi.template readFrom<1>(iter, len);
            }
        case 546373814UL /* 0x209100B6UL */:
            {
                auto& field_msgoutNmeaIdGnsUart1 = initField_msgoutNmeaIdGnsUart1();
                COMMS_ASSERT(field_msgoutNmeaIdGnsUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGnsUart1.template readFrom<1>(iter, len);
            }
        case 546373815UL /* 0x209100B7UL */:
            {
                auto& field_msgoutNmeaIdGnsUart2 = initField_msgoutNmeaIdGnsUart2();
                COMMS_ASSERT(field_msgoutNmeaIdGnsUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGnsUart2.template readFrom<1>(iter, len);
            }
        case 546373816UL /* 0x209100B8UL */:
            {
                auto& field_msgoutNmeaIdGnsUsb = initField_msgoutNmeaIdGnsUsb();
                COMMS_ASSERT(field_msgoutNmeaIdGnsUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGnsUsb.template readFrom<1>(iter, len);
            }
        case 546373838UL /* 0x209100CEUL */:
            {
                auto& field_msgoutNmeaIdGrsI2c = initField_msgoutNmeaIdGrsI2c();
                COMMS_ASSERT(field_msgoutNmeaIdGrsI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGrsI2c.template readFrom<1>(iter, len);
            }
        case 546373842UL /* 0x209100D2UL */:
            {
                auto& field_msgoutNmeaIdGrsSpi = initField_msgoutNmeaIdGrsSpi();
                COMMS_ASSERT(field_msgoutNmeaIdGrsSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGrsSpi.template readFrom<1>(iter, len);
            }
        case 546373839UL /* 0x209100CFUL */:
            {
                auto& field_msgoutNmeaIdGrsUart1 = initField_msgoutNmeaIdGrsUart1();
                COMMS_ASSERT(field_msgoutNmeaIdGrsUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGrsUart1.template readFrom<1>(iter, len);
            }
        case 546373840UL /* 0x209100D0UL */:
            {
                auto& field_msgoutNmeaIdGrsUart2 = initField_msgoutNmeaIdGrsUart2();
                COMMS_ASSERT(field_msgoutNmeaIdGrsUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGrsUart2.template readFrom<1>(iter, len);
            }
        case 546373841UL /* 0x209100D1UL */:
            {
                auto& field_msgoutNmeaIdGrsUsb = initField_msgoutNmeaIdGrsUsb();
                COMMS_ASSERT(field_msgoutNmeaIdGrsUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGrsUsb.template readFrom<1>(iter, len);
            }
        case 546373823UL /* 0x209100BFUL */:
            {
                auto& field_msgoutNmeaIdGsaI2c = initField_msgoutNmeaIdGsaI2c();
                COMMS_ASSERT(field_msgoutNmeaIdGsaI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsaI2c.template readFrom<1>(iter, len);
            }
        case 546373827UL /* 0x209100C3UL */:
            {
                auto& field_msgoutNmeaIdGsaSpi = initField_msgoutNmeaIdGsaSpi();
                COMMS_ASSERT(field_msgoutNmeaIdGsaSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsaSpi.template readFrom<1>(iter, len);
            }
        case 546373824UL /* 0x209100C0UL */:
            {
                auto& field_msgoutNmeaIdGsaUart1 = initField_msgoutNmeaIdGsaUart1();
                COMMS_ASSERT(field_msgoutNmeaIdGsaUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsaUart1.template readFrom<1>(iter, len);
            }
        case 546373825UL /* 0x209100C1UL */:
            {
                auto& field_msgoutNmeaIdGsaUart2 = initField_msgoutNmeaIdGsaUart2();
                COMMS_ASSERT(field_msgoutNmeaIdGsaUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsaUart2.template readFrom<1>(iter, len);
            }
        case 546373826UL /* 0x209100C2UL */:
            {
                auto& field_msgoutNmeaIdGsaUsb = initField_msgoutNmeaIdGsaUsb();
                COMMS_ASSERT(field_msgoutNmeaIdGsaUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsaUsb.template readFrom<1>(iter, len);
            }
        case 546373843UL /* 0x209100D3UL */:
            {
                auto& field_msgoutNmeaIdGstI2c = initField_msgoutNmeaIdGstI2c();
                COMMS_ASSERT(field_msgoutNmeaIdGstI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGstI2c.template readFrom<1>(iter, len);
            }
        case 546373847UL /* 0x209100D7UL */:
            {
                auto& field_msgoutNmeaIdGstSpi = initField_msgoutNmeaIdGstSpi();
                COMMS_ASSERT(field_msgoutNmeaIdGstSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGstSpi.template readFrom<1>(iter, len);
            }
        case 546373844UL /* 0x209100D4UL */:
            {
                auto& field_msgoutNmeaIdGstUart1 = initField_msgoutNmeaIdGstUart1();
                COMMS_ASSERT(field_msgoutNmeaIdGstUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGstUart1.template readFrom<1>(iter, len);
            }
        case 546373845UL /* 0x209100D5UL */:
            {
                auto& field_msgoutNmeaIdGstUart2 = initField_msgoutNmeaIdGstUart2();
                COMMS_ASSERT(field_msgoutNmeaIdGstUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGstUart2.template readFrom<1>(iter, len);
            }
        case 546373846UL /* 0x209100D6UL */:
            {
                auto& field_msgoutNmeaIdGstUsb = initField_msgoutNmeaIdGstUsb();
                COMMS_ASSERT(field_msgoutNmeaIdGstUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGstUsb.template readFrom<1>(iter, len);
            }
        case 546373828UL /* 0x209100C4UL */:
            {
                auto& field_msgoutNmeaIdGsvI2c = initField_msgoutNmeaIdGsvI2c();
                COMMS_ASSERT(field_msgoutNmeaIdGsvI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsvI2c.template readFrom<1>(iter, len);
            }
        case 546373832UL /* 0x209100C8UL */:
            {
                auto& field_msgoutNmeaIdGsvSpi = initField_msgoutNmeaIdGsvSpi();
                COMMS_ASSERT(field_msgoutNmeaIdGsvSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsvSpi.template readFrom<1>(iter, len);
            }
        case 546373829UL /* 0x209100C5UL */:
            {
                auto& field_msgoutNmeaIdGsvUart1 = initField_msgoutNmeaIdGsvUart1();
                COMMS_ASSERT(field_msgoutNmeaIdGsvUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsvUart1.template readFrom<1>(iter, len);
            }
        case 546373830UL /* 0x209100C6UL */:
            {
                auto& field_msgoutNmeaIdGsvUart2 = initField_msgoutNmeaIdGsvUart2();
                COMMS_ASSERT(field_msgoutNmeaIdGsvUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsvUart2.template readFrom<1>(iter, len);
            }
        case 546373831UL /* 0x209100C7UL */:
            {
                auto& field_msgoutNmeaIdGsvUsb = initField_msgoutNmeaIdGsvUsb();
                COMMS_ASSERT(field_msgoutNmeaIdGsvUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdGsvUsb.template readFrom<1>(iter, len);
            }
        case 546374656UL /* 0x20910400UL */:
            {
                auto& field_msgoutNmeaIdRlmI2c = initField_msgoutNmeaIdRlmI2c();
                COMMS_ASSERT(field_msgoutNmeaIdRlmI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRlmI2c.template readFrom<1>(iter, len);
            }
        case 546374660UL /* 0x20910404UL */:
            {
                auto& field_msgoutNmeaIdRlmSpi = initField_msgoutNmeaIdRlmSpi();
                COMMS_ASSERT(field_msgoutNmeaIdRlmSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRlmSpi.template readFrom<1>(iter, len);
            }
        case 546374657UL /* 0x20910401UL */:
            {
                auto& field_msgoutNmeaIdRlmUart1 = initField_msgoutNmeaIdRlmUart1();
                COMMS_ASSERT(field_msgoutNmeaIdRlmUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRlmUart1.template readFrom<1>(iter, len);
            }
        case 546374658UL /* 0x20910402UL */:
            {
                auto& field_msgoutNmeaIdRlmUart2 = initField_msgoutNmeaIdRlmUart2();
                COMMS_ASSERT(field_msgoutNmeaIdRlmUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRlmUart2.template readFrom<1>(iter, len);
            }
        case 546374659UL /* 0x20910403UL */:
            {
                auto& field_msgoutNmeaIdRlmUsb = initField_msgoutNmeaIdRlmUsb();
                COMMS_ASSERT(field_msgoutNmeaIdRlmUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRlmUsb.template readFrom<1>(iter, len);
            }
        case 546373803UL /* 0x209100ABUL */:
            {
                auto& field_msgoutNmeaIdRmcI2c = initField_msgoutNmeaIdRmcI2c();
                COMMS_ASSERT(field_msgoutNmeaIdRmcI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRmcI2c.template readFrom<1>(iter, len);
            }
        case 546373807UL /* 0x209100AFUL */:
            {
                auto& field_msgoutNmeaIdRmcSpi = initField_msgoutNmeaIdRmcSpi();
                COMMS_ASSERT(field_msgoutNmeaIdRmcSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRmcSpi.template readFrom<1>(iter, len);
            }
        case 546373804UL /* 0x209100ACUL */:
            {
                auto& field_msgoutNmeaIdRmcUart1 = initField_msgoutNmeaIdRmcUart1();
                COMMS_ASSERT(field_msgoutNmeaIdRmcUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRmcUart1.template readFrom<1>(iter, len);
            }
        case 546373805UL /* 0x209100ADUL */:
            {
                auto& field_msgoutNmeaIdRmcUart2 = initField_msgoutNmeaIdRmcUart2();
                COMMS_ASSERT(field_msgoutNmeaIdRmcUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRmcUart2.template readFrom<1>(iter, len);
            }
        case 546373806UL /* 0x209100AEUL */:
            {
                auto& field_msgoutNmeaIdRmcUsb = initField_msgoutNmeaIdRmcUsb();
                COMMS_ASSERT(field_msgoutNmeaIdRmcUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdRmcUsb.template readFrom<1>(iter, len);
            }
        case 546373863UL /* 0x209100E7UL */:
            {
                auto& field_msgoutNmeaIdVlwI2c = initField_msgoutNmeaIdVlwI2c();
                COMMS_ASSERT(field_msgoutNmeaIdVlwI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVlwI2c.template readFrom<1>(iter, len);
            }
        case 546373867UL /* 0x209100EBUL */:
            {
                auto& field_msgoutNmeaIdVlwSpi = initField_msgoutNmeaIdVlwSpi();
                COMMS_ASSERT(field_msgoutNmeaIdVlwSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVlwSpi.template readFrom<1>(iter, len);
            }
        case 546373864UL /* 0x209100E8UL */:
            {
                auto& field_msgoutNmeaIdVlwUart1 = initField_msgoutNmeaIdVlwUart1();
                COMMS_ASSERT(field_msgoutNmeaIdVlwUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVlwUart1.template readFrom<1>(iter, len);
            }
        case 546373865UL /* 0x209100E9UL */:
            {
                auto& field_msgoutNmeaIdVlwUart2 = initField_msgoutNmeaIdVlwUart2();
                COMMS_ASSERT(field_msgoutNmeaIdVlwUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVlwUart2.template readFrom<1>(iter, len);
            }
        case 546373866UL /* 0x209100EAUL */:
            {
                auto& field_msgoutNmeaIdVlwUsb = initField_msgoutNmeaIdVlwUsb();
                COMMS_ASSERT(field_msgoutNmeaIdVlwUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVlwUsb.template readFrom<1>(iter, len);
            }
        case 546373808UL /* 0x209100B0UL */:
            {
                auto& field_msgoutNmeaIdVtgI2c = initField_msgoutNmeaIdVtgI2c();
                COMMS_ASSERT(field_msgoutNmeaIdVtgI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVtgI2c.template readFrom<1>(iter, len);
            }
        case 546373812UL /* 0x209100B4UL */:
            {
                auto& field_msgoutNmeaIdVtgSpi = initField_msgoutNmeaIdVtgSpi();
                COMMS_ASSERT(field_msgoutNmeaIdVtgSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVtgSpi.template readFrom<1>(iter, len);
            }
        case 546373809UL /* 0x209100B1UL */:
            {
                auto& field_msgoutNmeaIdVtgUart1 = initField_msgoutNmeaIdVtgUart1();
                COMMS_ASSERT(field_msgoutNmeaIdVtgUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVtgUart1.template readFrom<1>(iter, len);
            }
        case 546373810UL /* 0x209100B2UL */:
            {
                auto& field_msgoutNmeaIdVtgUart2 = initField_msgoutNmeaIdVtgUart2();
                COMMS_ASSERT(field_msgoutNmeaIdVtgUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVtgUart2.template readFrom<1>(iter, len);
            }
        case 546373811UL /* 0x209100B3UL */:
            {
                auto& field_msgoutNmeaIdVtgUsb = initField_msgoutNmeaIdVtgUsb();
                COMMS_ASSERT(field_msgoutNmeaIdVtgUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdVtgUsb.template readFrom<1>(iter, len);
            }
        case 546373848UL /* 0x209100D8UL */:
            {
                auto& field_msgoutNmeaIdZdaI2c = initField_msgoutNmeaIdZdaI2c();
                COMMS_ASSERT(field_msgoutNmeaIdZdaI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdZdaI2c.template readFrom<1>(iter, len);
            }
        case 546373852UL /* 0x209100DCUL */:
            {
                auto& field_msgoutNmeaIdZdaSpi = initField_msgoutNmeaIdZdaSpi();
                COMMS_ASSERT(field_msgoutNmeaIdZdaSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdZdaSpi.template readFrom<1>(iter, len);
            }
        case 546373849UL /* 0x209100D9UL */:
            {
                auto& field_msgoutNmeaIdZdaUart1 = initField_msgoutNmeaIdZdaUart1();
                COMMS_ASSERT(field_msgoutNmeaIdZdaUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdZdaUart1.template readFrom<1>(iter, len);
            }
        case 546373850UL /* 0x209100DAUL */:
            {
                auto& field_msgoutNmeaIdZdaUart2 = initField_msgoutNmeaIdZdaUart2();
                COMMS_ASSERT(field_msgoutNmeaIdZdaUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdZdaUart2.template readFrom<1>(iter, len);
            }
        case 546373851UL /* 0x209100DBUL */:
            {
                auto& field_msgoutNmeaIdZdaUsb = initField_msgoutNmeaIdZdaUsb();
                COMMS_ASSERT(field_msgoutNmeaIdZdaUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutNmeaIdZdaUsb.template readFrom<1>(iter, len);
            }
        case 546373868UL /* 0x209100ECUL */:
            {
                auto& field_msgoutPubxIdPolypI2c = initField_msgoutPubxIdPolypI2c();
                COMMS_ASSERT(field_msgoutPubxIdPolypI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolypI2c.template readFrom<1>(iter, len);
            }
        case 546373872UL /* 0x209100F0UL */:
            {
                auto& field_msgoutPubxIdPolypSpi = initField_msgoutPubxIdPolypSpi();
                COMMS_ASSERT(field_msgoutPubxIdPolypSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolypSpi.template readFrom<1>(iter, len);
            }
        case 546373869UL /* 0x209100EDUL */:
            {
                auto& field_msgoutPubxIdPolypUart1 = initField_msgoutPubxIdPolypUart1();
                COMMS_ASSERT(field_msgoutPubxIdPolypUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolypUart1.template readFrom<1>(iter, len);
            }
        case 546373870UL /* 0x209100EEUL */:
            {
                auto& field_msgoutPubxIdPolypUart2 = initField_msgoutPubxIdPolypUart2();
                COMMS_ASSERT(field_msgoutPubxIdPolypUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolypUart2.template readFrom<1>(iter, len);
            }
        case 546373871UL /* 0x209100EFUL */:
            {
                auto& field_msgoutPubxIdPolypUsb = initField_msgoutPubxIdPolypUsb();
                COMMS_ASSERT(field_msgoutPubxIdPolypUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolypUsb.template readFrom<1>(iter, len);
            }
        case 546373873UL /* 0x209100F1UL */:
            {
                auto& field_msgoutPubxIdPolysI2c = initField_msgoutPubxIdPolysI2c();
                COMMS_ASSERT(field_msgoutPubxIdPolysI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolysI2c.template readFrom<1>(iter, len);
            }
        case 546373877UL /* 0x209100F5UL */:
            {
                auto& field_msgoutPubxIdPolysSpi = initField_msgoutPubxIdPolysSpi();
                COMMS_ASSERT(field_msgoutPubxIdPolysSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolysSpi.template readFrom<1>(iter, len);
            }
        case 546373874UL /* 0x209100F2UL */:
            {
                auto& field_msgoutPubxIdPolysUart1 = initField_msgoutPubxIdPolysUart1();
                COMMS_ASSERT(field_msgoutPubxIdPolysUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolysUart1.template readFrom<1>(iter, len);
            }
        case 546373875UL /* 0x209100F3UL */:
            {
                auto& field_msgoutPubxIdPolysUart2 = initField_msgoutPubxIdPolysUart2();
                COMMS_ASSERT(field_msgoutPubxIdPolysUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolysUart2.template readFrom<1>(iter, len);
            }
        case 546373876UL /* 0x209100F4UL */:
            {
                auto& field_msgoutPubxIdPolysUsb = initField_msgoutPubxIdPolysUsb();
                COMMS_ASSERT(field_msgoutPubxIdPolysUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolysUsb.template readFrom<1>(iter, len);
            }
        case 546373878UL /* 0x209100F6UL */:
            {
                auto& field_msgoutPubxIdPolytI2c = initField_msgoutPubxIdPolytI2c();
                COMMS_ASSERT(field_msgoutPubxIdPolytI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolytI2c.template readFrom<1>(iter, len);
            }
        case 546373882UL /* 0x209100FAUL */:
            {
                auto& field_msgoutPubxIdPolytSpi = initField_msgoutPubxIdPolytSpi();
                COMMS_ASSERT(field_msgoutPubxIdPolytSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolytSpi.template readFrom<1>(iter, len);
            }
        case 546373879UL /* 0x209100F7UL */:
            {
                auto& field_msgoutPubxIdPolytUart1 = initField_msgoutPubxIdPolytUart1();
                COMMS_ASSERT(field_msgoutPubxIdPolytUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolytUart1.template readFrom<1>(iter, len);
            }
        case 546373880UL /* 0x209100F8UL */:
            {
                auto& field_msgoutPubxIdPolytUart2 = initField_msgoutPubxIdPolytUart2();
                COMMS_ASSERT(field_msgoutPubxIdPolytUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolytUart2.template readFrom<1>(iter, len);
            }
        case 546373881UL /* 0x209100F9UL */:
            {
                auto& field_msgoutPubxIdPolytUsb = initField_msgoutPubxIdPolytUsb();
                COMMS_ASSERT(field_msgoutPubxIdPolytUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutPubxIdPolytUsb.template readFrom<1>(iter, len);
            }
        case 546374333UL /* 0x209102BDUL */:
            {
                auto& field_msgoutRtcm3xType1005I2c = initField_msgoutRtcm3xType1005I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1005I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1005I2c.template readFrom<1>(iter, len);
            }
        case 546374337UL /* 0x209102C1UL */:
            {
                auto& field_msgoutRtcm3xType1005Spi = initField_msgoutRtcm3xType1005Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1005Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1005Spi.template readFrom<1>(iter, len);
            }
        case 546374334UL /* 0x209102BEUL */:
            {
                auto& field_msgoutRtcm3xType1005Uart1 = initField_msgoutRtcm3xType1005Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1005Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1005Uart1.template readFrom<1>(iter, len);
            }
        case 546374335UL /* 0x209102BFUL */:
            {
                auto& field_msgoutRtcm3xType1005Uart2 = initField_msgoutRtcm3xType1005Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1005Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1005Uart2.template readFrom<1>(iter, len);
            }
        case 546374336UL /* 0x209102C0UL */:
            {
                auto& field_msgoutRtcm3xType1005Usb = initField_msgoutRtcm3xType1005Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1005Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1005Usb.template readFrom<1>(iter, len);
            }
        case 546374494UL /* 0x2091035EUL */:
            {
                auto& field_msgoutRtcm3xType1074I2c = initField_msgoutRtcm3xType1074I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1074I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1074I2c.template readFrom<1>(iter, len);
            }
        case 546374498UL /* 0x20910362UL */:
            {
                auto& field_msgoutRtcm3xType1074Spi = initField_msgoutRtcm3xType1074Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1074Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1074Spi.template readFrom<1>(iter, len);
            }
        case 546374495UL /* 0x2091035FUL */:
            {
                auto& field_msgoutRtcm3xType1074Uart1 = initField_msgoutRtcm3xType1074Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1074Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1074Uart1.template readFrom<1>(iter, len);
            }
        case 546374496UL /* 0x20910360UL */:
            {
                auto& field_msgoutRtcm3xType1074Uart2 = initField_msgoutRtcm3xType1074Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1074Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1074Uart2.template readFrom<1>(iter, len);
            }
        case 546374497UL /* 0x20910361UL */:
            {
                auto& field_msgoutRtcm3xType1074Usb = initField_msgoutRtcm3xType1074Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1074Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1074Usb.template readFrom<1>(iter, len);
            }
        case 546374348UL /* 0x209102CCUL */:
            {
                auto& field_msgoutRtcm3xType1077I2c = initField_msgoutRtcm3xType1077I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1077I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1077I2c.template readFrom<1>(iter, len);
            }
        case 546374352UL /* 0x209102D0UL */:
            {
                auto& field_msgoutRtcm3xType1077Spi = initField_msgoutRtcm3xType1077Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1077Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1077Spi.template readFrom<1>(iter, len);
            }
        case 546374349UL /* 0x209102CDUL */:
            {
                auto& field_msgoutRtcm3xType1077Uart1 = initField_msgoutRtcm3xType1077Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1077Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1077Uart1.template readFrom<1>(iter, len);
            }
        case 546374350UL /* 0x209102CEUL */:
            {
                auto& field_msgoutRtcm3xType1077Uart2 = initField_msgoutRtcm3xType1077Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1077Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1077Uart2.template readFrom<1>(iter, len);
            }
        case 546374351UL /* 0x209102CFUL */:
            {
                auto& field_msgoutRtcm3xType1077Usb = initField_msgoutRtcm3xType1077Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1077Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1077Usb.template readFrom<1>(iter, len);
            }
        case 546374499UL /* 0x20910363UL */:
            {
                auto& field_msgoutRtcm3xType1084I2c = initField_msgoutRtcm3xType1084I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1084I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1084I2c.template readFrom<1>(iter, len);
            }
        case 546374503UL /* 0x20910367UL */:
            {
                auto& field_msgoutRtcm3xType1084Spi = initField_msgoutRtcm3xType1084Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1084Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1084Spi.template readFrom<1>(iter, len);
            }
        case 546374500UL /* 0x20910364UL */:
            {
                auto& field_msgoutRtcm3xType1084Uart1 = initField_msgoutRtcm3xType1084Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1084Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1084Uart1.template readFrom<1>(iter, len);
            }
        case 546374501UL /* 0x20910365UL */:
            {
                auto& field_msgoutRtcm3xType1084Uart2 = initField_msgoutRtcm3xType1084Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1084Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1084Uart2.template readFrom<1>(iter, len);
            }
        case 546374502UL /* 0x20910366UL */:
            {
                auto& field_msgoutRtcm3xType1084Usb = initField_msgoutRtcm3xType1084Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1084Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1084Usb.template readFrom<1>(iter, len);
            }
        case 546374353UL /* 0x209102D1UL */:
            {
                auto& field_msgoutRtcm3xType1087I2c = initField_msgoutRtcm3xType1087I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1087I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1087I2c.template readFrom<1>(iter, len);
            }
        case 546374357UL /* 0x209102D5UL */:
            {
                auto& field_msgoutRtcm3xType1087Spi = initField_msgoutRtcm3xType1087Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1087Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1087Spi.template readFrom<1>(iter, len);
            }
        case 546374354UL /* 0x209102D2UL */:
            {
                auto& field_msgoutRtcm3xType1087Uart1 = initField_msgoutRtcm3xType1087Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1087Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1087Uart1.template readFrom<1>(iter, len);
            }
        case 546374355UL /* 0x209102D3UL */:
            {
                auto& field_msgoutRtcm3xType1087Uart2 = initField_msgoutRtcm3xType1087Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1087Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1087Uart2.template readFrom<1>(iter, len);
            }
        case 546374356UL /* 0x209102D4UL */:
            {
                auto& field_msgoutRtcm3xType1087Usb = initField_msgoutRtcm3xType1087Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1087Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1087Usb.template readFrom<1>(iter, len);
            }
        case 546374504UL /* 0x20910368UL */:
            {
                auto& field_msgoutRtcm3xType1094I2c = initField_msgoutRtcm3xType1094I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1094I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1094I2c.template readFrom<1>(iter, len);
            }
        case 546374508UL /* 0x2091036CUL */:
            {
                auto& field_msgoutRtcm3xType1094Spi = initField_msgoutRtcm3xType1094Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1094Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1094Spi.template readFrom<1>(iter, len);
            }
        case 546374505UL /* 0x20910369UL */:
            {
                auto& field_msgoutRtcm3xType1094Uart1 = initField_msgoutRtcm3xType1094Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1094Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1094Uart1.template readFrom<1>(iter, len);
            }
        case 546374506UL /* 0x2091036AUL */:
            {
                auto& field_msgoutRtcm3xType1094Uart2 = initField_msgoutRtcm3xType1094Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1094Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1094Uart2.template readFrom<1>(iter, len);
            }
        case 546374507UL /* 0x2091036BUL */:
            {
                auto& field_msgoutRtcm3xType1094Usb = initField_msgoutRtcm3xType1094Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1094Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1094Usb.template readFrom<1>(iter, len);
            }
        case 546374424UL /* 0x20910318UL */:
            {
                auto& field_msgoutRtcm3xType1097I2c = initField_msgoutRtcm3xType1097I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1097I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1097I2c.template readFrom<1>(iter, len);
            }
        case 546374428UL /* 0x2091031CUL */:
            {
                auto& field_msgoutRtcm3xType1097Spi = initField_msgoutRtcm3xType1097Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1097Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1097Spi.template readFrom<1>(iter, len);
            }
        case 546374425UL /* 0x20910319UL */:
            {
                auto& field_msgoutRtcm3xType1097Uart1 = initField_msgoutRtcm3xType1097Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1097Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1097Uart1.template readFrom<1>(iter, len);
            }
        case 546374426UL /* 0x2091031AUL */:
            {
                auto& field_msgoutRtcm3xType1097Uart2 = initField_msgoutRtcm3xType1097Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1097Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1097Uart2.template readFrom<1>(iter, len);
            }
        case 546374427UL /* 0x2091031BUL */:
            {
                auto& field_msgoutRtcm3xType1097Usb = initField_msgoutRtcm3xType1097Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1097Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1097Usb.template readFrom<1>(iter, len);
            }
        case 546374509UL /* 0x2091036DUL */:
            {
                auto& field_msgoutRtcm3xType1124I2c = initField_msgoutRtcm3xType1124I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1124I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1124I2c.template readFrom<1>(iter, len);
            }
        case 546374513UL /* 0x20910371UL */:
            {
                auto& field_msgoutRtcm3xType1124Spi = initField_msgoutRtcm3xType1124Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1124Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1124Spi.template readFrom<1>(iter, len);
            }
        case 546374510UL /* 0x2091036EUL */:
            {
                auto& field_msgoutRtcm3xType1124Uart1 = initField_msgoutRtcm3xType1124Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1124Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1124Uart1.template readFrom<1>(iter, len);
            }
        case 546374511UL /* 0x2091036FUL */:
            {
                auto& field_msgoutRtcm3xType1124Uart2 = initField_msgoutRtcm3xType1124Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1124Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1124Uart2.template readFrom<1>(iter, len);
            }
        case 546374512UL /* 0x20910370UL */:
            {
                auto& field_msgoutRtcm3xType1124Usb = initField_msgoutRtcm3xType1124Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1124Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1124Usb.template readFrom<1>(iter, len);
            }
        case 546374358UL /* 0x209102D6UL */:
            {
                auto& field_msgoutRtcm3xType1127I2c = initField_msgoutRtcm3xType1127I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1127I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1127I2c.template readFrom<1>(iter, len);
            }
        case 546374362UL /* 0x209102DAUL */:
            {
                auto& field_msgoutRtcm3xType1127Spi = initField_msgoutRtcm3xType1127Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1127Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1127Spi.template readFrom<1>(iter, len);
            }
        case 546374359UL /* 0x209102D7UL */:
            {
                auto& field_msgoutRtcm3xType1127Uart1 = initField_msgoutRtcm3xType1127Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1127Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1127Uart1.template readFrom<1>(iter, len);
            }
        case 546374360UL /* 0x209102D8UL */:
            {
                auto& field_msgoutRtcm3xType1127Uart2 = initField_msgoutRtcm3xType1127Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1127Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1127Uart2.template readFrom<1>(iter, len);
            }
        case 546374361UL /* 0x209102D9UL */:
            {
                auto& field_msgoutRtcm3xType1127Usb = initField_msgoutRtcm3xType1127Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1127Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1127Usb.template readFrom<1>(iter, len);
            }
        case 546374403UL /* 0x20910303UL */:
            {
                auto& field_msgoutRtcm3xType1230I2c = initField_msgoutRtcm3xType1230I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType1230I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1230I2c.template readFrom<1>(iter, len);
            }
        case 546374407UL /* 0x20910307UL */:
            {
                auto& field_msgoutRtcm3xType1230Spi = initField_msgoutRtcm3xType1230Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType1230Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1230Spi.template readFrom<1>(iter, len);
            }
        case 546374404UL /* 0x20910304UL */:
            {
                auto& field_msgoutRtcm3xType1230Uart1 = initField_msgoutRtcm3xType1230Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType1230Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1230Uart1.template readFrom<1>(iter, len);
            }
        case 546374405UL /* 0x20910305UL */:
            {
                auto& field_msgoutRtcm3xType1230Uart2 = initField_msgoutRtcm3xType1230Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType1230Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1230Uart2.template readFrom<1>(iter, len);
            }
        case 546374406UL /* 0x20910306UL */:
            {
                auto& field_msgoutRtcm3xType1230Usb = initField_msgoutRtcm3xType1230Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType1230Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType1230Usb.template readFrom<1>(iter, len);
            }
        case 546374398UL /* 0x209102FEUL */:
            {
                auto& field_msgoutRtcm3xType4072_0I2c = initField_msgoutRtcm3xType4072_0I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_0I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_0I2c.template readFrom<1>(iter, len);
            }
        case 546374402UL /* 0x20910302UL */:
            {
                auto& field_msgoutRtcm3xType4072_0Spi = initField_msgoutRtcm3xType4072_0Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_0Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_0Spi.template readFrom<1>(iter, len);
            }
        case 546374399UL /* 0x209102FFUL */:
            {
                auto& field_msgoutRtcm3xType4072_0Uart1 = initField_msgoutRtcm3xType4072_0Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_0Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_0Uart1.template readFrom<1>(iter, len);
            }
        case 546374400UL /* 0x20910300UL */:
            {
                auto& field_msgoutRtcm3xType4072_0Uart2 = initField_msgoutRtcm3xType4072_0Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_0Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_0Uart2.template readFrom<1>(iter, len);
            }
        case 546374401UL /* 0x20910301UL */:
            {
                auto& field_msgoutRtcm3xType4072_0Usb = initField_msgoutRtcm3xType4072_0Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_0Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_0Usb.template readFrom<1>(iter, len);
            }
        case 546374529UL /* 0x20910381UL */:
            {
                auto& field_msgoutRtcm3xType4072_1I2c = initField_msgoutRtcm3xType4072_1I2c();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_1I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_1I2c.template readFrom<1>(iter, len);
            }
        case 546374533UL /* 0x20910385UL */:
            {
                auto& field_msgoutRtcm3xType4072_1Spi = initField_msgoutRtcm3xType4072_1Spi();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_1Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_1Spi.template readFrom<1>(iter, len);
            }
        case 546374530UL /* 0x20910382UL */:
            {
                auto& field_msgoutRtcm3xType4072_1Uart1 = initField_msgoutRtcm3xType4072_1Uart1();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_1Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_1Uart1.template readFrom<1>(iter, len);
            }
        case 546374531UL /* 0x20910383UL */:
            {
                auto& field_msgoutRtcm3xType4072_1Uart2 = initField_msgoutRtcm3xType4072_1Uart2();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_1Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_1Uart2.template readFrom<1>(iter, len);
            }
        case 546374532UL /* 0x20910384UL */:
            {
                auto& field_msgoutRtcm3xType4072_1Usb = initField_msgoutRtcm3xType4072_1Usb();
                COMMS_ASSERT(field_msgoutRtcm3xType4072_1Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutRtcm3xType4072_1Usb.template readFrom<1>(iter, len);
            }
        case 546374233UL /* 0x20910259UL */:
            {
                auto& field_msgoutUbxLogInfoI2c = initField_msgoutUbxLogInfoI2c();
                COMMS_ASSERT(field_msgoutUbxLogInfoI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxLogInfoI2c.template readFrom<1>(iter, len);
            }
        case 546374237UL /* 0x2091025DUL */:
            {
                auto& field_msgoutUbxLogInfoSpi = initField_msgoutUbxLogInfoSpi();
                COMMS_ASSERT(field_msgoutUbxLogInfoSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxLogInfoSpi.template readFrom<1>(iter, len);
            }
        case 546374234UL /* 0x2091025AUL */:
            {
                auto& field_msgoutUbxLogInfoUart1 = initField_msgoutUbxLogInfoUart1();
                COMMS_ASSERT(field_msgoutUbxLogInfoUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxLogInfoUart1.template readFrom<1>(iter, len);
            }
        case 546374235UL /* 0x2091025BUL */:
            {
                auto& field_msgoutUbxLogInfoUart2 = initField_msgoutUbxLogInfoUart2();
                COMMS_ASSERT(field_msgoutUbxLogInfoUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxLogInfoUart2.template readFrom<1>(iter, len);
            }
        case 546374236UL /* 0x2091025CUL */:
            {
                auto& field_msgoutUbxLogInfoUsb = initField_msgoutUbxLogInfoUsb();
                COMMS_ASSERT(field_msgoutUbxLogInfoUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxLogInfoUsb.template readFrom<1>(iter, len);
            }
        case 546374479UL /* 0x2091034FUL */:
            {
                auto& field_msgoutUbxMonCommsI2c = initField_msgoutUbxMonCommsI2c();
                COMMS_ASSERT(field_msgoutUbxMonCommsI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonCommsI2c.template readFrom<1>(iter, len);
            }
        case 546374483UL /* 0x20910353UL */:
            {
                auto& field_msgoutUbxMonCommsSpi = initField_msgoutUbxMonCommsSpi();
                COMMS_ASSERT(field_msgoutUbxMonCommsSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonCommsSpi.template readFrom<1>(iter, len);
            }
        case 546374480UL /* 0x20910350UL */:
            {
                auto& field_msgoutUbxMonCommsUart1 = initField_msgoutUbxMonCommsUart1();
                COMMS_ASSERT(field_msgoutUbxMonCommsUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonCommsUart1.template readFrom<1>(iter, len);
            }
        case 546374481UL /* 0x20910351UL */:
            {
                auto& field_msgoutUbxMonCommsUart2 = initField_msgoutUbxMonCommsUart2();
                COMMS_ASSERT(field_msgoutUbxMonCommsUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonCommsUart2.template readFrom<1>(iter, len);
            }
        case 546374482UL /* 0x20910352UL */:
            {
                auto& field_msgoutUbxMonCommsUsb = initField_msgoutUbxMonCommsUsb();
                COMMS_ASSERT(field_msgoutUbxMonCommsUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonCommsUsb.template readFrom<1>(iter, len);
            }
        case 546374073UL /* 0x209101B9UL */:
            {
                auto& field_msgoutUbxMonHw2I2c = initField_msgoutUbxMonHw2I2c();
                COMMS_ASSERT(field_msgoutUbxMonHw2I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw2I2c.template readFrom<1>(iter, len);
            }
        case 546374077UL /* 0x209101BDUL */:
            {
                auto& field_msgoutUbxMonHw2Spi = initField_msgoutUbxMonHw2Spi();
                COMMS_ASSERT(field_msgoutUbxMonHw2Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw2Spi.template readFrom<1>(iter, len);
            }
        case 546374074UL /* 0x209101BAUL */:
            {
                auto& field_msgoutUbxMonHw2Uart1 = initField_msgoutUbxMonHw2Uart1();
                COMMS_ASSERT(field_msgoutUbxMonHw2Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw2Uart1.template readFrom<1>(iter, len);
            }
        case 546374075UL /* 0x209101BBUL */:
            {
                auto& field_msgoutUbxMonHw2Uart2 = initField_msgoutUbxMonHw2Uart2();
                COMMS_ASSERT(field_msgoutUbxMonHw2Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw2Uart2.template readFrom<1>(iter, len);
            }
        case 546374076UL /* 0x209101BCUL */:
            {
                auto& field_msgoutUbxMonHw2Usb = initField_msgoutUbxMonHw2Usb();
                COMMS_ASSERT(field_msgoutUbxMonHw2Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw2Usb.template readFrom<1>(iter, len);
            }
        case 546374484UL /* 0x20910354UL */:
            {
                auto& field_msgoutUbxMonHw3I2c = initField_msgoutUbxMonHw3I2c();
                COMMS_ASSERT(field_msgoutUbxMonHw3I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw3I2c.template readFrom<1>(iter, len);
            }
        case 546374488UL /* 0x20910358UL */:
            {
                auto& field_msgoutUbxMonHw3Spi = initField_msgoutUbxMonHw3Spi();
                COMMS_ASSERT(field_msgoutUbxMonHw3Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw3Spi.template readFrom<1>(iter, len);
            }
        case 546374485UL /* 0x20910355UL */:
            {
                auto& field_msgoutUbxMonHw3Uart1 = initField_msgoutUbxMonHw3Uart1();
                COMMS_ASSERT(field_msgoutUbxMonHw3Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw3Uart1.template readFrom<1>(iter, len);
            }
        case 546374486UL /* 0x20910356UL */:
            {
                auto& field_msgoutUbxMonHw3Uart2 = initField_msgoutUbxMonHw3Uart2();
                COMMS_ASSERT(field_msgoutUbxMonHw3Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw3Uart2.template readFrom<1>(iter, len);
            }
        case 546374487UL /* 0x20910357UL */:
            {
                auto& field_msgoutUbxMonHw3Usb = initField_msgoutUbxMonHw3Usb();
                COMMS_ASSERT(field_msgoutUbxMonHw3Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHw3Usb.template readFrom<1>(iter, len);
            }
        case 546374068UL /* 0x209101B4UL */:
            {
                auto& field_msgoutUbxMonHwI2c = initField_msgoutUbxMonHwI2c();
                COMMS_ASSERT(field_msgoutUbxMonHwI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHwI2c.template readFrom<1>(iter, len);
            }
        case 546374072UL /* 0x209101B8UL */:
            {
                auto& field_msgoutUbxMonHwSpi = initField_msgoutUbxMonHwSpi();
                COMMS_ASSERT(field_msgoutUbxMonHwSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHwSpi.template readFrom<1>(iter, len);
            }
        case 546374069UL /* 0x209101B5UL */:
            {
                auto& field_msgoutUbxMonHwUart1 = initField_msgoutUbxMonHwUart1();
                COMMS_ASSERT(field_msgoutUbxMonHwUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHwUart1.template readFrom<1>(iter, len);
            }
        case 546374070UL /* 0x209101B6UL */:
            {
                auto& field_msgoutUbxMonHwUart2 = initField_msgoutUbxMonHwUart2();
                COMMS_ASSERT(field_msgoutUbxMonHwUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHwUart2.template readFrom<1>(iter, len);
            }
        case 546374071UL /* 0x209101B7UL */:
            {
                auto& field_msgoutUbxMonHwUsb = initField_msgoutUbxMonHwUsb();
                COMMS_ASSERT(field_msgoutUbxMonHwUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonHwUsb.template readFrom<1>(iter, len);
            }
        case 546374053UL /* 0x209101A5UL */:
            {
                auto& field_msgoutUbxMonIoI2c = initField_msgoutUbxMonIoI2c();
                COMMS_ASSERT(field_msgoutUbxMonIoI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonIoI2c.template readFrom<1>(iter, len);
            }
        case 546374057UL /* 0x209101A9UL */:
            {
                auto& field_msgoutUbxMonIoSpi = initField_msgoutUbxMonIoSpi();
                COMMS_ASSERT(field_msgoutUbxMonIoSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonIoSpi.template readFrom<1>(iter, len);
            }
        case 546374054UL /* 0x209101A6UL */:
            {
                auto& field_msgoutUbxMonIoUart1 = initField_msgoutUbxMonIoUart1();
                COMMS_ASSERT(field_msgoutUbxMonIoUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonIoUart1.template readFrom<1>(iter, len);
            }
        case 546374055UL /* 0x209101A7UL */:
            {
                auto& field_msgoutUbxMonIoUart2 = initField_msgoutUbxMonIoUart2();
                COMMS_ASSERT(field_msgoutUbxMonIoUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonIoUart2.template readFrom<1>(iter, len);
            }
        case 546374056UL /* 0x209101A8UL */:
            {
                auto& field_msgoutUbxMonIoUsb = initField_msgoutUbxMonIoUsb();
                COMMS_ASSERT(field_msgoutUbxMonIoUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonIoUsb.template readFrom<1>(iter, len);
            }
        case 546374038UL /* 0x20910196UL */:
            {
                auto& field_msgoutUbxMonMsgppI2c = initField_msgoutUbxMonMsgppI2c();
                COMMS_ASSERT(field_msgoutUbxMonMsgppI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonMsgppI2c.template readFrom<1>(iter, len);
            }
        case 546374042UL /* 0x2091019AUL */:
            {
                auto& field_msgoutUbxMonMsgppSpi = initField_msgoutUbxMonMsgppSpi();
                COMMS_ASSERT(field_msgoutUbxMonMsgppSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonMsgppSpi.template readFrom<1>(iter, len);
            }
        case 546374039UL /* 0x20910197UL */:
            {
                auto& field_msgoutUbxMonMsgppUart1 = initField_msgoutUbxMonMsgppUart1();
                COMMS_ASSERT(field_msgoutUbxMonMsgppUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonMsgppUart1.template readFrom<1>(iter, len);
            }
        case 546374040UL /* 0x20910198UL */:
            {
                auto& field_msgoutUbxMonMsgppUart2 = initField_msgoutUbxMonMsgppUart2();
                COMMS_ASSERT(field_msgoutUbxMonMsgppUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonMsgppUart2.template readFrom<1>(iter, len);
            }
        case 546374041UL /* 0x20910199UL */:
            {
                auto& field_msgoutUbxMonMsgppUsb = initField_msgoutUbxMonMsgppUsb();
                COMMS_ASSERT(field_msgoutUbxMonMsgppUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonMsgppUsb.template readFrom<1>(iter, len);
            }
        case 546374489UL /* 0x20910359UL */:
            {
                auto& field_msgoutUbxMonRfI2c = initField_msgoutUbxMonRfI2c();
                COMMS_ASSERT(field_msgoutUbxMonRfI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRfI2c.template readFrom<1>(iter, len);
            }
        case 546374493UL /* 0x2091035DUL */:
            {
                auto& field_msgoutUbxMonRfSpi = initField_msgoutUbxMonRfSpi();
                COMMS_ASSERT(field_msgoutUbxMonRfSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRfSpi.template readFrom<1>(iter, len);
            }
        case 546374490UL /* 0x2091035AUL */:
            {
                auto& field_msgoutUbxMonRfUart1 = initField_msgoutUbxMonRfUart1();
                COMMS_ASSERT(field_msgoutUbxMonRfUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRfUart1.template readFrom<1>(iter, len);
            }
        case 546374491UL /* 0x2091035BUL */:
            {
                auto& field_msgoutUbxMonRfUart2 = initField_msgoutUbxMonRfUart2();
                COMMS_ASSERT(field_msgoutUbxMonRfUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRfUart2.template readFrom<1>(iter, len);
            }
        case 546374492UL /* 0x2091035CUL */:
            {
                auto& field_msgoutUbxMonRfUsb = initField_msgoutUbxMonRfUsb();
                COMMS_ASSERT(field_msgoutUbxMonRfUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRfUsb.template readFrom<1>(iter, len);
            }
        case 546374048UL /* 0x209101A0UL */:
            {
                auto& field_msgoutUbxMonRxbufI2c = initField_msgoutUbxMonRxbufI2c();
                COMMS_ASSERT(field_msgoutUbxMonRxbufI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxbufI2c.template readFrom<1>(iter, len);
            }
        case 546374052UL /* 0x209101A4UL */:
            {
                auto& field_msgoutUbxMonRxbufSpi = initField_msgoutUbxMonRxbufSpi();
                COMMS_ASSERT(field_msgoutUbxMonRxbufSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxbufSpi.template readFrom<1>(iter, len);
            }
        case 546374049UL /* 0x209101A1UL */:
            {
                auto& field_msgoutUbxMonRxbufUart1 = initField_msgoutUbxMonRxbufUart1();
                COMMS_ASSERT(field_msgoutUbxMonRxbufUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxbufUart1.template readFrom<1>(iter, len);
            }
        case 546374050UL /* 0x209101A2UL */:
            {
                auto& field_msgoutUbxMonRxbufUart2 = initField_msgoutUbxMonRxbufUart2();
                COMMS_ASSERT(field_msgoutUbxMonRxbufUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxbufUart2.template readFrom<1>(iter, len);
            }
        case 546374051UL /* 0x209101A3UL */:
            {
                auto& field_msgoutUbxMonRxbufUsb = initField_msgoutUbxMonRxbufUsb();
                COMMS_ASSERT(field_msgoutUbxMonRxbufUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxbufUsb.template readFrom<1>(iter, len);
            }
        case 546374023UL /* 0x20910187UL */:
            {
                auto& field_msgoutUbxMonRxrI2c = initField_msgoutUbxMonRxrI2c();
                COMMS_ASSERT(field_msgoutUbxMonRxrI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxrI2c.template readFrom<1>(iter, len);
            }
        case 546374027UL /* 0x2091018BUL */:
            {
                auto& field_msgoutUbxMonRxrSpi = initField_msgoutUbxMonRxrSpi();
                COMMS_ASSERT(field_msgoutUbxMonRxrSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxrSpi.template readFrom<1>(iter, len);
            }
        case 546374024UL /* 0x20910188UL */:
            {
                auto& field_msgoutUbxMonRxrUart1 = initField_msgoutUbxMonRxrUart1();
                COMMS_ASSERT(field_msgoutUbxMonRxrUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxrUart1.template readFrom<1>(iter, len);
            }
        case 546374025UL /* 0x20910189UL */:
            {
                auto& field_msgoutUbxMonRxrUart2 = initField_msgoutUbxMonRxrUart2();
                COMMS_ASSERT(field_msgoutUbxMonRxrUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxrUart2.template readFrom<1>(iter, len);
            }
        case 546374026UL /* 0x2091018AUL */:
            {
                auto& field_msgoutUbxMonRxrUsb = initField_msgoutUbxMonRxrUsb();
                COMMS_ASSERT(field_msgoutUbxMonRxrUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonRxrUsb.template readFrom<1>(iter, len);
            }
        case 546374539UL /* 0x2091038BUL */:
            {
                auto& field_msgoutUbxMonSpanI2c = initField_msgoutUbxMonSpanI2c();
                COMMS_ASSERT(field_msgoutUbxMonSpanI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonSpanI2c.template readFrom<1>(iter, len);
            }
        case 546374543UL /* 0x2091038FUL */:
            {
                auto& field_msgoutUbxMonSpanSpi = initField_msgoutUbxMonSpanSpi();
                COMMS_ASSERT(field_msgoutUbxMonSpanSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonSpanSpi.template readFrom<1>(iter, len);
            }
        case 546374540UL /* 0x2091038CUL */:
            {
                auto& field_msgoutUbxMonSpanUart1 = initField_msgoutUbxMonSpanUart1();
                COMMS_ASSERT(field_msgoutUbxMonSpanUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonSpanUart1.template readFrom<1>(iter, len);
            }
        case 546374541UL /* 0x2091038DUL */:
            {
                auto& field_msgoutUbxMonSpanUart2 = initField_msgoutUbxMonSpanUart2();
                COMMS_ASSERT(field_msgoutUbxMonSpanUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonSpanUart2.template readFrom<1>(iter, len);
            }
        case 546374542UL /* 0x2091038EUL */:
            {
                auto& field_msgoutUbxMonSpanUsb = initField_msgoutUbxMonSpanUsb();
                COMMS_ASSERT(field_msgoutUbxMonSpanUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonSpanUsb.template readFrom<1>(iter, len);
            }
        case 546374043UL /* 0x2091019BUL */:
            {
                auto& field_msgoutUbxMonTxbufI2c = initField_msgoutUbxMonTxbufI2c();
                COMMS_ASSERT(field_msgoutUbxMonTxbufI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonTxbufI2c.template readFrom<1>(iter, len);
            }
        case 546374047UL /* 0x2091019FUL */:
            {
                auto& field_msgoutUbxMonTxbufSpi = initField_msgoutUbxMonTxbufSpi();
                COMMS_ASSERT(field_msgoutUbxMonTxbufSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonTxbufSpi.template readFrom<1>(iter, len);
            }
        case 546374044UL /* 0x2091019CUL */:
            {
                auto& field_msgoutUbxMonTxbufUart1 = initField_msgoutUbxMonTxbufUart1();
                COMMS_ASSERT(field_msgoutUbxMonTxbufUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonTxbufUart1.template readFrom<1>(iter, len);
            }
        case 546374045UL /* 0x2091019DUL */:
            {
                auto& field_msgoutUbxMonTxbufUart2 = initField_msgoutUbxMonTxbufUart2();
                COMMS_ASSERT(field_msgoutUbxMonTxbufUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonTxbufUart2.template readFrom<1>(iter, len);
            }
        case 546374046UL /* 0x2091019EUL */:
            {
                auto& field_msgoutUbxMonTxbufUsb = initField_msgoutUbxMonTxbufUsb();
                COMMS_ASSERT(field_msgoutUbxMonTxbufUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxMonTxbufUsb.template readFrom<1>(iter, len);
            }
        case 546373733UL /* 0x20910065UL */:
            {
                auto& field_msgoutUbxNavClockI2c = initField_msgoutUbxNavClockI2c();
                COMMS_ASSERT(field_msgoutUbxNavClockI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavClockI2c.template readFrom<1>(iter, len);
            }
        case 546373737UL /* 0x20910069UL */:
            {
                auto& field_msgoutUbxNavClockSpi = initField_msgoutUbxNavClockSpi();
                COMMS_ASSERT(field_msgoutUbxNavClockSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavClockSpi.template readFrom<1>(iter, len);
            }
        case 546373734UL /* 0x20910066UL */:
            {
                auto& field_msgoutUbxNavClockUart1 = initField_msgoutUbxNavClockUart1();
                COMMS_ASSERT(field_msgoutUbxNavClockUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavClockUart1.template readFrom<1>(iter, len);
            }
        case 546373735UL /* 0x20910067UL */:
            {
                auto& field_msgoutUbxNavClockUart2 = initField_msgoutUbxNavClockUart2();
                COMMS_ASSERT(field_msgoutUbxNavClockUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavClockUart2.template readFrom<1>(iter, len);
            }
        case 546373736UL /* 0x20910068UL */:
            {
                auto& field_msgoutUbxNavClockUsb = initField_msgoutUbxNavClockUsb();
                COMMS_ASSERT(field_msgoutUbxNavClockUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavClockUsb.template readFrom<1>(iter, len);
            }
        case 546373688UL /* 0x20910038UL */:
            {
                auto& field_msgoutUbxNavDopI2c = initField_msgoutUbxNavDopI2c();
                COMMS_ASSERT(field_msgoutUbxNavDopI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavDopI2c.template readFrom<1>(iter, len);
            }
        case 546373692UL /* 0x2091003CUL */:
            {
                auto& field_msgoutUbxNavDopSpi = initField_msgoutUbxNavDopSpi();
                COMMS_ASSERT(field_msgoutUbxNavDopSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavDopSpi.template readFrom<1>(iter, len);
            }
        case 546373689UL /* 0x20910039UL */:
            {
                auto& field_msgoutUbxNavDopUart1 = initField_msgoutUbxNavDopUart1();
                COMMS_ASSERT(field_msgoutUbxNavDopUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavDopUart1.template readFrom<1>(iter, len);
            }
        case 546373690UL /* 0x2091003AUL */:
            {
                auto& field_msgoutUbxNavDopUart2 = initField_msgoutUbxNavDopUart2();
                COMMS_ASSERT(field_msgoutUbxNavDopUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavDopUart2.template readFrom<1>(iter, len);
            }
        case 546373691UL /* 0x2091003BUL */:
            {
                auto& field_msgoutUbxNavDopUsb = initField_msgoutUbxNavDopUsb();
                COMMS_ASSERT(field_msgoutUbxNavDopUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavDopUsb.template readFrom<1>(iter, len);
            }
        case 546373983UL /* 0x2091015FUL */:
            {
                auto& field_msgoutUbxNavEoeI2c = initField_msgoutUbxNavEoeI2c();
                COMMS_ASSERT(field_msgoutUbxNavEoeI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavEoeI2c.template readFrom<1>(iter, len);
            }
        case 546373987UL /* 0x20910163UL */:
            {
                auto& field_msgoutUbxNavEoeSpi = initField_msgoutUbxNavEoeSpi();
                COMMS_ASSERT(field_msgoutUbxNavEoeSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavEoeSpi.template readFrom<1>(iter, len);
            }
        case 546373984UL /* 0x20910160UL */:
            {
                auto& field_msgoutUbxNavEoeUart1 = initField_msgoutUbxNavEoeUart1();
                COMMS_ASSERT(field_msgoutUbxNavEoeUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavEoeUart1.template readFrom<1>(iter, len);
            }
        case 546373985UL /* 0x20910161UL */:
            {
                auto& field_msgoutUbxNavEoeUart2 = initField_msgoutUbxNavEoeUart2();
                COMMS_ASSERT(field_msgoutUbxNavEoeUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavEoeUart2.template readFrom<1>(iter, len);
            }
        case 546373986UL /* 0x20910162UL */:
            {
                auto& field_msgoutUbxNavEoeUsb = initField_msgoutUbxNavEoeUsb();
                COMMS_ASSERT(field_msgoutUbxNavEoeUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavEoeUsb.template readFrom<1>(iter, len);
            }
        case 546373793UL /* 0x209100A1UL */:
            {
                auto& field_msgoutUbxNavGeofenceI2c = initField_msgoutUbxNavGeofenceI2c();
                COMMS_ASSERT(field_msgoutUbxNavGeofenceI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavGeofenceI2c.template readFrom<1>(iter, len);
            }
        case 546373797UL /* 0x209100A5UL */:
            {
                auto& field_msgoutUbxNavGeofenceSpi = initField_msgoutUbxNavGeofenceSpi();
                COMMS_ASSERT(field_msgoutUbxNavGeofenceSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavGeofenceSpi.template readFrom<1>(iter, len);
            }
        case 546373794UL /* 0x209100A2UL */:
            {
                auto& field_msgoutUbxNavGeofenceUart1 = initField_msgoutUbxNavGeofenceUart1();
                COMMS_ASSERT(field_msgoutUbxNavGeofenceUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavGeofenceUart1.template readFrom<1>(iter, len);
            }
        case 546373795UL /* 0x209100A3UL */:
            {
                auto& field_msgoutUbxNavGeofenceUart2 = initField_msgoutUbxNavGeofenceUart2();
                COMMS_ASSERT(field_msgoutUbxNavGeofenceUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavGeofenceUart2.template readFrom<1>(iter, len);
            }
        case 546373796UL /* 0x209100A4UL */:
            {
                auto& field_msgoutUbxNavGeofenceUsb = initField_msgoutUbxNavGeofenceUsb();
                COMMS_ASSERT(field_msgoutUbxNavGeofenceUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavGeofenceUsb.template readFrom<1>(iter, len);
            }
        case 546373678UL /* 0x2091002EUL */:
            {
                auto& field_msgoutUbxNavHpposecefI2c = initField_msgoutUbxNavHpposecefI2c();
                COMMS_ASSERT(field_msgoutUbxNavHpposecefI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposecefI2c.template readFrom<1>(iter, len);
            }
        case 546373682UL /* 0x20910032UL */:
            {
                auto& field_msgoutUbxNavHpposecefSpi = initField_msgoutUbxNavHpposecefSpi();
                COMMS_ASSERT(field_msgoutUbxNavHpposecefSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposecefSpi.template readFrom<1>(iter, len);
            }
        case 546373679UL /* 0x2091002FUL */:
            {
                auto& field_msgoutUbxNavHpposecefUart1 = initField_msgoutUbxNavHpposecefUart1();
                COMMS_ASSERT(field_msgoutUbxNavHpposecefUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposecefUart1.template readFrom<1>(iter, len);
            }
        case 546373680UL /* 0x20910030UL */:
            {
                auto& field_msgoutUbxNavHpposecefUart2 = initField_msgoutUbxNavHpposecefUart2();
                COMMS_ASSERT(field_msgoutUbxNavHpposecefUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposecefUart2.template readFrom<1>(iter, len);
            }
        case 546373681UL /* 0x20910031UL */:
            {
                auto& field_msgoutUbxNavHpposecefUsb = initField_msgoutUbxNavHpposecefUsb();
                COMMS_ASSERT(field_msgoutUbxNavHpposecefUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposecefUsb.template readFrom<1>(iter, len);
            }
        case 546373683UL /* 0x20910033UL */:
            {
                auto& field_msgoutUbxNavHpposllhI2c = initField_msgoutUbxNavHpposllhI2c();
                COMMS_ASSERT(field_msgoutUbxNavHpposllhI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposllhI2c.template readFrom<1>(iter, len);
            }
        case 546373687UL /* 0x20910037UL */:
            {
                auto& field_msgoutUbxNavHpposllhSpi = initField_msgoutUbxNavHpposllhSpi();
                COMMS_ASSERT(field_msgoutUbxNavHpposllhSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposllhSpi.template readFrom<1>(iter, len);
            }
        case 546373684UL /* 0x20910034UL */:
            {
                auto& field_msgoutUbxNavHpposllhUart1 = initField_msgoutUbxNavHpposllhUart1();
                COMMS_ASSERT(field_msgoutUbxNavHpposllhUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposllhUart1.template readFrom<1>(iter, len);
            }
        case 546373685UL /* 0x20910035UL */:
            {
                auto& field_msgoutUbxNavHpposllhUart2 = initField_msgoutUbxNavHpposllhUart2();
                COMMS_ASSERT(field_msgoutUbxNavHpposllhUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposllhUart2.template readFrom<1>(iter, len);
            }
        case 546373686UL /* 0x20910036UL */:
            {
                auto& field_msgoutUbxNavHpposllhUsb = initField_msgoutUbxNavHpposllhUsb();
                COMMS_ASSERT(field_msgoutUbxNavHpposllhUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavHpposllhUsb.template readFrom<1>(iter, len);
            }
        case 546373758UL /* 0x2091007EUL */:
            {
                auto& field_msgoutUbxNavOdoI2c = initField_msgoutUbxNavOdoI2c();
                COMMS_ASSERT(field_msgoutUbxNavOdoI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOdoI2c.template readFrom<1>(iter, len);
            }
        case 546373762UL /* 0x20910082UL */:
            {
                auto& field_msgoutUbxNavOdoSpi = initField_msgoutUbxNavOdoSpi();
                COMMS_ASSERT(field_msgoutUbxNavOdoSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOdoSpi.template readFrom<1>(iter, len);
            }
        case 546373759UL /* 0x2091007FUL */:
            {
                auto& field_msgoutUbxNavOdoUart1 = initField_msgoutUbxNavOdoUart1();
                COMMS_ASSERT(field_msgoutUbxNavOdoUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOdoUart1.template readFrom<1>(iter, len);
            }
        case 546373760UL /* 0x20910080UL */:
            {
                auto& field_msgoutUbxNavOdoUart2 = initField_msgoutUbxNavOdoUart2();
                COMMS_ASSERT(field_msgoutUbxNavOdoUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOdoUart2.template readFrom<1>(iter, len);
            }
        case 546373761UL /* 0x20910081UL */:
            {
                auto& field_msgoutUbxNavOdoUsb = initField_msgoutUbxNavOdoUsb();
                COMMS_ASSERT(field_msgoutUbxNavOdoUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOdoUsb.template readFrom<1>(iter, len);
            }
        case 546373648UL /* 0x20910010UL */:
            {
                auto& field_msgoutUbxNavOrbI2c = initField_msgoutUbxNavOrbI2c();
                COMMS_ASSERT(field_msgoutUbxNavOrbI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOrbI2c.template readFrom<1>(iter, len);
            }
        case 546373652UL /* 0x20910014UL */:
            {
                auto& field_msgoutUbxNavOrbSpi = initField_msgoutUbxNavOrbSpi();
                COMMS_ASSERT(field_msgoutUbxNavOrbSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOrbSpi.template readFrom<1>(iter, len);
            }
        case 546373649UL /* 0x20910011UL */:
            {
                auto& field_msgoutUbxNavOrbUart1 = initField_msgoutUbxNavOrbUart1();
                COMMS_ASSERT(field_msgoutUbxNavOrbUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOrbUart1.template readFrom<1>(iter, len);
            }
        case 546373650UL /* 0x20910012UL */:
            {
                auto& field_msgoutUbxNavOrbUart2 = initField_msgoutUbxNavOrbUart2();
                COMMS_ASSERT(field_msgoutUbxNavOrbUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOrbUart2.template readFrom<1>(iter, len);
            }
        case 546373651UL /* 0x20910013UL */:
            {
                auto& field_msgoutUbxNavOrbUsb = initField_msgoutUbxNavOrbUsb();
                COMMS_ASSERT(field_msgoutUbxNavOrbUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavOrbUsb.template readFrom<1>(iter, len);
            }
        case 546373668UL /* 0x20910024UL */:
            {
                auto& field_msgoutUbxNavPosecefI2c = initField_msgoutUbxNavPosecefI2c();
                COMMS_ASSERT(field_msgoutUbxNavPosecefI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosecefI2c.template readFrom<1>(iter, len);
            }
        case 546373672UL /* 0x20910028UL */:
            {
                auto& field_msgoutUbxNavPosecefSpi = initField_msgoutUbxNavPosecefSpi();
                COMMS_ASSERT(field_msgoutUbxNavPosecefSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosecefSpi.template readFrom<1>(iter, len);
            }
        case 546373669UL /* 0x20910025UL */:
            {
                auto& field_msgoutUbxNavPosecefUart1 = initField_msgoutUbxNavPosecefUart1();
                COMMS_ASSERT(field_msgoutUbxNavPosecefUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosecefUart1.template readFrom<1>(iter, len);
            }
        case 546373670UL /* 0x20910026UL */:
            {
                auto& field_msgoutUbxNavPosecefUart2 = initField_msgoutUbxNavPosecefUart2();
                COMMS_ASSERT(field_msgoutUbxNavPosecefUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosecefUart2.template readFrom<1>(iter, len);
            }
        case 546373671UL /* 0x20910027UL */:
            {
                auto& field_msgoutUbxNavPosecefUsb = initField_msgoutUbxNavPosecefUsb();
                COMMS_ASSERT(field_msgoutUbxNavPosecefUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosecefUsb.template readFrom<1>(iter, len);
            }
        case 546373673UL /* 0x20910029UL */:
            {
                auto& field_msgoutUbxNavPosllhI2c = initField_msgoutUbxNavPosllhI2c();
                COMMS_ASSERT(field_msgoutUbxNavPosllhI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosllhI2c.template readFrom<1>(iter, len);
            }
        case 546373677UL /* 0x2091002DUL */:
            {
                auto& field_msgoutUbxNavPosllhSpi = initField_msgoutUbxNavPosllhSpi();
                COMMS_ASSERT(field_msgoutUbxNavPosllhSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosllhSpi.template readFrom<1>(iter, len);
            }
        case 546373674UL /* 0x2091002AUL */:
            {
                auto& field_msgoutUbxNavPosllhUart1 = initField_msgoutUbxNavPosllhUart1();
                COMMS_ASSERT(field_msgoutUbxNavPosllhUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosllhUart1.template readFrom<1>(iter, len);
            }
        case 546373675UL /* 0x2091002BUL */:
            {
                auto& field_msgoutUbxNavPosllhUart2 = initField_msgoutUbxNavPosllhUart2();
                COMMS_ASSERT(field_msgoutUbxNavPosllhUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosllhUart2.template readFrom<1>(iter, len);
            }
        case 546373676UL /* 0x2091002CUL */:
            {
                auto& field_msgoutUbxNavPosllhUsb = initField_msgoutUbxNavPosllhUsb();
                COMMS_ASSERT(field_msgoutUbxNavPosllhUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPosllhUsb.template readFrom<1>(iter, len);
            }
        case 546373638UL /* 0x20910006UL */:
            {
                auto& field_msgoutUbxNavPvtI2c = initField_msgoutUbxNavPvtI2c();
                COMMS_ASSERT(field_msgoutUbxNavPvtI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPvtI2c.template readFrom<1>(iter, len);
            }
        case 546373642UL /* 0x2091000AUL */:
            {
                auto& field_msgoutUbxNavPvtSpi = initField_msgoutUbxNavPvtSpi();
                COMMS_ASSERT(field_msgoutUbxNavPvtSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPvtSpi.template readFrom<1>(iter, len);
            }
        case 546373639UL /* 0x20910007UL */:
            {
                auto& field_msgoutUbxNavPvtUart1 = initField_msgoutUbxNavPvtUart1();
                COMMS_ASSERT(field_msgoutUbxNavPvtUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPvtUart1.template readFrom<1>(iter, len);
            }
        case 546373640UL /* 0x20910008UL */:
            {
                auto& field_msgoutUbxNavPvtUart2 = initField_msgoutUbxNavPvtUart2();
                COMMS_ASSERT(field_msgoutUbxNavPvtUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPvtUart2.template readFrom<1>(iter, len);
            }
        case 546373641UL /* 0x20910009UL */:
            {
                auto& field_msgoutUbxNavPvtUsb = initField_msgoutUbxNavPvtUsb();
                COMMS_ASSERT(field_msgoutUbxNavPvtUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavPvtUsb.template readFrom<1>(iter, len);
            }
        case 546373773UL /* 0x2091008DUL */:
            {
                auto& field_msgoutUbxNavRelposnedI2c = initField_msgoutUbxNavRelposnedI2c();
                COMMS_ASSERT(field_msgoutUbxNavRelposnedI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavRelposnedI2c.template readFrom<1>(iter, len);
            }
        case 546373777UL /* 0x20910091UL */:
            {
                auto& field_msgoutUbxNavRelposnedSpi = initField_msgoutUbxNavRelposnedSpi();
                COMMS_ASSERT(field_msgoutUbxNavRelposnedSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavRelposnedSpi.template readFrom<1>(iter, len);
            }
        case 546373774UL /* 0x2091008EUL */:
            {
                auto& field_msgoutUbxNavRelposnedUart1 = initField_msgoutUbxNavRelposnedUart1();
                COMMS_ASSERT(field_msgoutUbxNavRelposnedUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavRelposnedUart1.template readFrom<1>(iter, len);
            }
        case 546373775UL /* 0x2091008FUL */:
            {
                auto& field_msgoutUbxNavRelposnedUart2 = initField_msgoutUbxNavRelposnedUart2();
                COMMS_ASSERT(field_msgoutUbxNavRelposnedUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavRelposnedUart2.template readFrom<1>(iter, len);
            }
        case 546373776UL /* 0x20910090UL */:
            {
                auto& field_msgoutUbxNavRelposnedUsb = initField_msgoutUbxNavRelposnedUsb();
                COMMS_ASSERT(field_msgoutUbxNavRelposnedUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavRelposnedUsb.template readFrom<1>(iter, len);
            }
        case 546373653UL /* 0x20910015UL */:
            {
                auto& field_msgoutUbxNavSatI2c = initField_msgoutUbxNavSatI2c();
                COMMS_ASSERT(field_msgoutUbxNavSatI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSatI2c.template readFrom<1>(iter, len);
            }
        case 546373657UL /* 0x20910019UL */:
            {
                auto& field_msgoutUbxNavSatSpi = initField_msgoutUbxNavSatSpi();
                COMMS_ASSERT(field_msgoutUbxNavSatSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSatSpi.template readFrom<1>(iter, len);
            }
        case 546373654UL /* 0x20910016UL */:
            {
                auto& field_msgoutUbxNavSatUart1 = initField_msgoutUbxNavSatUart1();
                COMMS_ASSERT(field_msgoutUbxNavSatUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSatUart1.template readFrom<1>(iter, len);
            }
        case 546373655UL /* 0x20910017UL */:
            {
                auto& field_msgoutUbxNavSatUart2 = initField_msgoutUbxNavSatUart2();
                COMMS_ASSERT(field_msgoutUbxNavSatUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSatUart2.template readFrom<1>(iter, len);
            }
        case 546373656UL /* 0x20910018UL */:
            {
                auto& field_msgoutUbxNavSatUsb = initField_msgoutUbxNavSatUsb();
                COMMS_ASSERT(field_msgoutUbxNavSatUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSatUsb.template readFrom<1>(iter, len);
            }
        case 546373738UL /* 0x2091006AUL */:
            {
                auto& field_msgoutUbxNavSbasI2c = initField_msgoutUbxNavSbasI2c();
                COMMS_ASSERT(field_msgoutUbxNavSbasI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSbasI2c.template readFrom<1>(iter, len);
            }
        case 546373742UL /* 0x2091006EUL */:
            {
                auto& field_msgoutUbxNavSbasSpi = initField_msgoutUbxNavSbasSpi();
                COMMS_ASSERT(field_msgoutUbxNavSbasSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSbasSpi.template readFrom<1>(iter, len);
            }
        case 546373739UL /* 0x2091006BUL */:
            {
                auto& field_msgoutUbxNavSbasUart1 = initField_msgoutUbxNavSbasUart1();
                COMMS_ASSERT(field_msgoutUbxNavSbasUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSbasUart1.template readFrom<1>(iter, len);
            }
        case 546373740UL /* 0x2091006CUL */:
            {
                auto& field_msgoutUbxNavSbasUart2 = initField_msgoutUbxNavSbasUart2();
                COMMS_ASSERT(field_msgoutUbxNavSbasUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSbasUart2.template readFrom<1>(iter, len);
            }
        case 546373741UL /* 0x2091006DUL */:
            {
                auto& field_msgoutUbxNavSbasUsb = initField_msgoutUbxNavSbasUsb();
                COMMS_ASSERT(field_msgoutUbxNavSbasUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSbasUsb.template readFrom<1>(iter, len);
            }
        case 546374469UL /* 0x20910345UL */:
            {
                auto& field_msgoutUbxNavSigI2c = initField_msgoutUbxNavSigI2c();
                COMMS_ASSERT(field_msgoutUbxNavSigI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSigI2c.template readFrom<1>(iter, len);
            }
        case 546374473UL /* 0x20910349UL */:
            {
                auto& field_msgoutUbxNavSigSpi = initField_msgoutUbxNavSigSpi();
                COMMS_ASSERT(field_msgoutUbxNavSigSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSigSpi.template readFrom<1>(iter, len);
            }
        case 546374470UL /* 0x20910346UL */:
            {
                auto& field_msgoutUbxNavSigUart1 = initField_msgoutUbxNavSigUart1();
                COMMS_ASSERT(field_msgoutUbxNavSigUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSigUart1.template readFrom<1>(iter, len);
            }
        case 546374471UL /* 0x20910347UL */:
            {
                auto& field_msgoutUbxNavSigUart2 = initField_msgoutUbxNavSigUart2();
                COMMS_ASSERT(field_msgoutUbxNavSigUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSigUart2.template readFrom<1>(iter, len);
            }
        case 546374472UL /* 0x20910348UL */:
            {
                auto& field_msgoutUbxNavSigUsb = initField_msgoutUbxNavSigUsb();
                COMMS_ASSERT(field_msgoutUbxNavSigUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSigUsb.template readFrom<1>(iter, len);
            }
        case 546374454UL /* 0x20910336UL */:
            {
                auto& field_msgoutUbxNavSlasI2c = initField_msgoutUbxNavSlasI2c();
                COMMS_ASSERT(field_msgoutUbxNavSlasI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSlasI2c.template readFrom<1>(iter, len);
            }
        case 546374458UL /* 0x2091033AUL */:
            {
                auto& field_msgoutUbxNavSlasSpi = initField_msgoutUbxNavSlasSpi();
                COMMS_ASSERT(field_msgoutUbxNavSlasSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSlasSpi.template readFrom<1>(iter, len);
            }
        case 546374455UL /* 0x20910337UL */:
            {
                auto& field_msgoutUbxNavSlasUart1 = initField_msgoutUbxNavSlasUart1();
                COMMS_ASSERT(field_msgoutUbxNavSlasUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSlasUart1.template readFrom<1>(iter, len);
            }
        case 546374456UL /* 0x20910338UL */:
            {
                auto& field_msgoutUbxNavSlasUart2 = initField_msgoutUbxNavSlasUart2();
                COMMS_ASSERT(field_msgoutUbxNavSlasUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSlasUart2.template readFrom<1>(iter, len);
            }
        case 546374457UL /* 0x20910339UL */:
            {
                auto& field_msgoutUbxNavSlasUsb = initField_msgoutUbxNavSlasUsb();
                COMMS_ASSERT(field_msgoutUbxNavSlasUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSlasUsb.template readFrom<1>(iter, len);
            }
        case 546373658UL /* 0x2091001AUL */:
            {
                auto& field_msgoutUbxNavStatusI2c = initField_msgoutUbxNavStatusI2c();
                COMMS_ASSERT(field_msgoutUbxNavStatusI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavStatusI2c.template readFrom<1>(iter, len);
            }
        case 546373662UL /* 0x2091001EUL */:
            {
                auto& field_msgoutUbxNavStatusSpi = initField_msgoutUbxNavStatusSpi();
                COMMS_ASSERT(field_msgoutUbxNavStatusSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavStatusSpi.template readFrom<1>(iter, len);
            }
        case 546373659UL /* 0x2091001BUL */:
            {
                auto& field_msgoutUbxNavStatusUart1 = initField_msgoutUbxNavStatusUart1();
                COMMS_ASSERT(field_msgoutUbxNavStatusUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavStatusUart1.template readFrom<1>(iter, len);
            }
        case 546373660UL /* 0x2091001CUL */:
            {
                auto& field_msgoutUbxNavStatusUart2 = initField_msgoutUbxNavStatusUart2();
                COMMS_ASSERT(field_msgoutUbxNavStatusUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavStatusUart2.template readFrom<1>(iter, len);
            }
        case 546373661UL /* 0x2091001DUL */:
            {
                auto& field_msgoutUbxNavStatusUsb = initField_msgoutUbxNavStatusUsb();
                COMMS_ASSERT(field_msgoutUbxNavStatusUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavStatusUsb.template readFrom<1>(iter, len);
            }
        case 546373768UL /* 0x20910088UL */:
            {
                auto& field_msgoutUbxNavSvinI2c = initField_msgoutUbxNavSvinI2c();
                COMMS_ASSERT(field_msgoutUbxNavSvinI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSvinI2c.template readFrom<1>(iter, len);
            }
        case 546373772UL /* 0x2091008CUL */:
            {
                auto& field_msgoutUbxNavSvinSpi = initField_msgoutUbxNavSvinSpi();
                COMMS_ASSERT(field_msgoutUbxNavSvinSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSvinSpi.template readFrom<1>(iter, len);
            }
        case 546373769UL /* 0x20910089UL */:
            {
                auto& field_msgoutUbxNavSvinUart1 = initField_msgoutUbxNavSvinUart1();
                COMMS_ASSERT(field_msgoutUbxNavSvinUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSvinUart1.template readFrom<1>(iter, len);
            }
        case 546373770UL /* 0x2091008AUL */:
            {
                auto& field_msgoutUbxNavSvinUart2 = initField_msgoutUbxNavSvinUart2();
                COMMS_ASSERT(field_msgoutUbxNavSvinUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSvinUart2.template readFrom<1>(iter, len);
            }
        case 546373771UL /* 0x2091008BUL */:
            {
                auto& field_msgoutUbxNavSvinUsb = initField_msgoutUbxNavSvinUsb();
                COMMS_ASSERT(field_msgoutUbxNavSvinUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavSvinUsb.template readFrom<1>(iter, len);
            }
        case 546373713UL /* 0x20910051UL */:
            {
                auto& field_msgoutUbxNavTimebdsI2c = initField_msgoutUbxNavTimebdsI2c();
                COMMS_ASSERT(field_msgoutUbxNavTimebdsI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimebdsI2c.template readFrom<1>(iter, len);
            }
        case 546373717UL /* 0x20910055UL */:
            {
                auto& field_msgoutUbxNavTimebdsSpi = initField_msgoutUbxNavTimebdsSpi();
                COMMS_ASSERT(field_msgoutUbxNavTimebdsSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimebdsSpi.template readFrom<1>(iter, len);
            }
        case 546373714UL /* 0x20910052UL */:
            {
                auto& field_msgoutUbxNavTimebdsUart1 = initField_msgoutUbxNavTimebdsUart1();
                COMMS_ASSERT(field_msgoutUbxNavTimebdsUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimebdsUart1.template readFrom<1>(iter, len);
            }
        case 546373715UL /* 0x20910053UL */:
            {
                auto& field_msgoutUbxNavTimebdsUart2 = initField_msgoutUbxNavTimebdsUart2();
                COMMS_ASSERT(field_msgoutUbxNavTimebdsUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimebdsUart2.template readFrom<1>(iter, len);
            }
        case 546373716UL /* 0x20910054UL */:
            {
                auto& field_msgoutUbxNavTimebdsUsb = initField_msgoutUbxNavTimebdsUsb();
                COMMS_ASSERT(field_msgoutUbxNavTimebdsUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimebdsUsb.template readFrom<1>(iter, len);
            }
        case 546373718UL /* 0x20910056UL */:
            {
                auto& field_msgoutUbxNavTimegalI2c = initField_msgoutUbxNavTimegalI2c();
                COMMS_ASSERT(field_msgoutUbxNavTimegalI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegalI2c.template readFrom<1>(iter, len);
            }
        case 546373722UL /* 0x2091005AUL */:
            {
                auto& field_msgoutUbxNavTimegalSpi = initField_msgoutUbxNavTimegalSpi();
                COMMS_ASSERT(field_msgoutUbxNavTimegalSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegalSpi.template readFrom<1>(iter, len);
            }
        case 546373719UL /* 0x20910057UL */:
            {
                auto& field_msgoutUbxNavTimegalUart1 = initField_msgoutUbxNavTimegalUart1();
                COMMS_ASSERT(field_msgoutUbxNavTimegalUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegalUart1.template readFrom<1>(iter, len);
            }
        case 546373720UL /* 0x20910058UL */:
            {
                auto& field_msgoutUbxNavTimegalUart2 = initField_msgoutUbxNavTimegalUart2();
                COMMS_ASSERT(field_msgoutUbxNavTimegalUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegalUart2.template readFrom<1>(iter, len);
            }
        case 546373721UL /* 0x20910059UL */:
            {
                auto& field_msgoutUbxNavTimegalUsb = initField_msgoutUbxNavTimegalUsb();
                COMMS_ASSERT(field_msgoutUbxNavTimegalUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegalUsb.template readFrom<1>(iter, len);
            }
        case 546373708UL /* 0x2091004CUL */:
            {
                auto& field_msgoutUbxNavTimegloI2c = initField_msgoutUbxNavTimegloI2c();
                COMMS_ASSERT(field_msgoutUbxNavTimegloI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegloI2c.template readFrom<1>(iter, len);
            }
        case 546373712UL /* 0x20910050UL */:
            {
                auto& field_msgoutUbxNavTimegloSpi = initField_msgoutUbxNavTimegloSpi();
                COMMS_ASSERT(field_msgoutUbxNavTimegloSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegloSpi.template readFrom<1>(iter, len);
            }
        case 546373709UL /* 0x2091004DUL */:
            {
                auto& field_msgoutUbxNavTimegloUart1 = initField_msgoutUbxNavTimegloUart1();
                COMMS_ASSERT(field_msgoutUbxNavTimegloUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegloUart1.template readFrom<1>(iter, len);
            }
        case 546373710UL /* 0x2091004EUL */:
            {
                auto& field_msgoutUbxNavTimegloUart2 = initField_msgoutUbxNavTimegloUart2();
                COMMS_ASSERT(field_msgoutUbxNavTimegloUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegloUart2.template readFrom<1>(iter, len);
            }
        case 546373711UL /* 0x2091004FUL */:
            {
                auto& field_msgoutUbxNavTimegloUsb = initField_msgoutUbxNavTimegloUsb();
                COMMS_ASSERT(field_msgoutUbxNavTimegloUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegloUsb.template readFrom<1>(iter, len);
            }
        case 546373703UL /* 0x20910047UL */:
            {
                auto& field_msgoutUbxNavTimegpsI2c = initField_msgoutUbxNavTimegpsI2c();
                COMMS_ASSERT(field_msgoutUbxNavTimegpsI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegpsI2c.template readFrom<1>(iter, len);
            }
        case 546373707UL /* 0x2091004BUL */:
            {
                auto& field_msgoutUbxNavTimegpsSpi = initField_msgoutUbxNavTimegpsSpi();
                COMMS_ASSERT(field_msgoutUbxNavTimegpsSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegpsSpi.template readFrom<1>(iter, len);
            }
        case 546373704UL /* 0x20910048UL */:
            {
                auto& field_msgoutUbxNavTimegpsUart1 = initField_msgoutUbxNavTimegpsUart1();
                COMMS_ASSERT(field_msgoutUbxNavTimegpsUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegpsUart1.template readFrom<1>(iter, len);
            }
        case 546373705UL /* 0x20910049UL */:
            {
                auto& field_msgoutUbxNavTimegpsUart2 = initField_msgoutUbxNavTimegpsUart2();
                COMMS_ASSERT(field_msgoutUbxNavTimegpsUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegpsUart2.template readFrom<1>(iter, len);
            }
        case 546373706UL /* 0x2091004AUL */:
            {
                auto& field_msgoutUbxNavTimegpsUsb = initField_msgoutUbxNavTimegpsUsb();
                COMMS_ASSERT(field_msgoutUbxNavTimegpsUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimegpsUsb.template readFrom<1>(iter, len);
            }
        case 546373728UL /* 0x20910060UL */:
            {
                auto& field_msgoutUbxNavTimelsI2c = initField_msgoutUbxNavTimelsI2c();
                COMMS_ASSERT(field_msgoutUbxNavTimelsI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimelsI2c.template readFrom<1>(iter, len);
            }
        case 546373732UL /* 0x20910064UL */:
            {
                auto& field_msgoutUbxNavTimelsSpi = initField_msgoutUbxNavTimelsSpi();
                COMMS_ASSERT(field_msgoutUbxNavTimelsSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimelsSpi.template readFrom<1>(iter, len);
            }
        case 546373729UL /* 0x20910061UL */:
            {
                auto& field_msgoutUbxNavTimelsUart1 = initField_msgoutUbxNavTimelsUart1();
                COMMS_ASSERT(field_msgoutUbxNavTimelsUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimelsUart1.template readFrom<1>(iter, len);
            }
        case 546373730UL /* 0x20910062UL */:
            {
                auto& field_msgoutUbxNavTimelsUart2 = initField_msgoutUbxNavTimelsUart2();
                COMMS_ASSERT(field_msgoutUbxNavTimelsUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimelsUart2.template readFrom<1>(iter, len);
            }
        case 546373731UL /* 0x20910063UL */:
            {
                auto& field_msgoutUbxNavTimelsUsb = initField_msgoutUbxNavTimelsUsb();
                COMMS_ASSERT(field_msgoutUbxNavTimelsUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimelsUsb.template readFrom<1>(iter, len);
            }
        case 546374534UL /* 0x20910386UL */:
            {
                auto& field_msgoutUbxNavTimeqzssI2c = initField_msgoutUbxNavTimeqzssI2c();
                COMMS_ASSERT(field_msgoutUbxNavTimeqzssI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeqzssI2c.template readFrom<1>(iter, len);
            }
        case 546374538UL /* 0x2091038AUL */:
            {
                auto& field_msgoutUbxNavTimeqzssSpi = initField_msgoutUbxNavTimeqzssSpi();
                COMMS_ASSERT(field_msgoutUbxNavTimeqzssSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeqzssSpi.template readFrom<1>(iter, len);
            }
        case 546374535UL /* 0x20910387UL */:
            {
                auto& field_msgoutUbxNavTimeqzssUart1 = initField_msgoutUbxNavTimeqzssUart1();
                COMMS_ASSERT(field_msgoutUbxNavTimeqzssUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeqzssUart1.template readFrom<1>(iter, len);
            }
        case 546374536UL /* 0x20910388UL */:
            {
                auto& field_msgoutUbxNavTimeqzssUart2 = initField_msgoutUbxNavTimeqzssUart2();
                COMMS_ASSERT(field_msgoutUbxNavTimeqzssUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeqzssUart2.template readFrom<1>(iter, len);
            }
        case 546374537UL /* 0x20910389UL */:
            {
                auto& field_msgoutUbxNavTimeqzssUsb = initField_msgoutUbxNavTimeqzssUsb();
                COMMS_ASSERT(field_msgoutUbxNavTimeqzssUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeqzssUsb.template readFrom<1>(iter, len);
            }
        case 546373723UL /* 0x2091005BUL */:
            {
                auto& field_msgoutUbxNavTimeutcI2c = initField_msgoutUbxNavTimeutcI2c();
                COMMS_ASSERT(field_msgoutUbxNavTimeutcI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeutcI2c.template readFrom<1>(iter, len);
            }
        case 546373727UL /* 0x2091005FUL */:
            {
                auto& field_msgoutUbxNavTimeutcSpi = initField_msgoutUbxNavTimeutcSpi();
                COMMS_ASSERT(field_msgoutUbxNavTimeutcSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeutcSpi.template readFrom<1>(iter, len);
            }
        case 546373724UL /* 0x2091005CUL */:
            {
                auto& field_msgoutUbxNavTimeutcUart1 = initField_msgoutUbxNavTimeutcUart1();
                COMMS_ASSERT(field_msgoutUbxNavTimeutcUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeutcUart1.template readFrom<1>(iter, len);
            }
        case 546373725UL /* 0x2091005DUL */:
            {
                auto& field_msgoutUbxNavTimeutcUart2 = initField_msgoutUbxNavTimeutcUart2();
                COMMS_ASSERT(field_msgoutUbxNavTimeutcUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeutcUart2.template readFrom<1>(iter, len);
            }
        case 546373726UL /* 0x2091005EUL */:
            {
                auto& field_msgoutUbxNavTimeutcUsb = initField_msgoutUbxNavTimeutcUsb();
                COMMS_ASSERT(field_msgoutUbxNavTimeutcUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavTimeutcUsb.template readFrom<1>(iter, len);
            }
        case 546373693UL /* 0x2091003DUL */:
            {
                auto& field_msgoutUbxNavVelecefI2c = initField_msgoutUbxNavVelecefI2c();
                COMMS_ASSERT(field_msgoutUbxNavVelecefI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelecefI2c.template readFrom<1>(iter, len);
            }
        case 546373697UL /* 0x20910041UL */:
            {
                auto& field_msgoutUbxNavVelecefSpi = initField_msgoutUbxNavVelecefSpi();
                COMMS_ASSERT(field_msgoutUbxNavVelecefSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelecefSpi.template readFrom<1>(iter, len);
            }
        case 546373694UL /* 0x2091003EUL */:
            {
                auto& field_msgoutUbxNavVelecefUart1 = initField_msgoutUbxNavVelecefUart1();
                COMMS_ASSERT(field_msgoutUbxNavVelecefUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelecefUart1.template readFrom<1>(iter, len);
            }
        case 546373695UL /* 0x2091003FUL */:
            {
                auto& field_msgoutUbxNavVelecefUart2 = initField_msgoutUbxNavVelecefUart2();
                COMMS_ASSERT(field_msgoutUbxNavVelecefUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelecefUart2.template readFrom<1>(iter, len);
            }
        case 546373696UL /* 0x20910040UL */:
            {
                auto& field_msgoutUbxNavVelecefUsb = initField_msgoutUbxNavVelecefUsb();
                COMMS_ASSERT(field_msgoutUbxNavVelecefUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelecefUsb.template readFrom<1>(iter, len);
            }
        case 546373698UL /* 0x20910042UL */:
            {
                auto& field_msgoutUbxNavVelnedI2c = initField_msgoutUbxNavVelnedI2c();
                COMMS_ASSERT(field_msgoutUbxNavVelnedI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelnedI2c.template readFrom<1>(iter, len);
            }
        case 546373702UL /* 0x20910046UL */:
            {
                auto& field_msgoutUbxNavVelnedSpi = initField_msgoutUbxNavVelnedSpi();
                COMMS_ASSERT(field_msgoutUbxNavVelnedSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelnedSpi.template readFrom<1>(iter, len);
            }
        case 546373699UL /* 0x20910043UL */:
            {
                auto& field_msgoutUbxNavVelnedUart1 = initField_msgoutUbxNavVelnedUart1();
                COMMS_ASSERT(field_msgoutUbxNavVelnedUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelnedUart1.template readFrom<1>(iter, len);
            }
        case 546373700UL /* 0x20910044UL */:
            {
                auto& field_msgoutUbxNavVelnedUart2 = initField_msgoutUbxNavVelnedUart2();
                COMMS_ASSERT(field_msgoutUbxNavVelnedUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelnedUart2.template readFrom<1>(iter, len);
            }
        case 546373701UL /* 0x20910045UL */:
            {
                auto& field_msgoutUbxNavVelnedUsb = initField_msgoutUbxNavVelnedUsb();
                COMMS_ASSERT(field_msgoutUbxNavVelnedUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxNavVelnedUsb.template readFrom<1>(iter, len);
            }
        case 546374148UL /* 0x20910204UL */:
            {
                auto& field_msgoutUbxRxmMeasxI2c = initField_msgoutUbxRxmMeasxI2c();
                COMMS_ASSERT(field_msgoutUbxRxmMeasxI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmMeasxI2c.template readFrom<1>(iter, len);
            }
        case 546374152UL /* 0x20910208UL */:
            {
                auto& field_msgoutUbxRxmMeasxSpi = initField_msgoutUbxRxmMeasxSpi();
                COMMS_ASSERT(field_msgoutUbxRxmMeasxSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmMeasxSpi.template readFrom<1>(iter, len);
            }
        case 546374149UL /* 0x20910205UL */:
            {
                auto& field_msgoutUbxRxmMeasxUart1 = initField_msgoutUbxRxmMeasxUart1();
                COMMS_ASSERT(field_msgoutUbxRxmMeasxUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmMeasxUart1.template readFrom<1>(iter, len);
            }
        case 546374150UL /* 0x20910206UL */:
            {
                auto& field_msgoutUbxRxmMeasxUart2 = initField_msgoutUbxRxmMeasxUart2();
                COMMS_ASSERT(field_msgoutUbxRxmMeasxUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmMeasxUart2.template readFrom<1>(iter, len);
            }
        case 546374151UL /* 0x20910207UL */:
            {
                auto& field_msgoutUbxRxmMeasxUsb = initField_msgoutUbxRxmMeasxUsb();
                COMMS_ASSERT(field_msgoutUbxRxmMeasxUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmMeasxUsb.template readFrom<1>(iter, len);
            }
        case 546374308UL /* 0x209102A4UL */:
            {
                auto& field_msgoutUbxRxmRawxI2c = initField_msgoutUbxRxmRawxI2c();
                COMMS_ASSERT(field_msgoutUbxRxmRawxI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRawxI2c.template readFrom<1>(iter, len);
            }
        case 546374312UL /* 0x209102A8UL */:
            {
                auto& field_msgoutUbxRxmRawxSpi = initField_msgoutUbxRxmRawxSpi();
                COMMS_ASSERT(field_msgoutUbxRxmRawxSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRawxSpi.template readFrom<1>(iter, len);
            }
        case 546374309UL /* 0x209102A5UL */:
            {
                auto& field_msgoutUbxRxmRawxUart1 = initField_msgoutUbxRxmRawxUart1();
                COMMS_ASSERT(field_msgoutUbxRxmRawxUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRawxUart1.template readFrom<1>(iter, len);
            }
        case 546374310UL /* 0x209102A6UL */:
            {
                auto& field_msgoutUbxRxmRawxUart2 = initField_msgoutUbxRxmRawxUart2();
                COMMS_ASSERT(field_msgoutUbxRxmRawxUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRawxUart2.template readFrom<1>(iter, len);
            }
        case 546374311UL /* 0x209102A7UL */:
            {
                auto& field_msgoutUbxRxmRawxUsb = initField_msgoutUbxRxmRawxUsb();
                COMMS_ASSERT(field_msgoutUbxRxmRawxUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRawxUsb.template readFrom<1>(iter, len);
            }
        case 546374238UL /* 0x2091025EUL */:
            {
                auto& field_msgoutUbxRxmRlmI2c = initField_msgoutUbxRxmRlmI2c();
                COMMS_ASSERT(field_msgoutUbxRxmRlmI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRlmI2c.template readFrom<1>(iter, len);
            }
        case 546374242UL /* 0x20910262UL */:
            {
                auto& field_msgoutUbxRxmRlmSpi = initField_msgoutUbxRxmRlmSpi();
                COMMS_ASSERT(field_msgoutUbxRxmRlmSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRlmSpi.template readFrom<1>(iter, len);
            }
        case 546374239UL /* 0x2091025FUL */:
            {
                auto& field_msgoutUbxRxmRlmUart1 = initField_msgoutUbxRxmRlmUart1();
                COMMS_ASSERT(field_msgoutUbxRxmRlmUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRlmUart1.template readFrom<1>(iter, len);
            }
        case 546374240UL /* 0x20910260UL */:
            {
                auto& field_msgoutUbxRxmRlmUart2 = initField_msgoutUbxRxmRlmUart2();
                COMMS_ASSERT(field_msgoutUbxRxmRlmUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRlmUart2.template readFrom<1>(iter, len);
            }
        case 546374241UL /* 0x20910261UL */:
            {
                auto& field_msgoutUbxRxmRlmUsb = initField_msgoutUbxRxmRlmUsb();
                COMMS_ASSERT(field_msgoutUbxRxmRlmUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRlmUsb.template readFrom<1>(iter, len);
            }
        case 546374248UL /* 0x20910268UL */:
            {
                auto& field_msgoutUbxRxmRtcmI2c = initField_msgoutUbxRxmRtcmI2c();
                COMMS_ASSERT(field_msgoutUbxRxmRtcmI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRtcmI2c.template readFrom<1>(iter, len);
            }
        case 546374252UL /* 0x2091026CUL */:
            {
                auto& field_msgoutUbxRxmRtcmSpi = initField_msgoutUbxRxmRtcmSpi();
                COMMS_ASSERT(field_msgoutUbxRxmRtcmSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRtcmSpi.template readFrom<1>(iter, len);
            }
        case 546374249UL /* 0x20910269UL */:
            {
                auto& field_msgoutUbxRxmRtcmUart1 = initField_msgoutUbxRxmRtcmUart1();
                COMMS_ASSERT(field_msgoutUbxRxmRtcmUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRtcmUart1.template readFrom<1>(iter, len);
            }
        case 546374250UL /* 0x2091026AUL */:
            {
                auto& field_msgoutUbxRxmRtcmUart2 = initField_msgoutUbxRxmRtcmUart2();
                COMMS_ASSERT(field_msgoutUbxRxmRtcmUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRtcmUart2.template readFrom<1>(iter, len);
            }
        case 546374251UL /* 0x2091026BUL */:
            {
                auto& field_msgoutUbxRxmRtcmUsb = initField_msgoutUbxRxmRtcmUsb();
                COMMS_ASSERT(field_msgoutUbxRxmRtcmUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmRtcmUsb.template readFrom<1>(iter, len);
            }
        case 546374193UL /* 0x20910231UL */:
            {
                auto& field_msgoutUbxRxmSfrbxI2c = initField_msgoutUbxRxmSfrbxI2c();
                COMMS_ASSERT(field_msgoutUbxRxmSfrbxI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmSfrbxI2c.template readFrom<1>(iter, len);
            }
        case 546374197UL /* 0x20910235UL */:
            {
                auto& field_msgoutUbxRxmSfrbxSpi = initField_msgoutUbxRxmSfrbxSpi();
                COMMS_ASSERT(field_msgoutUbxRxmSfrbxSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmSfrbxSpi.template readFrom<1>(iter, len);
            }
        case 546374194UL /* 0x20910232UL */:
            {
                auto& field_msgoutUbxRxmSfrbxUart1 = initField_msgoutUbxRxmSfrbxUart1();
                COMMS_ASSERT(field_msgoutUbxRxmSfrbxUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmSfrbxUart1.template readFrom<1>(iter, len);
            }
        case 546374195UL /* 0x20910233UL */:
            {
                auto& field_msgoutUbxRxmSfrbxUart2 = initField_msgoutUbxRxmSfrbxUart2();
                COMMS_ASSERT(field_msgoutUbxRxmSfrbxUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmSfrbxUart2.template readFrom<1>(iter, len);
            }
        case 546374196UL /* 0x20910234UL */:
            {
                auto& field_msgoutUbxRxmSfrbxUsb = initField_msgoutUbxRxmSfrbxUsb();
                COMMS_ASSERT(field_msgoutUbxRxmSfrbxUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxRxmSfrbxUsb.template readFrom<1>(iter, len);
            }
        case 546374008UL /* 0x20910178UL */:
            {
                auto& field_msgoutUbxTimTm2I2c = initField_msgoutUbxTimTm2I2c();
                COMMS_ASSERT(field_msgoutUbxTimTm2I2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTm2I2c.template readFrom<1>(iter, len);
            }
        case 546374012UL /* 0x2091017CUL */:
            {
                auto& field_msgoutUbxTimTm2Spi = initField_msgoutUbxTimTm2Spi();
                COMMS_ASSERT(field_msgoutUbxTimTm2Spi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTm2Spi.template readFrom<1>(iter, len);
            }
        case 546374009UL /* 0x20910179UL */:
            {
                auto& field_msgoutUbxTimTm2Uart1 = initField_msgoutUbxTimTm2Uart1();
                COMMS_ASSERT(field_msgoutUbxTimTm2Uart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTm2Uart1.template readFrom<1>(iter, len);
            }
        case 546374010UL /* 0x2091017AUL */:
            {
                auto& field_msgoutUbxTimTm2Uart2 = initField_msgoutUbxTimTm2Uart2();
                COMMS_ASSERT(field_msgoutUbxTimTm2Uart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTm2Uart2.template readFrom<1>(iter, len);
            }
        case 546374011UL /* 0x2091017BUL */:
            {
                auto& field_msgoutUbxTimTm2Usb = initField_msgoutUbxTimTm2Usb();
                COMMS_ASSERT(field_msgoutUbxTimTm2Usb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTm2Usb.template readFrom<1>(iter, len);
            }
        case 546374013UL /* 0x2091017DUL */:
            {
                auto& field_msgoutUbxTimTpI2c = initField_msgoutUbxTimTpI2c();
                COMMS_ASSERT(field_msgoutUbxTimTpI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTpI2c.template readFrom<1>(iter, len);
            }
        case 546374017UL /* 0x20910181UL */:
            {
                auto& field_msgoutUbxTimTpSpi = initField_msgoutUbxTimTpSpi();
                COMMS_ASSERT(field_msgoutUbxTimTpSpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTpSpi.template readFrom<1>(iter, len);
            }
        case 546374014UL /* 0x2091017EUL */:
            {
                auto& field_msgoutUbxTimTpUart1 = initField_msgoutUbxTimTpUart1();
                COMMS_ASSERT(field_msgoutUbxTimTpUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTpUart1.template readFrom<1>(iter, len);
            }
        case 546374015UL /* 0x2091017FUL */:
            {
                auto& field_msgoutUbxTimTpUart2 = initField_msgoutUbxTimTpUart2();
                COMMS_ASSERT(field_msgoutUbxTimTpUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTpUart2.template readFrom<1>(iter, len);
            }
        case 546374016UL /* 0x20910180UL */:
            {
                auto& field_msgoutUbxTimTpUsb = initField_msgoutUbxTimTpUsb();
                COMMS_ASSERT(field_msgoutUbxTimTpUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimTpUsb.template readFrom<1>(iter, len);
            }
        case 546373778UL /* 0x20910092UL */:
            {
                auto& field_msgoutUbxTimVrfyI2c = initField_msgoutUbxTimVrfyI2c();
                COMMS_ASSERT(field_msgoutUbxTimVrfyI2c.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimVrfyI2c.template readFrom<1>(iter, len);
            }
        case 546373782UL /* 0x20910096UL */:
            {
                auto& field_msgoutUbxTimVrfySpi = initField_msgoutUbxTimVrfySpi();
                COMMS_ASSERT(field_msgoutUbxTimVrfySpi.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimVrfySpi.template readFrom<1>(iter, len);
            }
        case 546373779UL /* 0x20910093UL */:
            {
                auto& field_msgoutUbxTimVrfyUart1 = initField_msgoutUbxTimVrfyUart1();
                COMMS_ASSERT(field_msgoutUbxTimVrfyUart1.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimVrfyUart1.template readFrom<1>(iter, len);
            }
        case 546373780UL /* 0x20910094UL */:
            {
                auto& field_msgoutUbxTimVrfyUart2 = initField_msgoutUbxTimVrfyUart2();
                COMMS_ASSERT(field_msgoutUbxTimVrfyUart2.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimVrfyUart2.template readFrom<1>(iter, len);
            }
        case 546373781UL /* 0x20910095UL */:
            {
                auto& field_msgoutUbxTimVrfyUsb = initField_msgoutUbxTimVrfyUsb();
                COMMS_ASSERT(field_msgoutUbxTimVrfyUsb.field_key().getValue() == commonKeyField.getValue());
                return field_msgoutUbxTimVrfyUsb.template readFrom<1>(iter, len);
            }
        case 538181649UL /* 0x20140011UL */:
            {
                auto& field_navhpgDgnssmode = initField_navhpgDgnssmode();
                COMMS_ASSERT(field_navhpgDgnssmode.field_key().getValue() == commonKeyField.getValue());
                return field_navhpgDgnssmode.template readFrom<1>(iter, len);
            }
        case 537985041UL /* 0x20110011UL */:
            {
                auto& field_navspgFixmode = initField_navspgFixmode();
                COMMS_ASSERT(field_navspgFixmode.field_key().getValue() == commonKeyField.getValue());
                return field_navspgFixmode.template readFrom<1>(iter, len);
            }
        case 269549587UL /* 0x10110013UL */:
            {
                auto& field_navspgInifix3d = initField_navspgInifix3d();
                COMMS_ASSERT(field_navspgInifix3d.field_key().getValue() == commonKeyField.getValue());
                return field_navspgInifix3d.template readFrom<1>(iter, len);
            }
        case 806420503UL /* 0x30110017UL */:
            {
                auto& field_navspgWknrollover = initField_navspgWknrollover();
                COMMS_ASSERT(field_navspgWknrollover.field_key().getValue() == commonKeyField.getValue());
                return field_navspgWknrollover.template readFrom<1>(iter, len);
            }
        case 537985052UL /* 0x2011001CUL */:
            {
                auto& field_navspgUtcstandard = initField_navspgUtcstandard();
                COMMS_ASSERT(field_navspgUtcstandard.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUtcstandard.template readFrom<1>(iter, len);
            }
        case 537985057UL /* 0x20110021UL */:
            {
                auto& field_navspgDynmodel = initField_navspgDynmodel();
                COMMS_ASSERT(field_navspgDynmodel.field_key().getValue() == commonKeyField.getValue());
                return field_navspgDynmodel.template readFrom<1>(iter, len);
            }
        case 269549605UL /* 0x10110025UL */:
            {
                auto& field_navspgAckaiding = initField_navspgAckaiding();
                COMMS_ASSERT(field_navspgAckaiding.field_key().getValue() == commonKeyField.getValue());
                return field_navspgAckaiding.template readFrom<1>(iter, len);
            }
        case 269549665UL /* 0x10110061UL */:
            {
                auto& field_navspgUseUsrdat = initField_navspgUseUsrdat();
                COMMS_ASSERT(field_navspgUseUsrdat.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUseUsrdat.template readFrom<1>(iter, len);
            }
        case 1343291490UL /* 0x50110062UL */:
            {
                auto& field_navspgUsrdatMaja = initField_navspgUsrdatMaja();
                COMMS_ASSERT(field_navspgUsrdatMaja.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatMaja.template readFrom<1>(iter, len);
            }
        case 1343291491UL /* 0x50110063UL */:
            {
                auto& field_navspgUsrdatFlat = initField_navspgUsrdatFlat();
                COMMS_ASSERT(field_navspgUsrdatFlat.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatFlat.template readFrom<1>(iter, len);
            }
        case 1074856036UL /* 0x40110064UL */:
            {
                auto& field_navspgUsrdatDx = initField_navspgUsrdatDx();
                COMMS_ASSERT(field_navspgUsrdatDx.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatDx.template readFrom<1>(iter, len);
            }
        case 1074856037UL /* 0x40110065UL */:
            {
                auto& field_navspgUsrdatDy = initField_navspgUsrdatDy();
                COMMS_ASSERT(field_navspgUsrdatDy.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatDy.template readFrom<1>(iter, len);
            }
        case 1074856038UL /* 0x40110066UL */:
            {
                auto& field_navspgUsrdatDz = initField_navspgUsrdatDz();
                COMMS_ASSERT(field_navspgUsrdatDz.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatDz.template readFrom<1>(iter, len);
            }
        case 1074856039UL /* 0x40110067UL */:
            {
                auto& field_navspgUsrdatRotx = initField_navspgUsrdatRotx();
                COMMS_ASSERT(field_navspgUsrdatRotx.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatRotx.template readFrom<1>(iter, len);
            }
        case 1074856040UL /* 0x40110068UL */:
            {
                auto& field_navspgUsrdatRoty = initField_navspgUsrdatRoty();
                COMMS_ASSERT(field_navspgUsrdatRoty.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatRoty.template readFrom<1>(iter, len);
            }
        case 1074856041UL /* 0x40110069UL */:
            {
                auto& field_navspgUsrdatRotz = initField_navspgUsrdatRotz();
                COMMS_ASSERT(field_navspgUsrdatRotz.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatRotz.template readFrom<1>(iter, len);
            }
        case 1074856042UL /* 0x4011006AUL */:
            {
                auto& field_navspgUsrdatScale = initField_navspgUsrdatScale();
                COMMS_ASSERT(field_navspgUsrdatScale.field_key().getValue() == commonKeyField.getValue());
                return field_navspgUsrdatScale.template readFrom<1>(iter, len);
            }
        case 537985185UL /* 0x201100A1UL */:
            {
                auto& field_navspgInfilMinsvs = initField_navspgInfilMinsvs();
                COMMS_ASSERT(field_navspgInfilMinsvs.field_key().getValue() == commonKeyField.getValue());
                return field_navspgInfilMinsvs.template readFrom<1>(iter, len);
            }
        case 537985186UL /* 0x201100A2UL */:
            {
                auto& field_navspgInfilMaxsvs = initField_navspgInfilMaxsvs();
                COMMS_ASSERT(field_navspgInfilMaxsvs.field_key().getValue() == commonKeyField.getValue());
                return field_navspgInfilMaxsvs.template readFrom<1>(iter, len);
            }
        case 537985187UL /* 0x201100A3UL */:
            {
                auto& field_navspgInfilMincno = initField_navspgInfilMincno();
                COMMS_ASSERT(field_navspgInfilMincno.field_key().getValue() == commonKeyField.getValue());
                return field_navspgInfilMincno.template readFrom<1>(iter, len);
            }
        case 537985188UL /* 0x201100A4UL */:
            {
                auto& field_navspgInfilMinelev = initField_navspgInfilMinelev();
                COMMS_ASSERT(field_navspgInfilMinelev.field_key().getValue() == commonKeyField.getValue());
                return field_navspgInfilMinelev.template readFrom<1>(iter, len);
            }
        case 537985194UL /* 0x201100AAUL */:
            {
                auto& field_navspgInfilNcnothrs = initField_navspgInfilNcnothrs();
                COMMS_ASSERT(field_navspgInfilNcnothrs.field_key().getValue() == commonKeyField.getValue());
                return field_navspgInfilNcnothrs.template readFrom<1>(iter, len);
            }
        case 537985195UL /* 0x201100ABUL */:
            {
                auto& field_navspgInfilCnothrs = initField_navspgInfilCnothrs();
                COMMS_ASSERT(field_navspgInfilCnothrs.field_key().getValue() == commonKeyField.getValue());
                return field_navspgInfilCnothrs.template readFrom<1>(iter, len);
            }
        case 806420657UL /* 0x301100B1UL */:
            {
                auto& field_navspgOutfilPdop = initField_navspgOutfilPdop();
                COMMS_ASSERT(field_navspgOutfilPdop.field_key().getValue() == commonKeyField.getValue());
                return field_navspgOutfilPdop.template readFrom<1>(iter, len);
            }
        case 806420658UL /* 0x301100B2UL */:
            {
                auto& field_navspgOutfilTdop = initField_navspgOutfilTdop();
                COMMS_ASSERT(field_navspgOutfilTdop.field_key().getValue() == commonKeyField.getValue());
                return field_navspgOutfilTdop.template readFrom<1>(iter, len);
            }
        case 806420659UL /* 0x301100B3UL */:
            {
                auto& field_navspgOutfilPacc = initField_navspgOutfilPacc();
                COMMS_ASSERT(field_navspgOutfilPacc.field_key().getValue() == commonKeyField.getValue());
                return field_navspgOutfilPacc.template readFrom<1>(iter, len);
            }
        case 806420660UL /* 0x301100B4UL */:
            {
                auto& field_navspgOutfilTacc = initField_navspgOutfilTacc();
                COMMS_ASSERT(field_navspgOutfilTacc.field_key().getValue() == commonKeyField.getValue());
                return field_navspgOutfilTacc.template readFrom<1>(iter, len);
            }
        case 806420661UL /* 0x301100B5UL */:
            {
                auto& field_navspgOutfilFacc = initField_navspgOutfilFacc();
                COMMS_ASSERT(field_navspgOutfilFacc.field_key().getValue() == commonKeyField.getValue());
                return field_navspgOutfilFacc.template readFrom<1>(iter, len);
            }
        case 1074856129UL /* 0x401100C1UL */:
            {
                auto& field_navspgConstrAlt = initField_navspgConstrAlt();
                COMMS_ASSERT(field_navspgConstrAlt.field_key().getValue() == commonKeyField.getValue());
                return field_navspgConstrAlt.template readFrom<1>(iter, len);
            }
        case 1074856130UL /* 0x401100C2UL */:
            {
                auto& field_navspgConstrAltvar = initField_navspgConstrAltvar();
                COMMS_ASSERT(field_navspgConstrAltvar.field_key().getValue() == commonKeyField.getValue());
                return field_navspgConstrAltvar.template readFrom<1>(iter, len);
            }
        case 537985220UL /* 0x201100C4UL */:
            {
                auto& field_navspgConstrDgnssto = initField_navspgConstrDgnssto();
                COMMS_ASSERT(field_navspgConstrDgnssto.field_key().getValue() == commonKeyField.getValue());
                return field_navspgConstrDgnssto.template readFrom<1>(iter, len);
            }
        case 546504705UL /* 0x20930001UL */:
            {
                auto& field_nmeaProtver = initField_nmeaProtver();
                COMMS_ASSERT(field_nmeaProtver.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaProtver.template readFrom<1>(iter, len);
            }
        case 546504706UL /* 0x20930002UL */:
            {
                auto& field_nmeaMaxsvs = initField_nmeaMaxsvs();
                COMMS_ASSERT(field_nmeaMaxsvs.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaMaxsvs.template readFrom<1>(iter, len);
            }
        case 278069251UL /* 0x10930003UL */:
            {
                auto& field_nmeaCompat = initField_nmeaCompat();
                COMMS_ASSERT(field_nmeaCompat.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaCompat.template readFrom<1>(iter, len);
            }
        case 278069252UL /* 0x10930004UL */:
            {
                auto& field_nmeaConsider = initField_nmeaConsider();
                COMMS_ASSERT(field_nmeaConsider.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaConsider.template readFrom<1>(iter, len);
            }
        case 278069253UL /* 0x10930005UL */:
            {
                auto& field_nmeaLimit82 = initField_nmeaLimit82();
                COMMS_ASSERT(field_nmeaLimit82.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaLimit82.template readFrom<1>(iter, len);
            }
        case 278069254UL /* 0x10930006UL */:
            {
                auto& field_nmeaHighprec = initField_nmeaHighprec();
                COMMS_ASSERT(field_nmeaHighprec.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaHighprec.template readFrom<1>(iter, len);
            }
        case 546504711UL /* 0x20930007UL */:
            {
                auto& field_nmeaSvnumbering = initField_nmeaSvnumbering();
                COMMS_ASSERT(field_nmeaSvnumbering.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaSvnumbering.template readFrom<1>(iter, len);
            }
        case 278069265UL /* 0x10930011UL */:
            {
                auto& field_nmeaFiltGps = initField_nmeaFiltGps();
                COMMS_ASSERT(field_nmeaFiltGps.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaFiltGps.template readFrom<1>(iter, len);
            }
        case 278069266UL /* 0x10930012UL */:
            {
                auto& field_nmeaFiltSbas = initField_nmeaFiltSbas();
                COMMS_ASSERT(field_nmeaFiltSbas.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaFiltSbas.template readFrom<1>(iter, len);
            }
        case 278069267UL /* 0x10930013UL */:
            {
                auto& field_nmeaFiltGal = initField_nmeaFiltGal();
                COMMS_ASSERT(field_nmeaFiltGal.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaFiltGal.template readFrom<1>(iter, len);
            }
        case 278069269UL /* 0x10930015UL */:
            {
                auto& field_nmeaFiltQzss = initField_nmeaFiltQzss();
                COMMS_ASSERT(field_nmeaFiltQzss.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaFiltQzss.template readFrom<1>(iter, len);
            }
        case 278069270UL /* 0x10930016UL */:
            {
                auto& field_nmeaFiltGlo = initField_nmeaFiltGlo();
                COMMS_ASSERT(field_nmeaFiltGlo.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaFiltGlo.template readFrom<1>(iter, len);
            }
        case 278069271UL /* 0x10930017UL */:
            {
                auto& field_nmeaFiltBds = initField_nmeaFiltBds();
                COMMS_ASSERT(field_nmeaFiltBds.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaFiltBds.template readFrom<1>(iter, len);
            }
        case 278069281UL /* 0x10930021UL */:
            {
                auto& field_nmeaOutInvfix = initField_nmeaOutInvfix();
                COMMS_ASSERT(field_nmeaOutInvfix.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaOutInvfix.template readFrom<1>(iter, len);
            }
        case 278069282UL /* 0x10930022UL */:
            {
                auto& field_nmeaOutMskfix = initField_nmeaOutMskfix();
                COMMS_ASSERT(field_nmeaOutMskfix.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaOutMskfix.template readFrom<1>(iter, len);
            }
        case 278069283UL /* 0x10930023UL */:
            {
                auto& field_nmeaOutInvtime = initField_nmeaOutInvtime();
                COMMS_ASSERT(field_nmeaOutInvtime.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaOutInvtime.template readFrom<1>(iter, len);
            }
        case 278069284UL /* 0x10930024UL */:
            {
                auto& field_nmeaOutInvdate = initField_nmeaOutInvdate();
                COMMS_ASSERT(field_nmeaOutInvdate.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaOutInvdate.template readFrom<1>(iter, len);
            }
        case 278069285UL /* 0x10930025UL */:
            {
                auto& field_nmeaOutOnlygps = initField_nmeaOutOnlygps();
                COMMS_ASSERT(field_nmeaOutOnlygps.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaOutOnlygps.template readFrom<1>(iter, len);
            }
        case 278069286UL /* 0x10930026UL */:
            {
                auto& field_nmeaOutFrozencog = initField_nmeaOutFrozencog();
                COMMS_ASSERT(field_nmeaOutFrozencog.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaOutFrozencog.template readFrom<1>(iter, len);
            }
        case 546504753UL /* 0x20930031UL */:
            {
                auto& field_nmeaOutMaintalkerid = initField_nmeaOutMaintalkerid();
                COMMS_ASSERT(field_nmeaOutMaintalkerid.field_key().getValue() == commonKeyField.getValue());
                return field_nmeaOutMaintalkerid.template readFrom<1>(iter, len);
            }
        case 270663681UL /* 0x10220001UL */:
            {
                auto& field_odoUseOdo = initField_odoUseOdo();
                COMMS_ASSERT(field_odoUseOdo.field_key().getValue() == commonKeyField.getValue());
                return field_odoUseOdo.template readFrom<1>(iter, len);
            }
        case 270663682UL /* 0x10220002UL */:
            {
                auto& field_odoUseCog = initField_odoUseCog();
                COMMS_ASSERT(field_odoUseCog.field_key().getValue() == commonKeyField.getValue());
                return field_odoUseCog.template readFrom<1>(iter, len);
            }
        case 270663683UL /* 0x10220003UL */:
            {
                auto& field_odoOutlpvel = initField_odoOutlpvel();
                COMMS_ASSERT(field_odoOutlpvel.field_key().getValue() == commonKeyField.getValue());
                return field_odoOutlpvel.template readFrom<1>(iter, len);
            }
        case 270663684UL /* 0x10220004UL */:
            {
                auto& field_odoOutlpcog = initField_odoOutlpcog();
                COMMS_ASSERT(field_odoOutlpcog.field_key().getValue() == commonKeyField.getValue());
                return field_odoOutlpcog.template readFrom<1>(iter, len);
            }
        case 539099141UL /* 0x20220005UL */:
            {
                auto& field_odoProfile = initField_odoProfile();
                COMMS_ASSERT(field_odoProfile.field_key().getValue() == commonKeyField.getValue());
                return field_odoProfile.template readFrom<1>(iter, len);
            }
        case 539099169UL /* 0x20220021UL */:
            {
                auto& field_odoCogmaxspeed = initField_odoCogmaxspeed();
                COMMS_ASSERT(field_odoCogmaxspeed.field_key().getValue() == commonKeyField.getValue());
                return field_odoCogmaxspeed.template readFrom<1>(iter, len);
            }
        case 539099170UL /* 0x20220022UL */:
            {
                auto& field_odoCogmaxposacc = initField_odoCogmaxposacc();
                COMMS_ASSERT(field_odoCogmaxposacc.field_key().getValue() == commonKeyField.getValue());
                return field_odoCogmaxposacc.template readFrom<1>(iter, len);
            }
        case 539099185UL /* 0x20220031UL */:
            {
                auto& field_odoVellpgain = initField_odoVellpgain();
                COMMS_ASSERT(field_odoVellpgain.field_key().getValue() == commonKeyField.getValue());
                return field_odoVellpgain.template readFrom<1>(iter, len);
            }
        case 539099186UL /* 0x20220032UL */:
            {
                auto& field_odoCoglpgain = initField_odoCoglpgain();
                COMMS_ASSERT(field_odoCoglpgain.field_key().getValue() == commonKeyField.getValue());
                return field_odoCoglpgain.template readFrom<1>(iter, len);
            }
        case 272039941UL /* 0x10370005UL */:
            {
                auto& field_qzssUseSlasDgnss = initField_qzssUseSlasDgnss();
                COMMS_ASSERT(field_qzssUseSlasDgnss.field_key().getValue() == commonKeyField.getValue());
                return field_qzssUseSlasDgnss.template readFrom<1>(iter, len);
            }
        case 272039942UL /* 0x10370006UL */:
            {
                auto& field_qzssUseSlasTestmode = initField_qzssUseSlasTestmode();
                COMMS_ASSERT(field_qzssUseSlasTestmode.field_key().getValue() == commonKeyField.getValue());
                return field_qzssUseSlasTestmode.template readFrom<1>(iter, len);
            }
        case 272039943UL /* 0x10370007UL */:
            {
                auto& field_qzssUseSlasRaimUncorr = initField_qzssUseSlasRaimUncorr();
                COMMS_ASSERT(field_qzssUseSlasRaimUncorr.field_key().getValue() == commonKeyField.getValue());
                return field_qzssUseSlasRaimUncorr.template readFrom<1>(iter, len);
            }
        case 807469057UL /* 0x30210001UL */:
            {
                auto& field_rateMeas = initField_rateMeas();
                COMMS_ASSERT(field_rateMeas.field_key().getValue() == commonKeyField.getValue());
                return field_rateMeas.template readFrom<1>(iter, len);
            }
        case 807469058UL /* 0x30210002UL */:
            {
                auto& field_rateNav = initField_rateNav();
                COMMS_ASSERT(field_rateNav.field_key().getValue() == commonKeyField.getValue());
                return field_rateNav.template readFrom<1>(iter, len);
            }
        case 539033603UL /* 0x20210003UL */:
            {
                auto& field_rateTimeref = initField_rateTimeref();
                COMMS_ASSERT(field_rateTimeref.field_key().getValue() == commonKeyField.getValue());
                return field_rateTimeref.template readFrom<1>(iter, len);
            }
        case 281477121UL /* 0x10C70001UL */:
            {
                auto& field_rinvDump = initField_rinvDump();
                COMMS_ASSERT(field_rinvDump.field_key().getValue() == commonKeyField.getValue());
                return field_rinvDump.template readFrom<1>(iter, len);
            }
        case 281477122UL /* 0x10C70002UL */:
            {
                auto& field_rinvBinary = initField_rinvBinary();
                COMMS_ASSERT(field_rinvBinary.field_key().getValue() == commonKeyField.getValue());
                return field_rinvBinary.template readFrom<1>(iter, len);
            }
        case 549912579UL /* 0x20C70003UL */:
            {
                auto& field_rinvDataSize = initField_rinvDataSize();
                COMMS_ASSERT(field_rinvDataSize.field_key().getValue() == commonKeyField.getValue());
                return field_rinvDataSize.template readFrom<1>(iter, len);
            }
        case 1355218948UL /* 0x50C70004UL */:
            {
                auto& field_rinvChunk0 = initField_rinvChunk0();
                COMMS_ASSERT(field_rinvChunk0.field_key().getValue() == commonKeyField.getValue());
                return field_rinvChunk0.template readFrom<1>(iter, len);
            }
        case 1355218949UL /* 0x50C70005UL */:
            {
                auto& field_rinvChunk1 = initField_rinvChunk1();
                COMMS_ASSERT(field_rinvChunk1.field_key().getValue() == commonKeyField.getValue());
                return field_rinvChunk1.template readFrom<1>(iter, len);
            }
        case 1355218950UL /* 0x50C70006UL */:
            {
                auto& field_rinvChunk2 = initField_rinvChunk2();
                COMMS_ASSERT(field_rinvChunk2.field_key().getValue() == commonKeyField.getValue());
                return field_rinvChunk2.template readFrom<1>(iter, len);
            }
        case 1355218951UL /* 0x50C70007UL */:
            {
                auto& field_rinvChunk3 = initField_rinvChunk3();
                COMMS_ASSERT(field_rinvChunk3.field_key().getValue() == commonKeyField.getValue());
                return field_rinvChunk3.template readFrom<1>(iter, len);
            }
        case 805896193UL /* 0x30090001UL */:
            {
                auto& field_rtcmDf003Out = initField_rtcmDf003Out();
                COMMS_ASSERT(field_rtcmDf003Out.field_key().getValue() == commonKeyField.getValue());
                return field_rtcmDf003Out.template readFrom<1>(iter, len);
            }
        case 805896200UL /* 0x30090008UL */:
            {
                auto& field_rtcmDf003In = initField_rtcmDf003In();
                COMMS_ASSERT(field_rtcmDf003In.field_key().getValue() == commonKeyField.getValue());
                return field_rtcmDf003In.template readFrom<1>(iter, len);
            }
        case 537460745UL /* 0x20090009UL */:
            {
                auto& field_rtcmDf003InFilter = initField_rtcmDf003InFilter();
                COMMS_ASSERT(field_rtcmDf003InFilter.field_key().getValue() == commonKeyField.getValue());
                return field_rtcmDf003InFilter.template readFrom<1>(iter, len);
            }
        case 271974402UL /* 0x10360002UL */:
            {
                auto& field_sbasUseTestmode = initField_sbasUseTestmode();
                COMMS_ASSERT(field_sbasUseTestmode.field_key().getValue() == commonKeyField.getValue());
                return field_sbasUseTestmode.template readFrom<1>(iter, len);
            }
        case 271974403UL /* 0x10360003UL */:
            {
                auto& field_sbasUseRanging = initField_sbasUseRanging();
                COMMS_ASSERT(field_sbasUseRanging.field_key().getValue() == commonKeyField.getValue());
                return field_sbasUseRanging.template readFrom<1>(iter, len);
            }
        case 271974404UL /* 0x10360004UL */:
            {
                auto& field_sbasUseDiffcorr = initField_sbasUseDiffcorr();
                COMMS_ASSERT(field_sbasUseDiffcorr.field_key().getValue() == commonKeyField.getValue());
                return field_sbasUseDiffcorr.template readFrom<1>(iter, len);
            }
        case 271974405UL /* 0x10360005UL */:
            {
                auto& field_sbasUseIntegrity = initField_sbasUseIntegrity();
                COMMS_ASSERT(field_sbasUseIntegrity.field_key().getValue() == commonKeyField.getValue());
                return field_sbasUseIntegrity.template readFrom<1>(iter, len);
            }
        case 1345716230UL /* 0x50360006UL */:
            {
                auto& field_sbasPrnscanmask = initField_sbasPrnscanmask();
                COMMS_ASSERT(field_sbasPrnscanmask.field_key().getValue() == commonKeyField.getValue());
                return field_sbasPrnscanmask.template readFrom<1>(iter, len);
            }
        case 271646751UL /* 0x1031001FUL */:
            {
                auto& field_signalGpsEna = initField_signalGpsEna();
                COMMS_ASSERT(field_signalGpsEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalGpsEna.template readFrom<1>(iter, len);
            }
        case 271646721UL /* 0x10310001UL */:
            {
                auto& field_signalGpsL1caEna = initField_signalGpsL1caEna();
                COMMS_ASSERT(field_signalGpsL1caEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalGpsL1caEna.template readFrom<1>(iter, len);
            }
        case 271646723UL /* 0x10310003UL */:
            {
                auto& field_signalGpsL2cEna = initField_signalGpsL2cEna();
                COMMS_ASSERT(field_signalGpsL2cEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalGpsL2cEna.template readFrom<1>(iter, len);
            }
        case 271646752UL /* 0x10310020UL */:
            {
                auto& field_signalSbasEna = initField_signalSbasEna();
                COMMS_ASSERT(field_signalSbasEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalSbasEna.template readFrom<1>(iter, len);
            }
        case 271646725UL /* 0x10310005UL */:
            {
                auto& field_signalSbasL1caEna = initField_signalSbasL1caEna();
                COMMS_ASSERT(field_signalSbasL1caEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalSbasL1caEna.template readFrom<1>(iter, len);
            }
        case 271646753UL /* 0x10310021UL */:
            {
                auto& field_signalGalEna = initField_signalGalEna();
                COMMS_ASSERT(field_signalGalEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalGalEna.template readFrom<1>(iter, len);
            }
        case 271646727UL /* 0x10310007UL */:
            {
                auto& field_signalGalE1Ena = initField_signalGalE1Ena();
                COMMS_ASSERT(field_signalGalE1Ena.field_key().getValue() == commonKeyField.getValue());
                return field_signalGalE1Ena.template readFrom<1>(iter, len);
            }
        case 271646730UL /* 0x1031000AUL */:
            {
                auto& field_signalGalE5bEna = initField_signalGalE5bEna();
                COMMS_ASSERT(field_signalGalE5bEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalGalE5bEna.template readFrom<1>(iter, len);
            }
        case 271646754UL /* 0x10310022UL */:
            {
                auto& field_signalBdsEna = initField_signalBdsEna();
                COMMS_ASSERT(field_signalBdsEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalBdsEna.template readFrom<1>(iter, len);
            }
        case 271646733UL /* 0x1031000DUL */:
            {
                auto& field_signalBdsB1Ena = initField_signalBdsB1Ena();
                COMMS_ASSERT(field_signalBdsB1Ena.field_key().getValue() == commonKeyField.getValue());
                return field_signalBdsB1Ena.template readFrom<1>(iter, len);
            }
        case 271646734UL /* 0x1031000EUL */:
            {
                auto& field_signalBdsB2Ena = initField_signalBdsB2Ena();
                COMMS_ASSERT(field_signalBdsB2Ena.field_key().getValue() == commonKeyField.getValue());
                return field_signalBdsB2Ena.template readFrom<1>(iter, len);
            }
        case 271646756UL /* 0x10310024UL */:
            {
                auto& field_signalQzssEna = initField_signalQzssEna();
                COMMS_ASSERT(field_signalQzssEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalQzssEna.template readFrom<1>(iter, len);
            }
        case 271646738UL /* 0x10310012UL */:
            {
                auto& field_signalQzssL1caEna = initField_signalQzssL1caEna();
                COMMS_ASSERT(field_signalQzssL1caEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalQzssL1caEna.template readFrom<1>(iter, len);
            }
        case 271646740UL /* 0x10310014UL */:
            {
                auto& field_signalQzssL1sEna = initField_signalQzssL1sEna();
                COMMS_ASSERT(field_signalQzssL1sEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalQzssL1sEna.template readFrom<1>(iter, len);
            }
        case 271646741UL /* 0x10310015UL */:
            {
                auto& field_signalQzssL2cEna = initField_signalQzssL2cEna();
                COMMS_ASSERT(field_signalQzssL2cEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalQzssL2cEna.template readFrom<1>(iter, len);
            }
        case 271646757UL /* 0x10310025UL */:
            {
                auto& field_signalGloEna = initField_signalGloEna();
                COMMS_ASSERT(field_signalGloEna.field_key().getValue() == commonKeyField.getValue());
                return field_signalGloEna.template readFrom<1>(iter, len);
            }
        case 271646744UL /* 0x10310018UL */:
            {
                auto& field_signalGloL1Ena = initField_signalGloL1Ena();
                COMMS_ASSERT(field_signalGloL1Ena.field_key().getValue() == commonKeyField.getValue());
                return field_signalGloL1Ena.template readFrom<1>(iter, len);
            }
        case 271646746UL /* 0x1031001AUL */:
            {
                auto& field_signalGloL2Ena = initField_signalGloL2Ena();
                COMMS_ASSERT(field_signalGloL2Ena.field_key().getValue() == commonKeyField.getValue());
                return field_signalGloL2Ena.template readFrom<1>(iter, len);
            }
        case 543424513UL /* 0x20640001UL */:
            {
                auto& field_spiMaxff = initField_spiMaxff();
                COMMS_ASSERT(field_spiMaxff.field_key().getValue() == commonKeyField.getValue());
                return field_spiMaxff.template readFrom<1>(iter, len);
            }
        case 274989058UL /* 0x10640002UL */:
            {
                auto& field_spiCpolarity = initField_spiCpolarity();
                COMMS_ASSERT(field_spiCpolarity.field_key().getValue() == commonKeyField.getValue());
                return field_spiCpolarity.template readFrom<1>(iter, len);
            }
        case 274989059UL /* 0x10640003UL */:
            {
                auto& field_spiCphase = initField_spiCphase();
                COMMS_ASSERT(field_spiCphase.field_key().getValue() == commonKeyField.getValue());
                return field_spiCphase.template readFrom<1>(iter, len);
            }
        case 274989061UL /* 0x10640005UL */:
            {
                auto& field_spiExtendedtimeout = initField_spiExtendedtimeout();
                COMMS_ASSERT(field_spiExtendedtimeout.field_key().getValue() == commonKeyField.getValue());
                return field_spiExtendedtimeout.template readFrom<1>(iter, len);
            }
        case 274989062UL /* 0x10640006UL */:
            {
                auto& field_spiEnabled = initField_spiEnabled();
                COMMS_ASSERT(field_spiEnabled.field_key().getValue() == commonKeyField.getValue());
                return field_spiEnabled.template readFrom<1>(iter, len);
            }
        case 276365313UL /* 0x10790001UL */:
            {
                auto& field_spiinprotUbx = initField_spiinprotUbx();
                COMMS_ASSERT(field_spiinprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_spiinprotUbx.template readFrom<1>(iter, len);
            }
        case 276365314UL /* 0x10790002UL */:
            {
                auto& field_spiinprotNmea = initField_spiinprotNmea();
                COMMS_ASSERT(field_spiinprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_spiinprotNmea.template readFrom<1>(iter, len);
            }
        case 276365316UL /* 0x10790004UL */:
            {
                auto& field_spiinprotRtcm3x = initField_spiinprotRtcm3x();
                COMMS_ASSERT(field_spiinprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_spiinprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 276430849UL /* 0x107A0001UL */:
            {
                auto& field_spioutprotUbx = initField_spioutprotUbx();
                COMMS_ASSERT(field_spioutprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_spioutprotUbx.template readFrom<1>(iter, len);
            }
        case 276430850UL /* 0x107A0002UL */:
            {
                auto& field_spioutprotNmea = initField_spioutprotNmea();
                COMMS_ASSERT(field_spioutprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_spioutprotNmea.template readFrom<1>(iter, len);
            }
        case 276430852UL /* 0x107A0004UL */:
            {
                auto& field_spioutprotRtcm3x = initField_spioutprotRtcm3x();
                COMMS_ASSERT(field_spioutprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_spioutprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 537067521UL /* 0x20030001UL */:
            {
                auto& field_tmodeMode = initField_tmodeMode();
                COMMS_ASSERT(field_tmodeMode.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeMode.template readFrom<1>(iter, len);
            }
        case 537067522UL /* 0x20030002UL */:
            {
                auto& field_tmodePosType = initField_tmodePosType();
                COMMS_ASSERT(field_tmodePosType.field_key().getValue() == commonKeyField.getValue());
                return field_tmodePosType.template readFrom<1>(iter, len);
            }
        case 1073938435UL /* 0x40030003UL */:
            {
                auto& field_tmodeEcefX = initField_tmodeEcefX();
                COMMS_ASSERT(field_tmodeEcefX.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeEcefX.template readFrom<1>(iter, len);
            }
        case 1073938436UL /* 0x40030004UL */:
            {
                auto& field_tmodeEcefY = initField_tmodeEcefY();
                COMMS_ASSERT(field_tmodeEcefY.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeEcefY.template readFrom<1>(iter, len);
            }
        case 1073938437UL /* 0x40030005UL */:
            {
                auto& field_tmodeEcefZ = initField_tmodeEcefZ();
                COMMS_ASSERT(field_tmodeEcefZ.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeEcefZ.template readFrom<1>(iter, len);
            }
        case 537067526UL /* 0x20030006UL */:
            {
                auto& field_tmodeEcefXHp = initField_tmodeEcefXHp();
                COMMS_ASSERT(field_tmodeEcefXHp.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeEcefXHp.template readFrom<1>(iter, len);
            }
        case 537067527UL /* 0x20030007UL */:
            {
                auto& field_tmodeEcefYHp = initField_tmodeEcefYHp();
                COMMS_ASSERT(field_tmodeEcefYHp.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeEcefYHp.template readFrom<1>(iter, len);
            }
        case 537067528UL /* 0x20030008UL */:
            {
                auto& field_tmodeEcefZHp = initField_tmodeEcefZHp();
                COMMS_ASSERT(field_tmodeEcefZHp.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeEcefZHp.template readFrom<1>(iter, len);
            }
        case 1073938441UL /* 0x40030009UL */:
            {
                auto& field_tmodeLat = initField_tmodeLat();
                COMMS_ASSERT(field_tmodeLat.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeLat.template readFrom<1>(iter, len);
            }
        case 1073938442UL /* 0x4003000AUL */:
            {
                auto& field_tmodeLon = initField_tmodeLon();
                COMMS_ASSERT(field_tmodeLon.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeLon.template readFrom<1>(iter, len);
            }
        case 1073938443UL /* 0x4003000BUL */:
            {
                auto& field_tmodeHeight = initField_tmodeHeight();
                COMMS_ASSERT(field_tmodeHeight.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeHeight.template readFrom<1>(iter, len);
            }
        case 537067532UL /* 0x2003000CUL */:
            {
                auto& field_tmodeLatHp = initField_tmodeLatHp();
                COMMS_ASSERT(field_tmodeLatHp.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeLatHp.template readFrom<1>(iter, len);
            }
        case 537067533UL /* 0x2003000DUL */:
            {
                auto& field_tmodeLonHp = initField_tmodeLonHp();
                COMMS_ASSERT(field_tmodeLonHp.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeLonHp.template readFrom<1>(iter, len);
            }
        case 537067534UL /* 0x2003000EUL */:
            {
                auto& field_tmodeHeightHp = initField_tmodeHeightHp();
                COMMS_ASSERT(field_tmodeHeightHp.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeHeightHp.template readFrom<1>(iter, len);
            }
        case 1073938447UL /* 0x4003000FUL */:
            {
                auto& field_tmodeFixedPosAcc = initField_tmodeFixedPosAcc();
                COMMS_ASSERT(field_tmodeFixedPosAcc.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeFixedPosAcc.template readFrom<1>(iter, len);
            }
        case 1073938448UL /* 0x40030010UL */:
            {
                auto& field_tmodeSvinMinDur = initField_tmodeSvinMinDur();
                COMMS_ASSERT(field_tmodeSvinMinDur.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeSvinMinDur.template readFrom<1>(iter, len);
            }
        case 1073938449UL /* 0x40030011UL */:
            {
                auto& field_tmodeSvinAccLimit = initField_tmodeSvinAccLimit();
                COMMS_ASSERT(field_tmodeSvinAccLimit.field_key().getValue() == commonKeyField.getValue());
                return field_tmodeSvinAccLimit.template readFrom<1>(iter, len);
            }
        case 537198627UL /* 0x20050023UL */:
            {
                auto& field_tpPulseDef = initField_tpPulseDef();
                COMMS_ASSERT(field_tpPulseDef.field_key().getValue() == commonKeyField.getValue());
                return field_tpPulseDef.template readFrom<1>(iter, len);
            }
        case 537198640UL /* 0x20050030UL */:
            {
                auto& field_tpPulseLengthDef = initField_tpPulseLengthDef();
                COMMS_ASSERT(field_tpPulseLengthDef.field_key().getValue() == commonKeyField.getValue());
                return field_tpPulseLengthDef.template readFrom<1>(iter, len);
            }
        case 805634049UL /* 0x30050001UL */:
            {
                auto& field_tpAntCabledelay = initField_tpAntCabledelay();
                COMMS_ASSERT(field_tpAntCabledelay.field_key().getValue() == commonKeyField.getValue());
                return field_tpAntCabledelay.template readFrom<1>(iter, len);
            }
        case 1074069506UL /* 0x40050002UL */:
            {
                auto& field_tpPeriodTp1 = initField_tpPeriodTp1();
                COMMS_ASSERT(field_tpPeriodTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpPeriodTp1.template readFrom<1>(iter, len);
            }
        case 1074069507UL /* 0x40050003UL */:
            {
                auto& field_tpPeriodLockTp1 = initField_tpPeriodLockTp1();
                COMMS_ASSERT(field_tpPeriodLockTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpPeriodLockTp1.template readFrom<1>(iter, len);
            }
        case 1074069540UL /* 0x40050024UL */:
            {
                auto& field_tpFreqTp1 = initField_tpFreqTp1();
                COMMS_ASSERT(field_tpFreqTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpFreqTp1.template readFrom<1>(iter, len);
            }
        case 1074069541UL /* 0x40050025UL */:
            {
                auto& field_tpFreqLockTp1 = initField_tpFreqLockTp1();
                COMMS_ASSERT(field_tpFreqLockTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpFreqLockTp1.template readFrom<1>(iter, len);
            }
        case 1074069508UL /* 0x40050004UL */:
            {
                auto& field_tpLenTp1 = initField_tpLenTp1();
                COMMS_ASSERT(field_tpLenTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpLenTp1.template readFrom<1>(iter, len);
            }
        case 1074069509UL /* 0x40050005UL */:
            {
                auto& field_tpLenLockTp1 = initField_tpLenLockTp1();
                COMMS_ASSERT(field_tpLenLockTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpLenLockTp1.template readFrom<1>(iter, len);
            }
        case 1342505002UL /* 0x5005002AUL */:
            {
                auto& field_tpDutyTp1 = initField_tpDutyTp1();
                COMMS_ASSERT(field_tpDutyTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpDutyTp1.template readFrom<1>(iter, len);
            }
        case 1342505003UL /* 0x5005002BUL */:
            {
                auto& field_tpDutyLockTp1 = initField_tpDutyLockTp1();
                COMMS_ASSERT(field_tpDutyLockTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpDutyLockTp1.template readFrom<1>(iter, len);
            }
        case 1074069510UL /* 0x40050006UL */:
            {
                auto& field_tpUserDelayTp1 = initField_tpUserDelayTp1();
                COMMS_ASSERT(field_tpUserDelayTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpUserDelayTp1.template readFrom<1>(iter, len);
            }
        case 268763143UL /* 0x10050007UL */:
            {
                auto& field_tpTp1Ena = initField_tpTp1Ena();
                COMMS_ASSERT(field_tpTp1Ena.field_key().getValue() == commonKeyField.getValue());
                return field_tpTp1Ena.template readFrom<1>(iter, len);
            }
        case 268763144UL /* 0x10050008UL */:
            {
                auto& field_tpSyncGnssTp1 = initField_tpSyncGnssTp1();
                COMMS_ASSERT(field_tpSyncGnssTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpSyncGnssTp1.template readFrom<1>(iter, len);
            }
        case 268763145UL /* 0x10050009UL */:
            {
                auto& field_tpUseLockedTp1 = initField_tpUseLockedTp1();
                COMMS_ASSERT(field_tpUseLockedTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpUseLockedTp1.template readFrom<1>(iter, len);
            }
        case 268763146UL /* 0x1005000AUL */:
            {
                auto& field_tpAlignToTowTp1 = initField_tpAlignToTowTp1();
                COMMS_ASSERT(field_tpAlignToTowTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpAlignToTowTp1.template readFrom<1>(iter, len);
            }
        case 268763147UL /* 0x1005000BUL */:
            {
                auto& field_tpPolTp1 = initField_tpPolTp1();
                COMMS_ASSERT(field_tpPolTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpPolTp1.template readFrom<1>(iter, len);
            }
        case 537198604UL /* 0x2005000CUL */:
            {
                auto& field_tpTimegridTp1 = initField_tpTimegridTp1();
                COMMS_ASSERT(field_tpTimegridTp1.field_key().getValue() == commonKeyField.getValue());
                return field_tpTimegridTp1.template readFrom<1>(iter, len);
            }
        case 279052289UL /* 0x10A20001UL */:
            {
                auto& field_txreadyEnabled = initField_txreadyEnabled();
                COMMS_ASSERT(field_txreadyEnabled.field_key().getValue() == commonKeyField.getValue());
                return field_txreadyEnabled.template readFrom<1>(iter, len);
            }
        case 279052290UL /* 0x10A20002UL */:
            {
                auto& field_txreadyPolarity = initField_txreadyPolarity();
                COMMS_ASSERT(field_txreadyPolarity.field_key().getValue() == commonKeyField.getValue());
                return field_txreadyPolarity.template readFrom<1>(iter, len);
            }
        case 547487747UL /* 0x20A20003UL */:
            {
                auto& field_txreadyPin = initField_txreadyPin();
                COMMS_ASSERT(field_txreadyPin.field_key().getValue() == commonKeyField.getValue());
                return field_txreadyPin.template readFrom<1>(iter, len);
            }
        case 815923204UL /* 0x30A20004UL */:
            {
                auto& field_txreadyThreshold = initField_txreadyThreshold();
                COMMS_ASSERT(field_txreadyThreshold.field_key().getValue() == commonKeyField.getValue());
                return field_txreadyThreshold.template readFrom<1>(iter, len);
            }
        case 547487749UL /* 0x20A20005UL */:
            {
                auto& field_txreadyInterface = initField_txreadyInterface();
                COMMS_ASSERT(field_txreadyInterface.field_key().getValue() == commonKeyField.getValue());
                return field_txreadyInterface.template readFrom<1>(iter, len);
            }
        case 1079115777UL /* 0x40520001UL */:
            {
                auto& field_uart1Baudrate = initField_uart1Baudrate();
                COMMS_ASSERT(field_uart1Baudrate.field_key().getValue() == commonKeyField.getValue());
                return field_uart1Baudrate.template readFrom<1>(iter, len);
            }
        case 542244866UL /* 0x20520002UL */:
            {
                auto& field_uart1Stopbits = initField_uart1Stopbits();
                COMMS_ASSERT(field_uart1Stopbits.field_key().getValue() == commonKeyField.getValue());
                return field_uart1Stopbits.template readFrom<1>(iter, len);
            }
        case 542244867UL /* 0x20520003UL */:
            {
                auto& field_uart1Databits = initField_uart1Databits();
                COMMS_ASSERT(field_uart1Databits.field_key().getValue() == commonKeyField.getValue());
                return field_uart1Databits.template readFrom<1>(iter, len);
            }
        case 542244868UL /* 0x20520004UL */:
            {
                auto& field_uart1Parity = initField_uart1Parity();
                COMMS_ASSERT(field_uart1Parity.field_key().getValue() == commonKeyField.getValue());
                return field_uart1Parity.template readFrom<1>(iter, len);
            }
        case 273809413UL /* 0x10520005UL */:
            {
                auto& field_uart1Enabled = initField_uart1Enabled();
                COMMS_ASSERT(field_uart1Enabled.field_key().getValue() == commonKeyField.getValue());
                return field_uart1Enabled.template readFrom<1>(iter, len);
            }
        case 275972097UL /* 0x10730001UL */:
            {
                auto& field_uart1inprotUbx = initField_uart1inprotUbx();
                COMMS_ASSERT(field_uart1inprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_uart1inprotUbx.template readFrom<1>(iter, len);
            }
        case 275972098UL /* 0x10730002UL */:
            {
                auto& field_uart1inprotNmea = initField_uart1inprotNmea();
                COMMS_ASSERT(field_uart1inprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_uart1inprotNmea.template readFrom<1>(iter, len);
            }
        case 275972100UL /* 0x10730004UL */:
            {
                auto& field_uart1inprotRtcm3x = initField_uart1inprotRtcm3x();
                COMMS_ASSERT(field_uart1inprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_uart1inprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 276037633UL /* 0x10740001UL */:
            {
                auto& field_uart1outprotUbx = initField_uart1outprotUbx();
                COMMS_ASSERT(field_uart1outprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_uart1outprotUbx.template readFrom<1>(iter, len);
            }
        case 276037634UL /* 0x10740002UL */:
            {
                auto& field_uart1outprotNmea = initField_uart1outprotNmea();
                COMMS_ASSERT(field_uart1outprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_uart1outprotNmea.template readFrom<1>(iter, len);
            }
        case 276037636UL /* 0x10740004UL */:
            {
                auto& field_uart1outprotRtcm3x = initField_uart1outprotRtcm3x();
                COMMS_ASSERT(field_uart1outprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_uart1outprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 1079181313UL /* 0x40530001UL */:
            {
                auto& field_uart2Baudrate = initField_uart2Baudrate();
                COMMS_ASSERT(field_uart2Baudrate.field_key().getValue() == commonKeyField.getValue());
                return field_uart2Baudrate.template readFrom<1>(iter, len);
            }
        case 542310402UL /* 0x20530002UL */:
            {
                auto& field_uart2Stopbits = initField_uart2Stopbits();
                COMMS_ASSERT(field_uart2Stopbits.field_key().getValue() == commonKeyField.getValue());
                return field_uart2Stopbits.template readFrom<1>(iter, len);
            }
        case 542310403UL /* 0x20530003UL */:
            {
                auto& field_uart2Databits = initField_uart2Databits();
                COMMS_ASSERT(field_uart2Databits.field_key().getValue() == commonKeyField.getValue());
                return field_uart2Databits.template readFrom<1>(iter, len);
            }
        case 542310404UL /* 0x20530004UL */:
            {
                auto& field_uart2Parity = initField_uart2Parity();
                COMMS_ASSERT(field_uart2Parity.field_key().getValue() == commonKeyField.getValue());
                return field_uart2Parity.template readFrom<1>(iter, len);
            }
        case 273874949UL /* 0x10530005UL */:
            {
                auto& field_uart2Enabled = initField_uart2Enabled();
                COMMS_ASSERT(field_uart2Enabled.field_key().getValue() == commonKeyField.getValue());
                return field_uart2Enabled.template readFrom<1>(iter, len);
            }
        case 273874950UL /* 0x10530006UL */:
            {
                auto& field_uart2Remap = initField_uart2Remap();
                COMMS_ASSERT(field_uart2Remap.field_key().getValue() == commonKeyField.getValue());
                return field_uart2Remap.template readFrom<1>(iter, len);
            }
        case 276103169UL /* 0x10750001UL */:
            {
                auto& field_uart2inprotUbx = initField_uart2inprotUbx();
                COMMS_ASSERT(field_uart2inprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_uart2inprotUbx.template readFrom<1>(iter, len);
            }
        case 276103170UL /* 0x10750002UL */:
            {
                auto& field_uart2inprotNmea = initField_uart2inprotNmea();
                COMMS_ASSERT(field_uart2inprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_uart2inprotNmea.template readFrom<1>(iter, len);
            }
        case 276103172UL /* 0x10750004UL */:
            {
                auto& field_uart2inprotRtcm3x = initField_uart2inprotRtcm3x();
                COMMS_ASSERT(field_uart2inprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_uart2inprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 276168705UL /* 0x10760001UL */:
            {
                auto& field_uart2outprotUbx = initField_uart2outprotUbx();
                COMMS_ASSERT(field_uart2outprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_uart2outprotUbx.template readFrom<1>(iter, len);
            }
        case 276168706UL /* 0x10760002UL */:
            {
                auto& field_uart2outprotNmea = initField_uart2outprotNmea();
                COMMS_ASSERT(field_uart2outprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_uart2outprotNmea.template readFrom<1>(iter, len);
            }
        case 276168708UL /* 0x10760004UL */:
            {
                auto& field_uart2outprotRtcm3x = initField_uart2outprotRtcm3x();
                COMMS_ASSERT(field_uart2outprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_uart2outprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 275054593UL /* 0x10650001UL */:
            {
                auto& field_usbEnabled = initField_usbEnabled();
                COMMS_ASSERT(field_usbEnabled.field_key().getValue() == commonKeyField.getValue());
                return field_usbEnabled.template readFrom<1>(iter, len);
            }
        case 275054594UL /* 0x10650002UL */:
            {
                auto& field_usbSelfpow = initField_usbSelfpow();
                COMMS_ASSERT(field_usbSelfpow.field_key().getValue() == commonKeyField.getValue());
                return field_usbSelfpow.template readFrom<1>(iter, len);
            }
        case 811925514UL /* 0x3065000AUL */:
            {
                auto& field_usbVendorId = initField_usbVendorId();
                COMMS_ASSERT(field_usbVendorId.field_key().getValue() == commonKeyField.getValue());
                return field_usbVendorId.template readFrom<1>(iter, len);
            }
        case 811925515UL /* 0x3065000BUL */:
            {
                auto& field_usbProductId = initField_usbProductId();
                COMMS_ASSERT(field_usbProductId.field_key().getValue() == commonKeyField.getValue());
                return field_usbProductId.template readFrom<1>(iter, len);
            }
        case 811925516UL /* 0x3065000CUL */:
            {
                auto& field_usbPower = initField_usbPower();
                COMMS_ASSERT(field_usbPower.field_key().getValue() == commonKeyField.getValue());
                return field_usbPower.template readFrom<1>(iter, len);
            }
        case 1348796429UL /* 0x5065000DUL */:
            {
                auto& field_usbVendorStr0 = initField_usbVendorStr0();
                COMMS_ASSERT(field_usbVendorStr0.field_key().getValue() == commonKeyField.getValue());
                return field_usbVendorStr0.template readFrom<1>(iter, len);
            }
        case 1348796430UL /* 0x5065000EUL */:
            {
                auto& field_usbVendorStr1 = initField_usbVendorStr1();
                COMMS_ASSERT(field_usbVendorStr1.field_key().getValue() == commonKeyField.getValue());
                return field_usbVendorStr1.template readFrom<1>(iter, len);
            }
        case 1348796431UL /* 0x5065000FUL */:
            {
                auto& field_usbVendorStr2 = initField_usbVendorStr2();
                COMMS_ASSERT(field_usbVendorStr2.field_key().getValue() == commonKeyField.getValue());
                return field_usbVendorStr2.template readFrom<1>(iter, len);
            }
        case 1348796432UL /* 0x50650010UL */:
            {
                auto& field_usbVendorStr3 = initField_usbVendorStr3();
                COMMS_ASSERT(field_usbVendorStr3.field_key().getValue() == commonKeyField.getValue());
                return field_usbVendorStr3.template readFrom<1>(iter, len);
            }
        case 1348796433UL /* 0x50650011UL */:
            {
                auto& field_usbProductStr0 = initField_usbProductStr0();
                COMMS_ASSERT(field_usbProductStr0.field_key().getValue() == commonKeyField.getValue());
                return field_usbProductStr0.template readFrom<1>(iter, len);
            }
        case 1348796434UL /* 0x50650012UL */:
            {
                auto& field_usbProductStr1 = initField_usbProductStr1();
                COMMS_ASSERT(field_usbProductStr1.field_key().getValue() == commonKeyField.getValue());
                return field_usbProductStr1.template readFrom<1>(iter, len);
            }
        case 1348796435UL /* 0x50650013UL */:
            {
                auto& field_usbProductStr2 = initField_usbProductStr2();
                COMMS_ASSERT(field_usbProductStr2.field_key().getValue() == commonKeyField.getValue());
                return field_usbProductStr2.template readFrom<1>(iter, len);
            }
        case 1348796436UL /* 0x50650014UL */:
            {
                auto& field_usbProductStr3 = initField_usbProductStr3();
                COMMS_ASSERT(field_usbProductStr3.field_key().getValue() == commonKeyField.getValue());
                return field_usbProductStr3.template readFrom<1>(iter, len);
            }
        case 1348796437UL /* 0x50650015UL */:
            {
                auto& field_usbSerialNoStr0 = initField_usbSerialNoStr0();
                COMMS_ASSERT(field_usbSerialNoStr0.field_key().getValue() == commonKeyField.getValue());
                return field_usbSerialNoStr0.template readFrom<1>(iter, len);
            }
        case 1348796438UL /* 0x50650016UL */:
            {
                auto& field_usbSerialNoStr1 = initField_usbSerialNoStr1();
                COMMS_ASSERT(field_usbSerialNoStr1.field_key().getValue() == commonKeyField.getValue());
                return field_usbSerialNoStr1.template readFrom<1>(iter, len);
            }
        case 1348796439UL /* 0x50650017UL */:
            {
                auto& field_usbSerialNoStr2 = initField_usbSerialNoStr2();
                COMMS_ASSERT(field_usbSerialNoStr2.field_key().getValue() == commonKeyField.getValue());
                return field_usbSerialNoStr2.template readFrom<1>(iter, len);
            }
        case 1348796440UL /* 0x50650018UL */:
            {
                auto& field_usbSerialNoStr3 = initField_usbSerialNoStr3();
                COMMS_ASSERT(field_usbSerialNoStr3.field_key().getValue() == commonKeyField.getValue());
                return field_usbSerialNoStr3.template readFrom<1>(iter, len);
            }
        case 276234241UL /* 0x10770001UL */:
            {
                auto& field_usbinprotUbx = initField_usbinprotUbx();
                COMMS_ASSERT(field_usbinprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_usbinprotUbx.template readFrom<1>(iter, len);
            }
        case 276234242UL /* 0x10770002UL */:
            {
                auto& field_usbinprotNmea = initField_usbinprotNmea();
                COMMS_ASSERT(field_usbinprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_usbinprotNmea.template readFrom<1>(iter, len);
            }
        case 276234244UL /* 0x10770004UL */:
            {
                auto& field_usbinprotRtcm3x = initField_usbinprotRtcm3x();
                COMMS_ASSERT(field_usbinprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_usbinprotRtcm3x.template readFrom<1>(iter, len);
            }
        case 276299777UL /* 0x10780001UL */:
            {
                auto& field_usboutprotUbx = initField_usboutprotUbx();
                COMMS_ASSERT(field_usboutprotUbx.field_key().getValue() == commonKeyField.getValue());
                return field_usboutprotUbx.template readFrom<1>(iter, len);
            }
        case 276299778UL /* 0x10780002UL */:
            {
                auto& field_usboutprotNmea = initField_usboutprotNmea();
                COMMS_ASSERT(field_usboutprotNmea.field_key().getValue() == commonKeyField.getValue());
                return field_usboutprotNmea.template readFrom<1>(iter, len);
            }
        case 276299780UL /* 0x10780004UL */:
            {
                auto& field_usboutprotRtcm3x = initField_usboutprotRtcm3x();
                COMMS_ASSERT(field_usboutprotRtcm3x.field_key().getValue() == commonKeyField.getValue());
                return field_usboutprotRtcm3x.template readFrom<1>(iter, len);
            }
        default:
            break;
        };

        return comms::ErrorStatus::InvalidMsgData;
    }
    COMMS_MSVC_WARNING_POP

private:
    template <std::size_t TIdx, typename TField, typename TFunc>
    static void memFieldDispatch(TField&& f, TFunc&& func)
    {
        #ifdef _MSC_VER
            func.operator()<TIdx>(std::forward<TField>(f)); // VS compiler
        #else // #ifdef _MSC_VER
            func.template operator()<TIdx>(std::forward<TField>(f)); // All other compilers
        #endif // #ifdef _MSC_VER
    }
};

} // namespace field

} // namespace ublox
