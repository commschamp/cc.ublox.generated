// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"cfgNmeaNumSV"</b> field.

#pragma once

#include <cstdint>
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/field/CfgNmeaNumSVCommon.h"
#include "ublox/field/FieldBase.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace field
{


/// @brief Definition of <b>"cfgNmeaNumSV"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = ublox::options::DefaultOptions, typename... TExtraOpts>
class CfgNmeaNumSV : public
    comms::field::IntValue<
        ublox::field::FieldBase<>,
        std::uint8_t,
        TExtraOpts...
    >
{
    using Base =
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            TExtraOpts...
        >;
public:
    /// @brief Re-definition of the value type.
    using ValueType = typename Base::ValueType;
    
    /// @brief Single special value name info entry.
    using SpecialNameInfo = ublox::field::CfgNmeaNumSVCommon::SpecialNameInfo;
    
    /// @brief Type returned from @ref specialNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using SpecialNamesMapInfo = ublox::field::CfgNmeaNumSVCommon::SpecialNamesMapInfo;
    
    /// @brief Compile time detection of special values presence.
    static constexpr bool hasSpecials()
    {
        return ublox::field::CfgNmeaNumSVCommon::hasSpecials();
    }
    
    /// @brief Special value <b>"Unlimited"</b>.
    /// @see @ref ublox::field::CfgNmeaNumSVCommon::valueUnlimited().
    static constexpr ValueType valueUnlimited()
    {
        return ublox::field::CfgNmeaNumSVCommon::valueUnlimited();
    }
    
    /// @brief Check the value is equal to special @ref valueUnlimited().
    bool isUnlimited() const
    {
        return Base::value() == valueUnlimited();
    }
    
    /// @brief Assign special value @ref valueUnlimited() to the field.
    void setUnlimited()
    {
        Base::value() = valueUnlimited();
    }
    
    /// @brief Retrieve map of special value names
    static SpecialNamesMapInfo specialNamesMap()
    {
        return ublox::field::CfgNmeaNumSVCommon::specialNamesMap();
    }
    
    
    /// @brief Name of the field.
    static const char* name()
    {
        return ublox::field::CfgNmeaNumSVCommon::name();
    }
    

};


} // namespace field

} // namespace ublox

