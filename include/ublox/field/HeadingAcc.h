// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"headingAcc"</b> field.

#pragma once

#include <cstdint>
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/HeadingAccCommon.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace field
{


/// @brief Definition of <b>"headingAcc"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = ublox::options::DefaultOptions, typename... TExtraOpts>
class HeadingAcc : public
    comms::field::IntValue<
        ublox::field::FieldBase<>,
        std::uint32_t,
        TExtraOpts...,
        comms::option::def::ScalingRatio<1, 100000L>,
        comms::option::def::UnitsDegrees
    >
{
    using Base =
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            TExtraOpts...,
            comms::option::def::ScalingRatio<1, 100000L>,
            comms::option::def::UnitsDegrees
        >;
public:
    /// @brief Re-definition of the value type.
    using ValueType = typename Base::ValueType;
    
    /// @brief Compile time detection of special values presence.
    static constexpr bool hasSpecials()
    {
        return ublox::field::HeadingAccCommon::hasSpecials();
    }
    
    /// @brief Requested number of digits after decimal point when value
    ///     is displayed.
    static constexpr unsigned displayDecimals()
    {
        return 5U;
    }
    
    /// @brief Name of the field.
    static const char* name()
    {
        return ublox::field::HeadingAccCommon::name();
    }
    

};


} // namespace field

} // namespace ublox

