// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains definition of <b>"NAV-TIMELS"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Itow.h"
#include "ublox/field/Res3.h"
#include "ublox/message/NavTimelsCommon.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref NavTimels.
/// @tparam TOpt Extra options
/// @see @ref NavTimels
/// @headerfile ublox/message/NavTimels.h
template <typename TOpt = ublox::options::DefaultOptions>
struct NavTimelsFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavTimelsFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"srcOfCurrLs"</b> field.
    /// @see @ref ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::ValueType
    class SrcOfCurrLs : public
        comms::field::EnumValue<
            ublox::field::FieldBase<>,
            ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::ValueType,
            comms::option::def::ValidNumValueRange<0, 7>,
            comms::option::def::ValidNumValue<255>
        >
    {
        using Base =
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 7>,
                comms::option::def::ValidNumValue<255>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::SrcOfCurrLsCommon::name();
        }
    };

    /// @brief Definition of <b>"currLs"</b> field.
    class CurrLs : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavTimelsFieldsCommon::CurrLsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::CurrLsCommon::name();
        }
    };

    /// @brief Definition of <b>"srcOfLsChange"</b> field.
    /// @see @ref ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::ValueType
    class SrcOfLsChange : public
        comms::field::EnumValue<
            ublox::field::FieldBase<>,
            ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::ValueType,
            comms::option::def::ValidNumValue<0>,
            comms::option::def::ValidNumValueRange<2, 6>
        >
    {
        using Base =
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::ValueType,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::ValidNumValueRange<2, 6>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::SrcOfLsChangeCommon::name();
        }
    };

    /// @brief Definition of <b>"lsChange"</b> field.
    class LsChange : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavTimelsFieldsCommon::LsChangeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::LsChangeCommon::name();
        }
    };

    /// @brief Definition of <b>"timeToLsEvent"</b> field.
    class TimeToLsEvent : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavTimelsFieldsCommon::TimeToLsEventCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::TimeToLsEventCommon::name();
        }
    };

    /// @brief Definition of <b>"dateOfLsGpsWn"</b> field.
    class DateOfLsGpsWn : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavTimelsFieldsCommon::DateOfLsGpsWnCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::DateOfLsGpsWnCommon::name();
        }
    };

    /// @brief Definition of <b>"dateOfLsGpsDn"</b> field.
    class DateOfLsGpsDn : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavTimelsFieldsCommon::DateOfLsGpsDnCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::DateOfLsGpsDnCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"valid"</b> field.
    class Valid : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_validCurrLs, @b getBitValue_validCurrLs() and @b setBitValue_validCurrLs().
        ///      @li @b BitIdx_validTimeToLsEvent, @b getBitValue_validTimeToLsEvent() and @b setBitValue_validTimeToLsEvent().
        COMMS_BITMASK_BITS_SEQ(
            validCurrLs,
            validTimeToLsEvent
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref ublox::message::NavTimelsFieldsCommon::ValidCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::NavTimelsFieldsCommon::ValidCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavTimelsFieldsCommon::ValidCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Version,
        Reserved1,
        SrcOfCurrLs,
        CurrLs,
        SrcOfLsChange,
        LsChange,
        TimeToLsEvent,
        DateOfLsGpsWn,
        DateOfLsGpsDn,
        Reserved2,
        Valid
    >;
};

/// @brief Definition of <b>"NAV-TIMELS"</b> message class.
/// @details
///     See @ref NavTimelsFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/NavTimels.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class NavTimels : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavTimels,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_NavTimels>,
        comms::option::def::FieldsImpl<typename NavTimelsFields<TOpt>::All>,
        comms::option::def::MsgType<NavTimels<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavTimels,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_NavTimels>,
            comms::option::def::FieldsImpl<typename NavTimelsFields<TOpt>::All>,
            comms::option::def::MsgType<NavTimels<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavTimelsFields::Itow field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavTimelsFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavTimelsFields::Reserved1 field.
    ///     @li @b FieldIdx_srcOfCurrLs index, @b Field_srcOfCurrLs type and @b field_srcOfCurrLs() access fuction
    ///         for @ref NavTimelsFields::SrcOfCurrLs field.
    ///     @li @b FieldIdx_currLs index, @b Field_currLs type and @b field_currLs() access fuction
    ///         for @ref NavTimelsFields::CurrLs field.
    ///     @li @b FieldIdx_srcOfLsChange index, @b Field_srcOfLsChange type and @b field_srcOfLsChange() access fuction
    ///         for @ref NavTimelsFields::SrcOfLsChange field.
    ///     @li @b FieldIdx_lsChange index, @b Field_lsChange type and @b field_lsChange() access fuction
    ///         for @ref NavTimelsFields::LsChange field.
    ///     @li @b FieldIdx_timeToLsEvent index, @b Field_timeToLsEvent type and @b field_timeToLsEvent() access fuction
    ///         for @ref NavTimelsFields::TimeToLsEvent field.
    ///     @li @b FieldIdx_dateOfLsGpsWn index, @b Field_dateOfLsGpsWn type and @b field_dateOfLsGpsWn() access fuction
    ///         for @ref NavTimelsFields::DateOfLsGpsWn field.
    ///     @li @b FieldIdx_dateOfLsGpsDn index, @b Field_dateOfLsGpsDn type and @b field_dateOfLsGpsDn() access fuction
    ///         for @ref NavTimelsFields::DateOfLsGpsDn field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref NavTimelsFields::Reserved2 field.
    ///     @li @b FieldIdx_valid index, @b Field_valid type and @b field_valid() access fuction
    ///         for @ref NavTimelsFields::Valid field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        version,
        reserved1,
        srcOfCurrLs,
        currLs,
        srcOfLsChange,
        lsChange,
        timeToLsEvent,
        dateOfLsGpsWn,
        dateOfLsGpsDn,
        reserved2,
        valid
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 24U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 24U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::NavTimelsCommon::name();
    }
};

} // namespace message

} // namespace ublox
