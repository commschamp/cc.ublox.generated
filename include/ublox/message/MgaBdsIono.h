// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"MGA-BDS-IONO"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Res2.h"
#include "ublox/field/Res4.h"
#include "ublox/message/MgaBdsIonoCommon.h"
#include "ublox/options/DefaultOptions.h"


namespace ublox
{

namespace message
{


/// @brief Fields of @ref MgaBdsIono.
/// @tparam TOpt Extra options
/// @see @ref MgaBdsIono
/// @headerfile ublox/message/MgaBdsIono.h
template <typename TOpt = ublox::options::DefaultOptions>
struct MgaBdsIonoFields
{
    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<6>,
            comms::option::def::ValidNumValue<6>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<6>,
                comms::option::def::ValidNumValue<6>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::TypeCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::TypeCommon::name();
        }
        
        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::value() = static_cast<ValueType>(6);
            return true;
            
        }
        
        
    
    };
    
    
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::VersionCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::VersionCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Reserved1Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"alpha0"</b> field.
    class Alpha0 : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 1073741824L>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 1073741824L>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Alpha0Common::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Alpha0Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"alpha1"</b> field.
    class Alpha1 : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 134217728L>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 134217728L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Alpha1Common::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Alpha1Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"alpha2"</b> field.
    class Alpha2 : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 16777216L>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 16777216L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Alpha2Common::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Alpha2Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"alpha3"</b> field.
    class Alpha3 : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 16777216L>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 16777216L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Alpha3Common::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Alpha3Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"beta0"</b> field.
    class Beta0 : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<2048, 1>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<2048, 1>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Beta0Common::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Beta0Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"beta1"</b> field.
    class Beta1 : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<16384, 1>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<16384, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Beta1Common::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Beta1Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"beta2"</b> field.
    class Beta2 : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<65536L, 1>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<65536L, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Beta2Common::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Beta2Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"beta3"</b> field.
    class Beta3 : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<65536L, 1>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<65536L, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Beta3Common::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Beta3Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsIonoFieldsCommon::Reserved2Common::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Type,
        Version,
        Reserved1,
        Alpha0,
        Alpha1,
        Alpha2,
        Alpha3,
        Beta0,
        Beta1,
        Beta2,
        Beta3,
        Reserved2
    >;
};

/// @brief Definition of <b>"MGA-BDS-IONO"</b> message class.
/// @details
///     See @ref MgaBdsIonoFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/MgaBdsIono.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class MgaBdsIono : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MgaBdsIono,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_MgaBds>,
        comms::option::def::FieldsImpl<typename MgaBdsIonoFields<TOpt>::All>,
        comms::option::def::MsgType<MgaBdsIono<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MgaBdsIono,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_MgaBds>,
            comms::option::def::FieldsImpl<typename MgaBdsIonoFields<TOpt>::All>,
            comms::option::def::MsgType<MgaBdsIono<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref MgaBdsIonoFields::Type field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MgaBdsIonoFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref MgaBdsIonoFields::Reserved1 field.
    ///     @li @b FieldIdx_alpha0 index, @b Field_alpha0 type and @b field_alpha0() access fuction
    ///         for @ref MgaBdsIonoFields::Alpha0 field.
    ///     @li @b FieldIdx_alpha1 index, @b Field_alpha1 type and @b field_alpha1() access fuction
    ///         for @ref MgaBdsIonoFields::Alpha1 field.
    ///     @li @b FieldIdx_alpha2 index, @b Field_alpha2 type and @b field_alpha2() access fuction
    ///         for @ref MgaBdsIonoFields::Alpha2 field.
    ///     @li @b FieldIdx_alpha3 index, @b Field_alpha3 type and @b field_alpha3() access fuction
    ///         for @ref MgaBdsIonoFields::Alpha3 field.
    ///     @li @b FieldIdx_beta0 index, @b Field_beta0 type and @b field_beta0() access fuction
    ///         for @ref MgaBdsIonoFields::Beta0 field.
    ///     @li @b FieldIdx_beta1 index, @b Field_beta1 type and @b field_beta1() access fuction
    ///         for @ref MgaBdsIonoFields::Beta1 field.
    ///     @li @b FieldIdx_beta2 index, @b Field_beta2 type and @b field_beta2() access fuction
    ///         for @ref MgaBdsIonoFields::Beta2 field.
    ///     @li @b FieldIdx_beta3 index, @b Field_beta3 type and @b field_beta3() access fuction
    ///         for @ref MgaBdsIonoFields::Beta3 field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref MgaBdsIonoFields::Reserved2 field.
    COMMS_MSG_FIELDS_NAMES(
        type,
        version,
        reserved1,
        alpha0,
        alpha1,
        alpha2,
        alpha3,
        beta0,
        beta1,
        beta2,
        beta3,
        reserved2
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 16U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 16U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::MgaBdsIonoCommon::name();
    }
    

};

} // namespace message

} // namespace ublox


