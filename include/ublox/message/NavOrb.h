// Generated by commsdsl2comms v3.7.0

/// @file
/// @brief Contains definition of <b>"NAV-ORB"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include <type_traits>
#include <utility>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/GnssId.h"
#include "ublox/field/Itow.h"
#include "ublox/field/Res2.h"
#include "ublox/message/NavOrbCommon.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref NavOrb.
/// @tparam TOpt Extra options
/// @see @ref NavOrb
/// @headerfile "ublox/message/NavOrb.h"
template <typename TOpt = ublox::options::DefaultOptions>
struct NavOrbFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        ublox::field::Itow<
            TOpt
        >;
    
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavOrbFieldsCommon::VersionCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavOrbFieldsCommon::VersionCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"numSv"</b> field.
    class NumSv : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavOrbFieldsCommon::NumSvCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavOrbFieldsCommon::NumSvCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"reserved1"</b> field.
    struct Reserved1 : public
        ublox::field::Res2<
            TOpt
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavOrbFieldsCommon::Reserved1Common::name();
        }
        
    };
    
    /// @brief Scope for all the member fields of
    ///     @ref List list.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element bundle.
        struct ElementMembers
        {
            /// @brief Definition of <b>"gnssId"</b> field.
            using GnssId =
                ublox::field::GnssId<
                    TOpt
                >;
            
            /// @brief Definition of <b>"svid"</b> field.
            class Svid : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::name();
                }
                
            };
            
            /// @brief Scope for all the member fields of
            ///     @ref SvFlag bitfield.
            struct SvFlagMembers
            {
                /// @brief Definition of <b>"health"</b> field.
                /// @see @ref ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::HealthVal
                class Health : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::HealthVal,
                        comms::option::def::FixedBitLength<2U>,
                        comms::option::def::ValidNumValueRange<0, 2>
                    >
                {
                    using Base = 
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::HealthVal,
                            comms::option::def::FixedBitLength<2U>,
                            comms::option::def::ValidNumValueRange<0, 2>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Single value name info entry.
                    using ValueNameInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::HealthCommon::ValueNameInfo;
                    
                    /// @brief Type returned from @ref valueNamesMap() member function.
                    using ValueNamesMapInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::HealthCommon::ValueNamesMapInfo;
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::HealthCommon::name();
                    }
                    
                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::HealthCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                    /// @brief Retrieve map of enum value names.
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::HealthCommon::valueNamesMap();
                    }
                    
                };
                
                /// @brief Definition of <b>"visibility"</b> field.
                /// @see @ref ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::VisibilityVal
                class Visibility : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::VisibilityVal,
                        comms::option::def::FixedBitLength<2U>,
                        comms::option::def::ValidNumValueRange<0, 3>
                    >
                {
                    using Base = 
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::VisibilityVal,
                            comms::option::def::FixedBitLength<2U>,
                            comms::option::def::ValidNumValueRange<0, 3>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Single value name info entry.
                    using ValueNameInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::VisibilityCommon::ValueNameInfo;
                    
                    /// @brief Type returned from @ref valueNamesMap() member function.
                    using ValueNamesMapInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::VisibilityCommon::ValueNamesMapInfo;
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::VisibilityCommon::name();
                    }
                    
                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::VisibilityCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                    /// @brief Retrieve map of enum value names.
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::VisibilityCommon::valueNamesMap();
                    }
                    
                };
                
                /// @brief Definition of <b>"reserved"</b> field.
                /// @details
                ///     Reserved field with 1 byte length
                class Reserved : public
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FixedBitLength<4U>,
                        comms::option::def::ValidNumValue<0>
                    >
                {
                    using Base = 
                        comms::field::IntValue<
                            ublox::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::FixedBitLength<4U>,
                            comms::option::def::ValidNumValue<0>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::ReservedCommon::hasSpecials();
                    }
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagMembersCommon::ReservedCommon::name();
                    }
                    
                };
                
                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Health,
                       Visibility,
                       Reserved
                    >;
            };
            
            /// @brief Definition of <b>"svFlag"</b> field.
            class SvFlag : public
                comms::field::Bitfield<
                    ublox::field::FieldBase<>,
                    typename SvFlagMembers::All
                >
            {
                using Base = 
                    comms::field::Bitfield<
                        ublox::field::FieldBase<>,
                        typename SvFlagMembers::All
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_health index, @b Field_health type and @b field_health() access function -
                ///         for SvFlagMembers::Health member field.
                ///     @li @b FieldIdx_visibility index, @b Field_visibility type and @b field_visibility() access function -
                ///         for SvFlagMembers::Visibility member field.
                ///     @li @b FieldIdx_reserved index, @b Field_reserved type and @b field_reserved() access function -
                ///         for SvFlagMembers::Reserved member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    health,
                    visibility,
                    reserved
                );
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::SvFlagCommon::name();
                }
                
            };
            
            /// @brief Scope for all the member fields of
            ///     @ref Eph bitfield.
            struct EphMembers
            {
                /// @brief Definition of <b>"ephUsability"</b> field.
                class EphUsability : public
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FixedBitLength<5U>
                    >
                {
                    using Base = 
                        comms::field::IntValue<
                            ublox::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::FixedBitLength<5U>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphUsabilityCommon::hasSpecials();
                    }
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphUsabilityCommon::name();
                    }
                    
                };
                
                /// @brief Definition of <b>"ephSource"</b> field.
                /// @see @ref ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphSourceVal
                class EphSource : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphSourceVal,
                        comms::option::def::FixedBitLength<3U>,
                        comms::option::def::ValidNumValueRange<0, 2>
                    >
                {
                    using Base = 
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphSourceVal,
                            comms::option::def::FixedBitLength<3U>,
                            comms::option::def::ValidNumValueRange<0, 2>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Single value name info entry.
                    using ValueNameInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphSourceCommon::ValueNameInfo;
                    
                    /// @brief Type returned from @ref valueNamesMap() member function.
                    using ValueNamesMapInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphSourceCommon::ValueNamesMapInfo;
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphSourceCommon::name();
                    }
                    
                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphSourceCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                    /// @brief Retrieve map of enum value names.
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphMembersCommon::EphSourceCommon::valueNamesMap();
                    }
                    
                };
                
                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       EphUsability,
                       EphSource
                    >;
            };
            
            /// @brief Definition of <b>"eph"</b> field.
            class Eph : public
                comms::field::Bitfield<
                    ublox::field::FieldBase<>,
                    typename EphMembers::All
                >
            {
                using Base = 
                    comms::field::Bitfield<
                        ublox::field::FieldBase<>,
                        typename EphMembers::All
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_ephUsability index, @b Field_ephUsability type and @b field_ephUsability() access function -
                ///         for EphMembers::EphUsability member field.
                ///     @li @b FieldIdx_ephSource index, @b Field_ephSource type and @b field_ephSource() access function -
                ///         for EphMembers::EphSource member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    ephUsability,
                    ephSource
                );
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::EphCommon::name();
                }
                
            };
            
            /// @brief Scope for all the member fields of
            ///     @ref Alm bitfield.
            struct AlmMembers
            {
                /// @brief Definition of <b>"almUsability"</b> field.
                class AlmUsability : public
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FixedBitLength<5U>
                    >
                {
                    using Base = 
                        comms::field::IntValue<
                            ublox::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::FixedBitLength<5U>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmUsabilityCommon::hasSpecials();
                    }
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmUsabilityCommon::name();
                    }
                    
                };
                
                /// @brief Definition of <b>"almSource"</b> field.
                /// @see @ref ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmSourceVal
                class AlmSource : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmSourceVal,
                        comms::option::def::FixedBitLength<3U>,
                        comms::option::def::ValidNumValueRange<0, 2>
                    >
                {
                    using Base = 
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmSourceVal,
                            comms::option::def::FixedBitLength<3U>,
                            comms::option::def::ValidNumValueRange<0, 2>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Single value name info entry.
                    using ValueNameInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmSourceCommon::ValueNameInfo;
                    
                    /// @brief Type returned from @ref valueNamesMap() member function.
                    using ValueNamesMapInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmSourceCommon::ValueNamesMapInfo;
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmSourceCommon::name();
                    }
                    
                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmSourceCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                    /// @brief Retrieve map of enum value names.
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmMembersCommon::AlmSourceCommon::valueNamesMap();
                    }
                    
                };
                
                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       AlmUsability,
                       AlmSource
                    >;
            };
            
            /// @brief Definition of <b>"alm"</b> field.
            class Alm : public
                comms::field::Bitfield<
                    ublox::field::FieldBase<>,
                    typename AlmMembers::All
                >
            {
                using Base = 
                    comms::field::Bitfield<
                        ublox::field::FieldBase<>,
                        typename AlmMembers::All
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_almUsability index, @b Field_almUsability type and @b field_almUsability() access function -
                ///         for AlmMembers::AlmUsability member field.
                ///     @li @b FieldIdx_almSource index, @b Field_almSource type and @b field_almSource() access function -
                ///         for AlmMembers::AlmSource member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    almUsability,
                    almSource
                );
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::AlmCommon::name();
                }
                
            };
            
            /// @brief Scope for all the member fields of
            ///     @ref OtherOrb bitfield.
            struct OtherOrbMembers
            {
                /// @brief Definition of <b>"anoAopUsability"</b> field.
                class AnoAopUsability : public
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FixedBitLength<5U>
                    >
                {
                    using Base = 
                        comms::field::IntValue<
                            ublox::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::FixedBitLength<5U>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::AnoAopUsabilityCommon::hasSpecials();
                    }
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::AnoAopUsabilityCommon::name();
                    }
                    
                };
                
                /// @brief Definition of <b>"type"</b> field.
                /// @see @ref ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::TypeVal
                class Type : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::TypeVal,
                        comms::option::def::FixedBitLength<3U>,
                        comms::option::def::ValidNumValueRange<0, 2>
                    >
                {
                    using Base = 
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::TypeVal,
                            comms::option::def::FixedBitLength<3U>,
                            comms::option::def::ValidNumValueRange<0, 2>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Single value name info entry.
                    using ValueNameInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::TypeCommon::ValueNameInfo;
                    
                    /// @brief Type returned from @ref valueNamesMap() member function.
                    using ValueNamesMapInfo = ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::TypeCommon::ValueNamesMapInfo;
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::TypeCommon::name();
                    }
                    
                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::TypeCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                    /// @brief Retrieve map of enum value names.
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbMembersCommon::TypeCommon::valueNamesMap();
                    }
                    
                };
                
                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       AnoAopUsability,
                       Type
                    >;
            };
            
            /// @brief Definition of <b>"otherOrb"</b> field.
            class OtherOrb : public
                comms::field::Bitfield<
                    ublox::field::FieldBase<>,
                    typename OtherOrbMembers::All
                >
            {
                using Base = 
                    comms::field::Bitfield<
                        ublox::field::FieldBase<>,
                        typename OtherOrbMembers::All
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_anoAopUsability index, @b Field_anoAopUsability type and @b field_anoAopUsability() access function -
                ///         for OtherOrbMembers::AnoAopUsability member field.
                ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access function -
                ///         for OtherOrbMembers::Type member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    anoAopUsability,
                    type
                );
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementMembersCommon::OtherOrbCommon::name();
                }
                
            };
            
            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   GnssId,
                   Svid,
                   SvFlag,
                   Eph,
                   Alm,
                   OtherOrb
                >;
        };
        
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base = 
                comms::field::Bundle<
                    ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and accesss functions are:
            ///     @li @b FieldIdx_gnssIdindex, @b Field_gnssIdtype and @b field_gnssId() access function -
            ///         for ElementMembers::GnssId member field.
            ///     @li @b FieldIdx_svidindex, @b Field_svidtype and @b field_svid() access function -
            ///         for ElementMembers::Svid member field.
            ///     @li @b FieldIdx_svFlagindex, @b Field_svFlagtype and @b field_svFlag() access function -
            ///         for ElementMembers::SvFlag member field.
            ///     @li @b FieldIdx_ephindex, @b Field_ephtype and @b field_eph() access function -
            ///         for ElementMembers::Eph member field.
            ///     @li @b FieldIdx_almindex, @b Field_almtype and @b field_alm() access function -
            ///         for ElementMembers::Alm member field.
            ///     @li @b FieldIdx_otherOrbindex, @b Field_otherOrbtype and @b field_otherOrb() access function -
            ///         for ElementMembers::OtherOrb member field.
            COMMS_FIELD_MEMBERS_NAMES(
                gnssId,
                svid,
                svFlag,
                eph,
                alm,
                otherOrb
            );
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::NavOrbFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
            
        };
        
    };
    
    /// @brief Definition of <b>"list"</b> field.
    struct List : public
        comms::field::ArrayList<
            ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::NavOrbFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavOrbFieldsCommon::ListCommon::name();
        }
        
    };
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Version,
        NumSv,
        Reserved1,
        List
    >;
};

/// @brief Definition of <b>"NAV-ORB"</b> message class.
/// @details
///     See @ref NavOrbFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile "ublox/message/NavOrb.h"
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class NavOrb : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavOrb,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_NavOrb>,
        comms::option::def::FieldsImpl<typename NavOrbFields<TOpt>::All>,
        comms::option::def::MsgType<NavOrb<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavOrb,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_NavOrb>,
            comms::option::def::FieldsImpl<typename NavOrbFields<TOpt>::All>,
            comms::option::def::MsgType<NavOrb<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavOrbFields::Itow field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavOrbFields::Version field.
    ///     @li @b FieldIdx_numSv index, @b Field_numSv type and @b field_numSv() access fuction
    ///         for @ref NavOrbFields::NumSv field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavOrbFields::Reserved1 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref NavOrbFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        version,
        numSv,
        reserved1,
        list
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::NavOrbCommon::name();
    }
    
    /// @brief Custom read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }
        
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numSv().value()));
        
        es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }
        
        return comms::ErrorStatus::Success;
    }
    
    /// @brief Custom refresh functionality.
    bool doRefresh()
    {
        bool updated = Base::doRefresh();
        updated = refresh_list() || updated;
        return updated;
    }
    
    
private:
    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numSv().value());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }
        
            using PrefixValueType = typename std::decay<decltype(field_numSv().value())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_numSv().value() = static_cast<PrefixValueType>(maxAllowedValue);
            updated = true;
        } while (false);
        
        return updated;
        
    }
    
};

} // namespace message

} // namespace ublox


