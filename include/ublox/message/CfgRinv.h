// Generated by commsdsl2comms v3.7.0

/// @file
/// @brief Contains definition of <b>"CFG-RINV"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/BitmaskValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/message/CfgRinvCommon.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref CfgRinv.
/// @tparam TOpt Extra options
/// @see @ref CfgRinv
/// @headerfile "ublox/message/CfgRinv.h"
template <typename TOpt = ublox::options::DefaultOptions>
struct CfgRinvFields
{
    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
        >
    {
        using Base = 
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_dump, @b getBitValue_dump() and @b setBitValue_dump().
        ///      @li @b BitIdx_binary, @b getBitValue_binary() and @b setBitValue_binary().
        COMMS_BITMASK_BITS_SEQ(
            dump,
            binary
        );
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgRinvFieldsCommon::FlagsCommon::name();
        }
        
        /// @brief Retrieve name of the bit.
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::CfgRinvFieldsCommon::FlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }
        
    };
    
    /// @brief Definition of <b>"data"</b> field.
    struct Data : public
        comms::field::ArrayList<
            ublox::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::CfgRinvFields::Data
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgRinvFieldsCommon::DataCommon::name();
        }
        
    };
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Flags,
        Data
    >;
};

/// @brief Definition of <b>"CFG-RINV"</b> message class.
/// @details
///     See @ref CfgRinvFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile "ublox/message/CfgRinv.h"
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class CfgRinv : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_CfgRinv>,
        comms::option::def::FieldsImpl<typename CfgRinvFields<TOpt>::All>,
        comms::option::def::MsgType<CfgRinv<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_CfgRinv>,
            comms::option::def::FieldsImpl<typename CfgRinvFields<TOpt>::All>,
            comms::option::def::MsgType<CfgRinv<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref CfgRinvFields::Flags field.
    ///     @li @b FieldIdx_data index, @b Field_data type and @b field_data() access fuction
    ///         for @ref CfgRinvFields::Data field.
    COMMS_MSG_FIELDS_NAMES(
        flags,
        data
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 1U, "Unexpected min serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::CfgRinvCommon::name();
    }
    
    
};

} // namespace message

} // namespace ublox


