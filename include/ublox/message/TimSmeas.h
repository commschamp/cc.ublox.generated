// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains definition of <b>"TIM-SMEAS"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Itow.h"
#include "ublox/field/Res2.h"
#include "ublox/field/Res4.h"
#include "ublox/message/TimSmeasCommon.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref TimSmeas.
/// @tparam TOpt Extra options
/// @see @ref TimSmeas
/// @headerfile ublox/message/TimSmeas.h
template <typename TOpt = ublox::options::DefaultOptions>
struct TimSmeasFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::TimSmeasFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::TimSmeasFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"numMeas"</b> field.
    class NumMeas : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::TimSmeasFieldsCommon::NumMeasCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::TimSmeasFieldsCommon::NumMeasCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::TimSmeasFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::TimSmeasFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"sourceId"</b> field.
            class SourceId : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::SourceIdCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::SourceIdCommon::name();
                }
            };

            /// @brief Definition of <b>"flags"</b> field.
            class Flags : public
                comms::field::BitmaskValue<
                    ublox::field::FieldBase<>,
                    comms::option::def::FixedLength<1U>,
                    comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
                >
            {
                using Base =
                    comms::field::BitmaskValue<
                        ublox::field::FieldBase<>,
                        comms::option::def::FixedLength<1U>,
                        comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
                    >;
            public:
                /// @brief Provides names and generates access functions for internal bits.
                /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                ///     related to @b comms::field::BitmaskValue class from COMMS library
                ///     for details.
                ///
                ///      The generated enum values and functions are:
                ///      @li @b BitIdx_freqValid, @b getBitValue_freqValid() and @b setBitValue_freqValid().
                ///      @li @b BitIdx_phaseValid, @b getBitValue_phaseValid() and @b setBitValue_phaseValid().
                COMMS_BITMASK_BITS_SEQ(
                    freqValid,
                    phaseValid
                );

                /// @brief Retrieve name of the bit.
                /// @see @ref ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsCommon::bitName().
                static const char* bitName(BitIdx idx)
                {
                    return
                        ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsCommon::bitName(
                            static_cast<std::size_t>(idx));
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsCommon::name();
                }
            };

            /// @brief Definition of <b>"phaseOffsetFrac"</b> field.
            class PhaseOffsetFrac : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int8_t,
                    comms::option::def::ScalingRatio<1, 256>,
                    comms::option::def::UnitsNanoseconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int8_t,
                        comms::option::def::ScalingRatio<1, 256>,
                        comms::option::def::UnitsNanoseconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseOffsetFracCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 8U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseOffsetFracCommon::name();
                }
            };

            /// @brief Definition of <b>"phaseUncFrac"</b> field.
            class PhaseUncFrac : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::ScalingRatio<1, 256>,
                    comms::option::def::UnitsNanoseconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::ScalingRatio<1, 256>,
                        comms::option::def::UnitsNanoseconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseUncFracCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 8U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseUncFracCommon::name();
                }
            };

            /// @brief Definition of <b>"phaseOffset"</b> field.
            class PhaseOffset : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsNanoseconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int32_t,
                        comms::option::def::UnitsNanoseconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseOffsetCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseOffsetCommon::name();
                }
            };

            /// @brief Definition of <b>"phaseUnc"</b> field.
            class PhaseUnc : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsNanoseconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::UnitsNanoseconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseUncCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseUncCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved3"</b> field.
            class Reserved3 : public
                ublox::field::Res4<
                    TOpt
                >
            {
                using Base =
                    ublox::field::Res4<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved3Common::name();
                }
            };

            /// @brief Definition of <b>"freqOffset"</b> field.
            class FreqOffset : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<1, 256>
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int32_t,
                        comms::option::def::ScalingRatio<1, 256>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::FreqOffsetCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 8U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::FreqOffsetCommon::name();
                }
            };

            /// @brief Definition of <b>"freqUnc"</b> field.
            class FreqUnc : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 256>
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::ScalingRatio<1, 256>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::FreqUncCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 8U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementMembersCommon::FreqUncCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   SourceId,
                   Flags,
                   PhaseOffsetFrac,
                   PhaseUncFrac,
                   PhaseOffset,
                   PhaseUnc,
                   Reserved3,
                   FreqOffset,
                   FreqUnc
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base =
                comms::field::Bundle<
                    ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_sourceId index, @b Field_sourceId type and @b field_sourceId() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::SourceId member field.
            ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::Flags member field.
            ///     @li @b FieldIdx_phaseOffsetFrac index, @b Field_phaseOffsetFrac type and @b field_phaseOffsetFrac() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::PhaseOffsetFrac member field.
            ///     @li @b FieldIdx_phaseUncFrac index, @b Field_phaseUncFrac type and @b field_phaseUncFrac() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::PhaseUncFrac member field.
            ///     @li @b FieldIdx_phaseOffset index, @b Field_phaseOffset type and @b field_phaseOffset() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::PhaseOffset member field.
            ///     @li @b FieldIdx_phaseUnc index, @b Field_phaseUnc type and @b field_phaseUnc() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::PhaseUnc member field.
            ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::Reserved3 member field.
            ///     @li @b FieldIdx_freqOffset index, @b Field_freqOffset type and @b field_freqOffset() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::FreqOffset member field.
            ///     @li @b FieldIdx_freqUnc index, @b Field_freqUnc type and @b field_freqUnc() access function -
            ///         for ublox::message::TimSmeasFields::ListMembers::ElementMembers::FreqUnc member field.
            COMMS_FIELD_MEMBERS_NAMES(
                sourceId,
                flags,
                phaseOffsetFrac,
                phaseUncFrac,
                phaseOffset,
                phaseUnc,
                reserved3,
                freqOffset,
                freqUnc
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::TimSmeasFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::TimSmeasFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::TimSmeasFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::TimSmeasFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        NumMeas,
        Reserved1,
        Itow,
        Reserved2,
        List
    >;
};

/// @brief Definition of <b>"TIM-SMEAS"</b> message class.
/// @details
///     See @ref TimSmeasFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/TimSmeas.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class TimSmeas : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_TimSmeas>,
        comms::option::def::FieldsImpl<typename TimSmeasFields<TOpt>::All>,
        comms::option::def::MsgType<TimSmeas<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_TimSmeas>,
            comms::option::def::FieldsImpl<typename TimSmeasFields<TOpt>::All>,
            comms::option::def::MsgType<TimSmeas<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref TimSmeasFields::Version field.
    ///     @li @b FieldIdx_numMeas index, @b Field_numMeas type and @b field_numMeas() access fuction
    ///         for @ref TimSmeasFields::NumMeas field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref TimSmeasFields::Reserved1 field.
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref TimSmeasFields::Itow field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref TimSmeasFields::Reserved2 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref TimSmeasFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        numMeas,
        reserved1,
        itow,
        reserved2,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 12U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::TimSmeasCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);
        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numMeas().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numMeas().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_numMeas().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_numMeas().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace ublox
