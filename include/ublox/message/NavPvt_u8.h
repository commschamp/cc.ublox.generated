// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains definition of <b>"NAV-PVT (ublox-8/9)"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/Day.h"
#include "ublox/field/Dop.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/GpsFix.h"
#include "ublox/field/HAcc.h"
#include "ublox/field/HMSL.h"
#include "ublox/field/Heading.h"
#include "ublox/field/HeadingAcc.h"
#include "ublox/field/Height.h"
#include "ublox/field/Hour.h"
#include "ublox/field/Itow.h"
#include "ublox/field/Lat.h"
#include "ublox/field/Lon.h"
#include "ublox/field/Min.h"
#include "ublox/field/Month.h"
#include "ublox/field/PsmState.h"
#include "ublox/field/Res1.h"
#include "ublox/field/Res4.h"
#include "ublox/field/Sec.h"
#include "ublox/field/VAcc.h"
#include "ublox/field/Vel.h"
#include "ublox/field/Year.h"
#include "ublox/message/NavPvt_u8Common.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref NavPvt_u8.
/// @tparam TOpt Extra options
/// @see @ref NavPvt_u8
/// @headerfile ublox/message/NavPvt_u8.h
template <typename TOpt = ublox::options::DefaultOptions>
struct NavPvt_u8Fields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"year"</b> field.
    using Year =
        ublox::field::Year<
            TOpt
        >;

    /// @brief Definition of <b>"month"</b> field.
    using Month =
        ublox::field::Month<
            TOpt
        >;

    /// @brief Definition of <b>"day"</b> field.
    using Day =
        ublox::field::Day<
            TOpt
        >;

    /// @brief Definition of <b>"hour"</b> field.
    using Hour =
        ublox::field::Hour<
            TOpt
        >;

    /// @brief Definition of <b>"min"</b> field.
    using Min =
        ublox::field::Min<
            TOpt
        >;

    /// @brief Definition of <b>"sec"</b> field.
    using Sec =
        ublox::field::Sec<
            TOpt
        >;

    /// @brief Definition of <b>"valid"</b> field.
    class Valid : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_validDate, @b getBitValue_validDate() and @b setBitValue_validDate().
        ///      @li @b BitIdx_validTime, @b getBitValue_validTime() and @b setBitValue_validTime().
        ///      @li @b BitIdx_fullyResolved, @b getBitValue_fullyResolved() and @b setBitValue_fullyResolved().
        ///      @li @b BitIdx_validMag, @b getBitValue_validMag() and @b setBitValue_validMag().
        COMMS_BITMASK_BITS_SEQ(
            validDate,
            validTime,
            fullyResolved,
            validMag
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref ublox::message::NavPvt_u8FieldsCommon::ValidCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::NavPvt_u8FieldsCommon::ValidCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::ValidCommon::name();
        }
    };

    /// @brief Definition of <b>"tAcc"</b> field.
    class TAcc : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavPvt_u8FieldsCommon::TAccCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::TAccCommon::name();
        }
    };

    /// @brief Definition of <b>"nano"</b> field.
    class Nano : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavPvt_u8FieldsCommon::NanoCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::NanoCommon::name();
        }
    };

    /// @brief Definition of <b>"fixType"</b> field.
    class FixType : public
        ublox::field::GpsFix<
            TOpt
        >
    {
        using Base =
            ublox::field::GpsFix<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::FixTypeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>""</b> field.
        class LowBits : public
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<2U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<2U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_gnssFixOK, @b getBitValue_gnssFixOK() and @b setBitValue_gnssFixOK().
            ///      @li @b BitIdx_diffSoln, @b getBitValue_diffSoln() and @b setBitValue_diffSoln().
            COMMS_BITMASK_BITS_SEQ(
                gnssFixOK,
                diffSoln
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::LowBitsCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::LowBitsCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::LowBitsCommon::name();
            }
        };

        /// @brief Definition of <b>"psmState"</b> field.
        using PsmState =
            ublox::field::PsmState<
                TOpt,
                comms::option::def::FixedBitLength<3U>
            >;

        /// @brief Definition of <b>""</b> field.
        class MidBits : public
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<1U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<1U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_headVehValid, @b getBitValue_headVehValid() and @b setBitValue_headVehValid().
            COMMS_BITMASK_BITS_SEQ(
                headVehValid
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::MidBitsCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::MidBitsCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::MidBitsCommon::name();
            }
        };

        /// @brief Definition of <b>"carrSoln"</b> field.
        /// @see @ref ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueType
        class CarrSoln : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::NavPvt_u8FieldsCommon::FlagsMembersCommon::CarrSolnCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               LowBits,
               PsmState,
               MidBits,
               CarrSoln
            >;
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            ublox::field::FieldBase<>,
            typename FlagsMembers::All
        >
    {
        using Base =
            comms::field::Bitfield<
                ublox::field::FieldBase<>,
                typename FlagsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_lowBits index, @b Field_lowBits type and @b field_lowBits() access function -
        ///         for ublox::message::NavPvt_u8Fields::FlagsMembers::LowBits member field.
        ///     @li @b FieldIdx_psmState index, @b Field_psmState type and @b field_psmState() access function -
        ///         for ublox::message::NavPvt_u8Fields::FlagsMembers::PsmState member field.
        ///     @li @b FieldIdx_midBits index, @b Field_midBits type and @b field_midBits() access function -
        ///         for ublox::message::NavPvt_u8Fields::FlagsMembers::MidBits member field.
        ///     @li @b FieldIdx_carrSoln index, @b Field_carrSoln type and @b field_carrSoln() access function -
        ///         for ublox::message::NavPvt_u8Fields::FlagsMembers::CarrSoln member field.
        COMMS_FIELD_MEMBERS_NAMES(
            lowBits,
            psmState,
            midBits,
            carrSoln
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"flags2"</b> field.
    class Flags2 : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0x1FU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0x1FU, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_confirmedAvai.
        ///      @li @b BitIdx_confirmedDate.
        ///      @li @b BitIdx_confirmedTime.
        COMMS_BITMASK_BITS(
            confirmedAvai=5,
            confirmedDate=6,
            confirmedTime=7
        );

        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_confirmedAvai() and @b setBitValue_confirmedAvai().
        ///      @li @b getBitValue_confirmedDate() and @b setBitValue_confirmedDate().
        ///      @li @b getBitValue_confirmedTime() and @b setBitValue_confirmedTime().
        COMMS_BITMASK_BITS_ACCESS(
            confirmedAvai,
            confirmedDate,
            confirmedTime
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref ublox::message::NavPvt_u8FieldsCommon::Flags2Common::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::NavPvt_u8FieldsCommon::Flags2Common::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::Flags2Common::name();
        }
    };

    /// @brief Definition of <b>"numSV"</b> field.
    class NumSV : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavPvt_u8FieldsCommon::NumSVCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::NumSVCommon::name();
        }
    };

    /// @brief Definition of <b>"lon"</b> field.
    using Lon =
        ublox::field::Lon<
            TOpt
        >;

    /// @brief Definition of <b>"lat"</b> field.
    using Lat =
        ublox::field::Lat<
            TOpt
        >;

    /// @brief Definition of <b>"height"</b> field.
    using Height =
        ublox::field::Height<
            TOpt
        >;

    /// @brief Definition of <b>"hMSL"</b> field.
    using HMSL =
        ublox::field::HMSL<
            TOpt
        >;

    /// @brief Definition of <b>"hAcc"</b> field.
    using HAcc =
        ublox::field::HAcc<
            TOpt
        >;

    /// @brief Definition of <b>"vAcc"</b> field.
    using VAcc =
        ublox::field::VAcc<
            TOpt
        >;

    /// @brief Definition of <b>"velN"</b> field.
    class VelN : public
        ublox::field::Vel<
            TOpt
        >
    {
        using Base =
            ublox::field::Vel<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::VelNCommon::name();
        }
    };

    /// @brief Definition of <b>"velE"</b> field.
    class VelE : public
        ublox::field::Vel<
            TOpt
        >
    {
        using Base =
            ublox::field::Vel<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::VelECommon::name();
        }
    };

    /// @brief Definition of <b>"velD"</b> field.
    class VelD : public
        ublox::field::Vel<
            TOpt
        >
    {
        using Base =
            ublox::field::Vel<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::VelDCommon::name();
        }
    };

    /// @brief Definition of <b>"gSpeed"</b> field.
    class GSpeed : public
        ublox::field::Vel<
            TOpt
        >
    {
        using Base =
            ublox::field::Vel<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::GSpeedCommon::name();
        }
    };

    /// @brief Definition of <b>"heading"</b> field.
    using Heading =
        ublox::field::Heading<
            TOpt
        >;

    /// @brief Definition of <b>"sAcc"</b> field.
    class SAcc : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMillimetersPerSecond
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMillimetersPerSecond
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavPvt_u8FieldsCommon::SAccCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::SAccCommon::name();
        }
    };

    /// @brief Definition of <b>"headingAcc"</b> field.
    using HeadingAcc =
        ublox::field::HeadingAcc<
            TOpt
        >;

    /// @brief Definition of <b>"pDop"</b> field.
    class PDop : public
        ublox::field::Dop<
            TOpt
        >
    {
        using Base =
            ublox::field::Dop<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::PDopCommon::name();
        }
    };

    /// @brief Definition of <b>"flags3"</b> field.
    class Flags3 : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_invalidLlh, @b getBitValue_invalidLlh() and @b setBitValue_invalidLlh().
        COMMS_BITMASK_BITS_SEQ(
            invalidLlh
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref ublox::message::NavPvt_u8FieldsCommon::Flags3Common::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::NavPvt_u8FieldsCommon::Flags3Common::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::Flags3Common::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"reserved3"</b> field.
    class Reserved3 : public
        ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::Reserved3Common::name();
        }
    };

    /// @brief Definition of <b>"headVeh"</b> field.
    class HeadVeh : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 100000L>,
            comms::option::def::UnitsDegrees
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 100000L>,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavPvt_u8FieldsCommon::HeadVehCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 5U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::HeadVehCommon::name();
        }
    };

    /// @brief Definition of <b>"magDec"</b> field.
    class MagDec : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 100>,
            comms::option::def::UnitsDegrees
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 100>,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavPvt_u8FieldsCommon::MagDecCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 2U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::MagDecCommon::name();
        }
    };

    /// @brief Definition of <b>"magAcc"</b> field.
    class MagAcc : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<1, 100>,
            comms::option::def::UnitsDegrees
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 100>,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavPvt_u8FieldsCommon::MagAccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 2U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavPvt_u8FieldsCommon::MagAccCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Year,
        Month,
        Day,
        Hour,
        Min,
        Sec,
        Valid,
        TAcc,
        Nano,
        FixType,
        Flags,
        Flags2,
        NumSV,
        Lon,
        Lat,
        Height,
        HMSL,
        HAcc,
        VAcc,
        VelN,
        VelE,
        VelD,
        GSpeed,
        Heading,
        SAcc,
        HeadingAcc,
        PDop,
        Flags3,
        Reserved2,
        Reserved3,
        HeadVeh,
        MagDec,
        MagAcc
    >;
};

/// @brief Definition of <b>"NAV-PVT (ublox-8/9)"</b> message class.
/// @details
/// .incUpdated version of NAV-PVT message introduced in ublox-8,
/// .incapplicable also to ublox-9 @n
///     See @ref NavPvt_u8Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/NavPvt_u8.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class NavPvt_u8 : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavPvt_u8,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_NavPvt>,
        comms::option::def::FieldsImpl<typename NavPvt_u8Fields<TOpt>::All>,
        comms::option::def::MsgType<NavPvt_u8<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavPvt_u8,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_NavPvt>,
            comms::option::def::FieldsImpl<typename NavPvt_u8Fields<TOpt>::All>,
            comms::option::def::MsgType<NavPvt_u8<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavPvt_u8Fields::Itow field.
    ///     @li @b FieldIdx_year index, @b Field_year type and @b field_year() access fuction
    ///         for @ref NavPvt_u8Fields::Year field.
    ///     @li @b FieldIdx_month index, @b Field_month type and @b field_month() access fuction
    ///         for @ref NavPvt_u8Fields::Month field.
    ///     @li @b FieldIdx_day index, @b Field_day type and @b field_day() access fuction
    ///         for @ref NavPvt_u8Fields::Day field.
    ///     @li @b FieldIdx_hour index, @b Field_hour type and @b field_hour() access fuction
    ///         for @ref NavPvt_u8Fields::Hour field.
    ///     @li @b FieldIdx_min index, @b Field_min type and @b field_min() access fuction
    ///         for @ref NavPvt_u8Fields::Min field.
    ///     @li @b FieldIdx_sec index, @b Field_sec type and @b field_sec() access fuction
    ///         for @ref NavPvt_u8Fields::Sec field.
    ///     @li @b FieldIdx_valid index, @b Field_valid type and @b field_valid() access fuction
    ///         for @ref NavPvt_u8Fields::Valid field.
    ///     @li @b FieldIdx_tAcc index, @b Field_tAcc type and @b field_tAcc() access fuction
    ///         for @ref NavPvt_u8Fields::TAcc field.
    ///     @li @b FieldIdx_nano index, @b Field_nano type and @b field_nano() access fuction
    ///         for @ref NavPvt_u8Fields::Nano field.
    ///     @li @b FieldIdx_fixType index, @b Field_fixType type and @b field_fixType() access fuction
    ///         for @ref NavPvt_u8Fields::FixType field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref NavPvt_u8Fields::Flags field.
    ///     @li @b FieldIdx_flags2 index, @b Field_flags2 type and @b field_flags2() access fuction
    ///         for @ref NavPvt_u8Fields::Flags2 field.
    ///     @li @b FieldIdx_numSV index, @b Field_numSV type and @b field_numSV() access fuction
    ///         for @ref NavPvt_u8Fields::NumSV field.
    ///     @li @b FieldIdx_lon index, @b Field_lon type and @b field_lon() access fuction
    ///         for @ref NavPvt_u8Fields::Lon field.
    ///     @li @b FieldIdx_lat index, @b Field_lat type and @b field_lat() access fuction
    ///         for @ref NavPvt_u8Fields::Lat field.
    ///     @li @b FieldIdx_height index, @b Field_height type and @b field_height() access fuction
    ///         for @ref NavPvt_u8Fields::Height field.
    ///     @li @b FieldIdx_hMSL index, @b Field_hMSL type and @b field_hMSL() access fuction
    ///         for @ref NavPvt_u8Fields::HMSL field.
    ///     @li @b FieldIdx_hAcc index, @b Field_hAcc type and @b field_hAcc() access fuction
    ///         for @ref NavPvt_u8Fields::HAcc field.
    ///     @li @b FieldIdx_vAcc index, @b Field_vAcc type and @b field_vAcc() access fuction
    ///         for @ref NavPvt_u8Fields::VAcc field.
    ///     @li @b FieldIdx_velN index, @b Field_velN type and @b field_velN() access fuction
    ///         for @ref NavPvt_u8Fields::VelN field.
    ///     @li @b FieldIdx_velE index, @b Field_velE type and @b field_velE() access fuction
    ///         for @ref NavPvt_u8Fields::VelE field.
    ///     @li @b FieldIdx_velD index, @b Field_velD type and @b field_velD() access fuction
    ///         for @ref NavPvt_u8Fields::VelD field.
    ///     @li @b FieldIdx_gSpeed index, @b Field_gSpeed type and @b field_gSpeed() access fuction
    ///         for @ref NavPvt_u8Fields::GSpeed field.
    ///     @li @b FieldIdx_heading index, @b Field_heading type and @b field_heading() access fuction
    ///         for @ref NavPvt_u8Fields::Heading field.
    ///     @li @b FieldIdx_sAcc index, @b Field_sAcc type and @b field_sAcc() access fuction
    ///         for @ref NavPvt_u8Fields::SAcc field.
    ///     @li @b FieldIdx_headingAcc index, @b Field_headingAcc type and @b field_headingAcc() access fuction
    ///         for @ref NavPvt_u8Fields::HeadingAcc field.
    ///     @li @b FieldIdx_pDop index, @b Field_pDop type and @b field_pDop() access fuction
    ///         for @ref NavPvt_u8Fields::PDop field.
    ///     @li @b FieldIdx_flags3 index, @b Field_flags3 type and @b field_flags3() access fuction
    ///         for @ref NavPvt_u8Fields::Flags3 field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref NavPvt_u8Fields::Reserved2 field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref NavPvt_u8Fields::Reserved3 field.
    ///     @li @b FieldIdx_headVeh index, @b Field_headVeh type and @b field_headVeh() access fuction
    ///         for @ref NavPvt_u8Fields::HeadVeh field.
    ///     @li @b FieldIdx_magDec index, @b Field_magDec type and @b field_magDec() access fuction
    ///         for @ref NavPvt_u8Fields::MagDec field.
    ///     @li @b FieldIdx_magAcc index, @b Field_magAcc type and @b field_magAcc() access fuction
    ///         for @ref NavPvt_u8Fields::MagAcc field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        year,
        month,
        day,
        hour,
        min,
        sec,
        valid,
        tAcc,
        nano,
        fixType,
        flags,
        flags2,
        numSV,
        lon,
        lat,
        height,
        hMSL,
        hAcc,
        vAcc,
        velN,
        velE,
        velD,
        gSpeed,
        heading,
        sAcc,
        headingAcc,
        pDop,
        flags3,
        reserved2,
        reserved3,
        headVeh,
        magDec,
        magAcc
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 92U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 92U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::NavPvt_u8Common::name();
    }
};

} // namespace message

} // namespace ublox
