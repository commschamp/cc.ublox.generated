// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"NAV-SAT"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/GnssId.h"
#include "ublox/field/Itow.h"
#include "ublox/field/Res2.h"
#include "ublox/message/NavSatCommon.h"
#include "ublox/options/DefaultOptions.h"


namespace ublox
{

namespace message
{


/// @brief Fields of @ref NavSat.
/// @tparam TOpt Extra options
/// @see @ref NavSat
/// @headerfile ublox/message/NavSat.h
template <typename TOpt = ublox::options::DefaultOptions>
struct NavSatFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        ublox::field::Itow<
            TOpt
        >;
    
    
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavSatFieldsCommon::VersionCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavSatFieldsCommon::VersionCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"numSvs"</b> field.
    class NumSvs : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavSatFieldsCommon::NumSvsCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavSatFieldsCommon::NumSvsCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavSatFieldsCommon::Reserved1Common::name();
        }
        
    
    };
    
    
    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"gnssId"</b> field.
            using GnssId =
                ublox::field::GnssId<
                    TOpt
                >;
            
            
            /// @brief Definition of <b>"svid"</b> field.
            class Svid : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
                
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::hasSpecials();
                }
                
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::name();
                }
                
            
            };
            
            
            /// @brief Definition of <b>"cno"</b> field.
            class Cno : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
                
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::CnoCommon::hasSpecials();
                }
                
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::CnoCommon::name();
                }
                
            
            };
            
            
            /// @brief Definition of <b>"elev"</b> field.
            class Elev : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int8_t,
                    comms::option::def::UnitsDegrees,
                    comms::option::def::ValidNumValueRange<-90, 90>
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int8_t,
                        comms::option::def::UnitsDegrees,
                        comms::option::def::ValidNumValueRange<-90, 90>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
                
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::ElevCommon::hasSpecials();
                }
                
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::ElevCommon::name();
                }
                
            
            };
            
            
            /// @brief Definition of <b>"azim"</b> field.
            class Azim : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int16_t,
                    comms::option::def::UnitsDegrees,
                    comms::option::def::ValidNumValueRange<0, 360>
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int16_t,
                        comms::option::def::UnitsDegrees,
                        comms::option::def::ValidNumValueRange<0, 360>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
                
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::AzimCommon::hasSpecials();
                }
                
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::AzimCommon::name();
                }
                
            
            };
            
            
            /// @brief Definition of <b>"prRes"</b> field.
            class PrRes : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int16_t,
                    comms::option::def::ScalingRatio<1, 10>,
                    comms::option::def::UnitsMeters
                >
            {
                using Base =
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int16_t,
                        comms::option::def::ScalingRatio<1, 10>,
                        comms::option::def::UnitsMeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
                
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::PrResCommon::hasSpecials();
                }
                
                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 1U;
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::PrResCommon::name();
                }
                
            
            };
            
            
            /// @brief Scope for all the member fields of
            ///     @ref Flags field.
            struct FlagsMembers
            {
                /// @brief Definition of <b>"qualityInd"</b> field.
                /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::ValueType
                class QualityInd : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::ValueType,
                        comms::option::def::FixedBitLength<3U>,
                        comms::option::def::ValidNumValueRange<0, 7>
                    >
                {
                    using Base =
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::ValueType,
                            comms::option::def::FixedBitLength<3U>,
                            comms::option::def::ValidNumValueRange<0, 7>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                    
                    /// @brief Single value name info entry.
                    using ValueNameInfo = ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::ValueNameInfo;
                    
                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::ValueNamesMapInfo.
                    using ValueNamesMapInfo = ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::ValueNamesMapInfo;
                    
                    /// @brief Retrieve name of the enum value.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::valueName().
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                    /// @brief Retrieve map of enum value names.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::valueNamesMap().
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::valueNamesMap();
                    }
                    
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::QualityIndCommon::name();
                    }
                    
                
                };
                
                
                /// @brief Definition of <b>""</b> field.
                class BitsLow : public
                    comms::field::BitmaskValue<
                        ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<1U>
                    >
                {
                    using Base =
                        comms::field::BitmaskValue<
                            ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<1U>
                        >;
                public:
                    /// @brief Provides names and generates access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values and functions are:
                    ///      @li @b BitIdx_svUsed, @b getBitValue_svUsed() and @b setBitValue_svUsed().
                    COMMS_BITMASK_BITS_SEQ(
                        svUsed
                    );
                    
                    /// @brief Retrieve name of the bit.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsLowCommon::bitName().
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsLowCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsLowCommon::name();
                    }
                    
                
                };
                
                
                /// @brief Definition of <b>"health"</b> field.
                /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::ValueType
                class Health : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::ValueType,
                        comms::option::def::FixedBitLength<2U>,
                        comms::option::def::ValidNumValueRange<0, 2>
                    >
                {
                    using Base =
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::ValueType,
                            comms::option::def::FixedBitLength<2U>,
                            comms::option::def::ValidNumValueRange<0, 2>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                    
                    /// @brief Single value name info entry.
                    using ValueNameInfo = ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::ValueNameInfo;
                    
                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::ValueNamesMapInfo.
                    using ValueNamesMapInfo = ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::ValueNamesMapInfo;
                    
                    /// @brief Retrieve name of the enum value.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::valueName().
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                    /// @brief Retrieve map of enum value names.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::valueNamesMap().
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::valueNamesMap();
                    }
                    
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::HealthCommon::name();
                    }
                    
                
                };
                
                
                /// @brief Definition of <b>""</b> field.
                class BitsMid : public
                    comms::field::BitmaskValue<
                        ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<2U>
                    >
                {
                    using Base =
                        comms::field::BitmaskValue<
                            ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<2U>
                        >;
                public:
                    /// @brief Provides names and generates access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values and functions are:
                    ///      @li @b BitIdx_diffCorr, @b getBitValue_diffCorr() and @b setBitValue_diffCorr().
                    ///      @li @b BitIdx_smoothed, @b getBitValue_smoothed() and @b setBitValue_smoothed().
                    COMMS_BITMASK_BITS_SEQ(
                        diffCorr,
                        smoothed
                    );
                    
                    /// @brief Retrieve name of the bit.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsMidCommon::bitName().
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsMidCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsMidCommon::name();
                    }
                    
                
                };
                
                
                /// @brief Definition of <b>"orbitSource"</b> field.
                /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::ValueType
                class OrbitSource : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::ValueType,
                        comms::option::def::FixedBitLength<3U>,
                        comms::option::def::ValidNumValueRange<0, 4>
                    >
                {
                    using Base =
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::ValueType,
                            comms::option::def::FixedBitLength<3U>,
                            comms::option::def::ValidNumValueRange<0, 4>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                    
                    /// @brief Single value name info entry.
                    using ValueNameInfo = ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::ValueNameInfo;
                    
                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::ValueNamesMapInfo.
                    using ValueNamesMapInfo = ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::ValueNamesMapInfo;
                    
                    /// @brief Retrieve name of the enum value.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::valueName().
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                    /// @brief Retrieve map of enum value names.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::valueNamesMap().
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::valueNamesMap();
                    }
                    
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::OrbitSourceCommon::name();
                    }
                    
                
                };
                
                
                /// @brief Definition of <b>""</b> field.
                class BitsHigh : public
                    comms::field::BitmaskValue<
                        ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<21U>,
                        comms::option::def::BitmaskReservedBits<0x1FF190UL, 0x0U>
                    >
                {
                    using Base =
                        comms::field::BitmaskValue<
                            ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<21U>,
                            comms::option::def::BitmaskReservedBits<0x1FF190UL, 0x0U>
                        >;
                public:
                    /// @brief Provide names for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values:
                    ///      @li @b BitIdx_ephAvail.
                    ///      @li @b BitIdx_almAvail.
                    ///      @li @b BitIdx_anoAvail.
                    ///      @li @b BitIdx_aopAvail.
                    ///      @li @b BitIdx_sbasCorrUsed.
                    ///      @li @b BitIdx_rtcmCorrUsed.
                    ///      @li @b BitIdx_prCorrUsed.
                    ///      @li @b BitIdx_crCorrUsed.
                    ///      @li @b BitIdx_doCorrUsed.
                    COMMS_BITMASK_BITS(
                        ephAvail=0,
                        almAvail=1,
                        anoAvail=2,
                        aopAvail=3,
                        sbasCorrUsed=5,
                        rtcmCorrUsed=6,
                        prCorrUsed=9,
                        crCorrUsed=10,
                        doCorrUsed=11
                    );
                    
                    /// @brief Generates independent access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///     The generated access functions are:
                    ///      @li @b getBitValue_ephAvail() and @b setBitValue_ephAvail().
                    ///      @li @b getBitValue_almAvail() and @b setBitValue_almAvail().
                    ///      @li @b getBitValue_anoAvail() and @b setBitValue_anoAvail().
                    ///      @li @b getBitValue_aopAvail() and @b setBitValue_aopAvail().
                    ///      @li @b getBitValue_sbasCorrUsed() and @b setBitValue_sbasCorrUsed().
                    ///      @li @b getBitValue_rtcmCorrUsed() and @b setBitValue_rtcmCorrUsed().
                    ///      @li @b getBitValue_prCorrUsed() and @b setBitValue_prCorrUsed().
                    ///      @li @b getBitValue_crCorrUsed() and @b setBitValue_crCorrUsed().
                    ///      @li @b getBitValue_doCorrUsed() and @b setBitValue_doCorrUsed().
                    COMMS_BITMASK_BITS_ACCESS(
                        ephAvail,
                        almAvail,
                        anoAvail,
                        aopAvail,
                        sbasCorrUsed,
                        rtcmCorrUsed,
                        prCorrUsed,
                        crCorrUsed,
                        doCorrUsed
                    );
                    
                    /// @brief Retrieve name of the bit.
                    /// @see @ref ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsHighCommon::bitName().
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsHighCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsHighCommon::name();
                    }
                    
                
                };
                
                
                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       QualityInd,
                       BitsLow,
                       Health,
                       BitsMid,
                       OrbitSource,
                       BitsHigh
                    >;
            };
            
            /// @brief Definition of <b>"flags"</b> field.
            class Flags : public
                comms::field::Bitfield<
                    ublox::field::FieldBase<>,
                    typename FlagsMembers::All
                >
            {
                using Base =
                    comms::field::Bitfield<
                        ublox::field::FieldBase<>,
                        typename FlagsMembers::All
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_qualityInd index, @b Field_qualityInd type and @b field_qualityInd() access function -
                ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::FlagsMembers::QualityInd member field.
                ///     @li @b FieldIdx_bitsLow index, @b Field_bitsLow type and @b field_bitsLow() access function -
                ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::FlagsMembers::BitsLow member field.
                ///     @li @b FieldIdx_health index, @b Field_health type and @b field_health() access function -
                ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::FlagsMembers::Health member field.
                ///     @li @b FieldIdx_bitsMid index, @b Field_bitsMid type and @b field_bitsMid() access function -
                ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::FlagsMembers::BitsMid member field.
                ///     @li @b FieldIdx_orbitSource index, @b Field_orbitSource type and @b field_orbitSource() access function -
                ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::FlagsMembers::OrbitSource member field.
                ///     @li @b FieldIdx_bitsHigh index, @b Field_bitsHigh type and @b field_bitsHigh() access function -
                ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::FlagsMembers::BitsHigh member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    qualityInd,
                    bitsLow,
                    health,
                    bitsMid,
                    orbitSource,
                    bitsHigh
                );
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsCommon::name();
                }
                
            
            };
            
            
            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   GnssId,
                   Svid,
                   Cno,
                   Elev,
                   Azim,
                   PrRes,
                   Flags
                >;
        };
        
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base =
                comms::field::Bundle<
                    ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_gnssId index, @b Field_gnssId type and @b field_gnssId() access function -
            ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::GnssId member field.
            ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access function -
            ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::Svid member field.
            ///     @li @b FieldIdx_cno index, @b Field_cno type and @b field_cno() access function -
            ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::Cno member field.
            ///     @li @b FieldIdx_elev index, @b Field_elev type and @b field_elev() access function -
            ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::Elev member field.
            ///     @li @b FieldIdx_azim index, @b Field_azim type and @b field_azim() access function -
            ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::Azim member field.
            ///     @li @b FieldIdx_prRes index, @b Field_prRes type and @b field_prRes() access function -
            ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::PrRes member field.
            ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access function -
            ///         for ublox::message::NavSatFields::ListMembers::ElementMembers::Flags member field.
            COMMS_FIELD_MEMBERS_NAMES(
                gnssId,
                svid,
                cno,
                elev,
                azim,
                prRes,
                flags
            );
            
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::NavSatFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
            
        
        };
        
        
    };
    
    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::NavSatFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::NavSatFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavSatFieldsCommon::ListCommon::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Version,
        NumSvs,
        Reserved1,
        List
    >;
};

/// @brief Definition of <b>"NAV-SAT"</b> message class.
/// @details
///     See @ref NavSatFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/NavSat.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class NavSat : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavSat,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_NavSat>,
        comms::option::def::FieldsImpl<typename NavSatFields<TOpt>::All>,
        comms::option::def::MsgType<NavSat<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavSat,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_NavSat>,
            comms::option::def::FieldsImpl<typename NavSatFields<TOpt>::All>,
            comms::option::def::MsgType<NavSat<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavSatFields::Itow field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavSatFields::Version field.
    ///     @li @b FieldIdx_numSvs index, @b Field_numSvs type and @b field_numSvs() access fuction
    ///         for @ref NavSatFields::NumSvs field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavSatFields::Reserved1 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref NavSatFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        version,
        numSvs,
        reserved1,
        list
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::NavSatCommon::name();
    }
    
    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }
            
            readPrepare_list();
            
            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
            
        } while (false);
        return es;
    }
    
    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;}
    

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numSvs().value()));
        
    }
    
    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numSvs().value());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }
        
            using PrefixValueType = typename std::decay<decltype(field_numSvs().value())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_numSvs().value() = static_cast<PrefixValueType>(maxAllowedValue);
            updated = true;
        } while (false);
        
        return updated;
        
    }
    

};

} // namespace message

} // namespace ublox


