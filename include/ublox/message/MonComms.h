// Generated by commsdsl2comms v3.7.0

/// @file
/// @brief Contains definition of <b>"MON-COMMS"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <limits>
#include <tuple>
#include <type_traits>
#include <utility>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Res1.h"
#include "ublox/field/Res8.h"
#include "ublox/message/MonCommsCommon.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref MonComms.
/// @tparam TOpt Extra options
/// @see @ref MonComms
/// @headerfile "ublox/message/MonComms.h"
template <typename TOpt = ublox::options::DefaultOptions>
struct MonCommsFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MonCommsFieldsCommon::VersionCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonCommsFieldsCommon::VersionCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"nPorts"</b> field.
    class NPorts : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MonCommsFieldsCommon::NPortsCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonCommsFieldsCommon::NPortsCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"txErrors"</b> field.
    class TxErrors : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
        >
    {
        using Base = 
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_mem, @b getBitValue_mem() and @b setBitValue_mem().
        ///      @li @b BitIdx_alloc, @b getBitValue_alloc() and @b setBitValue_alloc().
        COMMS_BITMASK_BITS_SEQ(
            mem,
            alloc
        );
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonCommsFieldsCommon::TxErrorsCommon::name();
        }
        
        /// @brief Retrieve name of the bit.
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::MonCommsFieldsCommon::TxErrorsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }
        
    };
    
    /// @brief Definition of <b>"reserved0"</b> field.
    struct Reserved0 : public
        ublox::field::Res1<
            TOpt
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonCommsFieldsCommon::Reserved0Common::name();
        }
        
    };
    
    /// @brief Scope for all the member fields of
    ///     @ref ProtIds list.
    struct ProtIdsMembers
    {
        /// @brief Definition of <b>""</b> field.
        /// @see @ref ublox::message::MonCommsFieldsCommon::ProtIdsMembersCommon::ElementVal
        class Element : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::MonCommsFieldsCommon::ProtIdsMembersCommon::ElementVal,
                comms::option::def::ValidNumValueRange<0, 2>,
                comms::option::def::ValidNumValue<5>,
                comms::option::def::ValidNumValue<255>
            >
        {
            using Base = 
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::message::MonCommsFieldsCommon::ProtIdsMembersCommon::ElementVal,
                    comms::option::def::ValidNumValueRange<0, 2>,
                    comms::option::def::ValidNumValue<5>,
                    comms::option::def::ValidNumValue<255>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;
        
            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::message::MonCommsFieldsCommon::ProtIdsMembersCommon::ElementCommon::ValueNameInfo;
            
            /// @brief Type returned from @ref valueNamesMap() member function.
            using ValueNamesMapInfo = ublox::message::MonCommsFieldsCommon::ProtIdsMembersCommon::ElementCommon::ValueNamesMapInfo;
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::MonCommsFieldsCommon::ProtIdsMembersCommon::ElementCommon::name();
            }
            
            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                return ublox::message::MonCommsFieldsCommon::ProtIdsMembersCommon::ElementCommon::valueName(val);
            }
            
            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::value());
            }
            
            /// @brief Retrieve map of enum value names.
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::message::MonCommsFieldsCommon::ProtIdsMembersCommon::ElementCommon::valueNamesMap();
            }
            
        };
        
    };
    
    /// @brief Definition of <b>"protIds"</b> field.
    struct ProtIds : public
        comms::field::ArrayList<
            ublox::field::FieldBase<>,
            typename ProtIdsMembers::Element,
            typename TOpt::message::MonCommsFields::ProtIds,
            comms::option::def::SequenceFixedSize<4U>
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonCommsFieldsCommon::ProtIdsCommon::name();
        }
        
    };
    
    /// @brief Scope for all the member fields of
    ///     @ref List list.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element bundle.
        struct ElementMembers
        {
            /// @brief Definition of <b>"portId"</b> field.
            class PortId : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint16_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::PortIdCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::PortIdCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"txPending"</b> field.
            class TxPending : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint16_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::TxPendingCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::TxPendingCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"txBytes"</b> field.
            class TxBytes : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::TxBytesCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::TxBytesCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"txUsage"</b> field.
            class TxUsage : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::TxUsageCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::TxUsageCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"txPeakUsage"</b> field.
            class TxPeakUsage : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::TxPeakUsageCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::TxPeakUsageCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"rxPending"</b> field.
            class RxPending : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint16_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::RxPendingCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::RxPendingCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"rxBytes"</b> field.
            class RxBytes : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::RxBytesCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::RxBytesCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"rxUsage"</b> field.
            class RxUsage : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::RxUsageCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::RxUsageCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"rxPeakUsage"</b> field.
            class RxPeakUsage : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::RxPeakUsageCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::RxPeakUsageCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"overrunErrs"</b> field.
            class OverrunErrs : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint16_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::OverrunErrsCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::OverrunErrsCommon::name();
                }
                
            };
            
            /// @brief Scope for all the member fields of
            ///     @ref Msgs list.
            struct MsgsMembers
            {
                /// @brief Definition of <b>"element"</b> field.
                class Element : public
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint16_t
                    >
                {
                    using Base = 
                        comms::field::IntValue<
                            ublox::field::FieldBase<>,
                            std::uint16_t
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::MsgsMembersCommon::ElementCommon::hasSpecials();
                    }
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::MsgsMembersCommon::ElementCommon::name();
                    }
                    
                };
                
            };
            
            /// @brief Definition of <b>"msgs"</b> field.
            struct Msgs : public
                comms::field::ArrayList<
                    ublox::field::FieldBase<>,
                    typename MsgsMembers::Element,
                    typename TOpt::message::MonCommsFields::ListMembers::ElementMembers::Msgs,
                    comms::option::def::SequenceFixedSize<4U>
                >
            {
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::MsgsCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"reserved1"</b> field.
            struct Reserved1 : public
                ublox::field::Res8<
                    TOpt
                >
            {
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved1Common::name();
                }
                
            };
            
            /// @brief Definition of <b>"skipped"</b> field.
            class Skipped : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint32_t
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::uint32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::SkippedCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementMembersCommon::SkippedCommon::name();
                }
                
            };
            
            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   PortId,
                   TxPending,
                   TxBytes,
                   TxUsage,
                   TxPeakUsage,
                   RxPending,
                   RxBytes,
                   RxUsage,
                   RxPeakUsage,
                   OverrunErrs,
                   Msgs,
                   Reserved1,
                   Skipped
                >;
        };
        
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base = 
                comms::field::Bundle<
                    ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and accesss functions are:
            ///     @li @b FieldIdx_portIdindex, @b Field_portIdtype and @b field_portId() access function -
            ///         for ElementMembers::PortId member field.
            ///     @li @b FieldIdx_txPendingindex, @b Field_txPendingtype and @b field_txPending() access function -
            ///         for ElementMembers::TxPending member field.
            ///     @li @b FieldIdx_txBytesindex, @b Field_txBytestype and @b field_txBytes() access function -
            ///         for ElementMembers::TxBytes member field.
            ///     @li @b FieldIdx_txUsageindex, @b Field_txUsagetype and @b field_txUsage() access function -
            ///         for ElementMembers::TxUsage member field.
            ///     @li @b FieldIdx_txPeakUsageindex, @b Field_txPeakUsagetype and @b field_txPeakUsage() access function -
            ///         for ElementMembers::TxPeakUsage member field.
            ///     @li @b FieldIdx_rxPendingindex, @b Field_rxPendingtype and @b field_rxPending() access function -
            ///         for ElementMembers::RxPending member field.
            ///     @li @b FieldIdx_rxBytesindex, @b Field_rxBytestype and @b field_rxBytes() access function -
            ///         for ElementMembers::RxBytes member field.
            ///     @li @b FieldIdx_rxUsageindex, @b Field_rxUsagetype and @b field_rxUsage() access function -
            ///         for ElementMembers::RxUsage member field.
            ///     @li @b FieldIdx_rxPeakUsageindex, @b Field_rxPeakUsagetype and @b field_rxPeakUsage() access function -
            ///         for ElementMembers::RxPeakUsage member field.
            ///     @li @b FieldIdx_overrunErrsindex, @b Field_overrunErrstype and @b field_overrunErrs() access function -
            ///         for ElementMembers::OverrunErrs member field.
            ///     @li @b FieldIdx_msgsindex, @b Field_msgstype and @b field_msgs() access function -
            ///         for ElementMembers::Msgs member field.
            ///     @li @b FieldIdx_reserved1index, @b Field_reserved1type and @b field_reserved1() access function -
            ///         for ElementMembers::Reserved1 member field.
            ///     @li @b FieldIdx_skippedindex, @b Field_skippedtype and @b field_skipped() access function -
            ///         for ElementMembers::Skipped member field.
            COMMS_FIELD_MEMBERS_NAMES(
                portId,
                txPending,
                txBytes,
                txUsage,
                txPeakUsage,
                rxPending,
                rxBytes,
                rxUsage,
                rxPeakUsage,
                overrunErrs,
                msgs,
                reserved1,
                skipped
            );
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::MonCommsFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
            
        };
        
    };
    
    /// @brief Definition of <b>"list"</b> field.
    struct List : public
        comms::field::ArrayList<
            ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::MonCommsFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonCommsFieldsCommon::ListCommon::name();
        }
        
    };
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        NPorts,
        TxErrors,
        Reserved0,
        ProtIds,
        List
    >;
};

/// @brief Definition of <b>"MON-COMMS"</b> message class.
/// @details
///     See @ref MonCommsFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile "ublox/message/MonComms.h"
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class MonComms : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonComms,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_MonComms>,
        comms::option::def::FieldsImpl<typename MonCommsFields<TOpt>::All>,
        comms::option::def::MsgType<MonComms<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonComms,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_MonComms>,
            comms::option::def::FieldsImpl<typename MonCommsFields<TOpt>::All>,
            comms::option::def::MsgType<MonComms<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MonCommsFields::Version field.
    ///     @li @b FieldIdx_nPorts index, @b Field_nPorts type and @b field_nPorts() access fuction
    ///         for @ref MonCommsFields::NPorts field.
    ///     @li @b FieldIdx_txErrors index, @b Field_txErrors type and @b field_txErrors() access fuction
    ///         for @ref MonCommsFields::TxErrors field.
    ///     @li @b FieldIdx_reserved0 index, @b Field_reserved0 type and @b field_reserved0() access fuction
    ///         for @ref MonCommsFields::Reserved0 field.
    ///     @li @b FieldIdx_protIds index, @b Field_protIds type and @b field_protIds() access fuction
    ///         for @ref MonCommsFields::ProtIds field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref MonCommsFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        nPorts,
        txErrors,
        reserved0,
        protIds,
        list
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 10U, "Unexpected min serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::MonCommsCommon::name();
    }
    
    /// @brief Custom read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }
        
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_nPorts().value()));
        
        es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }
        
        return comms::ErrorStatus::Success;
    }
    
    /// @brief Custom refresh functionality.
    bool doRefresh()
    {
        bool updated = Base::doRefresh();
        updated = refresh_list() || updated;
        return updated;
    }
    
    
private:
    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_nPorts().value());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }
        
            using PrefixValueType = typename std::decay<decltype(field_nPorts().value())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_nPorts().value() = static_cast<PrefixValueType>(maxAllowedValue);
            updated = true;
        } while (false);
        
        return updated;
        
    }
    
};

} // namespace message

} // namespace ublox


