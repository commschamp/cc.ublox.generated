// Generated by commsdsl2comms v3.6.4

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref ublox::message::CfgRxm message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include "ublox/field/Res1Common.h"

namespace ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref ublox::message::CfgRxm message.
/// @see ublox::message::CfgRxmFields
struct CfgRxmFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref ublox::message::CfgRxmFields::Reserved1 field.
    struct Reserved1Common : public ublox::field::Res1Common
    {
        /// @brief Name of the @ref ublox::message::CfgRxmFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::CfgRxmFields::LpMode field.
    struct LpModeCommon
    {
        /// @brief Values enumerator for
        ///     @ref ublox::message::CfgRxmFields::LpMode field.
        enum class ValueType : std::uint8_t
        {
            Continuous = 0, ///< value @b Continuous.
            PowerSave = 1, ///< value <b>Power Save</b>.
            Continuous2 = 4, ///< value <b>Continuous (2)</b>.
            
            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 4, ///< Last defined value.
            ValuesLimit = 5, ///< Upper limit for defined values.
            
        };
        
        /// @brief Name of the @ref ublox::message::CfgRxmFields::LpMode field.
        static const char* name()
        {
            return "lpMode";
        }
        
        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            static const char* Map[] = {
                "Continuous",
                "Power Save",
                nullptr,
                nullptr,
                "Continuous (2)"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            
            if (MapSize <= static_cast<std::size_t>(val)) {
                return nullptr;
            }
            
            return Map[static_cast<std::size_t>(val)];
        }
        
    };
    
    /// @brief Values enumerator for
    ///     @ref ublox::message::CfgRxmFields::LpMode field.
    using LpModeVal = LpModeCommon::ValueType;
    
};

/// @brief Common types and functions of 
///     @ref ublox::message::CfgRxm message.
/// @see ublox::message::CfgRxm
struct CfgRxmCommon
{
    /// @brief Name of the @ref ublox::message::CfgRxm message.
    static const char* name()
    {
        return "CFG-RXM";
    }
    
};

} // namespace message

} // namespace ublox


