// Generated by commsdsl2comms v3.6.4

/// @file
/// @brief Contains definition of <b>"NAV-SIG"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include <type_traits>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/GnssId.h"
#include "ublox/field/Itow.h"
#include "ublox/field/Res2.h"
#include "ublox/field/Res4.h"
#include "ublox/message/NavSigCommon.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref NavSig.
/// @tparam TOpt Extra options
/// @see @ref NavSig
/// @headerfile "ublox/message/NavSig.h"
template <typename TOpt = ublox::options::DefaultOptions>
struct NavSigFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        ublox::field::Itow<
            TOpt
        >;
    
    /// @brief Definition of <b>"version"</b> field.
    struct Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavSigFieldsCommon::VersionCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"numSigs"</b> field.
    struct NumSigs : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavSigFieldsCommon::NumSigsCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"reserved0"</b> field.
    struct Reserved0 : public
        ublox::field::Res2<
            TOpt
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavSigFieldsCommon::Reserved0Common::name();
        }
        
    };
    
    /// @brief Scope for all the member fields of
    ///     @ref List list.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element bundle.
        struct ElementMembers
        {
            /// @brief Definition of <b>"gnssId"</b> field.
            using GnssId =
                ublox::field::GnssId<
                    TOpt
                >;
            
            /// @brief Definition of <b>"svid"</b> field.
            struct Svid : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"sigId"</b> field.
            struct SigId : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigIdCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"freqId"</b> field.
            struct FreqId : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::ValidNumValueRange<0, 13>
                >
            {
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::FreqIdCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"prRes"</b> field.
            struct PrRes : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int16_t,
                    comms::option::def::ScalingRatio<1, 10>,
                    comms::option::def::UnitsMeters
                >
            {
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::PrResCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"qualityInd"</b> field.
            /// @see @ref ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::QualityIndVal
            class QualityInd : public
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::QualityIndVal,
                    comms::option::def::ValidNumValueRange<0, 7>
                >
            {
                using Base = 
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::QualityIndVal,
                        comms::option::def::ValidNumValueRange<0, 7>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::QualityIndCommon::name();
                }
                
                /// @brief Retrieve name of the enum value
                static const char* valueName(ValueType val)
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::QualityIndCommon::valueName(val);
                }
                
                /// @brief Retrieve name of the @b current value
                const char* valueName() const
                {
                    return valueName(Base::value());
                }
                
            };
            
            /// @brief Definition of <b>"corrSource"</b> field.
            /// @see @ref ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::CorrSourceVal
            class CorrSource : public
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::CorrSourceVal,
                    comms::option::def::ValidNumValueRange<0, 6>
                >
            {
                using Base = 
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::CorrSourceVal,
                        comms::option::def::ValidNumValueRange<0, 6>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::CorrSourceCommon::name();
                }
                
                /// @brief Retrieve name of the enum value
                static const char* valueName(ValueType val)
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::CorrSourceCommon::valueName(val);
                }
                
                /// @brief Retrieve name of the @b current value
                const char* valueName() const
                {
                    return valueName(Base::value());
                }
                
            };
            
            /// @brief Definition of <b>"ionoModel"</b> field.
            /// @see @ref ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::IonoModelVal
            class IonoModel : public
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::IonoModelVal,
                    comms::option::def::ValidNumValueRange<0, 3>,
                    comms::option::def::ValidNumValue<8>
                >
            {
                using Base = 
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::IonoModelVal,
                        comms::option::def::ValidNumValueRange<0, 3>,
                        comms::option::def::ValidNumValue<8>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::IonoModelCommon::name();
                }
                
                /// @brief Retrieve name of the enum value
                static const char* valueName(ValueType val)
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::IonoModelCommon::valueName(val);
                }
                
                /// @brief Retrieve name of the @b current value
                const char* valueName() const
                {
                    return valueName(Base::value());
                }
                
            };
            
            /// @brief Scope for all the member fields of
            ///     @ref SigFlags bitfield.
            struct SigFlagsMembers
            {
                /// @brief Definition of <b>"health"</b> field.
                /// @see @ref ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigFlagsMembersCommon::HealthVal
                class Health : public
                    comms::field::EnumValue<
                        ublox::field::FieldBase<>,
                        ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigFlagsMembersCommon::HealthVal,
                        comms::option::def::FixedBitLength<2U>,
                        comms::option::def::ValidNumValueRange<0, 2>
                    >
                {
                    using Base = 
                        comms::field::EnumValue<
                            ublox::field::FieldBase<>,
                            ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigFlagsMembersCommon::HealthVal,
                            comms::option::def::FixedBitLength<2U>,
                            comms::option::def::ValidNumValueRange<0, 2>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;
                
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigFlagsMembersCommon::HealthCommon::name();
                    }
                    
                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigFlagsMembersCommon::HealthCommon::valueName(val);
                    }
                    
                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::value());
                    }
                    
                };
                
                /// @brief Definition of <b>"bits"</b> field.
                class Bits : public
                    comms::field::BitmaskValue<
                        ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<14U>,
                        comms::option::def::BitmaskReservedBits<0x3F80U, 0x0U>
                    >
                {
                    using Base = 
                        comms::field::BitmaskValue<
                            ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<14U>,
                            comms::option::def::BitmaskReservedBits<0x3F80U, 0x0U>
                        >;
                public:
                    /// @brief Provides names and generates access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values and functions are:
                    ///      @li @b BitIdx_prSmoothed, @b getBitValue_prSmoothed() and @b setBitValue_prSmoothed().
                    ///      @li @b BitIdx_prUsed, @b getBitValue_prUsed() and @b setBitValue_prUsed().
                    ///      @li @b BitIdx_crUsed, @b getBitValue_crUsed() and @b setBitValue_crUsed().
                    ///      @li @b BitIdx_doUsed, @b getBitValue_doUsed() and @b setBitValue_doUsed().
                    ///      @li @b BitIdx_prCorrUsed, @b getBitValue_prCorrUsed() and @b setBitValue_prCorrUsed().
                    ///      @li @b BitIdx_crCorrUsed, @b getBitValue_crCorrUsed() and @b setBitValue_crCorrUsed().
                    ///      @li @b BitIdx_doCorrUsed, @b getBitValue_doCorrUsed() and @b setBitValue_doCorrUsed().
                    COMMS_BITMASK_BITS_SEQ(
                        prSmoothed,
                        prUsed,
                        crUsed,
                        doUsed,
                        prCorrUsed,
                        crCorrUsed,
                        doCorrUsed
                    );
                    
                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigFlagsMembersCommon::BitsCommon::name();
                    }
                    
                    /// @brief Retrieve name of the bit.
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigFlagsMembersCommon::BitsCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }
                    
                };
                
                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Health,
                       Bits
                    >;
            };
            
            /// @brief Definition of <b>"sigFlags"</b> field.
            class SigFlags : public
                comms::field::Bitfield<
                    ublox::field::FieldBase<>,
                    typename SigFlagsMembers::All
                >
            {
                using Base = 
                    comms::field::Bitfield<
                        ublox::field::FieldBase<>,
                        typename SigFlagsMembers::All
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_health index, @b Field_health type and @b field_health() access function -
                ///         for SigFlagsMembers::Health member field.
                ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
                ///         for SigFlagsMembers::Bits member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    health,
                    bits
                );
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::SigFlagsCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"reserved1"</b> field.
            struct Reserved1 : public
                ublox::field::Res4<
                    TOpt
                >
            {
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved1Common::name();
                }
                
            };
            
            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   GnssId,
                   Svid,
                   SigId,
                   FreqId,
                   PrRes,
                   QualityInd,
                   CorrSource,
                   IonoModel,
                   SigFlags,
                   Reserved1
                >;
        };
        
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base = 
                comms::field::Bundle<
                    ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and accesss functions are:
            ///     @li @b FieldIdx_gnssIdindex, @b Field_gnssIdtype and @b field_gnssId() access function -
            ///         for ElementMembers::GnssId member field.
            ///     @li @b FieldIdx_svidindex, @b Field_svidtype and @b field_svid() access function -
            ///         for ElementMembers::Svid member field.
            ///     @li @b FieldIdx_sigIdindex, @b Field_sigIdtype and @b field_sigId() access function -
            ///         for ElementMembers::SigId member field.
            ///     @li @b FieldIdx_freqIdindex, @b Field_freqIdtype and @b field_freqId() access function -
            ///         for ElementMembers::FreqId member field.
            ///     @li @b FieldIdx_prResindex, @b Field_prRestype and @b field_prRes() access function -
            ///         for ElementMembers::PrRes member field.
            ///     @li @b FieldIdx_qualityIndindex, @b Field_qualityIndtype and @b field_qualityInd() access function -
            ///         for ElementMembers::QualityInd member field.
            ///     @li @b FieldIdx_corrSourceindex, @b Field_corrSourcetype and @b field_corrSource() access function -
            ///         for ElementMembers::CorrSource member field.
            ///     @li @b FieldIdx_ionoModelindex, @b Field_ionoModeltype and @b field_ionoModel() access function -
            ///         for ElementMembers::IonoModel member field.
            ///     @li @b FieldIdx_sigFlagsindex, @b Field_sigFlagstype and @b field_sigFlags() access function -
            ///         for ElementMembers::SigFlags member field.
            ///     @li @b FieldIdx_reserved1index, @b Field_reserved1type and @b field_reserved1() access function -
            ///         for ElementMembers::Reserved1 member field.
            COMMS_FIELD_MEMBERS_NAMES(
                gnssId,
                svid,
                sigId,
                freqId,
                prRes,
                qualityInd,
                corrSource,
                ionoModel,
                sigFlags,
                reserved1
            );
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::NavSigFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
            
        };
        
    };
    
    /// @brief Definition of <b>"list"</b> field.
    struct List : public
        comms::field::ArrayList<
            ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::NavSigFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavSigFieldsCommon::ListCommon::name();
        }
        
    };
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Version,
        NumSigs,
        Reserved0,
        List
    >;
};

/// @brief Definition of <b>"NAV-SIG"</b> message class.
/// @details
///     See @ref NavSigFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile "ublox/message/NavSig.h"
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class NavSig : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavSig,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_NavSig>,
        comms::option::def::FieldsImpl<typename NavSigFields<TOpt>::All>,
        comms::option::def::MsgType<NavSig<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavSig,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_NavSig>,
            comms::option::def::FieldsImpl<typename NavSigFields<TOpt>::All>,
            comms::option::def::MsgType<NavSig<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavSigFields::Itow field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavSigFields::Version field.
    ///     @li @b FieldIdx_numSigs index, @b Field_numSigs type and @b field_numSigs() access fuction
    ///         for @ref NavSigFields::NumSigs field.
    ///     @li @b FieldIdx_reserved0 index, @b Field_reserved0 type and @b field_reserved0() access fuction
    ///         for @ref NavSigFields::Reserved0 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref NavSigFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        version,
        numSigs,
        reserved0,
        list
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::NavSigCommon::name();
    }
    
    /// @brief Custom read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }
        
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numSigs().value()));
        
        es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }
        
        return comms::ErrorStatus::Success;
    }
    
    /// @brief Custom refresh functionality.
    bool doRefresh()
    {
        bool updated = Base::doRefresh();
        updated = refresh_list() || updated;
        return updated;
    }
    
    
private:
    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numSigs().value());
            auto realValue = field_list().value().size();
            if (expectedValue != realValue) {
                using PrefixValueType = typename std::decay<decltype(field_numSigs().value())>::type;
                field_numSigs().value() = static_cast<PrefixValueType>(realValue);
                updated = true;
            }
        } while (false);
        
        return updated;
        
    }
    
};

} // namespace message

} // namespace ublox


