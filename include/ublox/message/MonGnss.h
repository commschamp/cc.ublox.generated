// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"MON-GNSS"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Res3.h"
#include "ublox/message/MonGnssCommon.h"
#include "ublox/options/DefaultOptions.h"


namespace ublox
{

namespace message
{


/// @brief Fields of @ref MonGnss.
/// @tparam TOpt Extra options
/// @see @ref MonGnss
/// @headerfile ublox/message/MonGnss.h
template <typename TOpt = ublox::options::DefaultOptions>
struct MonGnssFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MonGnssFieldsCommon::VersionCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonGnssFieldsCommon::VersionCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"supported"</b> field.
    class Supported : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_GPSSup, @b getBitValue_GPSSup() and @b setBitValue_GPSSup().
        ///      @li @b BitIdx_GlonassSup, @b getBitValue_GlonassSup() and @b setBitValue_GlonassSup().
        ///      @li @b BitIdx_BeidouSup, @b getBitValue_BeidouSup() and @b setBitValue_BeidouSup().
        ///      @li @b BitIdx_GalileoSup, @b getBitValue_GalileoSup() and @b setBitValue_GalileoSup().
        COMMS_BITMASK_BITS_SEQ(
            GPSSup,
            GlonassSup,
            BeidouSup,
            GalileoSup
        );
        
        /// @brief Retrieve name of the bit.
        /// @see @ref ublox::message::MonGnssFieldsCommon::SupportedCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::MonGnssFieldsCommon::SupportedCommon::bitName(
                    static_cast<std::size_t>(idx));
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonGnssFieldsCommon::SupportedCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"defaultGnss"</b> field.
    class DefaultGnss : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_GPSDef, @b getBitValue_GPSDef() and @b setBitValue_GPSDef().
        ///      @li @b BitIdx_GlonassDef, @b getBitValue_GlonassDef() and @b setBitValue_GlonassDef().
        ///      @li @b BitIdx_BeidouDef, @b getBitValue_BeidouDef() and @b setBitValue_BeidouDef().
        ///      @li @b BitIdx_GalileoDef, @b getBitValue_GalileoDef() and @b setBitValue_GalileoDef().
        COMMS_BITMASK_BITS_SEQ(
            GPSDef,
            GlonassDef,
            BeidouDef,
            GalileoDef
        );
        
        /// @brief Retrieve name of the bit.
        /// @see @ref ublox::message::MonGnssFieldsCommon::DefaultGnssCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::MonGnssFieldsCommon::DefaultGnssCommon::bitName(
                    static_cast<std::size_t>(idx));
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonGnssFieldsCommon::DefaultGnssCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"enabled"</b> field.
    class Enabled : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_GPSEna, @b getBitValue_GPSEna() and @b setBitValue_GPSEna().
        ///      @li @b BitIdx_GlonassEna, @b getBitValue_GlonassEna() and @b setBitValue_GlonassEna().
        ///      @li @b BitIdx_BeidouEna, @b getBitValue_BeidouEna() and @b setBitValue_BeidouEna().
        ///      @li @b BitIdx_GalileoEna, @b getBitValue_GalileoEna() and @b setBitValue_GalileoEna().
        COMMS_BITMASK_BITS_SEQ(
            GPSEna,
            GlonassEna,
            BeidouEna,
            GalileoEna
        );
        
        /// @brief Retrieve name of the bit.
        /// @see @ref ublox::message::MonGnssFieldsCommon::EnabledCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::MonGnssFieldsCommon::EnabledCommon::bitName(
                    static_cast<std::size_t>(idx));
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonGnssFieldsCommon::EnabledCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"simultaneous"</b> field.
    class Simultaneous : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MonGnssFieldsCommon::SimultaneousCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonGnssFieldsCommon::SimultaneousCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MonGnssFieldsCommon::Reserved1Common::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Supported,
        DefaultGnss,
        Enabled,
        Simultaneous,
        Reserved1
    >;
};

/// @brief Definition of <b>"MON-GNSS"</b> message class.
/// @details
///     See @ref MonGnssFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/MonGnss.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class MonGnss : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonGnss,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_MonGnss>,
        comms::option::def::FieldsImpl<typename MonGnssFields<TOpt>::All>,
        comms::option::def::MsgType<MonGnss<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonGnss,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_MonGnss>,
            comms::option::def::FieldsImpl<typename MonGnssFields<TOpt>::All>,
            comms::option::def::MsgType<MonGnss<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MonGnssFields::Version field.
    ///     @li @b FieldIdx_supported index, @b Field_supported type and @b field_supported() access fuction
    ///         for @ref MonGnssFields::Supported field.
    ///     @li @b FieldIdx_defaultGnss index, @b Field_defaultGnss type and @b field_defaultGnss() access fuction
    ///         for @ref MonGnssFields::DefaultGnss field.
    ///     @li @b FieldIdx_enabled index, @b Field_enabled type and @b field_enabled() access fuction
    ///         for @ref MonGnssFields::Enabled field.
    ///     @li @b FieldIdx_simultaneous index, @b Field_simultaneous type and @b field_simultaneous() access fuction
    ///         for @ref MonGnssFields::Simultaneous field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref MonGnssFields::Reserved1 field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        supported,
        defaultGnss,
        enabled,
        simultaneous,
        reserved1
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 8U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::MonGnssCommon::name();
    }
    

};

} // namespace message

} // namespace ublox


