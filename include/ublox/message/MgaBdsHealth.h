// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"MGA-BDS-HEALTH"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Res2.h"
#include "ublox/field/Res4.h"
#include "ublox/message/MgaBdsHealthCommon.h"
#include "ublox/options/DefaultOptions.h"


namespace ublox
{

namespace message
{


/// @brief Fields of @ref MgaBdsHealth.
/// @tparam TOpt Extra options
/// @see @ref MgaBdsHealth
/// @headerfile ublox/message/MgaBdsHealth.h
template <typename TOpt = ublox::options::DefaultOptions>
struct MgaBdsHealthFields
{
    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<4>,
            comms::option::def::ValidNumValue<4>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<4>,
                comms::option::def::ValidNumValue<4>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsHealthFieldsCommon::TypeCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsHealthFieldsCommon::TypeCommon::name();
        }
        
        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::value() = static_cast<ValueType>(4);
            return true;
            
        }
        
        
    
    };
    
    
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::MgaBdsHealthFieldsCommon::VersionCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsHealthFieldsCommon::VersionCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsHealthFieldsCommon::Reserved1Common::name();
        }
        
    
    };
    
    
    /// @brief Scope for all the member fields of
    ///     @ref HealthCode field.
    struct HealthCodeMembers
    {
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint16_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;
            
            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::message::MgaBdsHealthFieldsCommon::HealthCodeMembersCommon::ElementCommon::hasSpecials();
            }
            
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::MgaBdsHealthFieldsCommon::HealthCodeMembersCommon::ElementCommon::name();
            }
            
        
        };
        
        
    };
    
    /// @brief Definition of <b>"healthCode"</b> field.
    class HealthCode : public
        comms::field::ArrayList<
            ublox::field::FieldBase<>,
            typename HealthCodeMembers::Element,
            typename TOpt::message::MgaBdsHealthFields::HealthCode,
            comms::option::def::SequenceFixedSize<30U>
        >
    {
        using Base =
            comms::field::ArrayList<
                ublox::field::FieldBase<>,
                typename HealthCodeMembers::Element,
                typename TOpt::message::MgaBdsHealthFields::HealthCode,
                comms::option::def::SequenceFixedSize<30U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsHealthFieldsCommon::HealthCodeCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::MgaBdsHealthFieldsCommon::Reserved2Common::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Type,
        Version,
        Reserved1,
        HealthCode,
        Reserved2
    >;
};

/// @brief Definition of <b>"MGA-BDS-HEALTH"</b> message class.
/// @details
///     See @ref MgaBdsHealthFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/MgaBdsHealth.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class MgaBdsHealth : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MgaBdsHealth,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_MgaBds>,
        comms::option::def::FieldsImpl<typename MgaBdsHealthFields<TOpt>::All>,
        comms::option::def::MsgType<MgaBdsHealth<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MgaBdsHealth,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_MgaBds>,
            comms::option::def::FieldsImpl<typename MgaBdsHealthFields<TOpt>::All>,
            comms::option::def::MsgType<MgaBdsHealth<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref MgaBdsHealthFields::Type field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MgaBdsHealthFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref MgaBdsHealthFields::Reserved1 field.
    ///     @li @b FieldIdx_healthCode index, @b Field_healthCode type and @b field_healthCode() access fuction
    ///         for @ref MgaBdsHealthFields::HealthCode field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref MgaBdsHealthFields::Reserved2 field.
    COMMS_MSG_FIELDS_NAMES(
        type,
        version,
        reserved1,
        healthCode,
        reserved2
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 68U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 68U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::MgaBdsHealthCommon::name();
    }
    

};

} // namespace message

} // namespace ublox


