// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"RXM-RTCM"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Res1.h"
#include "ublox/message/RxmRtcmCommon.h"
#include "ublox/options/DefaultOptions.h"


namespace ublox
{

namespace message
{


/// @brief Fields of @ref RxmRtcm.
/// @tparam TOpt Extra options
/// @see @ref RxmRtcm
/// @headerfile ublox/message/RxmRtcm.h
template <typename TOpt = ublox::options::DefaultOptions>
struct RxmRtcmFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::DefaultNumValue<2>,
            comms::option::def::ValidNumValue<2>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::DefaultNumValue<2>,
                comms::option::def::ValidNumValue<2>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::RxmRtcmFieldsCommon::VersionCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::RxmRtcmFieldsCommon::VersionCommon::name();
        }
        
    
    };
    
    
    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>""</b> field.
        class BitsLow : public
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<1U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<1U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_crcFailed, @b getBitValue_crcFailed() and @b setBitValue_crcFailed().
            COMMS_BITMASK_BITS_SEQ(
                crcFailed
            );
            
            /// @brief Retrieve name of the bit.
            /// @see @ref ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName(
                        static_cast<std::size_t>(idx));
            }
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::BitsLowCommon::name();
            }
            
        
        };
        
        
        /// @brief Definition of <b>"msgUsed"</b> field.
        /// @see @ref ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::ValueType
        class MsgUsed : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;
            
            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::ValueNameInfo;
            
            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::ValueNamesMapInfo;
            
            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::valueName(val);
            }
            
            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::value());
            }
            
            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::valueNamesMap();
            }
            
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::MsgUsedCommon::name();
            }
            
        
        };
        
        
        /// @brief Definition of <b>"bitsHigh"</b> field.
        class BitsHigh : public
            ublox::field::Res1<
                TOpt,
                comms::option::def::FixedBitLength<5U>
            >
        {
            using Base =
                ublox::field::Res1<
                    TOpt,
                    comms::option::def::FixedBitLength<5U>
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::RxmRtcmFieldsCommon::FlagsMembersCommon::BitsHighCommon::name();
            }
            
        
        };
        
        
        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               BitsLow,
               MsgUsed,
               BitsHigh
            >;
    };
    
    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            ublox::field::FieldBase<>,
            typename FlagsMembers::All
        >
    {
        using Base =
            comms::field::Bitfield<
                ublox::field::FieldBase<>,
                typename FlagsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_bitsLow index, @b Field_bitsLow type and @b field_bitsLow() access function -
        ///         for ublox::message::RxmRtcmFields::FlagsMembers::BitsLow member field.
        ///     @li @b FieldIdx_msgUsed index, @b Field_msgUsed type and @b field_msgUsed() access function -
        ///         for ublox::message::RxmRtcmFields::FlagsMembers::MsgUsed member field.
        ///     @li @b FieldIdx_bitsHigh index, @b Field_bitsHigh type and @b field_bitsHigh() access function -
        ///         for ublox::message::RxmRtcmFields::FlagsMembers::BitsHigh member field.
        COMMS_FIELD_MEMBERS_NAMES(
            bitsLow,
            msgUsed,
            bitsHigh
        );
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::RxmRtcmFieldsCommon::FlagsCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"subType"</b> field.
    class SubType : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::RxmRtcmFieldsCommon::SubTypeCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::RxmRtcmFieldsCommon::SubTypeCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"refStation"</b> field.
    class RefStation : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::RxmRtcmFieldsCommon::RefStationCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::RxmRtcmFieldsCommon::RefStationCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"msgType"</b> field.
    class MsgType : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::RxmRtcmFieldsCommon::MsgTypeCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::RxmRtcmFieldsCommon::MsgTypeCommon::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Flags,
        SubType,
        RefStation,
        MsgType
    >;
};

/// @brief Definition of <b>"RXM-RTCM"</b> message class.
/// @details
///     See @ref RxmRtcmFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/RxmRtcm.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class RxmRtcm : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::RxmRtcm,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_RxmRtcm>,
        comms::option::def::FieldsImpl<typename RxmRtcmFields<TOpt>::All>,
        comms::option::def::MsgType<RxmRtcm<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::RxmRtcm,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_RxmRtcm>,
            comms::option::def::FieldsImpl<typename RxmRtcmFields<TOpt>::All>,
            comms::option::def::MsgType<RxmRtcm<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref RxmRtcmFields::Version field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref RxmRtcmFields::Flags field.
    ///     @li @b FieldIdx_subType index, @b Field_subType type and @b field_subType() access fuction
    ///         for @ref RxmRtcmFields::SubType field.
    ///     @li @b FieldIdx_refStation index, @b Field_refStation type and @b field_refStation() access fuction
    ///         for @ref RxmRtcmFields::RefStation field.
    ///     @li @b FieldIdx_msgType index, @b Field_msgType type and @b field_msgType() access fuction
    ///         for @ref RxmRtcmFields::MsgType field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        flags,
        subType,
        refStation,
        msgType
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 8U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::RxmRtcmCommon::name();
    }
    

};

} // namespace message

} // namespace ublox


