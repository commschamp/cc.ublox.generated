// Generated by commsdsl2comms v3.7.0

/// @file
/// @brief Contains definition of <b>"CFG-NAV5"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include <type_traits>
#include <utility>
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Res2.h"
#include "ublox/field/Res5.h"
#include "ublox/message/CfgNav5Common.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref CfgNav5.
/// @tparam TOpt Extra options
/// @see @ref CfgNav5
/// @headerfile "ublox/message/CfgNav5.h"
template <typename TOpt = ublox::options::DefaultOptions>
struct CfgNav5Fields
{
    /// @brief Definition of <b>"mask"</b> field.
    class Mask : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<2U>,
            comms::option::def::BitmaskReservedBits<0xFA00U, 0x0U>
        >
    {
        using Base = 
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<2U>,
                comms::option::def::BitmaskReservedBits<0xFA00U, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_dyn.
        ///      @li @b BitIdx_minEl.
        ///      @li @b BitIdx_posFixMode.
        ///      @li @b BitIdx_drLim.
        ///      @li @b BitIdx_posMask.
        ///      @li @b BitIdx_timeMask.
        ///      @li @b BitIdx_staticHoldMask.
        ///      @li @b BitIdx_dgpsMask.
        ///      @li @b BitIdx_cnoThreshold.
        ///      @li @b BitIdx_utc.
        COMMS_BITMASK_BITS(
            dyn=0,
            minEl=1,
            posFixMode=2,
            drLim=3,
            posMask=4,
            timeMask=5,
            staticHoldMask=6,
            dgpsMask=7,
            cnoThreshold=8,
            utc=10
        );
        
        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_dyn() and @b setBitValue_dyn().
        ///      @li @b getBitValue_minEl() and @b setBitValue_minEl().
        ///      @li @b getBitValue_posFixMode() and @b setBitValue_posFixMode().
        ///      @li @b getBitValue_drLim() and @b setBitValue_drLim().
        ///      @li @b getBitValue_posMask() and @b setBitValue_posMask().
        ///      @li @b getBitValue_timeMask() and @b setBitValue_timeMask().
        ///      @li @b getBitValue_staticHoldMask() and @b setBitValue_staticHoldMask().
        ///      @li @b getBitValue_dgpsMask() and @b setBitValue_dgpsMask().
        ///      @li @b getBitValue_cnoThreshold() and @b setBitValue_cnoThreshold().
        ///      @li @b getBitValue_utc() and @b setBitValue_utc().
        COMMS_BITMASK_BITS_ACCESS(
            dyn,
            minEl,
            posFixMode,
            drLim,
            posMask,
            timeMask,
            staticHoldMask,
            dgpsMask,
            cnoThreshold,
            utc
        );
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::MaskCommon::name();
        }
        
        /// @brief Retrieve name of the bit.
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::CfgNav5FieldsCommon::MaskCommon::bitName(
                    static_cast<std::size_t>(idx));
        }
        
    };
    
    /// @brief Definition of <b>"dynModel"</b> field.
    /// @see @ref ublox::message::CfgNav5FieldsCommon::DynModelVal
    class DynModel : public
        comms::field::EnumValue<
            ublox::field::FieldBase<>,
            ublox::message::CfgNav5FieldsCommon::DynModelVal,
            comms::option::def::ValidNumValue<0>,
            comms::option::def::ValidNumValueRange<2, 10>
        >
    {
        using Base = 
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::CfgNav5FieldsCommon::DynModelVal,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::ValidNumValueRange<2, 10>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Single value name info entry.
        using ValueNameInfo = ublox::message::CfgNav5FieldsCommon::DynModelCommon::ValueNameInfo;
        
        /// @brief Type returned from @ref valueNamesMap() member function.
        using ValueNamesMapInfo = ublox::message::CfgNav5FieldsCommon::DynModelCommon::ValueNamesMapInfo;
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::DynModelCommon::name();
        }
        
        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            return ublox::message::CfgNav5FieldsCommon::DynModelCommon::valueName(val);
        }
        
        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::value());
        }
        
        /// @brief Retrieve map of enum value names.
        static ValueNamesMapInfo valueNamesMap()
        {
            return ublox::message::CfgNav5FieldsCommon::DynModelCommon::valueNamesMap();
        }
        
    };
    
    /// @brief Definition of <b>"fixMode"</b> field.
    /// @see @ref ublox::message::CfgNav5FieldsCommon::FixModeVal
    class FixMode : public
        comms::field::EnumValue<
            ublox::field::FieldBase<>,
            ublox::message::CfgNav5FieldsCommon::FixModeVal,
            comms::option::def::ValidNumValueRange<1, 3>
        >
    {
        using Base = 
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::CfgNav5FieldsCommon::FixModeVal,
                comms::option::def::ValidNumValueRange<1, 3>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Single value name info entry.
        using ValueNameInfo = ublox::message::CfgNav5FieldsCommon::FixModeCommon::ValueNameInfo;
        
        /// @brief Type returned from @ref valueNamesMap() member function.
        using ValueNamesMapInfo = ublox::message::CfgNav5FieldsCommon::FixModeCommon::ValueNamesMapInfo;
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::FixModeCommon::name();
        }
        
        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            return ublox::message::CfgNav5FieldsCommon::FixModeCommon::valueName(val);
        }
        
        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::value());
        }
        
        /// @brief Retrieve map of enum value names.
        static ValueNamesMapInfo valueNamesMap()
        {
            return ublox::message::CfgNav5FieldsCommon::FixModeCommon::valueNamesMap();
        }
        
    };
    
    /// @brief Definition of <b>"fixedAlt"</b> field.
    class FixedAlt : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 100>,
            comms::option::def::UnitsMeters
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 100>,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::FixedAltCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::FixedAltCommon::name();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 2U;
        }
    };
    
    /// @brief Definition of <b>"fixedAltVar"</b> field.
    class FixedAltVar : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 10000>
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 10000>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::FixedAltVarCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::FixedAltVarCommon::name();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 4U;
        }
    };
    
    /// @brief Definition of <b>"minElev"</b> field.
    class MinElev : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::UnitsDegrees
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::MinElevCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::MinElevCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"drLimit"</b> field.
    class DrLimit : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::DrLimitCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::DrLimitCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"pDop"</b> field.
    class PDop : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<1, 10>
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 10>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::PDopCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::PDopCommon::name();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }
    };
    
    /// @brief Definition of <b>"tDop"</b> field.
    class TDop : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<1, 10>
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 10>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::TDopCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::TDopCommon::name();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }
    };
    
    /// @brief Definition of <b>"pAcc"</b> field.
    class PAcc : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsMeters
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::PAccCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::PAccCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"tAcc"</b> field.
    class TAcc : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsMeters
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::TAccCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::TAccCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"staticHoldThresh"</b> field.
    class StaticHoldThresh : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::UnitsCentimetersPerSecond
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::UnitsCentimetersPerSecond
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::StaticHoldThreshCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::StaticHoldThreshCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"dgnssTimeout"</b> field.
    class DgnssTimeout : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::DgnssTimeoutCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::DgnssTimeoutCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"cnoThreshNumSVs"</b> field.
    class CnoThreshNumSVs : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::CnoThreshNumSVsCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::CnoThreshNumSVsCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"cnoThresh"</b> field.
    class CnoThresh : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::CnoThreshCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::CnoThreshCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"reserved1"</b> field.
    struct Reserved1 : public
        ublox::field::Res2<
            TOpt
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::Reserved1Common::name();
        }
        
    };
    
    /// @brief Definition of <b>"staticHoldMaxDist"</b> field.
    class StaticHoldMaxDist : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsMeters
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgNav5FieldsCommon::StaticHoldMaxDistCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::StaticHoldMaxDistCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"utcStandard"</b> field.
    /// @see @ref ublox::message::CfgNav5FieldsCommon::UtcStandardVal
    class UtcStandard : public
        comms::field::EnumValue<
            ublox::field::FieldBase<>,
            ublox::message::CfgNav5FieldsCommon::UtcStandardVal,
            comms::option::def::ValidNumValue<0>,
            comms::option::def::ValidNumValue<3>,
            comms::option::def::ValidNumValueRange<6, 7>
        >
    {
        using Base = 
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::CfgNav5FieldsCommon::UtcStandardVal,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::ValidNumValue<3>,
                comms::option::def::ValidNumValueRange<6, 7>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Single value name info entry.
        using ValueNameInfo = ublox::message::CfgNav5FieldsCommon::UtcStandardCommon::ValueNameInfo;
        
        /// @brief Type returned from @ref valueNamesMap() member function.
        using ValueNamesMapInfo = ublox::message::CfgNav5FieldsCommon::UtcStandardCommon::ValueNamesMapInfo;
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::UtcStandardCommon::name();
        }
        
        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            return ublox::message::CfgNav5FieldsCommon::UtcStandardCommon::valueName(val);
        }
        
        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::value());
        }
        
        /// @brief Retrieve map of enum value names.
        static ValueNamesMapInfo valueNamesMap()
        {
            return ublox::message::CfgNav5FieldsCommon::UtcStandardCommon::valueNamesMap();
        }
        
    };
    
    /// @brief Definition of <b>"reserved2"</b> field.
    struct Reserved2 : public
        ublox::field::Res5<
            TOpt
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgNav5FieldsCommon::Reserved2Common::name();
        }
        
    };
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Mask,
        DynModel,
        FixMode,
        FixedAlt,
        FixedAltVar,
        MinElev,
        DrLimit,
        PDop,
        TDop,
        PAcc,
        TAcc,
        StaticHoldThresh,
        DgnssTimeout,
        CnoThreshNumSVs,
        CnoThresh,
        Reserved1,
        StaticHoldMaxDist,
        UtcStandard,
        Reserved2
    >;
};

/// @brief Definition of <b>"CFG-NAV5"</b> message class.
/// @details
///     See @ref CfgNav5Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile "ublox/message/CfgNav5.h"
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class CfgNav5 : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_CfgNav5>,
        comms::option::def::FieldsImpl<typename CfgNav5Fields<TOpt>::All>,
        comms::option::def::MsgType<CfgNav5<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_CfgNav5>,
            comms::option::def::FieldsImpl<typename CfgNav5Fields<TOpt>::All>,
            comms::option::def::MsgType<CfgNav5<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_mask index, @b Field_mask type and @b field_mask() access fuction
    ///         for @ref CfgNav5Fields::Mask field.
    ///     @li @b FieldIdx_dynModel index, @b Field_dynModel type and @b field_dynModel() access fuction
    ///         for @ref CfgNav5Fields::DynModel field.
    ///     @li @b FieldIdx_fixMode index, @b Field_fixMode type and @b field_fixMode() access fuction
    ///         for @ref CfgNav5Fields::FixMode field.
    ///     @li @b FieldIdx_fixedAlt index, @b Field_fixedAlt type and @b field_fixedAlt() access fuction
    ///         for @ref CfgNav5Fields::FixedAlt field.
    ///     @li @b FieldIdx_fixedAltVar index, @b Field_fixedAltVar type and @b field_fixedAltVar() access fuction
    ///         for @ref CfgNav5Fields::FixedAltVar field.
    ///     @li @b FieldIdx_minElev index, @b Field_minElev type and @b field_minElev() access fuction
    ///         for @ref CfgNav5Fields::MinElev field.
    ///     @li @b FieldIdx_drLimit index, @b Field_drLimit type and @b field_drLimit() access fuction
    ///         for @ref CfgNav5Fields::DrLimit field.
    ///     @li @b FieldIdx_pDop index, @b Field_pDop type and @b field_pDop() access fuction
    ///         for @ref CfgNav5Fields::PDop field.
    ///     @li @b FieldIdx_tDop index, @b Field_tDop type and @b field_tDop() access fuction
    ///         for @ref CfgNav5Fields::TDop field.
    ///     @li @b FieldIdx_pAcc index, @b Field_pAcc type and @b field_pAcc() access fuction
    ///         for @ref CfgNav5Fields::PAcc field.
    ///     @li @b FieldIdx_tAcc index, @b Field_tAcc type and @b field_tAcc() access fuction
    ///         for @ref CfgNav5Fields::TAcc field.
    ///     @li @b FieldIdx_staticHoldThresh index, @b Field_staticHoldThresh type and @b field_staticHoldThresh() access fuction
    ///         for @ref CfgNav5Fields::StaticHoldThresh field.
    ///     @li @b FieldIdx_dgnssTimeout index, @b Field_dgnssTimeout type and @b field_dgnssTimeout() access fuction
    ///         for @ref CfgNav5Fields::DgnssTimeout field.
    ///     @li @b FieldIdx_cnoThreshNumSVs index, @b Field_cnoThreshNumSVs type and @b field_cnoThreshNumSVs() access fuction
    ///         for @ref CfgNav5Fields::CnoThreshNumSVs field.
    ///     @li @b FieldIdx_cnoThresh index, @b Field_cnoThresh type and @b field_cnoThresh() access fuction
    ///         for @ref CfgNav5Fields::CnoThresh field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref CfgNav5Fields::Reserved1 field.
    ///     @li @b FieldIdx_staticHoldMaxDist index, @b Field_staticHoldMaxDist type and @b field_staticHoldMaxDist() access fuction
    ///         for @ref CfgNav5Fields::StaticHoldMaxDist field.
    ///     @li @b FieldIdx_utcStandard index, @b Field_utcStandard type and @b field_utcStandard() access fuction
    ///         for @ref CfgNav5Fields::UtcStandard field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref CfgNav5Fields::Reserved2 field.
    COMMS_MSG_FIELDS_NAMES(
        mask,
        dynModel,
        fixMode,
        fixedAlt,
        fixedAltVar,
        minElev,
        drLimit,
        pDop,
        tDop,
        pAcc,
        tAcc,
        staticHoldThresh,
        dgnssTimeout,
        cnoThreshNumSVs,
        cnoThresh,
        reserved1,
        staticHoldMaxDist,
        utcStandard,
        reserved2
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 36U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 36U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::CfgNav5Common::name();
    }
    
    
};

} // namespace message

} // namespace ublox


