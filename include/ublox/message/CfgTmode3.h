// Generated by commsdsl2comms v3.7.0

/// @file
/// @brief Contains definition of <b>"CFG-TMODE3"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include <type_traits>
#include <utility>
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/field/Optional.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/Alt.h"
#include "ublox/field/AltHP.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/FixedPosAcc.h"
#include "ublox/field/Lat.h"
#include "ublox/field/LatHP.h"
#include "ublox/field/Lon.h"
#include "ublox/field/LonHP.h"
#include "ublox/field/Res1.h"
#include "ublox/field/Res8.h"
#include "ublox/message/CfgTmode3Common.h"
#include "ublox/options/DefaultOptions.h"

namespace ublox
{

namespace message
{

/// @brief Fields of @ref CfgTmode3.
/// @tparam TOpt Extra options
/// @see @ref CfgTmode3
/// @headerfile "ublox/message/CfgTmode3.h"
template <typename TOpt = ublox::options::DefaultOptions>
struct CfgTmode3Fields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgTmode3FieldsCommon::VersionCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::VersionCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"reserved1"</b> field.
    struct Reserved1 : public
        ublox::field::Res1<
            TOpt
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::Reserved1Common::name();
        }
        
    };
    
    /// @brief Scope for all the member fields of
    ///     @ref Flags bitfield.
    struct FlagsMembers
    {
        /// @brief Definition of <b>"mode"</b> field.
        /// @see @ref ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::ModeVal
        class Mode : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::ModeVal,
                comms::option::def::FixedBitLength<8U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base = 
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::ModeVal,
                    comms::option::def::FixedBitLength<8U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;
        
            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::ModeCommon::ValueNameInfo;
            
            /// @brief Type returned from @ref valueNamesMap() member function.
            using ValueNamesMapInfo = ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::ModeCommon::ValueNamesMapInfo;
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::ModeCommon::name();
            }
            
            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                return ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::ModeCommon::valueName(val);
            }
            
            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::value());
            }
            
            /// @brief Retrieve map of enum value names.
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::ModeCommon::valueNamesMap();
            }
            
        };
        
        /// @brief Definition of <b>""</b> field.
        class Bits : public
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<8U>,
                comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
            >
        {
            using Base = 
                comms::field::BitmaskValue<
                    ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<8U>,
                    comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_lla, @b getBitValue_lla() and @b setBitValue_lla().
            COMMS_BITMASK_BITS_SEQ(
                lla
            );
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::BitsCommon::name();
            }
            
            /// @brief Retrieve name of the bit.
            static const char* bitName(BitIdx idx)
            {
                return
                    ublox::message::CfgTmode3FieldsCommon::FlagsMembersCommon::BitsCommon::bitName(
                        static_cast<std::size_t>(idx));
            }
            
        };
        
        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Mode,
               Bits
            >;
    };
    
    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            ublox::field::FieldBase<>,
            typename FlagsMembers::All
        >
    {
        using Base = 
            comms::field::Bitfield<
                ublox::field::FieldBase<>,
                typename FlagsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_mode index, @b Field_mode type and @b field_mode() access function -
        ///         for FlagsMembers::Mode member field.
        ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
        ///         for FlagsMembers::Bits member field.
        COMMS_FIELD_MEMBERS_NAMES(
            mode,
            bits
        );
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::FlagsCommon::name();
        }
        
    };
    
    /// @brief Scope for all the member fields of
    ///     @ref Ecef optional.
    struct EcefMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref EcefWrap bundle.
        struct EcefWrapMembers
        {
            /// @brief Definition of <b>"ecefX"</b> field.
            class EcefX : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsCentimeters
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int32_t,
                        comms::option::def::UnitsCentimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefXCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefXCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"ecefY"</b> field.
            class EcefY : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsCentimeters
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int32_t,
                        comms::option::def::UnitsCentimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefYCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefYCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"ecefZ"</b> field.
            class EcefZ : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsCentimeters
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int32_t,
                        comms::option::def::UnitsCentimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefZCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefZCommon::name();
                }
                
            };
            
            /// @brief Definition of <b>"ecefXHP"</b> field.
            class EcefXHP : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int8_t,
                    comms::option::def::ScalingRatio<1, 10>,
                    comms::option::def::UnitsMillimeters
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int8_t,
                        comms::option::def::ScalingRatio<1, 10>,
                        comms::option::def::UnitsMillimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefXHPCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefXHPCommon::name();
                }
                
                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 1U;
                }
            };
            
            /// @brief Definition of <b>"ecefYHP"</b> field.
            class EcefYHP : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int8_t,
                    comms::option::def::ScalingRatio<1, 10>,
                    comms::option::def::UnitsMillimeters
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int8_t,
                        comms::option::def::ScalingRatio<1, 10>,
                        comms::option::def::UnitsMillimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefYHPCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefYHPCommon::name();
                }
                
                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 1U;
                }
            };
            
            /// @brief Definition of <b>"ecefZHP"</b> field.
            class EcefZHP : public
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::int8_t,
                    comms::option::def::ScalingRatio<1, 10>,
                    comms::option::def::UnitsMillimeters
                >
            {
                using Base = 
                    comms::field::IntValue<
                        ublox::field::FieldBase<>,
                        std::int8_t,
                        comms::option::def::ScalingRatio<1, 10>,
                        comms::option::def::UnitsMillimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;
            
                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefZHPCommon::hasSpecials();
                }
                
                /// @brief Name of the field.
                static const char* name()
                {
                    return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapMembersCommon::EcefZHPCommon::name();
                }
                
                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 1U;
                }
            };
            
            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   EcefX,
                   EcefY,
                   EcefZ,
                   EcefXHP,
                   EcefYHP,
                   EcefZHP
                >;
        };
        
        /// @brief Definition of <b>""</b> field.
        class EcefWrap : public
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename EcefWrapMembers::All
            >
        {
            using Base = 
                comms::field::Bundle<
                    ublox::field::FieldBase<>,
                    typename EcefWrapMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and accesss functions are:
            ///     @li @b FieldIdx_ecefXindex, @b Field_ecefXtype and @b field_ecefX() access function -
            ///         for EcefWrapMembers::EcefX member field.
            ///     @li @b FieldIdx_ecefYindex, @b Field_ecefYtype and @b field_ecefY() access function -
            ///         for EcefWrapMembers::EcefY member field.
            ///     @li @b FieldIdx_ecefZindex, @b Field_ecefZtype and @b field_ecefZ() access function -
            ///         for EcefWrapMembers::EcefZ member field.
            ///     @li @b FieldIdx_ecefXHPindex, @b Field_ecefXHPtype and @b field_ecefXHP() access function -
            ///         for EcefWrapMembers::EcefXHP member field.
            ///     @li @b FieldIdx_ecefYHPindex, @b Field_ecefYHPtype and @b field_ecefYHP() access function -
            ///         for EcefWrapMembers::EcefYHP member field.
            ///     @li @b FieldIdx_ecefZHPindex, @b Field_ecefZHPtype and @b field_ecefZHP() access function -
            ///         for EcefWrapMembers::EcefZHP member field.
            COMMS_FIELD_MEMBERS_NAMES(
                ecefX,
                ecefY,
                ecefZ,
                ecefXHP,
                ecefYHP,
                ecefZHP
            );
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgTmode3FieldsCommon::EcefMembersCommon::EcefWrapCommon::name();
            }
            
        };
        
    };
    
    /// @brief Definition of <b>"ecef"</b> field.
    struct Ecef : public
        comms::field::Optional<
            typename EcefMembers::EcefWrap,
            comms::option::def::ExistsByDefault
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::EcefCommon::name();
        }
        
    };
    
    /// @brief Scope for all the member fields of
    ///     @ref Lla optional.
    struct LlaMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref LlaWrap bundle.
        struct LlaWrapMembers
        {
            /// @brief Definition of <b>"lat"</b> field.
            using Lat =
                ublox::field::Lat<
                    TOpt
                >;
            
            /// @brief Definition of <b>"lon"</b> field.
            using Lon =
                ublox::field::Lon<
                    TOpt
                >;
            
            /// @brief Definition of <b>"alt"</b> field.
            using Alt =
                ublox::field::Alt<
                    TOpt
                >;
            
            /// @brief Definition of <b>"latHP"</b> field.
            using LatHP =
                ublox::field::LatHP<
                    TOpt
                >;
            
            /// @brief Definition of <b>"lonHP"</b> field.
            using LonHP =
                ublox::field::LonHP<
                    TOpt
                >;
            
            /// @brief Definition of <b>"altHP"</b> field.
            using AltHP =
                ublox::field::AltHP<
                    TOpt
                >;
            
            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Lat,
                   Lon,
                   Alt,
                   LatHP,
                   LonHP,
                   AltHP
                >;
        };
        
        /// @brief Definition of <b>""</b> field.
        class LlaWrap : public
            comms::field::Bundle<
                ublox::field::FieldBase<>,
                typename LlaWrapMembers::All
            >
        {
            using Base = 
                comms::field::Bundle<
                    ublox::field::FieldBase<>,
                    typename LlaWrapMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and accesss functions are:
            ///     @li @b FieldIdx_latindex, @b Field_lattype and @b field_lat() access function -
            ///         for LlaWrapMembers::Lat member field.
            ///     @li @b FieldIdx_lonindex, @b Field_lontype and @b field_lon() access function -
            ///         for LlaWrapMembers::Lon member field.
            ///     @li @b FieldIdx_altindex, @b Field_alttype and @b field_alt() access function -
            ///         for LlaWrapMembers::Alt member field.
            ///     @li @b FieldIdx_latHPindex, @b Field_latHPtype and @b field_latHP() access function -
            ///         for LlaWrapMembers::LatHP member field.
            ///     @li @b FieldIdx_lonHPindex, @b Field_lonHPtype and @b field_lonHP() access function -
            ///         for LlaWrapMembers::LonHP member field.
            ///     @li @b FieldIdx_altHPindex, @b Field_altHPtype and @b field_altHP() access function -
            ///         for LlaWrapMembers::AltHP member field.
            COMMS_FIELD_MEMBERS_NAMES(
                lat,
                lon,
                alt,
                latHP,
                lonHP,
                altHP
            );
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgTmode3FieldsCommon::LlaMembersCommon::LlaWrapCommon::name();
            }
            
        };
        
    };
    
    /// @brief Definition of <b>"lla"</b> field.
    struct Lla : public
        comms::field::Optional<
            typename LlaMembers::LlaWrap,
            comms::option::def::MissingByDefault
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::LlaCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"reserved2"</b> field.
    struct Reserved2 : public
        ublox::field::Res1<
            TOpt
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::Reserved2Common::name();
        }
        
    };
    
    /// @brief Definition of <b>"fixedPosAcc"</b> field.
    using FixedPosAcc =
        ublox::field::FixedPosAcc<
            TOpt
        >;
    
    /// @brief Definition of <b>"svinMinDur"</b> field.
    class SvinMinDur : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgTmode3FieldsCommon::SvinMinDurCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::SvinMinDurCommon::name();
        }
        
    };
    
    /// @brief Definition of <b>"svinVarLimit"</b> field.
    class SvinVarLimit : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base = 
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
    
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgTmode3FieldsCommon::SvinVarLimitCommon::hasSpecials();
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::SvinVarLimitCommon::name();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }
    };
    
    /// @brief Definition of <b>"reserved3"</b> field.
    struct Reserved3 : public
        ublox::field::Res8<
            TOpt
        >
    {
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgTmode3FieldsCommon::Reserved3Common::name();
        }
        
    };
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        Flags,
        Ecef,
        Lla,
        Reserved2,
        FixedPosAcc,
        SvinMinDur,
        SvinVarLimit,
        Reserved3
    >;
};

/// @brief Definition of <b>"CFG-TMODE3"</b> message class.
/// @details
///     See @ref CfgTmode3Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile "ublox/message/CfgTmode3.h"
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class CfgTmode3 : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_CfgTmode3>,
        comms::option::def::FieldsImpl<typename CfgTmode3Fields<TOpt>::All>,
        comms::option::def::MsgType<CfgTmode3<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_CfgTmode3>,
            comms::option::def::FieldsImpl<typename CfgTmode3Fields<TOpt>::All>,
            comms::option::def::MsgType<CfgTmode3<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref CfgTmode3Fields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref CfgTmode3Fields::Reserved1 field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref CfgTmode3Fields::Flags field.
    ///     @li @b FieldIdx_ecef index, @b Field_ecef type and @b field_ecef() access fuction
    ///         for @ref CfgTmode3Fields::Ecef field.
    ///     @li @b FieldIdx_lla index, @b Field_lla type and @b field_lla() access fuction
    ///         for @ref CfgTmode3Fields::Lla field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref CfgTmode3Fields::Reserved2 field.
    ///     @li @b FieldIdx_fixedPosAcc index, @b Field_fixedPosAcc type and @b field_fixedPosAcc() access fuction
    ///         for @ref CfgTmode3Fields::FixedPosAcc field.
    ///     @li @b FieldIdx_svinMinDur index, @b Field_svinMinDur type and @b field_svinMinDur() access fuction
    ///         for @ref CfgTmode3Fields::SvinMinDur field.
    ///     @li @b FieldIdx_svinVarLimit index, @b Field_svinVarLimit type and @b field_svinVarLimit() access fuction
    ///         for @ref CfgTmode3Fields::SvinVarLimit field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref CfgTmode3Fields::Reserved3 field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        flags,
        ecef,
        lla,
        reserved2,
        fixedPosAcc,
        svinMinDur,
        svinVarLimit,
        reserved3
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 25U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 55U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::CfgTmode3Common::name();
    }
    
    /// @brief Custom read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = Base::template doReadUntilAndUpdateLen<FieldIdx_ecef>(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }
        
        refresh_optionals();
        
        return Base::template doReadFrom<FieldIdx_ecef>(iter, len);
    }
    
    /// @brief Custom refresh functionality.
    bool doRefresh()
    {
        bool updated = Base::doRefresh();
        updated = refresh_optionals() || updated;
        return updated;
    }
    
    
private:
    bool refresh_optionals()
    {
        bool updated = false;
        auto ecefMode = comms::field::OptionalMode::Exists;
        auto llaMode = comms::field::OptionalMode::Missing;    
        if (field_flags().field_bits().getBitValue_lla()) {
            std::swap(ecefMode, llaMode);
        }
        
        if (field_ecef().getMode() != ecefMode) {
            field_ecef().setMode(ecefMode);
            updated = true;
        }
        
        if (field_lla().getMode() != llaMode) {
            field_lla().setMode(llaMode);
            updated = true;
        }    
        
        return updated;
    }
        
    
};

} // namespace message

} // namespace ublox


