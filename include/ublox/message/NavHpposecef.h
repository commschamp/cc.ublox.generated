// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"NAV-HPPOSECEF"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/EcefHP.h"
#include "ublox/field/EcefX.h"
#include "ublox/field/EcefY.h"
#include "ublox/field/EcefZ.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Itow.h"
#include "ublox/field/Res3.h"
#include "ublox/message/NavHpposecefCommon.h"
#include "ublox/options/DefaultOptions.h"


namespace ublox
{

namespace message
{


/// @brief Fields of @ref NavHpposecef.
/// @tparam TOpt Extra options
/// @see @ref NavHpposecef
/// @headerfile ublox/message/NavHpposecef.h
template <typename TOpt = ublox::options::DefaultOptions>
struct NavHpposecefFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavHpposecefFieldsCommon::VersionCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavHpposecefFieldsCommon::VersionCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavHpposecefFieldsCommon::Reserved1Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        ublox::field::Itow<
            TOpt
        >;
    
    
    /// @brief Definition of <b>"ecefX"</b> field.
    using EcefX =
        ublox::field::EcefX<
            TOpt
        >;
    
    
    /// @brief Definition of <b>"ecefY"</b> field.
    using EcefY =
        ublox::field::EcefY<
            TOpt
        >;
    
    
    /// @brief Definition of <b>"ecefZ"</b> field.
    using EcefZ =
        ublox::field::EcefZ<
            TOpt
        >;
    
    
    /// @brief Definition of <b>"ecefXHp"</b> field.
    class EcefXHp : public
        ublox::field::EcefHP<
            TOpt
        >
    {
        using Base =
            ublox::field::EcefHP<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavHpposecefFieldsCommon::EcefXHpCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"ecefYHp"</b> field.
    class EcefYHp : public
        ublox::field::EcefHP<
            TOpt
        >
    {
        using Base =
            ublox::field::EcefHP<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavHpposecefFieldsCommon::EcefYHpCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"ecefZHp"</b> field.
    class EcefZHp : public
        ublox::field::EcefHP<
            TOpt
        >
    {
        using Base =
            ublox::field::EcefHP<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavHpposecefFieldsCommon::EcefZHpCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_invalidEcef, @b getBitValue_invalidEcef() and @b setBitValue_invalidEcef().
        COMMS_BITMASK_BITS_SEQ(
            invalidEcef
        );
        
        /// @brief Retrieve name of the bit.
        /// @see @ref ublox::message::NavHpposecefFieldsCommon::FlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                ublox::message::NavHpposecefFieldsCommon::FlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavHpposecefFieldsCommon::FlagsCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"pAcc"</b> field.
    class PAcc : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::NavHpposecefFieldsCommon::PAccCommon::hasSpecials();
        }
        
        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::NavHpposecefFieldsCommon::PAccCommon::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        Itow,
        EcefX,
        EcefY,
        EcefZ,
        EcefXHp,
        EcefYHp,
        EcefZHp,
        Flags,
        PAcc
    >;
};

/// @brief Definition of <b>"NAV-HPPOSECEF"</b> message class.
/// @details
///     See @ref NavHpposecefFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/NavHpposecef.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class NavHpposecef : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavHpposecef,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_NavHpposecef>,
        comms::option::def::FieldsImpl<typename NavHpposecefFields<TOpt>::All>,
        comms::option::def::MsgType<NavHpposecef<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavHpposecef,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_NavHpposecef>,
            comms::option::def::FieldsImpl<typename NavHpposecefFields<TOpt>::All>,
            comms::option::def::MsgType<NavHpposecef<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavHpposecefFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavHpposecefFields::Reserved1 field.
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavHpposecefFields::Itow field.
    ///     @li @b FieldIdx_ecefX index, @b Field_ecefX type and @b field_ecefX() access fuction
    ///         for @ref NavHpposecefFields::EcefX field.
    ///     @li @b FieldIdx_ecefY index, @b Field_ecefY type and @b field_ecefY() access fuction
    ///         for @ref NavHpposecefFields::EcefY field.
    ///     @li @b FieldIdx_ecefZ index, @b Field_ecefZ type and @b field_ecefZ() access fuction
    ///         for @ref NavHpposecefFields::EcefZ field.
    ///     @li @b FieldIdx_ecefXHp index, @b Field_ecefXHp type and @b field_ecefXHp() access fuction
    ///         for @ref NavHpposecefFields::EcefXHp field.
    ///     @li @b FieldIdx_ecefYHp index, @b Field_ecefYHp type and @b field_ecefYHp() access fuction
    ///         for @ref NavHpposecefFields::EcefYHp field.
    ///     @li @b FieldIdx_ecefZHp index, @b Field_ecefZHp type and @b field_ecefZHp() access fuction
    ///         for @ref NavHpposecefFields::EcefZHp field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref NavHpposecefFields::Flags field.
    ///     @li @b FieldIdx_pAcc index, @b Field_pAcc type and @b field_pAcc() access fuction
    ///         for @ref NavHpposecefFields::PAcc field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        itow,
        ecefX,
        ecefY,
        ecefZ,
        ecefXHp,
        ecefYHp,
        ecefZHp,
        flags,
        pAcc
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 28U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 28U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::NavHpposecefCommon::name();
    }
    

};

} // namespace message

} // namespace ublox


