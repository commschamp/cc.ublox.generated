// Generated by commsdsl2comms v3.7.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref ublox::message::CfgTxslot message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "ublox/field/Res1Common.h"

namespace ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref ublox::message::CfgTxslot message.
/// @see ublox::message::CfgTxslotFields
struct CfgTxslotFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref ublox::message::CfgTxslotFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     ublox::message::CfgTxslotFields::Version field.
        using ValueType = std::uint8_t;
    
        /// @brief Name of the @ref ublox::message::CfgTxslotFields::Version field.
        static const char* name()
        {
            return "version";
        }
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
        
    };
    
    /// @brief Common functions for
    ///     @ref ublox::message::CfgTxslotFields::Enable field.
    struct EnableCommon
    {
        /// @brief Name of the @ref ublox::message::CfgTxslotFields::Enable field.
        static const char* name()
        {
            return "enable";
        }
        
        /// @brief Retrieve name of the bit of
        ///     @ref ublox::message::CfgTxslotFields::Enable field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "DDC",
                "UART1",
                "UART2",
                "USB",
                "SPI"
            };
        
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }
        
            return Map[idx];
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::CfgTxslotFields::RefTp field.
    struct RefTpCommon
    {
        /// @brief Values enumerator for
        ///     @ref ublox::message::CfgTxslotFields::RefTp field.
        enum class ValueType : std::uint8_t
        {
            Timepulse = 0, ///< value @b Timepulse.
            Timepulse2 = 1, ///< value @b Timepulse2.
            
            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 1, ///< Last defined value.
            ValuesLimit = 2, ///< Upper limit for defined values.
            
        };
        
        /// @brief Single value name info entry
        using ValueNameInfo = const char*;
        
        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;
        
        /// @brief Name of the @ref ublox::message::CfgTxslotFields::RefTp field.
        static const char* name()
        {
            return "refTp";
        }
        
        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                return nullptr;
            }
            
            return namesMapInfo.first[static_cast<std::size_t>(val)];
        }
        
        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const char* Map[] = {
                "Timepulse",
                "Timepulse2"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            
            return std::make_pair(&Map[0], MapSize);
        }
        
    };
    
    /// @brief Values enumerator for
    ///     @ref ublox::message::CfgTxslotFields::RefTp field.
    using RefTpVal = RefTpCommon::ValueType;
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::CfgTxslotFields::Reserved1 field.
    struct Reserved1Common : public ublox::field::Res1Common
    {
        /// @brief Name of the @ref ublox::message::CfgTxslotFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
        
    };
    
    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref ublox::message::CfgTxslotFields::End list.
    struct EndMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref ublox::message::CfgTxslotFields::EndMembers::Element field.
        struct ElementCommon
        {
            /// @brief Re-definition of the value type used by
            ///     ublox::message::CfgTxslotFields::EndMembers::Element field.
            using ValueType = std::uint32_t;
        
            /// @brief Name of the @ref ublox::message::CfgTxslotFields::EndMembers::Element field.
            static const char* name()
            {
                return "";
            }
            
            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
            
        };
        
    };
    
    /// @brief Scope for all the common definitions of the
    ///     @ref ublox::message::CfgTxslotFields::End field.
    struct EndCommon
    {
        /// @brief Name of the @ref ublox::message::CfgTxslotFields::End field.
        static const char* name()
        {
            return "end";
        }
        
    };
    
    
};

/// @brief Common types and functions of 
///     @ref ublox::message::CfgTxslot message.
/// @see ublox::message::CfgTxslot
struct CfgTxslotCommon
{
    /// @brief Name of the @ref ublox::message::CfgTxslot message.
    static const char* name()
    {
        return "CFG-TXSLOT";
    }
    
};

} // namespace message

} // namespace ublox


