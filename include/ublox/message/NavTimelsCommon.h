// Generated by commsdsl2comms v3.6.4

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref ublox::message::NavTimels message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <type_traits>
#include <utility>
#include "ublox/field/ItowCommon.h"
#include "ublox/field/Res3Common.h"

namespace ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref ublox::message::NavTimels message.
/// @see ublox::message::NavTimelsFields
struct NavTimelsFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::Itow field.
    using ItowCommon = ublox::field::ItowCommon;
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     ublox::message::NavTimelsFields::Version field.
        using ValueType = std::uint8_t;
    
        /// @brief Name of the @ref ublox::message::NavTimelsFields::Version field.
        static const char* name()
        {
            return "version";
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::Reserved1 field.
    struct Reserved1Common : public ublox::field::Res3Common
    {
        /// @brief Name of the @ref ublox::message::NavTimelsFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::SrcOfCurrLs field.
    struct SrcOfCurrLsCommon
    {
        /// @brief Values enumerator for
        ///     @ref ublox::message::NavTimelsFields::SrcOfCurrLs field.
        enum class ValueType : std::uint8_t
        {
            Default = 0, ///< value @b Default.
            Derived = 1, ///< value @b Derived.
            GPS = 2, ///< value @b GPS.
            SBAS = 3, ///< value @b SBAS.
            BeiDou = 4, ///< value @b BeiDou.
            Galileo = 5, ///< value @b Galileo.
            AidedData = 6, ///< value <b>Aided data</b>.
            Configured = 7, ///< value @b Configured.
            Unknown = 255, ///< value @b Unknown.
            
            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 255, ///< Last defined value.
            
        };
        
        /// @brief Name of the @ref ublox::message::NavTimelsFields::SrcOfCurrLs field.
        static const char* name()
        {
            return "srcOfCurrLs";
        }
        
        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            using NameInfo = std::pair<ValueType, const char*>;
            static const NameInfo Map[] = {
                std::make_pair(ValueType::Default, "Default"),
                std::make_pair(ValueType::Derived, "Derived"),
                std::make_pair(ValueType::GPS, "GPS"),
                std::make_pair(ValueType::SBAS, "SBAS"),
                std::make_pair(ValueType::BeiDou, "BeiDou"),
                std::make_pair(ValueType::Galileo, "Galileo"),
                std::make_pair(ValueType::AidedData, "Aided data"),
                std::make_pair(ValueType::Configured, "Configured"),
                std::make_pair(ValueType::Unknown, "Unknown")
            };
            
            auto iter = std::lower_bound(
                std::begin(Map), std::end(Map), val,
                [](const NameInfo& info, ValueType v) -> bool
                {
                    return info.first < v;
                });
            
            if ((iter == std::end(Map)) || (iter->first != val)) {
                return nullptr;
            }
            
            return iter->second;
        }
        
    };
    
    /// @brief Values enumerator for
    ///     @ref ublox::message::NavTimelsFields::SrcOfCurrLs field.
    using SrcOfCurrLsVal = SrcOfCurrLsCommon::ValueType;
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::CurrLs field.
    struct CurrLsCommon
    {
        /// @brief Re-definition of the value type used by
        ///     ublox::message::NavTimelsFields::CurrLs field.
        using ValueType = std::int8_t;
    
        /// @brief Name of the @ref ublox::message::NavTimelsFields::CurrLs field.
        static const char* name()
        {
            return "currLs";
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::SrcOfLsChange field.
    struct SrcOfLsChangeCommon
    {
        /// @brief Values enumerator for
        ///     @ref ublox::message::NavTimelsFields::SrcOfLsChange field.
        enum class ValueType : std::uint8_t
        {
            NoSource = 0, ///< value <b>No source</b>.
            GPS = 2, ///< value @b GPS.
            SBAS = 3, ///< value @b SBAS.
            BeiDou = 4, ///< value @b BeiDou.
            Galileo = 5, ///< value @b Galileo.
            GLONASS = 6, ///< value @b GLONASS.
            
            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 6, ///< Last defined value.
            ValuesLimit = 7, ///< Upper limit for defined values.
            
        };
        
        /// @brief Name of the @ref ublox::message::NavTimelsFields::SrcOfLsChange field.
        static const char* name()
        {
            return "srcOfLsChange";
        }
        
        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            static const char* Map[] = {
                "No source",
                nullptr,
                "GPS",
                "SBAS",
                "BeiDou",
                "Galileo",
                "GLONASS"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            
            if (MapSize <= static_cast<std::size_t>(val)) {
                return nullptr;
            }
            
            return Map[static_cast<std::size_t>(val)];
        }
        
    };
    
    /// @brief Values enumerator for
    ///     @ref ublox::message::NavTimelsFields::SrcOfLsChange field.
    using SrcOfLsChangeVal = SrcOfLsChangeCommon::ValueType;
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::LsChange field.
    struct LsChangeCommon
    {
        /// @brief Re-definition of the value type used by
        ///     ublox::message::NavTimelsFields::LsChange field.
        using ValueType = std::int8_t;
    
        /// @brief Name of the @ref ublox::message::NavTimelsFields::LsChange field.
        static const char* name()
        {
            return "lsChange";
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::TimeToLsEvent field.
    struct TimeToLsEventCommon
    {
        /// @brief Re-definition of the value type used by
        ///     ublox::message::NavTimelsFields::TimeToLsEvent field.
        using ValueType = std::int32_t;
    
        /// @brief Name of the @ref ublox::message::NavTimelsFields::TimeToLsEvent field.
        static const char* name()
        {
            return "timeToLsEvent";
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::DateOfLsGpsWn field.
    struct DateOfLsGpsWnCommon
    {
        /// @brief Re-definition of the value type used by
        ///     ublox::message::NavTimelsFields::DateOfLsGpsWn field.
        using ValueType = std::uint16_t;
    
        /// @brief Name of the @ref ublox::message::NavTimelsFields::DateOfLsGpsWn field.
        static const char* name()
        {
            return "dateOfLsGpsWn";
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::DateOfLsGpsDn field.
    struct DateOfLsGpsDnCommon
    {
        /// @brief Re-definition of the value type used by
        ///     ublox::message::NavTimelsFields::DateOfLsGpsDn field.
        using ValueType = std::uint16_t;
    
        /// @brief Name of the @ref ublox::message::NavTimelsFields::DateOfLsGpsDn field.
        static const char* name()
        {
            return "dateOfLsGpsDn";
        }
        
    };
    
    /// @brief Common types and functions for
    ///     @ref ublox::message::NavTimelsFields::Reserved2 field.
    struct Reserved2Common : public ublox::field::Res3Common
    {
        /// @brief Name of the @ref ublox::message::NavTimelsFields::Reserved2 field.
        static const char* name()
        {
            return "reserved2";
        }
        
    };
    
    /// @brief Common functions for
    ///     @ref ublox::message::NavTimelsFields::Valid field.
    struct ValidCommon
    {
        /// @brief Name of the @ref ublox::message::NavTimelsFields::Valid field.
        static const char* name()
        {
            return "valid";
        }
        
        /// @brief Retrieve name of the bit of
        ///     @ref ublox::message::NavTimelsFields::Valid field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "validCurrLs",
                "validTimeToLsEvent"
            };
        
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }
        
            return Map[idx];
        }
        
    };
    
};

/// @brief Common types and functions of 
///     @ref ublox::message::NavTimels message.
/// @see ublox::message::NavTimels
struct NavTimelsCommon
{
    /// @brief Name of the @ref ublox::message::NavTimels message.
    static const char* name()
    {
        return "NAV-TIMELS";
    }
    
};

} // namespace message

} // namespace ublox


