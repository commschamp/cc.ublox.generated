// Generated by commsdsl2comms v4.0.0

/// @file
/// @brief Contains definition of <b>"CFG-PM"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "ublox/MsgId.h"
#include "ublox/field/FieldBase.h"
#include "ublox/field/Res1.h"
#include "ublox/message/CfgPmCommon.h"
#include "ublox/options/DefaultOptions.h"


namespace ublox
{

namespace message
{


/// @brief Fields of @ref CfgPm.
/// @tparam TOpt Extra options
/// @see @ref CfgPm
/// @headerfile ublox/message/CfgPm.h
template <typename TOpt = ublox::options::DefaultOptions>
struct CfgPmFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgPmFieldsCommon::VersionCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::VersionCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"res1"</b> field.
    using Res1 =
        ublox::field::Res1<
            TOpt
        >;
    
    
    /// @brief Definition of <b>"res2"</b> field.
    class Res2 : public
        ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::Res2Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"res3"</b> field.
    class Res3 : public
        ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::Res3Common::name();
        }
        
    
    };
    
    
    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>"res1"</b> field.
        /// @details
        ///     Reserved field with 1 byte length
        class Res1 : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValue<0>
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValue<0>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;
            
            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::Res1Common::hasSpecials();
            }
            
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::Res1Common::name();
            }
            
        
        };
        
        
        /// @brief Definition of <b>"internal"</b> field.
        class Internal : public
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>
            >
        {
            using Base =
                comms::field::IntValue<
                    ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::DefaultNumValue<1>,
                    comms::option::def::ValidNumValue<1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;
            
            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::InternalCommon::hasSpecials();
            }
            
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::InternalCommon::name();
            }
            
        
        };
        
        
        /// @brief Definition of <b>"bitsMid"</b> field.
        class BitsMid : public
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<4U>,
                comms::option::def::BitmaskReservedBits<0x8U, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<4U>,
                    comms::option::def::BitmaskReservedBits<0x8U, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_extintSelect, @b getBitValue_extintSelect() and @b setBitValue_extintSelect().
            ///      @li @b BitIdx_extintWake, @b getBitValue_extintWake() and @b setBitValue_extintWake().
            ///      @li @b BitIdx_extintBackup, @b getBitValue_extintBackup() and @b setBitValue_extintBackup().
            COMMS_BITMASK_BITS_SEQ(
                extintSelect,
                extintWake,
                extintBackup
            );
            
            /// @brief Retrieve name of the bit.
            /// @see @ref ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::BitsMidCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::BitsMidCommon::bitName(
                        static_cast<std::size_t>(idx));
            }
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::BitsMidCommon::name();
            }
            
        
        };
        
        
        /// @brief Definition of <b>"limitPeakCurr"</b> field.
        /// @see @ref ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::ValueType
        class LimitPeakCurr : public
            comms::field::EnumValue<
                ublox::field::FieldBase<>,
                ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 1>
            >
        {
            using Base =
                comms::field::EnumValue<
                    ublox::field::FieldBase<>,
                    ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 1>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;
            
            /// @brief Single value name info entry.
            using ValueNameInfo = ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::ValueNameInfo;
            
            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::ValueNamesMapInfo;
            
            /// @brief Retrieve name of the enum value.
            /// @see @ref ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::valueName(val);
            }
            
            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::value());
            }
            
            /// @brief Retrieve map of enum value names.
            /// @see @ref ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::valueNamesMap();
            }
            
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::LimitPeakCurrCommon::name();
            }
            
        
        };
        
        
        /// @brief Definition of <b>"bitsHigh"</b> field.
        class BitsHigh : public
            comms::field::BitmaskValue<
                ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<22U>,
                comms::option::def::BitmaskReservedBits<0x3FFFF8UL, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<22U>,
                    comms::option::def::BitmaskReservedBits<0x3FFFF8UL, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_WaitTimeFix, @b getBitValue_WaitTimeFix() and @b setBitValue_WaitTimeFix().
            ///      @li @b BitIdx_updateRTC, @b getBitValue_updateRTC() and @b setBitValue_updateRTC().
            ///      @li @b BitIdx_updateEPH, @b getBitValue_updateEPH() and @b setBitValue_updateEPH().
            COMMS_BITMASK_BITS_SEQ(
                WaitTimeFix,
                updateRTC,
                updateEPH
            );
            
            /// @brief Retrieve name of the bit.
            /// @see @ref ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::BitsHighCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::BitsHighCommon::bitName(
                        static_cast<std::size_t>(idx));
            }
            
            /// @brief Name of the field.
            static const char* name()
            {
                return ublox::message::CfgPmFieldsCommon::FlagsMembersCommon::BitsHighCommon::name();
            }
            
        
        };
        
        
        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Res1,
               Internal,
               BitsMid,
               LimitPeakCurr,
               BitsHigh
            >;
    };
    
    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            ublox::field::FieldBase<>,
            typename FlagsMembers::All
        >
    {
        using Base =
            comms::field::Bitfield<
                ublox::field::FieldBase<>,
                typename FlagsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_res1 index, @b Field_res1 type and @b field_res1() access function -
        ///         for ublox::message::CfgPmFields::FlagsMembers::Res1 member field.
        ///     @li @b FieldIdx_internal index, @b Field_internal type and @b field_internal() access function -
        ///         for ublox::message::CfgPmFields::FlagsMembers::Internal member field.
        ///     @li @b FieldIdx_bitsMid index, @b Field_bitsMid type and @b field_bitsMid() access function -
        ///         for ublox::message::CfgPmFields::FlagsMembers::BitsMid member field.
        ///     @li @b FieldIdx_limitPeakCurr index, @b Field_limitPeakCurr type and @b field_limitPeakCurr() access function -
        ///         for ublox::message::CfgPmFields::FlagsMembers::LimitPeakCurr member field.
        ///     @li @b FieldIdx_bitsHigh index, @b Field_bitsHigh type and @b field_bitsHigh() access function -
        ///         for ublox::message::CfgPmFields::FlagsMembers::BitsHigh member field.
        COMMS_FIELD_MEMBERS_NAMES(
            res1,
            internal,
            bitsMid,
            limitPeakCurr,
            bitsHigh
        );
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::FlagsCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"updatePeriod"</b> field.
    class UpdatePeriod : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgPmFieldsCommon::UpdatePeriodCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::UpdatePeriodCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"searchPeriod"</b> field.
    class SearchPeriod : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgPmFieldsCommon::SearchPeriodCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::SearchPeriodCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"gridOffset"</b> field.
    class GridOffset : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgPmFieldsCommon::GridOffsetCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::GridOffsetCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"onTime"</b> field.
    class OnTime : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgPmFieldsCommon::OnTimeCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::OnTimeCommon::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"minAcqTime"</b> field.
    class MinAcqTime : public
        comms::field::IntValue<
            ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return ublox::message::CfgPmFieldsCommon::MinAcqTimeCommon::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return ublox::message::CfgPmFieldsCommon::MinAcqTimeCommon::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Res1,
        Res2,
        Res3,
        Flags,
        UpdatePeriod,
        SearchPeriod,
        GridOffset,
        OnTime,
        MinAcqTime
    >;
};

/// @brief Definition of <b>"CFG-PM"</b> message class.
/// @details
///     See @ref CfgPmFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile ublox/message/CfgPm.h
template <typename TMsgBase, typename TOpt = ublox::options::DefaultOptions>
class CfgPm : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<ublox::MsgId_CfgPm>,
        comms::option::def::FieldsImpl<typename CfgPmFields<TOpt>::All>,
        comms::option::def::MsgType<CfgPm<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<ublox::MsgId_CfgPm>,
            comms::option::def::FieldsImpl<typename CfgPmFields<TOpt>::All>,
            comms::option::def::MsgType<CfgPm<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref CfgPmFields::Version field.
    ///     @li @b FieldIdx_res1 index, @b Field_res1 type and @b field_res1() access fuction
    ///         for @ref CfgPmFields::Res1 field.
    ///     @li @b FieldIdx_res2 index, @b Field_res2 type and @b field_res2() access fuction
    ///         for @ref CfgPmFields::Res2 field.
    ///     @li @b FieldIdx_res3 index, @b Field_res3 type and @b field_res3() access fuction
    ///         for @ref CfgPmFields::Res3 field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref CfgPmFields::Flags field.
    ///     @li @b FieldIdx_updatePeriod index, @b Field_updatePeriod type and @b field_updatePeriod() access fuction
    ///         for @ref CfgPmFields::UpdatePeriod field.
    ///     @li @b FieldIdx_searchPeriod index, @b Field_searchPeriod type and @b field_searchPeriod() access fuction
    ///         for @ref CfgPmFields::SearchPeriod field.
    ///     @li @b FieldIdx_gridOffset index, @b Field_gridOffset type and @b field_gridOffset() access fuction
    ///         for @ref CfgPmFields::GridOffset field.
    ///     @li @b FieldIdx_onTime index, @b Field_onTime type and @b field_onTime() access fuction
    ///         for @ref CfgPmFields::OnTime field.
    ///     @li @b FieldIdx_minAcqTime index, @b Field_minAcqTime type and @b field_minAcqTime() access fuction
    ///         for @ref CfgPmFields::MinAcqTime field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        res1,
        res2,
        res3,
        flags,
        updatePeriod,
        searchPeriod,
        gridOffset,
        onTime,
        minAcqTime
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 24U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 24U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return ublox::message::CfgPmCommon::name();
    }
    

};

} // namespace message

} // namespace ublox


