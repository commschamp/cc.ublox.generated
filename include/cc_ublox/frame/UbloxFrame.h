// Generated by commsdsl2comms v6.2.1

/// @file
/// @brief Contains definition of <b>"UbloxFrame"</b> frame class.

#pragma once

#include <cstdint>
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/MsgId.h"
#include "cc_ublox/frame/UbloxFrameCommon.h"
#include "cc_ublox/frame/checksum/UbloxChecksum.h"
#include "cc_ublox/input/AllMessages.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "comms/protocol/ChecksumLayer.h"
#include "comms/protocol/MsgDataLayer.h"
#include "comms/protocol/MsgIdLayer.h"
#include "comms/protocol/MsgSizeLayer.h"
#include "comms/protocol/SyncPrefixLayer.h"

namespace cc_ublox
{

namespace frame
{

/// @brief Layers definition of @ref UbloxFrame frame class.
/// @tparam TOpt Protocol options.
/// @see @ref UbloxFrame
/// @headerfile cc_ublox/frame/UbloxFrame.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct UbloxFrameLayers
{
    /// @brief Definition of layer "Payload".
    using Payload =
        comms::protocol::MsgDataLayer<
            typename TOpt::frame::UbloxFrameLayers::Payload
        >;

    /// @brief Scope for field(s) of @ref Length layer.
    struct LengthMembers
    {
        /// @brief Definition of <b>"LENGTH"</b> field.
        class LENGTH : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::frame::UbloxFrameLayersCommon::LengthMembersCommon::LENGTHCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::frame::UbloxFrameLayersCommon::LengthMembersCommon::LENGTHCommon::name();
            }
        };
    };

    /// @brief Definition of layer "Length".
    using Length =
        comms::protocol::MsgSizeLayer<
            typename LengthMembers::LENGTH,
            Payload
        >;

    /// @brief Scope for field(s) of @ref Id layer.
    struct IdMembers
    {
        /// @brief Definition of <b>"CLASS + ID"</b> field.
        class MsgId : public
            cc_ublox::field::MsgId<
                TOpt
            >
        {
            using Base =
                cc_ublox::field::MsgId<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::frame::UbloxFrameLayersCommon::IdMembersCommon::MsgIdCommon::name();
            }
        };
    };

    /// @brief Definition of layer "Id".
    template <typename TMessage, typename TAllMessages>
    using Id =
        comms::protocol::MsgIdLayer<
            typename IdMembers::MsgId,
            TMessage,
            TAllMessages,
            Length,
            typename TOpt::frame::UbloxFrameLayers::Id
        >;

    /// @brief Scope for field(s) of @ref Checksum layer.
    struct ChecksumMembers
    {
        /// @brief Definition of <b>"CK"</b> field.
        class Checksum : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::frame::UbloxFrameLayersCommon::ChecksumMembersCommon::ChecksumCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::frame::UbloxFrameLayersCommon::ChecksumMembersCommon::ChecksumCommon::name();
            }
        };
    };

    /// @brief Definition of layer "Checksum".
    template <typename TMessage, typename TAllMessages>
    using Checksum =
        comms::protocol::ChecksumLayer<
            typename ChecksumMembers::Checksum,
            cc_ublox::frame::checksum::UbloxChecksum,
            Id<TMessage, TAllMessages>
        >;

    /// @brief Scope for field(s) of @ref Sync layer.
    struct SyncMembers
    {
        /// @brief Definition of <b>"SYNC"</b> field.
        class Sync : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::FailOnInvalid<comms::ErrorStatus::ProtocolError>,
                comms::option::def::DefaultNumValue<25269>,
                comms::option::def::ValidNumValue<25269>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::FailOnInvalid<comms::ErrorStatus::ProtocolError>,
                    comms::option::def::DefaultNumValue<25269>,
                    comms::option::def::ValidNumValue<25269>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::frame::UbloxFrameLayersCommon::SyncMembersCommon::SyncCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::frame::UbloxFrameLayersCommon::SyncMembersCommon::SyncCommon::name();
            }
        };
    };

    /// @brief Definition of layer "Sync".
    template <typename TMessage, typename TAllMessages>
    using Sync =
        comms::protocol::SyncPrefixLayer<
            typename SyncMembers::Sync,
            Checksum<TMessage, TAllMessages>
        >;

    /// @brief Final protocol stack definition.
    template<typename TMessage, typename TAllMessages>
    using Stack = Sync<TMessage, TAllMessages>;
};

/// @brief Definition of <b>"UbloxFrame"</b> frame class.
/// @tparam TMessage Common interface class of all the messages
/// @tparam TAllMessages All supported input messages.
/// @tparam TOpt Frame definition options
/// @headerfile cc_ublox/frame/UbloxFrame.h
template <
   typename TMessage,
   typename TAllMessages = cc_ublox::input::AllMessages<TMessage>,
   typename TOpt = cc_ublox::options::DefaultOptions
>
class UbloxFrame : public
    UbloxFrameLayers<TOpt>::template Stack<TMessage, TAllMessages>
{
    using Base = typename
        UbloxFrameLayers<TOpt>::template Stack<TMessage, TAllMessages>;
public:
    /// @brief Allow access to frame definition layers.
    /// @details See definition of @b COMMS_PROTOCOL_LAYERS_NAMES macro
    ///     from COMMS library for details.
    ///
    ///     The generated types and functions are:
    ///     @li @b Layer_payload type and @b layer_payload() function
    ///         for @ref UbloxFrameLayers::Payload layer.
    ///     @li @b Layer_length type and @b layer_length() function
    ///         for @ref UbloxFrameLayers::Length layer.
    ///     @li @b Layer_id type and @b layer_id() function
    ///         for @ref UbloxFrameLayers::Id layer.
    ///     @li @b Layer_checksum type and @b layer_checksum() function
    ///         for @ref UbloxFrameLayers::Checksum layer.
    ///     @li @b Layer_sync type and @b layer_sync() function
    ///         for @ref UbloxFrameLayers::Sync layer.
    COMMS_PROTOCOL_LAYERS_NAMES(
        payload,
        length,
        id,
        checksum,
        sync
    );
};

} // namespace frame

} // namespace cc_ublox
