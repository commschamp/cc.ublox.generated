// Generated by commsdsl2comms v6.2.1

/// @file
/// @brief Contains definition of <b>"AID-AOP"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/AidAopCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/field/Optional.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref AidAop.
/// @tparam TOpt Extra options
/// @see @ref AidAop
/// @headerfile cc_ublox/message/AidAop.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct AidAopFields
{
    /// @brief Definition of <b>"svid"</b> field.
    class Svid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAopFieldsCommon::SvidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAopFieldsCommon::SvidCommon::name();
        }
    };

    /// @brief Definition of <b>"data"</b> field.
    class Data : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::AidAopFields::Data,
            comms::option::def::SequenceFixedSize<59U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::AidAopFields::Data,
                comms::option::def::SequenceFixedSize<59U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAopFieldsCommon::DataCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Optionals field.
    struct OptionalsMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref OptionalsWrap field.
        struct OptionalsWrapMembers
        {
            /// @brief Definition of <b>"optional0"</b> field.
            class Optional0 : public
                comms::field::ArrayList<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    typename TOpt::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional0,
                    comms::option::def::SequenceFixedSize<48U>
                >
            {
                using Base =
                    comms::field::ArrayList<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        typename TOpt::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional0,
                        comms::option::def::SequenceFixedSize<48U>
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidAopFieldsCommon::OptionalsMembersCommon::OptionalsWrapMembersCommon::Optional0Common::name();
                }
            };

            /// @brief Definition of <b>"optional1"</b> field.
            class Optional1 : public
                comms::field::ArrayList<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    typename TOpt::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional1,
                    comms::option::def::SequenceFixedSize<48U>
                >
            {
                using Base =
                    comms::field::ArrayList<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        typename TOpt::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional1,
                        comms::option::def::SequenceFixedSize<48U>
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidAopFieldsCommon::OptionalsMembersCommon::OptionalsWrapMembersCommon::Optional1Common::name();
                }
            };

            /// @brief Definition of <b>"optional2"</b> field.
            class Optional2 : public
                comms::field::ArrayList<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    typename TOpt::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional2,
                    comms::option::def::SequenceFixedSize<48U>
                >
            {
                using Base =
                    comms::field::ArrayList<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        typename TOpt::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional2,
                        comms::option::def::SequenceFixedSize<48U>
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidAopFieldsCommon::OptionalsMembersCommon::OptionalsWrapMembersCommon::Optional2Common::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Optional0,
                   Optional1,
                   Optional2
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class OptionalsWrap : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename OptionalsWrapMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename OptionalsWrapMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_optional0 index, @b Field_optional0 type and @b field_optional0() access function -
            ///         for cc_ublox::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional0 member field.
            ///     @li @b FieldIdx_optional1 index, @b Field_optional1 type and @b field_optional1() access function -
            ///         for cc_ublox::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional1 member field.
            ///     @li @b FieldIdx_optional2 index, @b Field_optional2 type and @b field_optional2() access function -
            ///         for cc_ublox::message::AidAopFields::OptionalsMembers::OptionalsWrapMembers::Optional2 member field.
            COMMS_FIELD_MEMBERS_NAMES(
                optional0,
                optional1,
                optional2
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidAopFieldsCommon::OptionalsMembersCommon::OptionalsWrapCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"optionals"</b> field.
    class Optionals : public
        comms::field::Optional<
            typename OptionalsMembers::OptionalsWrap
        >
    {
        using Base =
            comms::field::Optional<
                typename OptionalsMembers::OptionalsWrap
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAopFieldsCommon::OptionalsCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Svid,
        Data,
        Optionals
    >;
};

/// @brief Definition of <b>"AID-AOP"</b> message class.
/// @details
///     See @ref AidAopFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/AidAop.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class AidAop : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAop>,
        comms::option::def::FieldsImpl<typename AidAopFields<TOpt>::All>,
        comms::option::def::MsgType<AidAop<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAop>,
            comms::option::def::FieldsImpl<typename AidAopFields<TOpt>::All>,
            comms::option::def::MsgType<AidAop<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access fuction
    ///         for @ref AidAopFields::Svid field.
    ///     @li @b FieldIdx_data index, @b Field_data type and @b field_data() access fuction
    ///         for @ref AidAopFields::Data field.
    ///     @li @b FieldIdx_optionals index, @b Field_optionals type and @b field_optionals() access fuction
    ///         for @ref AidAopFields::Optionals field.
    COMMS_MSG_FIELDS_NAMES(
        svid,
        data,
        optionals
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 60U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 204U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::AidAopCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
