// Generated by commsdsl2comms v6.2.1

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::HnrPvt message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include "cc_ublox/field/DayCommon.h"
#include "cc_ublox/field/GpsFixCommon.h"
#include "cc_ublox/field/HAccCommon.h"
#include "cc_ublox/field/HMSLCommon.h"
#include "cc_ublox/field/HeadingAccCommon.h"
#include "cc_ublox/field/HeadingCommon.h"
#include "cc_ublox/field/HeightCommon.h"
#include "cc_ublox/field/HourCommon.h"
#include "cc_ublox/field/ItowCommon.h"
#include "cc_ublox/field/LatCommon.h"
#include "cc_ublox/field/LonCommon.h"
#include "cc_ublox/field/MinCommon.h"
#include "cc_ublox/field/MonthCommon.h"
#include "cc_ublox/field/Res2Common.h"
#include "cc_ublox/field/Res4Common.h"
#include "cc_ublox/field/SecCommon.h"
#include "cc_ublox/field/VAccCommon.h"
#include "cc_ublox/field/YearCommon.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::HnrPvt message.
/// @see cc_ublox::message::HnrPvtFields
struct HnrPvtFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Itow field.
    using ItowCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Year field.
    using YearCommon = cc_ublox::field::YearCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Month field.
    using MonthCommon = cc_ublox::field::MonthCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Day field.
    using DayCommon = cc_ublox::field::DayCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Hour field.
    using HourCommon = cc_ublox::field::HourCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Min field.
    using MinCommon = cc_ublox::field::MinCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Sec field.
    using SecCommon = cc_ublox::field::SecCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Valid field.
    struct ValidCommon
    {
        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::Valid field.
        static const char* name()
        {
            return "valid";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::HnrPvtFields::Valid field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "validDate",
                "validTime",
                "fullyResolved"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Nano field.
    struct NanoCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::HnrPvtFields::Nano field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::Nano field.
        static const char* name()
        {
            return "nano";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::FixType field.
    struct FixTypeCommon : public cc_ublox::field::GpsFixCommon
    {
        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::FixType field.
        static const char* name()
        {
            return "fixType";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::Flags field.
        static const char* name()
        {
            return "flags";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::HnrPvtFields::Flags field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "GPSfixOK",
                "DiffSoln",
                "WKNSET",
                "TOWSET",
                "headVehValid"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res2Common
    {
        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Lon field.
    using LonCommon = cc_ublox::field::LonCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Lat field.
    using LatCommon = cc_ublox::field::LatCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Height field.
    using HeightCommon = cc_ublox::field::HeightCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::HMSL field.
    using HMSLCommon = cc_ublox::field::HMSLCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::GSpeed field.
    struct GSpeedCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::HnrPvtFields::GSpeed field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::GSpeed field.
        static const char* name()
        {
            return "gSpeed";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Speed field.
    struct SpeedCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::HnrPvtFields::Speed field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::Speed field.
        static const char* name()
        {
            return "speed";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::HeadMot field.
    struct HeadMotCommon : public cc_ublox::field::HeadingCommon
    {
        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::HeadMot field.
        static const char* name()
        {
            return "headMot";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::HeadVeh field.
    struct HeadVehCommon : public cc_ublox::field::HeadingCommon
    {
        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::HeadVeh field.
        static const char* name()
        {
            return "headVeh";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::HAcc field.
    using HAccCommon = cc_ublox::field::HAccCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::VAcc field.
    using VAccCommon = cc_ublox::field::VAccCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::SAcc field.
    struct SAccCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::HnrPvtFields::SAcc field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::SAcc field.
        static const char* name()
        {
            return "sAcc";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::HeadAcc field.
    struct HeadAccCommon : public cc_ublox::field::HeadingAccCommon
    {
        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::HeadAcc field.
        static const char* name()
        {
            return "headAcc";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::HnrPvtFields::Reserved2 field.
    struct Reserved2Common : public cc_ublox::field::Res4Common
    {
        /// @brief Name of the @ref cc_ublox::message::HnrPvtFields::Reserved2 field.
        static const char* name()
        {
            return "reserved2";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::HnrPvt message.
struct HnrPvtCommon
{
    /// @brief Name of the @ref cc_ublox::message::HnrPvt message.
    static const char* name()
    {
        return "HNR-PVT";
    }
};

} // namespace message

} // namespace cc_ublox
