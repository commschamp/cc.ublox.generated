// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains definition of <b>"MGA-BDS-EPH"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/message/MgaBdsEphCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MgaBdsEph.
/// @tparam TOpt Extra options
/// @see @ref MgaBdsEph
/// @headerfile cc_ublox/message/MgaBdsEph.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MgaBdsEphFields
{
    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::TypeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::TypeCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(1);
            return true;
        }
    };

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"svid"</b> field.
    class Svid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::SvidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::SvidCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"SatH1"</b> field.
    class SatH1 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::SatH1Common::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::SatH1Common::name();
        }
    };

    /// @brief Definition of <b>"IODC"</b> field.
    class IODC : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::IODCCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::IODCCommon::name();
        }
    };

    /// @brief Definition of <b>"a2"</b> field.
    class A2 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::A2Common::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::A2Common::name();
        }
    };

    /// @brief Definition of <b>"a1"</b> field.
    class A1 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x4000000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x4000000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::A1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::A1Common::name();
        }
    };

    /// @brief Definition of <b>"a0"</b> field.
    class A0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x200000000LL>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x200000000LL>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::A0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::A0Common::name();
        }
    };

    /// @brief Definition of <b>"toc"</b> field.
    class Toc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<8, 1>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<8, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::TocCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::TocCommon::name();
        }
    };

    /// @brief Definition of <b>"TGD1"</b> field.
    class TGD1 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::TGD1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::TGD1Common::name();
        }
    };

    /// @brief Definition of <b>"URAI"</b> field.
    class URAI : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::URAICommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::URAICommon::name();
        }
    };

    /// @brief Definition of <b>"IODE"</b> field.
    class IODE : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::IODECommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::IODECommon::name();
        }
    };

    /// @brief Definition of <b>"toe"</b> field.
    class Toe : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<8, 1>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<8, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::ToeCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::ToeCommon::name();
        }
    };

    /// @brief Definition of <b>"sqrtA"</b> field.
    class SqrtA : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 524288L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 524288L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::SqrtACommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::SqrtACommon::name();
        }
    };

    /// @brief Definition of <b>"e"</b> field.
    class E : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 0x200000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 0x200000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::ECommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::ECommon::name();
        }
    };

    /// @brief Definition of <b>"omega"</b> field.
    class Omega : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::OmegaCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::OmegaCommon::name();
        }
    };

    /// @brief Definition of <b>"Deltan"</b> field.
    class Deltan : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 0x80000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 0x80000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::DeltanCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::DeltanCommon::name();
        }
    };

    /// @brief Definition of <b>"IDOT"</b> field.
    class IDOT : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 0x80000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 0x80000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::IDOTCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::IDOTCommon::name();
        }
    };

    /// @brief Definition of <b>"M0"</b> field.
    class M0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::M0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::M0Common::name();
        }
    };

    /// @brief Definition of <b>"Omega0"</b> field.
    class Omega0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::Omega0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::Omega0Common::name();
        }
    };

    /// @brief Definition of <b>"OmegaDot"</b> field.
    class OmegaDot : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::OmegaDotCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::OmegaDotCommon::name();
        }
    };

    /// @brief Definition of <b>"i0"</b> field.
    class I0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::I0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::I0Common::name();
        }
    };

    /// @brief Definition of <b>"Cuc"</b> field.
    class Cuc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CucCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CucCommon::name();
        }
    };

    /// @brief Definition of <b>"Cus"</b> field.
    class Cus : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CusCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CusCommon::name();
        }
    };

    /// @brief Definition of <b>"Crc"</b> field.
    class Crc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 64>,
            comms::option::def::UnitsMeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 64>,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CrcCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CrcCommon::name();
        }
    };

    /// @brief Definition of <b>"Crs"</b> field.
    class Crs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 64>,
            comms::option::def::UnitsMeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 64>,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CrsCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CrsCommon::name();
        }
    };

    /// @brief Definition of <b>"Cic"</b> field.
    class Cic : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CicCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CicCommon::name();
        }
    };

    /// @brief Definition of <b>"Cis"</b> field.
    class Cis : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CisCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::CisCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaBdsEphFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Type,
        Version,
        Svid,
        Reserved1,
        SatH1,
        IODC,
        A2,
        A1,
        A0,
        Toc,
        TGD1,
        URAI,
        IODE,
        Toe,
        SqrtA,
        E,
        Omega,
        Deltan,
        IDOT,
        M0,
        Omega0,
        OmegaDot,
        I0,
        Cuc,
        Cus,
        Crc,
        Crs,
        Cic,
        Cis,
        Reserved2
    >;
};

/// @brief Definition of <b>"MGA-BDS-EPH"</b> message class.
/// @details
///     See @ref MgaBdsEphFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MgaBdsEph.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MgaBdsEph : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MgaBdsEph,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaBds>,
        comms::option::def::FieldsImpl<typename MgaBdsEphFields<TOpt>::All>,
        comms::option::def::MsgType<MgaBdsEph<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MgaBdsEph,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaBds>,
            comms::option::def::FieldsImpl<typename MgaBdsEphFields<TOpt>::All>,
            comms::option::def::MsgType<MgaBdsEph<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref MgaBdsEphFields::Type field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MgaBdsEphFields::Version field.
    ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access fuction
    ///         for @ref MgaBdsEphFields::Svid field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref MgaBdsEphFields::Reserved1 field.
    ///     @li @b FieldIdx_satH1 index, @b Field_satH1 type and @b field_satH1() access fuction
    ///         for @ref MgaBdsEphFields::SatH1 field.
    ///     @li @b FieldIdx_iODC index, @b Field_iODC type and @b field_iODC() access fuction
    ///         for @ref MgaBdsEphFields::IODC field.
    ///     @li @b FieldIdx_a2 index, @b Field_a2 type and @b field_a2() access fuction
    ///         for @ref MgaBdsEphFields::A2 field.
    ///     @li @b FieldIdx_a1 index, @b Field_a1 type and @b field_a1() access fuction
    ///         for @ref MgaBdsEphFields::A1 field.
    ///     @li @b FieldIdx_a0 index, @b Field_a0 type and @b field_a0() access fuction
    ///         for @ref MgaBdsEphFields::A0 field.
    ///     @li @b FieldIdx_toc index, @b Field_toc type and @b field_toc() access fuction
    ///         for @ref MgaBdsEphFields::Toc field.
    ///     @li @b FieldIdx_tGD1 index, @b Field_tGD1 type and @b field_tGD1() access fuction
    ///         for @ref MgaBdsEphFields::TGD1 field.
    ///     @li @b FieldIdx_uRAI index, @b Field_uRAI type and @b field_uRAI() access fuction
    ///         for @ref MgaBdsEphFields::URAI field.
    ///     @li @b FieldIdx_iODE index, @b Field_iODE type and @b field_iODE() access fuction
    ///         for @ref MgaBdsEphFields::IODE field.
    ///     @li @b FieldIdx_toe index, @b Field_toe type and @b field_toe() access fuction
    ///         for @ref MgaBdsEphFields::Toe field.
    ///     @li @b FieldIdx_sqrtA index, @b Field_sqrtA type and @b field_sqrtA() access fuction
    ///         for @ref MgaBdsEphFields::SqrtA field.
    ///     @li @b FieldIdx_e index, @b Field_e type and @b field_e() access fuction
    ///         for @ref MgaBdsEphFields::E field.
    ///     @li @b FieldIdx_omega index, @b Field_omega type and @b field_omega() access fuction
    ///         for @ref MgaBdsEphFields::Omega field.
    ///     @li @b FieldIdx_deltan index, @b Field_deltan type and @b field_deltan() access fuction
    ///         for @ref MgaBdsEphFields::Deltan field.
    ///     @li @b FieldIdx_iDOT index, @b Field_iDOT type and @b field_iDOT() access fuction
    ///         for @ref MgaBdsEphFields::IDOT field.
    ///     @li @b FieldIdx_m0 index, @b Field_m0 type and @b field_m0() access fuction
    ///         for @ref MgaBdsEphFields::M0 field.
    ///     @li @b FieldIdx_omega0 index, @b Field_omega0 type and @b field_omega0() access fuction
    ///         for @ref MgaBdsEphFields::Omega0 field.
    ///     @li @b FieldIdx_omegaDot index, @b Field_omegaDot type and @b field_omegaDot() access fuction
    ///         for @ref MgaBdsEphFields::OmegaDot field.
    ///     @li @b FieldIdx_i0 index, @b Field_i0 type and @b field_i0() access fuction
    ///         for @ref MgaBdsEphFields::I0 field.
    ///     @li @b FieldIdx_cuc index, @b Field_cuc type and @b field_cuc() access fuction
    ///         for @ref MgaBdsEphFields::Cuc field.
    ///     @li @b FieldIdx_cus index, @b Field_cus type and @b field_cus() access fuction
    ///         for @ref MgaBdsEphFields::Cus field.
    ///     @li @b FieldIdx_crc index, @b Field_crc type and @b field_crc() access fuction
    ///         for @ref MgaBdsEphFields::Crc field.
    ///     @li @b FieldIdx_crs index, @b Field_crs type and @b field_crs() access fuction
    ///         for @ref MgaBdsEphFields::Crs field.
    ///     @li @b FieldIdx_cic index, @b Field_cic type and @b field_cic() access fuction
    ///         for @ref MgaBdsEphFields::Cic field.
    ///     @li @b FieldIdx_cis index, @b Field_cis type and @b field_cis() access fuction
    ///         for @ref MgaBdsEphFields::Cis field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref MgaBdsEphFields::Reserved2 field.
    COMMS_MSG_FIELDS_NAMES(
        type,
        version,
        svid,
        reserved1,
        satH1,
        iODC,
        a2,
        a1,
        a0,
        toc,
        tGD1,
        uRAI,
        iODE,
        toe,
        sqrtA,
        e,
        omega,
        deltan,
        iDOT,
        m0,
        omega0,
        omegaDot,
        i0,
        cuc,
        cus,
        crc,
        crs,
        cic,
        cis,
        reserved2
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 88U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 88U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MgaBdsEphCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
