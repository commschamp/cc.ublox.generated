// Generated by commsdsl2comms v6.1.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::EsfStatus message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/ItowCommon.h"
#include "cc_ublox/field/Res2Common.h"
#include "cc_ublox/field/Res7Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::EsfStatus message.
/// @see cc_ublox::message::EsfStatusFields
struct EsfStatusFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfStatusFields::Itow field.
    using ItowCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfStatusFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::EsfStatusFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfStatusFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res7Common
    {
        /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfStatusFields::FusionMode field.
    struct FusionModeCommon
    {
        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::EsfStatusFields::FusionMode field.
        enum class ValueType : std::uint8_t
        {
            Initialization = 0, ///< value @b Initialization. 
            Fusion = 1, ///< value @b Fusion. 
            Suspended = 2, ///< value @b Suspended. 
            Disabled = 3, ///< value @b Disabled. 

            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 3, ///< Last defined value.
            ValuesLimit = 4, ///< Upper limit for defined values.
        };

        /// @brief Single value name info entry
        using ValueNameInfo = const char*;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

        /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::FusionMode field.
        static const char* name()
        {
            return "fusionMode";
        }

        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                return nullptr;
            }

            return namesMapInfo.first[static_cast<std::size_t>(val)];
        }

        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const char* Map[] = {
                "Initialization",
                "Fusion",
                "Suspended",
                "Disabled"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };

    /// @brief Values enumerator for
    ///     @ref cc_ublox::message::EsfStatusFields::FusionMode field.
    using FusionModeVal = FusionModeCommon::ValueType;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfStatusFields::Reserved2 field.
    struct Reserved2Common : public cc_ublox::field::Res2Common
    {
        /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::Reserved2 field.
        static const char* name()
        {
            return "reserved2";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfStatusFields::NumSens field.
    struct NumSensCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::EsfStatusFields::NumSens field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::NumSens field.
        static const char* name()
        {
            return "numSens";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::EsfStatusFields::List field.
    struct ListMembersCommon
    {
        /// @brief Scope for all the common definitions of the member fields of
        ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::Element field.
        struct ElementMembersCommon
        {
            /// @brief Scope for all the common definitions of the member fields of
            ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1 field.
            struct SensStatus1MembersCommon
            {
                /// @brief Common types and functions for
                ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1Members::Type field.
                struct TypeCommon
                {
                    /// @brief Re-definition of the value type used by
                    ///     cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1Members::Type field.
                    using ValueType = std::uint8_t;

                    /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1Members::Type field.
                    static const char* name()
                    {
                        return "type";
                    }

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return false;
                    }
                };

                /// @brief Common types and functions for
                ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1Members::Bits field.
                struct BitsCommon
                {
                    /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1Members::Bits field.
                    static const char* name()
                    {
                        return "";
                    }

                    /// @brief Retrieve name of the bit of
                    ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1Members::Bits field.
                    static const char* bitName(std::size_t idx)
                    {
                        static const char* Map[] = {
                            "used",
                            "ready"
                        };

                        static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                        if (MapSize <= idx) {
                            return nullptr;
                        }

                        return Map[idx];
                    }
                };
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1 field.
            struct SensStatus1Common
            {
                /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus1 field.
                static const char* name()
                {
                    return "sensStatus1";
                }
            };

            /// @brief Scope for all the common definitions of the member fields of
            ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2 field.
            struct SensStatus2MembersCommon
            {
                /// @brief Common types and functions for
                ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::CalibStatus field.
                struct CalibStatusCommon
                {
                    /// @brief Values enumerator for
                    ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::CalibStatus field.
                    enum class ValueType : std::uint8_t
                    {
                        NotCalibrated = 0, ///< value @b NotCalibrated. 
                        Calibrating = 1, ///< value @b Calibrating. 
                        Calibrated = 2, ///< value @b Calibrated. 
                        Calibrated2 = 3, ///< value @b Calibrated2. 

                        // --- Extra values generated for convenience ---
                        FirstValue = 0, ///< First defined value.
                        LastValue = 3, ///< Last defined value.
                        ValuesLimit = 4, ///< Upper limit for defined values.
                    };

                    /// @brief Single value name info entry
                    using ValueNameInfo = const char*;

                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @details The @b first value of the pair is pointer to the map array,
                    ///     The @b second value of the pair is the size of the array.
                    using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

                    /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::CalibStatus field.
                    static const char* name()
                    {
                        return "calibStatus";
                    }

                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        auto namesMapInfo = valueNamesMap();
                        if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                            return nullptr;
                        }

                        return namesMapInfo.first[static_cast<std::size_t>(val)];
                    }

                    /// @brief Retrieve map of enum value names
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        static const char* Map[] = {
                            "NotCalibrated",
                            "Calibrating",
                            "Calibrated",
                            "Calibrated2"
                        };
                        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                        return std::make_pair(&Map[0], MapSize);
                    }
                };

                /// @brief Values enumerator for
                ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::CalibStatus field.
                using CalibStatusVal = CalibStatusCommon::ValueType;

                /// @brief Common types and functions for
                ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::TimeStatus field.
                struct TimeStatusCommon
                {
                    /// @brief Values enumerator for
                    ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::TimeStatus field.
                    enum class ValueType : std::uint8_t
                    {
                        NoData = 0, ///< value @b NoData. 
                        FirstByte = 1, ///< value @b FirstByte. 
                        EventInput = 2, ///< value @b EventInput. 
                        TimeTag = 3, ///< value @b TimeTag. 

                        // --- Extra values generated for convenience ---
                        FirstValue = 0, ///< First defined value.
                        LastValue = 3, ///< Last defined value.
                        ValuesLimit = 4, ///< Upper limit for defined values.
                    };

                    /// @brief Single value name info entry
                    using ValueNameInfo = const char*;

                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @details The @b first value of the pair is pointer to the map array,
                    ///     The @b second value of the pair is the size of the array.
                    using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

                    /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::TimeStatus field.
                    static const char* name()
                    {
                        return "timeStatus";
                    }

                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        auto namesMapInfo = valueNamesMap();
                        if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                            return nullptr;
                        }

                        return namesMapInfo.first[static_cast<std::size_t>(val)];
                    }

                    /// @brief Retrieve map of enum value names
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        static const char* Map[] = {
                            "NoData",
                            "FirstByte",
                            "EventInput",
                            "TimeTag"
                        };
                        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                        return std::make_pair(&Map[0], MapSize);
                    }
                };

                /// @brief Values enumerator for
                ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::TimeStatus field.
                using TimeStatusVal = TimeStatusCommon::ValueType;

                /// @brief Common types and functions for
                ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::Reserved field.
                struct ReservedCommon
                {
                    /// @brief Re-definition of the value type used by
                    ///     cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::Reserved field.
                    using ValueType = std::uint8_t;

                    /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2Members::Reserved field.
                    static const char* name()
                    {
                        return "reserved";
                    }

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return false;
                    }
                };
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2 field.
            struct SensStatus2Common
            {
                /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::SensStatus2 field.
                static const char* name()
                {
                    return "sensStatus2";
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::Freq field.
            struct FreqCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::Freq field.
                using ValueType = std::uint8_t;

                /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::Freq field.
                static const char* name()
                {
                    return "freq";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::Faults field.
            struct FaultsCommon
            {
                /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::Faults field.
                static const char* name()
                {
                    return "faults";
                }

                /// @brief Retrieve name of the bit of
                ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::ElementMembers::Faults field.
                static const char* bitName(std::size_t idx)
                {
                    static const char* Map[] = {
                        "badMeas",
                        "badTTag",
                        "missingMeas",
                        "noisyMeas"
                    };

                    static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                    if (MapSize <= idx) {
                        return nullptr;
                    }

                    return Map[idx];
                }
            };
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::EsfStatusFields::ListMembers::Element field.
        struct ElementCommon
        {
            /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::ListMembers::Element field.
            static const char* name()
            {
                return "";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfStatusFields::List field.
    struct ListCommon
    {
        /// @brief Name of the @ref cc_ublox::message::EsfStatusFields::List field.
        static const char* name()
        {
            return "list";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::EsfStatus message.
struct EsfStatusCommon
{
    /// @brief Name of the @ref cc_ublox::message::EsfStatus message.
    static const char* name()
    {
        return "ESF-STATUS";
    }
};

} // namespace message

} // namespace cc_ublox
