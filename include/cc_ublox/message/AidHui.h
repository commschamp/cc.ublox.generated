// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains definition of <b>"AID-HUI"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/AidHuiCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/FloatValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref AidHui.
/// @tparam TOpt Extra options
/// @see @ref AidHui
/// @headerfile cc_ublox/message/AidHui.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct AidHuiFields
{
    /// @brief Definition of <b>"health"</b> field.
    class Health : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::HealthCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::HealthCommon::name();
        }
    };

    /// @brief Definition of <b>"utcA0"</b> field.
    class UtcA0 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            double,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                double,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcA0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcA0Common::name();
        }
    };

    /// @brief Definition of <b>"utcA1"</b> field.
    class UtcA1 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            double,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                double,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcA1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcA1Common::name();
        }
    };

    /// @brief Definition of <b>"utcTOW"</b> field.
    class UtcTOW : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcTOWCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcTOWCommon::name();
        }
    };

    /// @brief Definition of <b>"utcWNT"</b> field.
    class UtcWNT : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcWNTCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcWNTCommon::name();
        }
    };

    /// @brief Definition of <b>"utcLS"</b> field.
    class UtcLS : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcLSCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcLSCommon::name();
        }
    };

    /// @brief Definition of <b>"utcWNF"</b> field.
    class UtcWNF : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcWNFCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcWNFCommon::name();
        }
    };

    /// @brief Definition of <b>"utcDN"</b> field.
    class UtcDN : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcDNCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcDNCommon::name();
        }
    };

    /// @brief Definition of <b>"utcLSF"</b> field.
    class UtcLSF : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcLSFCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcLSFCommon::name();
        }
    };

    /// @brief Definition of <b>"utcSpare"</b> field.
    class UtcSpare : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcSpareCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::UtcSpareCommon::name();
        }
    };

    /// @brief Definition of <b>"klobA0"</b> field.
    class KlobA0 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            comms::option::def::HasName,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                float,
                comms::option::def::HasName,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobA0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobA0Common::name();
        }
    };

    /// @brief Definition of <b>"klobA1"</b> field.
    class KlobA1 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            comms::option::def::HasName,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                float,
                comms::option::def::HasName,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobA1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobA1Common::name();
        }
    };

    /// @brief Definition of <b>"klobA2"</b> field.
    class KlobA2 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            comms::option::def::HasName,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                float,
                comms::option::def::HasName,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobA2Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobA2Common::name();
        }
    };

    /// @brief Definition of <b>"klobA3"</b> field.
    class KlobA3 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            comms::option::def::HasName,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                float,
                comms::option::def::HasName,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobA3Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobA3Common::name();
        }
    };

    /// @brief Definition of <b>"klobB0"</b> field.
    class KlobB0 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            comms::option::def::HasName,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                float,
                comms::option::def::HasName,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobB0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobB0Common::name();
        }
    };

    /// @brief Definition of <b>"klobB1"</b> field.
    class KlobB1 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            comms::option::def::HasName,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                float,
                comms::option::def::HasName,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobB1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobB1Common::name();
        }
    };

    /// @brief Definition of <b>"klobB2"</b> field.
    class KlobB2 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            comms::option::def::HasName,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                float,
                comms::option::def::HasName,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobB2Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobB2Common::name();
        }
    };

    /// @brief Definition of <b>"klobB3"</b> field.
    class KlobB3 : public
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            comms::option::def::HasName,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::FloatValue<
                cc_ublox::field::FieldBase<>,
                float,
                comms::option::def::HasName,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobB3Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::KlobB3Common::name();
        }
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::HasName,
            comms::option::def::FixedLength<4U>,
            comms::option::def::BitmaskReservedBits<0xFFFFFFF8UL, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::HasName,
                comms::option::def::FixedLength<4U>,
                comms::option::def::BitmaskReservedBits<0xFFFFFFF8UL, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_healthValid, @b getBitValue_healthValid() and @b setBitValue_healthValid().
        ///      @li @b BitIdx_utcValid, @b getBitValue_utcValid() and @b setBitValue_utcValid().
        ///      @li @b BitIdx_klobValid, @b getBitValue_klobValid() and @b setBitValue_klobValid().
        COMMS_BITMASK_BITS_SEQ(
            healthValid,
            utcValid,
            klobValid
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::AidHuiFieldsCommon::FlagsCommon::bitName().
        static const char* bitName(std::size_t idx)
        {
            return cc_ublox::message::AidHuiFieldsCommon::FlagsCommon::bitName(idx);
        }

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::AidHuiFieldsCommon::FlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return bitName(static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidHuiFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Health,
        UtcA0,
        UtcA1,
        UtcTOW,
        UtcWNT,
        UtcLS,
        UtcWNF,
        UtcDN,
        UtcLSF,
        UtcSpare,
        KlobA0,
        KlobA1,
        KlobA2,
        KlobA3,
        KlobB0,
        KlobB1,
        KlobB2,
        KlobB3,
        Flags
    >;
};

/// @brief Definition of <b>"AID-HUI"</b> message class.
/// @details
///     See @ref AidHuiFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/AidHui.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class AidHui : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidHui>,
        comms::option::def::FieldsImpl<typename AidHuiFields<TOpt>::All>,
        comms::option::def::MsgType<AidHui<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidHui>,
            comms::option::def::FieldsImpl<typename AidHuiFields<TOpt>::All>,
            comms::option::def::MsgType<AidHui<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_health index, @b Field_health type and @b field_health() access fuction
    ///         for @ref AidHuiFields::Health field.
    ///     @li @b FieldIdx_utcA0 index, @b Field_utcA0 type and @b field_utcA0() access fuction
    ///         for @ref AidHuiFields::UtcA0 field.
    ///     @li @b FieldIdx_utcA1 index, @b Field_utcA1 type and @b field_utcA1() access fuction
    ///         for @ref AidHuiFields::UtcA1 field.
    ///     @li @b FieldIdx_utcTOW index, @b Field_utcTOW type and @b field_utcTOW() access fuction
    ///         for @ref AidHuiFields::UtcTOW field.
    ///     @li @b FieldIdx_utcWNT index, @b Field_utcWNT type and @b field_utcWNT() access fuction
    ///         for @ref AidHuiFields::UtcWNT field.
    ///     @li @b FieldIdx_utcLS index, @b Field_utcLS type and @b field_utcLS() access fuction
    ///         for @ref AidHuiFields::UtcLS field.
    ///     @li @b FieldIdx_utcWNF index, @b Field_utcWNF type and @b field_utcWNF() access fuction
    ///         for @ref AidHuiFields::UtcWNF field.
    ///     @li @b FieldIdx_utcDN index, @b Field_utcDN type and @b field_utcDN() access fuction
    ///         for @ref AidHuiFields::UtcDN field.
    ///     @li @b FieldIdx_utcLSF index, @b Field_utcLSF type and @b field_utcLSF() access fuction
    ///         for @ref AidHuiFields::UtcLSF field.
    ///     @li @b FieldIdx_utcSpare index, @b Field_utcSpare type and @b field_utcSpare() access fuction
    ///         for @ref AidHuiFields::UtcSpare field.
    ///     @li @b FieldIdx_klobA0 index, @b Field_klobA0 type and @b field_klobA0() access fuction
    ///         for @ref AidHuiFields::KlobA0 field.
    ///     @li @b FieldIdx_klobA1 index, @b Field_klobA1 type and @b field_klobA1() access fuction
    ///         for @ref AidHuiFields::KlobA1 field.
    ///     @li @b FieldIdx_klobA2 index, @b Field_klobA2 type and @b field_klobA2() access fuction
    ///         for @ref AidHuiFields::KlobA2 field.
    ///     @li @b FieldIdx_klobA3 index, @b Field_klobA3 type and @b field_klobA3() access fuction
    ///         for @ref AidHuiFields::KlobA3 field.
    ///     @li @b FieldIdx_klobB0 index, @b Field_klobB0 type and @b field_klobB0() access fuction
    ///         for @ref AidHuiFields::KlobB0 field.
    ///     @li @b FieldIdx_klobB1 index, @b Field_klobB1 type and @b field_klobB1() access fuction
    ///         for @ref AidHuiFields::KlobB1 field.
    ///     @li @b FieldIdx_klobB2 index, @b Field_klobB2 type and @b field_klobB2() access fuction
    ///         for @ref AidHuiFields::KlobB2 field.
    ///     @li @b FieldIdx_klobB3 index, @b Field_klobB3 type and @b field_klobB3() access fuction
    ///         for @ref AidHuiFields::KlobB3 field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref AidHuiFields::Flags field.
    COMMS_MSG_FIELDS_NAMES(
        health,
        utcA0,
        utcA1,
        utcTOW,
        utcWNT,
        utcLS,
        utcWNF,
        utcDN,
        utcLSF,
        utcSpare,
        klobA0,
        klobA1,
        klobA2,
        klobA3,
        klobB0,
        klobB1,
        klobB2,
        klobB3,
        flags
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 72U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 72U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::AidHuiCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
