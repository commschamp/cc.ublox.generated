// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::NavHpposecef message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include "cc_ublox/field/EcefHPCommon.h"
#include "cc_ublox/field/EcefXCommon.h"
#include "cc_ublox/field/EcefYCommon.h"
#include "cc_ublox/field/EcefZCommon.h"
#include "cc_ublox/field/ItowCommon.h"
#include "cc_ublox/field/Res3Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::NavHpposecef message.
/// @see cc_ublox::message::NavHpposecefFields
struct NavHpposecefFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavHpposecefFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::NavHpposecefFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res3Common
    {
        /// @brief Name of the @ref cc_ublox::message::NavHpposecefFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::Itow field.
    using ItowCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::EcefX field.
    using EcefXCommon = cc_ublox::field::EcefXCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::EcefY field.
    using EcefYCommon = cc_ublox::field::EcefYCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::EcefZ field.
    using EcefZCommon = cc_ublox::field::EcefZCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::EcefXHp field.
    struct EcefXHpCommon : public cc_ublox::field::EcefHPCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavHpposecefFields::EcefXHp field.
        static const char* name()
        {
            return "ecefXHp";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::EcefYHp field.
    struct EcefYHpCommon : public cc_ublox::field::EcefHPCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavHpposecefFields::EcefYHp field.
        static const char* name()
        {
            return "ecefYHp";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::EcefZHp field.
    struct EcefZHpCommon : public cc_ublox::field::EcefHPCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavHpposecefFields::EcefZHp field.
        static const char* name()
        {
            return "ecefZHp";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavHpposecefFields::Flags field.
        static const char* name()
        {
            return "flags";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::NavHpposecefFields::Flags field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "invalidEcef"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavHpposecefFields::PAcc field.
    struct PAccCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavHpposecefFields::PAcc field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::NavHpposecefFields::PAcc field.
        static const char* name()
        {
            return "pAcc";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::NavHpposecef message.
struct NavHpposecefCommon
{
    /// @brief Name of the @ref cc_ublox::message::NavHpposecef message.
    static const char* name()
    {
        return "NAV-HPPOSECEF";
    }
};

} // namespace message

} // namespace cc_ublox
