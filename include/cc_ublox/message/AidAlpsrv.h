// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains definition of <b>"AID-ALPSRV"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/AidAlpsrvCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref AidAlpsrv.
/// @tparam TOpt Extra options
/// @see @ref AidAlpsrv
/// @headerfile cc_ublox/message/AidAlpsrv.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct AidAlpsrvFields
{
    /// @brief Definition of <b>"idSize"</b> field.
    class IdSize : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::IdSizeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::IdSizeCommon::name();
        }
    };

    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::TypeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::TypeCommon::name();
        }
    };

    /// @brief Definition of <b>"ofs"</b> field.
    class Ofs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::OfsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::OfsCommon::name();
        }
    };

    /// @brief Definition of <b>"size"</b> field.
    class Size : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::SizeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::SizeCommon::name();
        }
    };

    /// @brief Definition of <b>"fileId"</b> field.
    class FileId : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::FileIdCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::FileIdCommon::name();
        }
    };

    /// @brief Definition of <b>"dataSize"</b> field.
    class DataSize : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::DataSizeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::DataSizeCommon::name();
        }
    };

    /// @brief Definition of <b>"id1"</b> field.
    class Id1 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::Id1Common::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::Id1Common::name();
        }
    };

    /// @brief Definition of <b>"id2"</b> field.
    class Id2 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::Id2Common::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::Id2Common::name();
        }
    };

    /// @brief Definition of <b>"id3"</b> field.
    class Id3 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::Id3Common::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::Id3Common::name();
        }
    };

    /// @brief Definition of <b>"data"</b> field.
    class Data : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::AidAlpsrvFields::Data,
            comms::option::def::SequenceLengthForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::AidAlpsrvFields::Data,
                comms::option::def::SequenceLengthForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpsrvFieldsCommon::DataCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        IdSize,
        Type,
        Ofs,
        Size,
        FileId,
        DataSize,
        Id1,
        Id2,
        Id3,
        Data
    >;
};

/// @brief Definition of <b>"AID-ALPSRV"</b> message class.
/// @details
///     See @ref AidAlpsrvFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/AidAlpsrv.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class AidAlpsrv : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAlpsrv>,
        comms::option::def::FieldsImpl<typename AidAlpsrvFields<TOpt>::All>,
        comms::option::def::MsgType<AidAlpsrv<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAlpsrv>,
            comms::option::def::FieldsImpl<typename AidAlpsrvFields<TOpt>::All>,
            comms::option::def::MsgType<AidAlpsrv<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_idSize index, @b Field_idSize type and @b field_idSize() access fuction
    ///         for @ref AidAlpsrvFields::IdSize field.
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref AidAlpsrvFields::Type field.
    ///     @li @b FieldIdx_ofs index, @b Field_ofs type and @b field_ofs() access fuction
    ///         for @ref AidAlpsrvFields::Ofs field.
    ///     @li @b FieldIdx_size index, @b Field_size type and @b field_size() access fuction
    ///         for @ref AidAlpsrvFields::Size field.
    ///     @li @b FieldIdx_fileId index, @b Field_fileId type and @b field_fileId() access fuction
    ///         for @ref AidAlpsrvFields::FileId field.
    ///     @li @b FieldIdx_dataSize index, @b Field_dataSize type and @b field_dataSize() access fuction
    ///         for @ref AidAlpsrvFields::DataSize field.
    ///     @li @b FieldIdx_id1 index, @b Field_id1 type and @b field_id1() access fuction
    ///         for @ref AidAlpsrvFields::Id1 field.
    ///     @li @b FieldIdx_id2 index, @b Field_id2 type and @b field_id2() access fuction
    ///         for @ref AidAlpsrvFields::Id2 field.
    ///     @li @b FieldIdx_id3 index, @b Field_id3 type and @b field_id3() access fuction
    ///         for @ref AidAlpsrvFields::Id3 field.
    ///     @li @b FieldIdx_data index, @b Field_data type and @b field_data() access fuction
    ///         for @ref AidAlpsrvFields::Data field.
    COMMS_MSG_FIELDS_NAMES(
        idSize,
        type,
        ofs,
        size,
        fileId,
        dataSize,
        id1,
        id2,
        id3,
        data
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 16U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::AidAlpsrvCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_data>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_data();

            es = Base::template doReadFrom<FieldIdx_data>(iter, len);
        } while (false);
        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_data() || updated;
       return updated;
    }

private:
    void readPrepare_data()
    {
        field_data().forceReadLength(
            static_cast<std::size_t>(field_dataSize().getValue()));
    }

    bool refresh_data()
    {
        auto lenValue = field_dataSize().getValue();
        auto realLength = field_data().value().size();
        if (static_cast<std::size_t>(lenValue) == realLength) {
            return false;
        }

        using LenValueType = typename std::decay<decltype(lenValue)>::type;
        static const auto MaxLenValue = static_cast<std::size_t>(std::numeric_limits<LenValueType>::max());
        auto maxAllowedLen = std::min(MaxLenValue, realLength);
        field_dataSize().setValue(maxAllowedLen);
        if (maxAllowedLen < realLength) {
            field_data().value().resize(maxAllowedLen);
        }
        return true;
    }
};

} // namespace message

} // namespace cc_ublox
