// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains definition of <b>"CFG-NAVX5"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/CfgNavx5AopCfg.h"
#include "cc_ublox/field/CfgNavx5AopOrbMaxErr.h"
#include "cc_ublox/field/CfgNavx5Mask1.h"
#include "cc_ublox/field/CfgNavx5Mask2.h"
#include "cc_ublox/field/CfgNavx5SigAttenCompMode.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/message/CfgNavx5V2Common.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref CfgNavx5V2.
/// @tparam TOpt Extra options
/// @see @ref CfgNavx5V2
/// @headerfile cc_ublox/message/CfgNavx5V2.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct CfgNavx5V2Fields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<2>,
            comms::option::def::ValidNumValue<2>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<2>,
                comms::option::def::ValidNumValue<2>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::VersionCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(2);
            return true;
        }
    };

    /// @brief Definition of <b>"mask1"</b> field.
    using Mask1 =
        cc_ublox::field::CfgNavx5Mask1<
            TOpt
        >;

    /// @brief Definition of <b>"mask2"</b> field.
    using Mask2 =
        cc_ublox::field::CfgNavx5Mask2<
            TOpt
        >;

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"minSVs"</b> field.
    class MinSVs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::MinSVsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::MinSVsCommon::name();
        }
    };

    /// @brief Definition of <b>"maxSVs"</b> field.
    class MaxSVs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::MaxSVsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::MaxSVsCommon::name();
        }
    };

    /// @brief Definition of <b>"minCNO"</b> field.
    class MinCNO : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::MinCNOCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::MinCNOCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"iniFix3D"</b> field.
    class IniFix3D : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::IniFix3DCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::IniFix3DCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved3"</b> field.
    class Reserved3 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved3Common::name();
        }
    };

    /// @brief Definition of <b>"ackAiding"</b> field.
    class AckAiding : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::AckAidingCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::AckAidingCommon::name();
        }
    };

    /// @brief Definition of <b>"wknRollover"</b> field.
    class WknRollover : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::WknRolloverCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::WknRolloverCommon::name();
        }
    };

    /// @brief Definition of <b>"sigAttenCompMode"</b> field.
    using SigAttenCompMode =
        cc_ublox::field::CfgNavx5SigAttenCompMode<
            TOpt
        >;

    /// @brief Definition of <b>"reserved4"</b> field.
    class Reserved4 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved4Common::name();
        }
    };

    /// @brief Definition of <b>"reserved5"</b> field.
    class Reserved5 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved5Common::name();
        }
    };

    /// @brief Definition of <b>"reserved6"</b> field.
    class Reserved6 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved6Common::name();
        }
    };

    /// @brief Definition of <b>"usePPP"</b> field.
    class UsePPP : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::UsePPPCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::UsePPPCommon::name();
        }
    };

    /// @brief Definition of <b>"aopCfg"</b> field.
    using AopCfg =
        cc_ublox::field::CfgNavx5AopCfg<
            TOpt
        >;

    /// @brief Definition of <b>"reserved7"</b> field.
    class Reserved7 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved7Common::name();
        }
    };

    /// @brief Definition of <b>"aopOrbMaxErr"</b> field.
    using AopOrbMaxErr =
        cc_ublox::field::CfgNavx5AopOrbMaxErr<
            TOpt
        >;

    /// @brief Definition of <b>"reserved8"</b> field.
    class Reserved8 : public
        cc_ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved8Common::name();
        }
    };

    /// @brief Definition of <b>"reserved9"</b> field.
    class Reserved9 : public
        cc_ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::Reserved9Common::name();
        }
    };

    /// @brief Definition of <b>"useAdr"</b> field.
    class UseAdr : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::UseAdrCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNavx5V2FieldsCommon::UseAdrCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Mask1,
        Mask2,
        Reserved1,
        MinSVs,
        MaxSVs,
        MinCNO,
        Reserved2,
        IniFix3D,
        Reserved3,
        AckAiding,
        WknRollover,
        SigAttenCompMode,
        Reserved4,
        Reserved5,
        Reserved6,
        UsePPP,
        AopCfg,
        Reserved7,
        AopOrbMaxErr,
        Reserved8,
        Reserved9,
        UseAdr
    >;
};

/// @brief Definition of <b>"CFG-NAVX5"</b> message class.
/// @details
///     See @ref CfgNavx5V2Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/CfgNavx5V2.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class CfgNavx5V2 : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgNavx5>,
        comms::option::def::FieldsImpl<typename CfgNavx5V2Fields<TOpt>::All>,
        comms::option::def::MsgType<CfgNavx5V2<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgNavx5>,
            comms::option::def::FieldsImpl<typename CfgNavx5V2Fields<TOpt>::All>,
            comms::option::def::MsgType<CfgNavx5V2<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref CfgNavx5V2Fields::Version field.
    ///     @li @b FieldIdx_mask1 index, @b Field_mask1 type and @b field_mask1() access fuction
    ///         for @ref CfgNavx5V2Fields::Mask1 field.
    ///     @li @b FieldIdx_mask2 index, @b Field_mask2 type and @b field_mask2() access fuction
    ///         for @ref CfgNavx5V2Fields::Mask2 field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved1 field.
    ///     @li @b FieldIdx_minSVs index, @b Field_minSVs type and @b field_minSVs() access fuction
    ///         for @ref CfgNavx5V2Fields::MinSVs field.
    ///     @li @b FieldIdx_maxSVs index, @b Field_maxSVs type and @b field_maxSVs() access fuction
    ///         for @ref CfgNavx5V2Fields::MaxSVs field.
    ///     @li @b FieldIdx_minCNO index, @b Field_minCNO type and @b field_minCNO() access fuction
    ///         for @ref CfgNavx5V2Fields::MinCNO field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved2 field.
    ///     @li @b FieldIdx_iniFix3D index, @b Field_iniFix3D type and @b field_iniFix3D() access fuction
    ///         for @ref CfgNavx5V2Fields::IniFix3D field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved3 field.
    ///     @li @b FieldIdx_ackAiding index, @b Field_ackAiding type and @b field_ackAiding() access fuction
    ///         for @ref CfgNavx5V2Fields::AckAiding field.
    ///     @li @b FieldIdx_wknRollover index, @b Field_wknRollover type and @b field_wknRollover() access fuction
    ///         for @ref CfgNavx5V2Fields::WknRollover field.
    ///     @li @b FieldIdx_sigAttenCompMode index, @b Field_sigAttenCompMode type and @b field_sigAttenCompMode() access fuction
    ///         for @ref CfgNavx5V2Fields::SigAttenCompMode field.
    ///     @li @b FieldIdx_reserved4 index, @b Field_reserved4 type and @b field_reserved4() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved4 field.
    ///     @li @b FieldIdx_reserved5 index, @b Field_reserved5 type and @b field_reserved5() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved5 field.
    ///     @li @b FieldIdx_reserved6 index, @b Field_reserved6 type and @b field_reserved6() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved6 field.
    ///     @li @b FieldIdx_usePPP index, @b Field_usePPP type and @b field_usePPP() access fuction
    ///         for @ref CfgNavx5V2Fields::UsePPP field.
    ///     @li @b FieldIdx_aopCfg index, @b Field_aopCfg type and @b field_aopCfg() access fuction
    ///         for @ref CfgNavx5V2Fields::AopCfg field.
    ///     @li @b FieldIdx_reserved7 index, @b Field_reserved7 type and @b field_reserved7() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved7 field.
    ///     @li @b FieldIdx_aopOrbMaxErr index, @b Field_aopOrbMaxErr type and @b field_aopOrbMaxErr() access fuction
    ///         for @ref CfgNavx5V2Fields::AopOrbMaxErr field.
    ///     @li @b FieldIdx_reserved8 index, @b Field_reserved8 type and @b field_reserved8() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved8 field.
    ///     @li @b FieldIdx_reserved9 index, @b Field_reserved9 type and @b field_reserved9() access fuction
    ///         for @ref CfgNavx5V2Fields::Reserved9 field.
    ///     @li @b FieldIdx_useAdr index, @b Field_useAdr type and @b field_useAdr() access fuction
    ///         for @ref CfgNavx5V2Fields::UseAdr field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        mask1,
        mask2,
        reserved1,
        minSVs,
        maxSVs,
        minCNO,
        reserved2,
        iniFix3D,
        reserved3,
        ackAiding,
        wknRollover,
        sigAttenCompMode,
        reserved4,
        reserved5,
        reserved6,
        usePPP,
        aopCfg,
        reserved7,
        aopOrbMaxErr,
        reserved8,
        reserved9,
        useAdr
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 40U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 40U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::CfgNavx5V2Common::name();
    }
};

} // namespace message

} // namespace cc_ublox
