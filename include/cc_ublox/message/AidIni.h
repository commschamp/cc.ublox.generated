// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains definition of <b>"AID-INI"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/AidIniCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/field/Optional.h"
#include "comms/options.h"

#include "comms/cast.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref AidIni.
/// @tparam TOpt Extra options
/// @see @ref AidIni
/// @headerfile cc_ublox/message/AidIni.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct AidIniFields
{
    /// @brief Scope for all the member fields of
    ///     @ref EcefX field.
    struct EcefXMembers
    {
        /// @brief Definition of <b>"ecefX"</b> field.
        class EcefX : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsCentimeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::EcefXMembersCommon::EcefXCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::EcefXMembersCommon::EcefXCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"ecefX"</b> field.
    class EcefX : public
        comms::field::Optional<
            typename EcefXMembers::EcefX,
            comms::option::def::ExistsByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename EcefXMembers::EcefX,
                comms::option::def::ExistsByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::EcefXCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Lat field.
    struct LatMembers
    {
        /// @brief Definition of <b>"lat"</b> field.
        class Lat : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 10000000L>,
                comms::option::def::UnitsDegrees
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<1, 10000000L>,
                    comms::option::def::UnitsDegrees
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::LatMembersCommon::LatCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 7U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::LatMembersCommon::LatCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"lat"</b> field.
    class Lat : public
        comms::field::Optional<
            typename LatMembers::Lat,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename LatMembers::Lat,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::LatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref EcefY field.
    struct EcefYMembers
    {
        /// @brief Definition of <b>"ecefY"</b> field.
        class EcefY : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsCentimeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::EcefYMembersCommon::EcefYCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::EcefYMembersCommon::EcefYCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"ecefY"</b> field.
    class EcefY : public
        comms::field::Optional<
            typename EcefYMembers::EcefY,
            comms::option::def::ExistsByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename EcefYMembers::EcefY,
                comms::option::def::ExistsByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::EcefYCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Lon field.
    struct LonMembers
    {
        /// @brief Definition of <b>"lon"</b> field.
        class Lon : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 10000000L>,
                comms::option::def::UnitsDegrees
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<1, 10000000L>,
                    comms::option::def::UnitsDegrees
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::LonMembersCommon::LonCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 7U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::LonMembersCommon::LonCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"lon"</b> field.
    class Lon : public
        comms::field::Optional<
            typename LonMembers::Lon,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename LonMembers::Lon,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::LonCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref EcefZ field.
    struct EcefZMembers
    {
        /// @brief Definition of <b>"ecefZ"</b> field.
        class EcefZ : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsCentimeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::EcefZMembersCommon::EcefZCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::EcefZMembersCommon::EcefZCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"ecefZ"</b> field.
    class EcefZ : public
        comms::field::Optional<
            typename EcefZMembers::EcefZ,
            comms::option::def::ExistsByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename EcefZMembers::EcefZ,
                comms::option::def::ExistsByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::EcefZCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Alt field.
    struct AltMembers
    {
        /// @brief Definition of <b>"alt"</b> field.
        class Alt : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsCentimeters
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::AltMembersCommon::AltCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::AltMembersCommon::AltCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"alt"</b> field.
    class Alt : public
        comms::field::Optional<
            typename AltMembers::Alt,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename AltMembers::Alt,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::AltCommon::name();
        }
    };

    /// @brief Definition of <b>"posAcc"</b> field.
    class PosAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidIniFieldsCommon::PosAccCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::PosAccCommon::name();
        }
    };

    /// @brief Definition of <b>"tmCfg"</b> field.
    class TmCfg : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<2U>,
            comms::option::def::BitmaskReservedBits<0xFFADU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<2U>,
                comms::option::def::BitmaskReservedBits<0xFFADU, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_fEdge.
        ///      @li @b BitIdx_tm1.
        ///      @li @b BitIdx_f1.
        COMMS_BITMASK_BITS(
            fEdge=1,
            tm1=4,
            f1=6
        );

        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_fEdge() and @b setBitValue_fEdge().
        ///      @li @b getBitValue_tm1() and @b setBitValue_tm1().
        ///      @li @b getBitValue_f1() and @b setBitValue_f1().
        COMMS_BITMASK_BITS_ACCESS(
            fEdge,
            tm1,
            f1
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::AidIniFieldsCommon::TmCfgCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::AidIniFieldsCommon::TmCfgCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::TmCfgCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Wno field.
    struct WnoMembers
    {
        /// @brief Definition of <b>"wno"</b> field.
        class Wno : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsWeeks
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsWeeks
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::WnoMembersCommon::WnoCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::WnoMembersCommon::WnoCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"wno"</b> field.
    class Wno : public
        comms::field::Optional<
            typename WnoMembers::Wno,
            comms::option::def::ExistsByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename WnoMembers::Wno,
                comms::option::def::ExistsByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::WnoCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Date field.
    struct DateMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref DateBundle field.
        struct DateBundleMembers
        {
            /// @brief Definition of <b>"year"</b> field.
            class Year : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int16_t,
                    comms::option::def::FixedLength<1U>,
                    comms::option::def::NumValueSerOffset<-2000>,
                    comms::option::def::DefaultNumValue<2000>,
                    comms::option::def::ValidNumValueRange<2000, 2255>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::int16_t,
                        comms::option::def::FixedLength<1U>,
                        comms::option::def::NumValueSerOffset<-2000>,
                        comms::option::def::DefaultNumValue<2000>,
                        comms::option::def::ValidNumValueRange<2000, 2255>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::AidIniFieldsCommon::DateMembersCommon::DateBundleMembersCommon::YearCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidIniFieldsCommon::DateMembersCommon::DateBundleMembersCommon::YearCommon::name();
                }
            };

            /// @brief Definition of <b>"month"</b> field.
            class Month : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::AidIniFieldsCommon::DateMembersCommon::DateBundleMembersCommon::MonthCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidIniFieldsCommon::DateMembersCommon::DateBundleMembersCommon::MonthCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Year,
                   Month
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class DateBundle : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename DateBundleMembers::All
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename DateBundleMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_year index, @b Field_year type and @b field_year() access function -
            ///         for cc_ublox::message::AidIniFields::DateMembers::DateBundleMembers::Year member field.
            ///     @li @b FieldIdx_month index, @b Field_month type and @b field_month() access function -
            ///         for cc_ublox::message::AidIniFields::DateMembers::DateBundleMembers::Month member field.
            COMMS_FIELD_MEMBERS_NAMES(
                year,
                month
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::DateMembersCommon::DateBundleCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"date"</b> field.
    class Date : public
        comms::field::Optional<
            typename DateMembers::DateBundle,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename DateMembers::DateBundle,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::DateCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Tow field.
    struct TowMembers
    {
        /// @brief Definition of <b>"tow"</b> field.
        class Tow : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsMilliseconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::TowMembersCommon::TowCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::TowMembersCommon::TowCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"tow"</b> field.
    class Tow : public
        comms::field::Optional<
            typename TowMembers::Tow,
            comms::option::def::ExistsByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename TowMembers::Tow,
                comms::option::def::ExistsByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::TowCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Time field.
    struct TimeMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref TimeBundle field.
        struct TimeBundleMembers
        {
            /// @brief Definition of <b>"day"</b> field.
            class Day : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::UnitsDays
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::UnitsDays
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleMembersCommon::DayCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleMembersCommon::DayCommon::name();
                }
            };

            /// @brief Definition of <b>"hour"</b> field.
            class Hour : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::UnitsHours
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::UnitsHours
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleMembersCommon::HourCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleMembersCommon::HourCommon::name();
                }
            };

            /// @brief Definition of <b>"min"</b> field.
            class Min : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::UnitsMinutes
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::UnitsMinutes
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleMembersCommon::MinCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleMembersCommon::MinCommon::name();
                }
            };

            /// @brief Definition of <b>"sec"</b> field.
            class Sec : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::UnitsSeconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::UnitsSeconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleMembersCommon::SecCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleMembersCommon::SecCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Day,
                   Hour,
                   Min,
                   Sec
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class TimeBundle : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename TimeBundleMembers::All
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename TimeBundleMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_day index, @b Field_day type and @b field_day() access function -
            ///         for cc_ublox::message::AidIniFields::TimeMembers::TimeBundleMembers::Day member field.
            ///     @li @b FieldIdx_hour index, @b Field_hour type and @b field_hour() access function -
            ///         for cc_ublox::message::AidIniFields::TimeMembers::TimeBundleMembers::Hour member field.
            ///     @li @b FieldIdx_min index, @b Field_min type and @b field_min() access function -
            ///         for cc_ublox::message::AidIniFields::TimeMembers::TimeBundleMembers::Min member field.
            ///     @li @b FieldIdx_sec index, @b Field_sec type and @b field_sec() access function -
            ///         for cc_ublox::message::AidIniFields::TimeMembers::TimeBundleMembers::Sec member field.
            COMMS_FIELD_MEMBERS_NAMES(
                day,
                hour,
                min,
                sec
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::TimeMembersCommon::TimeBundleCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"time"</b> field.
    class Time : public
        comms::field::Optional<
            typename TimeMembers::TimeBundle,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename TimeMembers::TimeBundle,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::TimeCommon::name();
        }
    };

    /// @brief Definition of <b>"towNs"</b> field.
    class TowNs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidIniFieldsCommon::TowNsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::TowNsCommon::name();
        }
    };

    /// @brief Definition of <b>"tAccMs"</b> field.
    class TAccMs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidIniFieldsCommon::TAccMsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::TAccMsCommon::name();
        }
    };

    /// @brief Definition of <b>"tAccNs"</b> field.
    class TAccNs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidIniFieldsCommon::TAccNsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::TAccNsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ClkD field.
    struct ClkDMembers
    {
        /// @brief Definition of <b>"clkD"</b> field.
        class ClkD : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::UnitsNanoseconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::ClkDMembersCommon::ClkDCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::ClkDMembersCommon::ClkDCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"clkD"</b> field.
    class ClkD : public
        comms::field::Optional<
            typename ClkDMembers::ClkD,
            comms::option::def::ExistsByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename ClkDMembers::ClkD,
                comms::option::def::ExistsByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::ClkDCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Freq field.
    struct FreqMembers
    {
        /// @brief Definition of <b>"freq"</b> field.
        class Freq : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 100>,
                comms::option::def::UnitsHertz
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<1, 100>,
                    comms::option::def::UnitsHertz
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::FreqMembersCommon::FreqCommon::hasSpecials();
            }

            /// @brief Requested number of digits after decimal point when value
            ///     is displayed.
            static constexpr unsigned displayDecimals()
            {
                return 2U;
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::FreqMembersCommon::FreqCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"freq"</b> field.
    class Freq : public
        comms::field::Optional<
            typename FreqMembers::Freq,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename FreqMembers::Freq,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::FreqCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref ClkDAcc field.
    struct ClkDAccMembers
    {
        /// @brief Definition of <b>"clkDAcc"</b> field.
        class ClkDAcc : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsNanoseconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::ClkDAccMembersCommon::ClkDAccCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::ClkDAccMembersCommon::ClkDAccCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"clkDAcc"</b> field.
    class ClkDAcc : public
        comms::field::Optional<
            typename ClkDAccMembers::ClkDAcc,
            comms::option::def::ExistsByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename ClkDAccMembers::ClkDAcc,
                comms::option::def::ExistsByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::ClkDAccCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref FreqAcc field.
    struct FreqAccMembers
    {
        /// @brief Definition of <b>"freqAcc"</b> field.
        class FreqAcc : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::AidIniFieldsCommon::FreqAccMembersCommon::FreqAccCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidIniFieldsCommon::FreqAccMembersCommon::FreqAccCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"freqAcc"</b> field.
    class FreqAcc : public
        comms::field::Optional<
            typename FreqAccMembers::FreqAcc,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename FreqAccMembers::FreqAcc,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::FreqAccCommon::name();
        }
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<4U>,
            comms::option::def::BitmaskReservedBits<0xFFFFFB00UL, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<4U>,
                comms::option::def::BitmaskReservedBits<0xFFFFFB00UL, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_pos.
        ///      @li @b BitIdx_time.
        ///      @li @b BitIdx_clockD.
        ///      @li @b BitIdx_tp.
        ///      @li @b BitIdx_clockF.
        ///      @li @b BitIdx_lla.
        ///      @li @b BitIdx_altInv.
        ///      @li @b BitIdx_prevTm.
        ///      @li @b BitIdx_utc.
        COMMS_BITMASK_BITS(
            pos=0,
            time=1,
            clockD=2,
            tp=3,
            clockF=4,
            lla=5,
            altInv=6,
            prevTm=7,
            utc=10
        );

        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_pos() and @b setBitValue_pos().
        ///      @li @b getBitValue_time() and @b setBitValue_time().
        ///      @li @b getBitValue_clockD() and @b setBitValue_clockD().
        ///      @li @b getBitValue_tp() and @b setBitValue_tp().
        ///      @li @b getBitValue_clockF() and @b setBitValue_clockF().
        ///      @li @b getBitValue_lla() and @b setBitValue_lla().
        ///      @li @b getBitValue_altInv() and @b setBitValue_altInv().
        ///      @li @b getBitValue_prevTm() and @b setBitValue_prevTm().
        ///      @li @b getBitValue_utc() and @b setBitValue_utc().
        COMMS_BITMASK_BITS_ACCESS(
            pos,
            time,
            clockD,
            tp,
            clockF,
            lla,
            altInv,
            prevTm,
            utc
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::AidIniFieldsCommon::FlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::AidIniFieldsCommon::FlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidIniFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        EcefX,
        Lat,
        EcefY,
        Lon,
        EcefZ,
        Alt,
        PosAcc,
        TmCfg,
        Wno,
        Date,
        Tow,
        Time,
        TowNs,
        TAccMs,
        TAccNs,
        ClkD,
        Freq,
        ClkDAcc,
        FreqAcc,
        Flags
    >;
};

/// @brief Definition of <b>"AID-INI"</b> message class.
/// @details
///     See @ref AidIniFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/AidIni.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class AidIni : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidIni>,
        comms::option::def::FieldsImpl<typename AidIniFields<TOpt>::All>,
        comms::option::def::MsgType<AidIni<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidIni>,
            comms::option::def::FieldsImpl<typename AidIniFields<TOpt>::All>,
            comms::option::def::MsgType<AidIni<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_ecefX index, @b Field_ecefX type and @b field_ecefX() access fuction
    ///         for @ref AidIniFields::EcefX field.
    ///     @li @b FieldIdx_lat index, @b Field_lat type and @b field_lat() access fuction
    ///         for @ref AidIniFields::Lat field.
    ///     @li @b FieldIdx_ecefY index, @b Field_ecefY type and @b field_ecefY() access fuction
    ///         for @ref AidIniFields::EcefY field.
    ///     @li @b FieldIdx_lon index, @b Field_lon type and @b field_lon() access fuction
    ///         for @ref AidIniFields::Lon field.
    ///     @li @b FieldIdx_ecefZ index, @b Field_ecefZ type and @b field_ecefZ() access fuction
    ///         for @ref AidIniFields::EcefZ field.
    ///     @li @b FieldIdx_alt index, @b Field_alt type and @b field_alt() access fuction
    ///         for @ref AidIniFields::Alt field.
    ///     @li @b FieldIdx_posAcc index, @b Field_posAcc type and @b field_posAcc() access fuction
    ///         for @ref AidIniFields::PosAcc field.
    ///     @li @b FieldIdx_tmCfg index, @b Field_tmCfg type and @b field_tmCfg() access fuction
    ///         for @ref AidIniFields::TmCfg field.
    ///     @li @b FieldIdx_wno index, @b Field_wno type and @b field_wno() access fuction
    ///         for @ref AidIniFields::Wno field.
    ///     @li @b FieldIdx_date index, @b Field_date type and @b field_date() access fuction
    ///         for @ref AidIniFields::Date field.
    ///     @li @b FieldIdx_tow index, @b Field_tow type and @b field_tow() access fuction
    ///         for @ref AidIniFields::Tow field.
    ///     @li @b FieldIdx_time index, @b Field_time type and @b field_time() access fuction
    ///         for @ref AidIniFields::Time field.
    ///     @li @b FieldIdx_towNs index, @b Field_towNs type and @b field_towNs() access fuction
    ///         for @ref AidIniFields::TowNs field.
    ///     @li @b FieldIdx_tAccMs index, @b Field_tAccMs type and @b field_tAccMs() access fuction
    ///         for @ref AidIniFields::TAccMs field.
    ///     @li @b FieldIdx_tAccNs index, @b Field_tAccNs type and @b field_tAccNs() access fuction
    ///         for @ref AidIniFields::TAccNs field.
    ///     @li @b FieldIdx_clkD index, @b Field_clkD type and @b field_clkD() access fuction
    ///         for @ref AidIniFields::ClkD field.
    ///     @li @b FieldIdx_freq index, @b Field_freq type and @b field_freq() access fuction
    ///         for @ref AidIniFields::Freq field.
    ///     @li @b FieldIdx_clkDAcc index, @b Field_clkDAcc type and @b field_clkDAcc() access fuction
    ///         for @ref AidIniFields::ClkDAcc field.
    ///     @li @b FieldIdx_freqAcc index, @b Field_freqAcc type and @b field_freqAcc() access fuction
    ///         for @ref AidIniFields::FreqAcc field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref AidIniFields::Flags field.
    COMMS_MSG_FIELDS_NAMES(
        ecefX,
        lat,
        ecefY,
        lon,
        ecefZ,
        alt,
        posAcc,
        tmCfg,
        wno,
        date,
        tow,
        time,
        towNs,
        tAccMs,
        tAccNs,
        clkD,
        freq,
        clkDAcc,
        freqAcc,
        flags
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 22U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 74U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::AidIniCommon::name();
    }

    /// @brief Custom read functionality
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = Base::doRead(iter, len);
        if (es != comms::ErrorStatus::Success) {
            return es;
        }

        refresh_ecefXLat(true);
        refresh_ecefYLon(true);
        refresh_ecefZAlt(true);
        refresh_wnoDate(true);
        refresh_towTime(true);
        refresh_clkDFreq(true);
        refresh_clkDFreqAcc(true);

        return comms::ErrorStatus::Success;
    }

    /// @brief Custom refresh functionality
    bool doRefresh()
    {
        bool updated = Base::doRefresh();
        updated = refresh_ecefXLat(false) || updated;
        updated = refresh_ecefYLon(false) || updated;
        updated = refresh_ecefZAlt(false) || updated;
        updated = refresh_wnoDate(false) || updated;
        updated = refresh_towTime(false) || updated;
        updated = refresh_clkDFreq(false) || updated;    
        updated = refresh_clkDFreqAcc(false) || updated;    
        return updated;
    }

private:
    template <typename TFirst, typename TSecond>
    static bool refreshFields(TFirst& first, TSecond& second, bool enableSecond, bool updateValue)
    {
        if ((first.isMissing() == enableSecond) &&
            (second.doesExist() == enableSecond)) {
            return false;
        }

        auto firstMode = comms::field::OptionalMode::Missing;
        auto secondMode = comms::field::OptionalMode::Exists;
        if (!enableSecond) {
            std::swap(firstMode, secondMode);
        }

        first.setMode(firstMode);
        second.setMode(secondMode);

        if (!updateValue) {
            return true;
        }

        if (enableSecond) {
            second.field() = 
                comms::field_cast<typename std::decay<decltype(second.field())>::type>(
                    first.field());
        }
        else {
            first.field() = 
                comms::field_cast<typename std::decay<decltype(first.field())>::type>(
                    second.field());
        }

        return true;
    }

    bool refresh_ecefXLat(bool updateValue)
    {
        return refreshFields(field_ecefX(), field_lat(), field_flags().getBitValue_lla(), updateValue);
    }

    bool refresh_ecefYLon(bool updateValue)
    {
        return refreshFields(field_ecefY(), field_lon(), field_flags().getBitValue_lla(), updateValue);
    } 

    bool refresh_ecefZAlt(bool updateValue)
    {
        return refreshFields(field_ecefZ(), field_alt(), field_flags().getBitValue_lla(), updateValue);
    }   

    bool refresh_wnoDate(bool upadteValue)
    {
        return refreshFields(field_wno(), field_date(), field_flags().getBitValue_utc(), upadteValue);
    }

    bool refresh_towTime(bool upadteValue)
    {
        return refreshFields(field_tow(), field_time(), field_flags().getBitValue_utc(), upadteValue);
    }

    bool refresh_clkDFreq(bool updateValue)
    {
        return refreshFields(field_clkD(), field_freq(), field_flags().getBitValue_clockF(), updateValue);
    }

    bool refresh_clkDFreqAcc(bool updateValue)
    {
        return refreshFields(field_clkDAcc(), field_freqAcc(), field_flags().getBitValue_clockF(), updateValue);
    }
};

} // namespace message

} // namespace cc_ublox
