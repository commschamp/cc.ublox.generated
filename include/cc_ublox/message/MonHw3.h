// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains definition of <b>"MON-HW3"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/message/MonHw3Common.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/field/String.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MonHw3.
/// @tparam TOpt Extra options
/// @see @ref MonHw3
/// @headerfile cc_ublox/message/MonHw3.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MonHw3Fields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MonHw3FieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonHw3FieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"nPins"</b> field.
    class NPins : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MonHw3FieldsCommon::NPinsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonHw3FieldsCommon::NPinsCommon::name();
        }
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xF8U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xF8U, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_rctCalib, @b getBitValue_rctCalib() and @b setBitValue_rctCalib().
        ///      @li @b BitIdx_safeBoot, @b getBitValue_safeBoot() and @b setBitValue_safeBoot().
        ///      @li @b BitIdx_xtalAbsent, @b getBitValue_xtalAbsent() and @b setBitValue_xtalAbsent().
        COMMS_BITMASK_BITS_SEQ(
            rctCalib,
            safeBoot,
            xtalAbsent
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::MonHw3FieldsCommon::FlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::MonHw3FieldsCommon::FlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonHw3FieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"hwVersion"</b> field.
    class HwVersion : public
        comms::field::String<
            cc_ublox::field::FieldBase<>,
            typename TOpt::message::MonHw3Fields::HwVersion,
            comms::option::def::SequenceFixedSize<10U>
        >
    {
        using Base =
            comms::field::String<
                cc_ublox::field::FieldBase<>,
                typename TOpt::message::MonHw3Fields::HwVersion,
                comms::option::def::SequenceFixedSize<10U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonHw3FieldsCommon::HwVersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved0"</b> field.
    class Reserved0 : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::MonHw3Fields::Reserved0,
            comms::option::def::SequenceFixedSize<9U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::MonHw3Fields::Reserved0,
                comms::option::def::SequenceFixedSize<9U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonHw3FieldsCommon::Reserved0Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"pinId"</b> field.
            class PinId : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinIdCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinIdCommon::name();
                }
            };

            /// @brief Scope for all the member fields of
            ///     @ref PinMask field.
            struct PinMaskMembers
            {
                /// @brief Definition of <b>"bitsLow"</b> field.
                class BitsLow : public
                    comms::field::BitmaskValue<
                        cc_ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<1U>
                    >
                {
                    using Base =
                        comms::field::BitmaskValue<
                            cc_ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<1U>
                        >;
                public:
                    /// @brief Provides names and generates access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values and functions are:
                    ///      @li @b BitIdx_periphPIO, @b getBitValue_periphPIO() and @b setBitValue_periphPIO().
                    COMMS_BITMASK_BITS_SEQ(
                        periphPIO
                    );

                    /// @brief Retrieve name of the bit.
                    /// @see @ref cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::BitsLowCommon::bitName().
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::BitsLowCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::BitsLowCommon::name();
                    }
                };

                /// @brief Definition of <b>"pinBank"</b> field.
                /// @see @ref cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::ValueType
                class PinBank : public
                    comms::field::EnumValue<
                        cc_ublox::field::FieldBase<>,
                        cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::ValueType,
                        comms::option::def::FixedBitLength<3U>,
                        comms::option::def::ValidNumValueRange<0, 7>
                    >
                {
                    using Base =
                        comms::field::EnumValue<
                            cc_ublox::field::FieldBase<>,
                            cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::ValueType,
                            comms::option::def::FixedBitLength<3U>,
                            comms::option::def::ValidNumValueRange<0, 7>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Single value name info entry.
                    using ValueNameInfo = cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::ValueNameInfo;

                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @see @ref cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::ValueNamesMapInfo.
                    using ValueNamesMapInfo = cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::ValueNamesMapInfo;

                    /// @brief Retrieve name of the enum value.
                    /// @see @ref cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::valueName().
                    static const char* valueName(ValueType val)
                    {
                        return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::valueName(val);
                    }

                    /// @brief Retrieve name of the enum value.
                    /// @see @ref cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::valueName().
                    static const char* valueNameOf(ValueType val)
                    {
                        return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::valueName(val);
                    }

                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::getValue());
                    }

                    /// @brief Retrieve map of enum value names.
                    /// @see @ref cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::valueNamesMap().
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::valueNamesMap();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::PinBankCommon::name();
                    }
                };

                /// @brief Definition of <b>"bitsHigh"</b> field.
                class BitsHigh : public
                    comms::field::BitmaskValue<
                        cc_ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<12U>,
                        comms::option::def::BitmaskReservedBits<0xFC0U, 0x0U>
                    >
                {
                    using Base =
                        comms::field::BitmaskValue<
                            cc_ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<12U>,
                            comms::option::def::BitmaskReservedBits<0xFC0U, 0x0U>
                        >;
                public:
                    /// @brief Provides names and generates access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values and functions are:
                    ///      @li @b BitIdx_direction, @b getBitValue_direction() and @b setBitValue_direction().
                    ///      @li @b BitIdx_value, @b getBitValue_value() and @b setBitValue_value().
                    ///      @li @b BitIdx_vpManager, @b getBitValue_vpManager() and @b setBitValue_vpManager().
                    ///      @li @b BitIdx_pioIrq, @b getBitValue_pioIrq() and @b setBitValue_pioIrq().
                    ///      @li @b BitIdx_pioPullHigh, @b getBitValue_pioPullHigh() and @b setBitValue_pioPullHigh().
                    ///      @li @b BitIdx_pioPullLow, @b getBitValue_pioPullLow() and @b setBitValue_pioPullLow().
                    COMMS_BITMASK_BITS_SEQ(
                        direction,
                        value,
                        vpManager,
                        pioIrq,
                        pioPullHigh,
                        pioPullLow
                    );

                    /// @brief Retrieve name of the bit.
                    /// @see @ref cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::BitsHighCommon::bitName().
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::BitsHighCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskMembersCommon::BitsHighCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       BitsLow,
                       PinBank,
                       BitsHigh
                    >;
            };

            /// @brief Definition of <b>"pinMask"</b> field.
            class PinMask : public
                comms::field::Bitfield<
                    cc_ublox::field::FieldBase<>,
                    typename PinMaskMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bitfield<
                        cc_ublox::field::FieldBase<>,
                        typename PinMaskMembers::All,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_bitsLow index, @b Field_bitsLow type and @b field_bitsLow() access function -
                ///         for cc_ublox::message::MonHw3Fields::ListMembers::ElementMembers::PinMaskMembers::BitsLow member field.
                ///     @li @b FieldIdx_pinBank index, @b Field_pinBank type and @b field_pinBank() access function -
                ///         for cc_ublox::message::MonHw3Fields::ListMembers::ElementMembers::PinMaskMembers::PinBank member field.
                ///     @li @b FieldIdx_bitsHigh index, @b Field_bitsHigh type and @b field_bitsHigh() access function -
                ///         for cc_ublox::message::MonHw3Fields::ListMembers::ElementMembers::PinMaskMembers::BitsHigh member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    bitsLow,
                    pinBank,
                    bitsHigh
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::PinMaskCommon::name();
                }
            };

            /// @brief Definition of <b>"VP"</b> field.
            class VP : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::VPCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::VPCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved1"</b> field.
            class Reserved1 : public
                cc_ublox::field::Res1<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res1<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved1Common::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   PinId,
                   PinMask,
                   VP,
                   Reserved1
                >;
        };

        /// @brief Definition of <b>"element"</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_pinId index, @b Field_pinId type and @b field_pinId() access function -
            ///         for cc_ublox::message::MonHw3Fields::ListMembers::ElementMembers::PinId member field.
            ///     @li @b FieldIdx_pinMask index, @b Field_pinMask type and @b field_pinMask() access function -
            ///         for cc_ublox::message::MonHw3Fields::ListMembers::ElementMembers::PinMask member field.
            ///     @li @b FieldIdx_vP index, @b Field_vP type and @b field_vP() access function -
            ///         for cc_ublox::message::MonHw3Fields::ListMembers::ElementMembers::VP member field.
            ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access function -
            ///         for cc_ublox::message::MonHw3Fields::ListMembers::ElementMembers::Reserved1 member field.
            COMMS_FIELD_MEMBERS_NAMES(
                pinId,
                pinMask,
                vP,
                reserved1
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonHw3FieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::MonHw3Fields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::MonHw3Fields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonHw3FieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        NPins,
        Flags,
        HwVersion,
        Reserved0,
        List
    >;
};

/// @brief Definition of <b>"MON-HW3"</b> message class.
/// @details
///     See @ref MonHw3Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MonHw3.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MonHw3 : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonHw3,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonHw3>,
        comms::option::def::FieldsImpl<typename MonHw3Fields<TOpt>::All>,
        comms::option::def::MsgType<MonHw3<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonHw3,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonHw3>,
            comms::option::def::FieldsImpl<typename MonHw3Fields<TOpt>::All>,
            comms::option::def::MsgType<MonHw3<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MonHw3Fields::Version field.
    ///     @li @b FieldIdx_nPins index, @b Field_nPins type and @b field_nPins() access fuction
    ///         for @ref MonHw3Fields::NPins field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref MonHw3Fields::Flags field.
    ///     @li @b FieldIdx_hwVersion index, @b Field_hwVersion type and @b field_hwVersion() access fuction
    ///         for @ref MonHw3Fields::HwVersion field.
    ///     @li @b FieldIdx_reserved0 index, @b Field_reserved0 type and @b field_reserved0() access fuction
    ///         for @ref MonHw3Fields::Reserved0 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref MonHw3Fields::List field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        nPins,
        flags,
        hwVersion,
        reserved0,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 22U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MonHw3Common::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_nPins().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_nPins().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_nPins().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_nPins().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
