// Generated by commsdsl2comms v6.2.1

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::TimVrfy message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/ItowCommon.h"
#include "cc_ublox/field/Res1Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::TimVrfy message.
/// @see cc_ublox::message::TimVrfyFields
struct TimVrfyFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::TimVrfyFields::Itow field.
    using ItowCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::TimVrfyFields::Frac field.
    struct FracCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::TimVrfyFields::Frac field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::TimVrfyFields::Frac field.
        static const char* name()
        {
            return "frac";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::TimVrfyFields::DeltaMs field.
    struct DeltaMsCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::TimVrfyFields::DeltaMs field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::TimVrfyFields::DeltaMs field.
        static const char* name()
        {
            return "deltaMs";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::TimVrfyFields::DeltaNs field.
    struct DeltaNsCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::TimVrfyFields::DeltaNs field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::TimVrfyFields::DeltaNs field.
        static const char* name()
        {
            return "deltaNs";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::TimVrfyFields::Wno field.
    struct WnoCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::TimVrfyFields::Wno field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::TimVrfyFields::Wno field.
        static const char* name()
        {
            return "wno";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::TimVrfyFields::Flags field.
    struct FlagsMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::TimVrfyFields::FlagsMembers::Src field.
        struct SrcCommon
        {
            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::TimVrfyFields::FlagsMembers::Src field.
            enum class ValueType : std::uint8_t
            {
                NoAiding = 0, ///< value @b NoAiding. 
                RTC = 1, ///< value @b RTC. 
                AidIni = 2, ///< value @b AidIni. 

                // --- Extra values generated for convenience ---
                FirstValue = 0, ///< First defined value.
                LastValue = 2, ///< Last defined value.
                ValuesLimit = 3, ///< Upper limit for defined values.
            };

            /// @brief Single value name info entry
            using ValueNameInfo = const char*;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

            /// @brief Name of the @ref cc_ublox::message::TimVrfyFields::FlagsMembers::Src field.
            static const char* name()
            {
                return "src";
            }

            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                auto namesMapInfo = valueNamesMap();
                if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                    return nullptr;
                }

                return namesMapInfo.first[static_cast<std::size_t>(val)];
            }

            /// @brief Retrieve map of enum value names
            static ValueNamesMapInfo valueNamesMap()
            {
                static const char* Map[] = {
                    "NoAiding",
                    "RTC",
                    "AidIni"
                };
                static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                return std::make_pair(&Map[0], MapSize);
            }
        };

        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::TimVrfyFields::FlagsMembers::Src field.
        using SrcVal = SrcCommon::ValueType;

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::TimVrfyFields::FlagsMembers::Reserved field.
        struct ReservedCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_ublox::message::TimVrfyFields::FlagsMembers::Reserved field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref cc_ublox::message::TimVrfyFields::FlagsMembers::Reserved field.
            static const char* name()
            {
                return "reserved";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::TimVrfyFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_ublox::message::TimVrfyFields::Flags field.
        static const char* name()
        {
            return "flags";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::TimVrfyFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res1Common
    {
        /// @brief Name of the @ref cc_ublox::message::TimVrfyFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::TimVrfy message.
struct TimVrfyCommon
{
    /// @brief Name of the @ref cc_ublox::message::TimVrfy message.
    static const char* name()
    {
        return "TIM-VRFY";
    }
};

} // namespace message

} // namespace cc_ublox
