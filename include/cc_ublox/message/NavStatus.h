// Generated by commsdsl2comms v6.3.4

/// @file
/// @brief Contains definition of <b>"NAV-STATUS"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/GpsFix.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/message/NavStatusCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavStatus.
/// @tparam TOpt Extra options
/// @see @ref NavStatus
/// @headerfile cc_ublox/message/NavStatus.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavStatusFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"gpsFix"</b> field.
    using GpsFix =
        cc_ublox::field::GpsFix<
            TOpt
        >;

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xF0U, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_gpsFixOk, @b getBitValue_gpsFixOk() and @b setBitValue_gpsFixOk().
        ///      @li @b BitIdx_diffSoln, @b getBitValue_diffSoln() and @b setBitValue_diffSoln().
        ///      @li @b BitIdx_wknSet, @b getBitValue_wknSet() and @b setBitValue_wknSet().
        ///      @li @b BitIdx_towSet, @b getBitValue_towSet() and @b setBitValue_towSet().
        COMMS_BITMASK_BITS_SEQ(
            gpsFixOk,
            diffSoln,
            wknSet,
            towSet
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::NavStatusFieldsCommon::FlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::NavStatusFieldsCommon::FlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavStatusFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref FixStat field.
    struct FixStatMembers
    {
        /// @brief Definition of <b>""</b> field.
        class Bits : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<6U>,
                comms::option::def::BitmaskReservedBits<0x3CU, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<6U>,
                    comms::option::def::BitmaskReservedBits<0x3CU, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_diffCorr, @b getBitValue_diffCorr() and @b setBitValue_diffCorr().
            ///      @li @b BitIdx_carrSolnValid, @b getBitValue_carrSolnValid() and @b setBitValue_carrSolnValid().
            COMMS_BITMASK_BITS_SEQ(
                diffCorr,
                carrSolnValid
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::BitsCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::BitsCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::BitsCommon::name();
            }
        };

        /// @brief Definition of <b>"mapMatching"</b> field.
        /// @see @ref cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::ValueType
        class MapMatching : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 3>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavStatusFieldsCommon::FixStatMembersCommon::MapMatchingCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Bits,
               MapMatching
            >;
    };

    /// @brief Definition of <b>"fixStat"</b> field.
    class FixStat : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename FixStatMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename FixStatMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
        ///         for cc_ublox::message::NavStatusFields::FixStatMembers::Bits member field.
        ///     @li @b FieldIdx_mapMatching index, @b Field_mapMatching type and @b field_mapMatching() access function -
        ///         for cc_ublox::message::NavStatusFields::FixStatMembers::MapMatching member field.
        COMMS_FIELD_MEMBERS_NAMES(
            bits,
            mapMatching
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavStatusFieldsCommon::FixStatCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Flags2 field.
    struct Flags2Members
    {
        /// @brief Definition of <b>"psmState"</b> field.
        /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::ValueType
        class PsmState : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 3>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::PsmStateCommon::name();
            }
        };

        /// @brief Definition of <b>"res1"</b> field.
        /// @details
        ///     Reserved field with 1 byte length
        class Res1 : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<1U>,
                comms::option::def::ValidNumValue<0>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<1U>,
                    comms::option::def::ValidNumValue<0>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::Res1Common::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::Res1Common::name();
            }
        };

        /// @brief Definition of <b>"spoofDetState"</b> field.
        /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::ValueType
        class SpoofDetState : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 3>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::SpoofDetStateCommon::name();
            }
        };

        /// @brief Definition of <b>"res2"</b> field.
        /// @details
        ///     Reserved field with 1 byte length
        class Res2 : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<1U>,
                comms::option::def::ValidNumValue<0>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<1U>,
                    comms::option::def::ValidNumValue<0>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::Res2Common::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::Res2Common::name();
            }
        };

        /// @brief Definition of <b>"carrSoln"</b> field.
        /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::ValueType
        class CarrSoln : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavStatusFieldsCommon::Flags2MembersCommon::CarrSolnCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               PsmState,
               Res1,
               SpoofDetState,
               Res2,
               CarrSoln
            >;
    };

    /// @brief Definition of <b>"flags2"</b> field.
    class Flags2 : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename Flags2Members::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename Flags2Members::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_psmState index, @b Field_psmState type and @b field_psmState() access function -
        ///         for cc_ublox::message::NavStatusFields::Flags2Members::PsmState member field.
        ///     @li @b FieldIdx_res1 index, @b Field_res1 type and @b field_res1() access function -
        ///         for cc_ublox::message::NavStatusFields::Flags2Members::Res1 member field.
        ///     @li @b FieldIdx_spoofDetState index, @b Field_spoofDetState type and @b field_spoofDetState() access function -
        ///         for cc_ublox::message::NavStatusFields::Flags2Members::SpoofDetState member field.
        ///     @li @b FieldIdx_res2 index, @b Field_res2 type and @b field_res2() access function -
        ///         for cc_ublox::message::NavStatusFields::Flags2Members::Res2 member field.
        ///     @li @b FieldIdx_carrSoln index, @b Field_carrSoln type and @b field_carrSoln() access function -
        ///         for cc_ublox::message::NavStatusFields::Flags2Members::CarrSoln member field.
        COMMS_FIELD_MEMBERS_NAMES(
            psmState,
            res1,
            spoofDetState,
            res2,
            carrSoln
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavStatusFieldsCommon::Flags2Common::name();
        }
    };

    /// @brief Definition of <b>"ttff"</b> field.
    class Ttff : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavStatusFieldsCommon::TtffCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavStatusFieldsCommon::TtffCommon::name();
        }
    };

    /// @brief Definition of <b>"msss"</b> field.
    class Msss : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavStatusFieldsCommon::MsssCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavStatusFieldsCommon::MsssCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        GpsFix,
        Flags,
        FixStat,
        Flags2,
        Ttff,
        Msss
    >;
};

/// @brief Definition of <b>"NAV-STATUS"</b> message class.
/// @details
///     See @ref NavStatusFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavStatus.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavStatus : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavStatus,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavStatus>,
        comms::option::def::FieldsImpl<typename NavStatusFields<TOpt>::All>,
        comms::option::def::MsgType<NavStatus<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavStatus,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavStatus>,
            comms::option::def::FieldsImpl<typename NavStatusFields<TOpt>::All>,
            comms::option::def::MsgType<NavStatus<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavStatusFields::Itow field.
    ///     @li @b FieldIdx_gpsFix index, @b Field_gpsFix type and @b field_gpsFix() access fuction
    ///         for @ref NavStatusFields::GpsFix field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref NavStatusFields::Flags field.
    ///     @li @b FieldIdx_fixStat index, @b Field_fixStat type and @b field_fixStat() access fuction
    ///         for @ref NavStatusFields::FixStat field.
    ///     @li @b FieldIdx_flags2 index, @b Field_flags2 type and @b field_flags2() access fuction
    ///         for @ref NavStatusFields::Flags2 field.
    ///     @li @b FieldIdx_ttff index, @b Field_ttff type and @b field_ttff() access fuction
    ///         for @ref NavStatusFields::Ttff field.
    ///     @li @b FieldIdx_msss index, @b Field_msss type and @b field_msss() access fuction
    ///         for @ref NavStatusFields::Msss field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        gpsFix,
        flags,
        fixStat,
        flags2,
        ttff,
        msss
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 16U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 16U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavStatusCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
