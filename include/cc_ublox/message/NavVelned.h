// Generated by commsdsl2comms v7.0.0

/// @file
/// @brief Contains definition of <b>"NAV-VELNED"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Heading.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/SAcc.h"
#include "cc_ublox/message/NavVelnedCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavVelned.
/// @tparam TOpt Extra options
/// @see @ref NavVelned
/// @headerfile cc_ublox/message/NavVelned.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavVelnedFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"velN"</b> field.
    class VelN : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimetersPerSecond
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimetersPerSecond
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::VelNCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::VelNCommon::name();
        }
    };

    /// @brief Definition of <b>"velE"</b> field.
    class VelE : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimetersPerSecond
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimetersPerSecond
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::VelECommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::VelECommon::name();
        }
    };

    /// @brief Definition of <b>"velD"</b> field.
    class VelD : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimetersPerSecond
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimetersPerSecond
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::VelDCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::VelDCommon::name();
        }
    };

    /// @brief Definition of <b>"speed"</b> field.
    class Speed : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimetersPerSecond
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimetersPerSecond
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::SpeedCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::SpeedCommon::name();
        }
    };

    /// @brief Definition of <b>"gSpeed"</b> field.
    class GSpeed : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimetersPerSecond
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimetersPerSecond
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::GSpeedCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::GSpeedCommon::name();
        }
    };

    /// @brief Definition of <b>"heading"</b> field.
    using Heading =
        cc_ublox::field::Heading<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"sAcc"</b> field.
    using SAcc =
        cc_ublox::field::SAcc<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"cAcc"</b> field.
    class CAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 100000L>,
            comms::option::def::UnitsDegrees
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 100000L>,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::CAccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 5U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavVelnedFieldsCommon::CAccCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        VelN,
        VelE,
        VelD,
        Speed,
        GSpeed,
        Heading,
        SAcc,
        CAcc
    >;
};

/// @brief Definition of <b>"NAV-VELNED"</b> message class.
/// @details
///     See @ref NavVelnedFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavVelned.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavVelned : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavVelned,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavVelned>,
        comms::option::def::FieldsImpl<typename NavVelnedFields<TOpt>::All>,
        comms::option::def::MsgType<NavVelned<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavVelned,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavVelned>,
            comms::option::def::FieldsImpl<typename NavVelnedFields<TOpt>::All>,
            comms::option::def::MsgType<NavVelned<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavVelnedFields::Itow field.
    ///     @li @b FieldIdx_velN index, @b Field_velN type and @b field_velN() access fuction
    ///         for @ref NavVelnedFields::VelN field.
    ///     @li @b FieldIdx_velE index, @b Field_velE type and @b field_velE() access fuction
    ///         for @ref NavVelnedFields::VelE field.
    ///     @li @b FieldIdx_velD index, @b Field_velD type and @b field_velD() access fuction
    ///         for @ref NavVelnedFields::VelD field.
    ///     @li @b FieldIdx_speed index, @b Field_speed type and @b field_speed() access fuction
    ///         for @ref NavVelnedFields::Speed field.
    ///     @li @b FieldIdx_gSpeed index, @b Field_gSpeed type and @b field_gSpeed() access fuction
    ///         for @ref NavVelnedFields::GSpeed field.
    ///     @li @b FieldIdx_heading index, @b Field_heading type and @b field_heading() access fuction
    ///         for @ref NavVelnedFields::Heading field.
    ///     @li @b FieldIdx_sAcc index, @b Field_sAcc type and @b field_sAcc() access fuction
    ///         for @ref NavVelnedFields::SAcc field.
    ///     @li @b FieldIdx_cAcc index, @b Field_cAcc type and @b field_cAcc() access fuction
    ///         for @ref NavVelnedFields::CAcc field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        velN,
        velE,
        velD,
        speed,
        gSpeed,
        heading,
        sAcc,
        cAcc
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 36U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 36U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavVelnedCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
