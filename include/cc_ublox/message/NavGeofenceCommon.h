// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::NavGeofence message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/GeofenceStateCommon.h"
#include "cc_ublox/field/ItowCommon.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::NavGeofence message.
/// @see cc_ublox::message::NavGeofenceFields
struct NavGeofenceFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavGeofenceFields::Itow field.
    using ItowCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavGeofenceFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavGeofenceFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::NavGeofenceFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavGeofenceFields::Status field.
    struct StatusCommon
    {
        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::NavGeofenceFields::Status field.
        enum class ValueType : std::uint8_t
        {
            NotAvailable = 0, ///< value <b>Not available</b>. 
            Active = 1, ///< value @b Active. 

            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 1, ///< Last defined value.
            ValuesLimit = 2, ///< Upper limit for defined values.
        };

        /// @brief Single value name info entry
        using ValueNameInfo = const char*;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

        /// @brief Name of the @ref cc_ublox::message::NavGeofenceFields::Status field.
        static const char* name()
        {
            return "status";
        }

        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                return nullptr;
            }

            return namesMapInfo.first[static_cast<std::size_t>(val)];
        }

        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const char* Map[] = {
                "Not available",
                "Active"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };

    /// @brief Values enumerator for
    ///     @ref cc_ublox::message::NavGeofenceFields::Status field.
    using StatusVal = StatusCommon::ValueType;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavGeofenceFields::NumFences field.
    struct NumFencesCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavGeofenceFields::NumFences field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::NavGeofenceFields::NumFences field.
        static const char* name()
        {
            return "numFences";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavGeofenceFields::CombState field.
    struct CombStateCommon : public cc_ublox::field::GeofenceStateCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavGeofenceFields::CombState field.
        static const char* name()
        {
            return "combState";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::NavGeofenceFields::List field.
    struct ListMembersCommon
    {
        /// @brief Scope for all the common definitions of the member fields of
        ///     @ref cc_ublox::message::NavGeofenceFields::ListMembers::Element field.
        struct ElementMembersCommon
        {
            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavGeofenceFields::ListMembers::ElementMembers::State field.
            struct StateCommon : public cc_ublox::field::GeofenceStateCommon
            {
                /// @brief Name of the @ref cc_ublox::message::NavGeofenceFields::ListMembers::ElementMembers::State field.
                static const char* name()
                {
                    return "state";
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavGeofenceFields::ListMembers::ElementMembers::Id field.
            struct IdCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::NavGeofenceFields::ListMembers::ElementMembers::Id field.
                using ValueType = std::uint8_t;

                /// @brief Single special value name info entry.
                using SpecialNameInfo = std::pair<ValueType, const char*>;

                /// @brief Type returned from @ref specialNamesMap() member function.
                /// @details The @b first value of the pair is pointer to the map array,
                ///     The @b second value of the pair is the size of the array.
                using SpecialNamesMapInfo = std::pair<const SpecialNameInfo*, std::size_t>;

                /// @brief Name of the @ref cc_ublox::message::NavGeofenceFields::ListMembers::ElementMembers::Id field.
                static const char* name()
                {
                    return "id";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return true;
                }

                /// @brief Special value <b>"NotAvailable"</b>.
                static constexpr ValueType valueNotAvailable()
                {
                    return static_cast<ValueType>(0);
                }

                /// @brief Retrieve map of special value names
                static SpecialNamesMapInfo specialNamesMap()
                {
                    static const SpecialNameInfo Map[] = {
                        std::make_pair(valueNotAvailable(), "NotAvailable")
                    };
                    static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                    return std::make_pair(&Map[0], MapSize);
                }
            };
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::NavGeofenceFields::ListMembers::Element field.
        struct ElementCommon
        {
            /// @brief Name of the @ref cc_ublox::message::NavGeofenceFields::ListMembers::Element field.
            static const char* name()
            {
                return "";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavGeofenceFields::List field.
    struct ListCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavGeofenceFields::List field.
        static const char* name()
        {
            return "list";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::NavGeofence message.
struct NavGeofenceCommon
{
    /// @brief Name of the @ref cc_ublox::message::NavGeofence message.
    static const char* name()
    {
        return "NAV-GEOFENCE";
    }
};

} // namespace message

} // namespace cc_ublox
