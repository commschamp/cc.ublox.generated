// Generated by commsdsl2comms v6.2.1

/// @file
/// @brief Contains definition of <b>"NAV-DGPS"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/message/NavDgpsCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/FloatValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavDgps.
/// @tparam TOpt Extra options
/// @see @ref NavDgps
/// @headerfile cc_ublox/message/NavDgps.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavDgpsFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"age"</b> field.
    class Age : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::AgeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::AgeCommon::name();
        }
    };

    /// @brief Definition of <b>"baseId"</b> field.
    class BaseId : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::BaseIdCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::BaseIdCommon::name();
        }
    };

    /// @brief Definition of <b>"baseHealth"</b> field.
    class BaseHealth : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::BaseHealthCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::BaseHealthCommon::name();
        }
    };

    /// @brief Definition of <b>"numCh"</b> field.
    class NumCh : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::NumChCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::NumChCommon::name();
        }
    };

    /// @brief Definition of <b>"status"</b> field.
    /// @see @ref cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::ValueType
    class Status : public
        comms::field::EnumValue<
            cc_ublox::field::FieldBase<>,
            cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::ValueType,
            comms::option::def::ValidNumValueRange<0, 1>
        >
    {
        using Base =
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::valueName(val);
        }

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::valueName().
        static const char* valueNameOf(ValueType val)
        {
            return cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::StatusCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"svid"</b> field.
            class Svid : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::name();
                }
            };

            /// @brief Scope for all the member fields of
            ///     @ref Flags field.
            struct FlagsMembers
            {
                /// @brief Definition of <b>"channel"</b> field.
                class Channel : public
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FixedBitLength<4U>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_ublox::field::FieldBase<>,
                            std::uint8_t,
                            comms::option::def::FixedBitLength<4U>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ChannelCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ChannelCommon::name();
                    }
                };

                /// @brief Definition of <b>""</b> field.
                class Bits : public
                    comms::field::BitmaskValue<
                        cc_ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<4U>,
                        comms::option::def::BitmaskReservedBits<0xEU, 0x0U>
                    >
                {
                    using Base =
                        comms::field::BitmaskValue<
                            cc_ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<4U>,
                            comms::option::def::BitmaskReservedBits<0xEU, 0x0U>
                        >;
                public:
                    /// @brief Provides names and generates access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values and functions are:
                    ///      @li @b BitIdx_dgpsUsed, @b getBitValue_dgpsUsed() and @b setBitValue_dgpsUsed().
                    COMMS_BITMASK_BITS_SEQ(
                        dgpsUsed
                    );

                    /// @brief Retrieve name of the bit.
                    /// @see @ref cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsCommon::bitName().
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Channel,
                       Bits
                    >;
            };

            /// @brief Definition of <b>"flags"</b> field.
            class Flags : public
                comms::field::Bitfield<
                    cc_ublox::field::FieldBase<>,
                    typename FlagsMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bitfield<
                        cc_ublox::field::FieldBase<>,
                        typename FlagsMembers::All,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_channel index, @b Field_channel type and @b field_channel() access function -
                ///         for cc_ublox::message::NavDgpsFields::ListMembers::ElementMembers::FlagsMembers::Channel member field.
                ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
                ///         for cc_ublox::message::NavDgpsFields::ListMembers::ElementMembers::FlagsMembers::Bits member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    channel,
                    bits
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsCommon::name();
                }
            };

            /// @brief Definition of <b>"ageC"</b> field.
            class AgeC : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsMilliseconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::UnitsMilliseconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::AgeCCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::AgeCCommon::name();
                }
            };

            /// @brief Definition of <b>"prc"</b> field.
            class Prc : public
                comms::field::FloatValue<
                    cc_ublox::field::FieldBase<>,
                    float,
                    comms::option::def::UnitsMeters
                >
            {
                using Base =
                    comms::field::FloatValue<
                        cc_ublox::field::FieldBase<>,
                        float,
                        comms::option::def::UnitsMeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::PrcCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 0U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::PrcCommon::name();
                }
            };

            /// @brief Definition of <b>"prrc"</b> field.
            class Prrc : public
                comms::field::FloatValue<
                    cc_ublox::field::FieldBase<>,
                    float,
                    comms::option::def::UnitsMetersPerSecond
                >
            {
                using Base =
                    comms::field::FloatValue<
                        cc_ublox::field::FieldBase<>,
                        float,
                        comms::option::def::UnitsMetersPerSecond
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::PrrcCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 0U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementMembersCommon::PrrcCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Svid,
                   Flags,
                   AgeC,
                   Prc,
                   Prrc
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access function -
            ///         for cc_ublox::message::NavDgpsFields::ListMembers::ElementMembers::Svid member field.
            ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access function -
            ///         for cc_ublox::message::NavDgpsFields::ListMembers::ElementMembers::Flags member field.
            ///     @li @b FieldIdx_ageC index, @b Field_ageC type and @b field_ageC() access function -
            ///         for cc_ublox::message::NavDgpsFields::ListMembers::ElementMembers::AgeC member field.
            ///     @li @b FieldIdx_prc index, @b Field_prc type and @b field_prc() access function -
            ///         for cc_ublox::message::NavDgpsFields::ListMembers::ElementMembers::Prc member field.
            ///     @li @b FieldIdx_prrc index, @b Field_prrc type and @b field_prrc() access function -
            ///         for cc_ublox::message::NavDgpsFields::ListMembers::ElementMembers::Prrc member field.
            COMMS_FIELD_MEMBERS_NAMES(
                svid,
                flags,
                ageC,
                prc,
                prrc
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavDgpsFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::NavDgpsFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::NavDgpsFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDgpsFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Age,
        BaseId,
        BaseHealth,
        NumCh,
        Status,
        Reserved1,
        List
    >;
};

/// @brief Definition of <b>"NAV-DGPS"</b> message class.
/// @details
///     See @ref NavDgpsFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavDgps.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavDgps : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavDgps,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavDgps>,
        comms::option::def::FieldsImpl<typename NavDgpsFields<TOpt>::All>,
        comms::option::def::MsgType<NavDgps<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavDgps,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavDgps>,
            comms::option::def::FieldsImpl<typename NavDgpsFields<TOpt>::All>,
            comms::option::def::MsgType<NavDgps<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavDgpsFields::Itow field.
    ///     @li @b FieldIdx_age index, @b Field_age type and @b field_age() access fuction
    ///         for @ref NavDgpsFields::Age field.
    ///     @li @b FieldIdx_baseId index, @b Field_baseId type and @b field_baseId() access fuction
    ///         for @ref NavDgpsFields::BaseId field.
    ///     @li @b FieldIdx_baseHealth index, @b Field_baseHealth type and @b field_baseHealth() access fuction
    ///         for @ref NavDgpsFields::BaseHealth field.
    ///     @li @b FieldIdx_numCh index, @b Field_numCh type and @b field_numCh() access fuction
    ///         for @ref NavDgpsFields::NumCh field.
    ///     @li @b FieldIdx_status index, @b Field_status type and @b field_status() access fuction
    ///         for @ref NavDgpsFields::Status field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavDgpsFields::Reserved1 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref NavDgpsFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        age,
        baseId,
        baseHealth,
        numCh,
        status,
        reserved1,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 16U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavDgpsCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numCh().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numCh().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_numCh().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_numCh().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
