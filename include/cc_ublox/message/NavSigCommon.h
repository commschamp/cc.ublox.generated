// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::NavSig message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/GnssIdCommon.h"
#include "cc_ublox/field/ItowCommon.h"
#include "cc_ublox/field/Res2Common.h"
#include "cc_ublox/field/Res4Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::NavSig message.
/// @see cc_ublox::message::NavSigFields
struct NavSigFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavSigFields::Itow field.
    using ItowCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavSigFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavSigFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::NavSigFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavSigFields::NumSigs field.
    struct NumSigsCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavSigFields::NumSigs field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::NavSigFields::NumSigs field.
        static const char* name()
        {
            return "numSigs";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavSigFields::Reserved0 field.
    struct Reserved0Common : public cc_ublox::field::Res2Common
    {
        /// @brief Name of the @ref cc_ublox::message::NavSigFields::Reserved0 field.
        static const char* name()
        {
            return "reserved0";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::NavSigFields::List field.
    struct ListMembersCommon
    {
        /// @brief Scope for all the common definitions of the member fields of
        ///     @ref cc_ublox::message::NavSigFields::ListMembers::Element field.
        struct ElementMembersCommon
        {
            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::GnssId field.
            using GnssIdCommon = cc_ublox::field::GnssIdCommon;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::Svid field.
            struct SvidCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::NavSigFields::ListMembers::ElementMembers::Svid field.
                using ValueType = std::uint8_t;

                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::Svid field.
                static const char* name()
                {
                    return "svid";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigId field.
            struct SigIdCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigId field.
                using ValueType = std::uint8_t;

                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigId field.
                static const char* name()
                {
                    return "sigId";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::FreqId field.
            struct FreqIdCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::NavSigFields::ListMembers::ElementMembers::FreqId field.
                using ValueType = std::uint8_t;

                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::FreqId field.
                static const char* name()
                {
                    return "freqId";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::PrRes field.
            struct PrResCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::NavSigFields::ListMembers::ElementMembers::PrRes field.
                using ValueType = std::int16_t;

                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::PrRes field.
                static const char* name()
                {
                    return "prRes";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::QualityInd field.
            struct QualityIndCommon
            {
                /// @brief Values enumerator for
                ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::QualityInd field.
                enum class ValueType : std::uint8_t
                {
                    NoSignal = 0, ///< value <b>no signal</b>. 
                    Searching = 1, ///< value <b>searching</b>. 
                    Acquired = 2, ///< value <b>signal acquired</b>. 
                    Unusable = 3, ///< value <b>detected but unsable</b>. 
                    CodeLocked = 4, ///< value <b>code locked</b>. 
                    CodeCarrierLocked = 5, ///< value <b>code and carrier locked</b>. 
                    CodeCarrierLocked2 = 6, ///< value <b>code and carrier locked</b>. 
                    CodeCarrierLocked3 = 7, ///< value <b>code and carrier locked</b>. 

                    // --- Extra values generated for convenience ---
                    FirstValue = 0, ///< First defined value.
                    LastValue = 7, ///< Last defined value.
                    ValuesLimit = 8, ///< Upper limit for defined values.
                };

                /// @brief Single value name info entry
                using ValueNameInfo = const char*;

                /// @brief Type returned from @ref valueNamesMap() member function.
                /// @details The @b first value of the pair is pointer to the map array,
                ///     The @b second value of the pair is the size of the array.
                using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::QualityInd field.
                static const char* name()
                {
                    return "qualityInd";
                }

                /// @brief Retrieve name of the enum value
                static const char* valueName(ValueType val)
                {
                    auto namesMapInfo = valueNamesMap();
                    if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                        return nullptr;
                    }

                    return namesMapInfo.first[static_cast<std::size_t>(val)];
                }

                /// @brief Retrieve map of enum value names
                static ValueNamesMapInfo valueNamesMap()
                {
                    static const char* Map[] = {
                        "no signal",
                        "searching",
                        "signal acquired",
                        "detected but unsable",
                        "code locked",
                        "code and carrier locked",
                        "code and carrier locked",
                        "code and carrier locked"
                    };
                    static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                    return std::make_pair(&Map[0], MapSize);
                }
            };

            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::QualityInd field.
            using QualityIndVal = QualityIndCommon::ValueType;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::CorrSource field.
            struct CorrSourceCommon
            {
                /// @brief Values enumerator for
                ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::CorrSource field.
                enum class ValueType : std::uint8_t
                {
                    NoCorrections = 0, ///< value @b NoCorrections. 
                    SBAS = 1, ///< value @b SBAS. 
                    BeiDou = 2, ///< value @b BeiDou. 
                    RTCM2 = 3, ///< value @b RTCM2. 
                    RTCM3_OSR = 4, ///< value @b RTCM3_OSR. 
                    RTCM3_SSR = 5, ///< value @b RTCM3_SSR. 
                    QZSS_SLAS = 6, ///< value @b QZSS_SLAS. 

                    // --- Extra values generated for convenience ---
                    FirstValue = 0, ///< First defined value.
                    LastValue = 6, ///< Last defined value.
                    ValuesLimit = 7, ///< Upper limit for defined values.
                };

                /// @brief Single value name info entry
                using ValueNameInfo = const char*;

                /// @brief Type returned from @ref valueNamesMap() member function.
                /// @details The @b first value of the pair is pointer to the map array,
                ///     The @b second value of the pair is the size of the array.
                using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::CorrSource field.
                static const char* name()
                {
                    return "corrSource";
                }

                /// @brief Retrieve name of the enum value
                static const char* valueName(ValueType val)
                {
                    auto namesMapInfo = valueNamesMap();
                    if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                        return nullptr;
                    }

                    return namesMapInfo.first[static_cast<std::size_t>(val)];
                }

                /// @brief Retrieve map of enum value names
                static ValueNamesMapInfo valueNamesMap()
                {
                    static const char* Map[] = {
                        "NoCorrections",
                        "SBAS",
                        "BeiDou",
                        "RTCM2",
                        "RTCM3_OSR",
                        "RTCM3_SSR",
                        "QZSS_SLAS"
                    };
                    static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                    return std::make_pair(&Map[0], MapSize);
                }
            };

            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::CorrSource field.
            using CorrSourceVal = CorrSourceCommon::ValueType;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::IonoModel field.
            struct IonoModelCommon
            {
                /// @brief Values enumerator for
                ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::IonoModel field.
                enum class ValueType : std::uint8_t
                {
                    NoModel = 0, ///< value @b NoModel. 
                    KlobucharGPS = 1, ///< value @b KlobucharGPS. 
                    SBAS = 2, ///< value @b SBAS. 
                    KlobucharBeiDou = 3, ///< value @b KlobucharBeiDou. 
                    IonoDelay = 8, ///< value @b IonoDelay. 

                    // --- Extra values generated for convenience ---
                    FirstValue = 0, ///< First defined value.
                    LastValue = 8, ///< Last defined value.
                    ValuesLimit = 9, ///< Upper limit for defined values.
                };

                /// @brief Single value name info entry
                using ValueNameInfo = const char*;

                /// @brief Type returned from @ref valueNamesMap() member function.
                /// @details The @b first value of the pair is pointer to the map array,
                ///     The @b second value of the pair is the size of the array.
                using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::IonoModel field.
                static const char* name()
                {
                    return "ionoModel";
                }

                /// @brief Retrieve name of the enum value
                static const char* valueName(ValueType val)
                {
                    auto namesMapInfo = valueNamesMap();
                    if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                        return nullptr;
                    }

                    return namesMapInfo.first[static_cast<std::size_t>(val)];
                }

                /// @brief Retrieve map of enum value names
                static ValueNamesMapInfo valueNamesMap()
                {
                    static const char* Map[] = {
                        "NoModel",
                        "KlobucharGPS",
                        "SBAS",
                        "KlobucharBeiDou",
                        nullptr,
                        nullptr,
                        nullptr,
                        nullptr,
                        "IonoDelay"
                    };
                    static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                    return std::make_pair(&Map[0], MapSize);
                }
            };

            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::IonoModel field.
            using IonoModelVal = IonoModelCommon::ValueType;

            /// @brief Scope for all the common definitions of the member fields of
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlags field.
            struct SigFlagsMembersCommon
            {
                /// @brief Common types and functions for
                ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlagsMembers::Health field.
                struct HealthCommon
                {
                    /// @brief Values enumerator for
                    ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlagsMembers::Health field.
                    enum class ValueType : std::uint8_t
                    {
                        Unknown = 0, ///< value @b Unknown. 
                        Healthy = 1, ///< value @b Healthy. 
                        Unhealthy = 2, ///< value @b Unhealthy. 

                        // --- Extra values generated for convenience ---
                        FirstValue = 0, ///< First defined value.
                        LastValue = 2, ///< Last defined value.
                        ValuesLimit = 3, ///< Upper limit for defined values.
                    };

                    /// @brief Single value name info entry
                    using ValueNameInfo = const char*;

                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @details The @b first value of the pair is pointer to the map array,
                    ///     The @b second value of the pair is the size of the array.
                    using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

                    /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlagsMembers::Health field.
                    static const char* name()
                    {
                        return "health";
                    }

                    /// @brief Retrieve name of the enum value
                    static const char* valueName(ValueType val)
                    {
                        auto namesMapInfo = valueNamesMap();
                        if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                            return nullptr;
                        }

                        return namesMapInfo.first[static_cast<std::size_t>(val)];
                    }

                    /// @brief Retrieve map of enum value names
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        static const char* Map[] = {
                            "Unknown",
                            "Healthy",
                            "Unhealthy"
                        };
                        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                        return std::make_pair(&Map[0], MapSize);
                    }
                };

                /// @brief Values enumerator for
                ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlagsMembers::Health field.
                using HealthVal = HealthCommon::ValueType;

                /// @brief Common types and functions for
                ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlagsMembers::Bits field.
                struct BitsCommon
                {
                    /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlagsMembers::Bits field.
                    static const char* name()
                    {
                        return "bits";
                    }

                    /// @brief Retrieve name of the bit of
                    ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlagsMembers::Bits field.
                    static const char* bitName(std::size_t idx)
                    {
                        static const char* Map[] = {
                            "prSmoothed",
                            "prUsed",
                            "crUsed",
                            "doUsed",
                            "prCorrUsed",
                            "crCorrUsed",
                            "doCorrUsed"
                        };

                        static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                        if (MapSize <= idx) {
                            return nullptr;
                        }

                        return Map[idx];
                    }
                };
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlags field.
            struct SigFlagsCommon
            {
                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::SigFlags field.
                static const char* name()
                {
                    return "sigFlags";
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::Reserved1 field.
            struct Reserved1Common : public cc_ublox::field::Res4Common
            {
                /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::ElementMembers::Reserved1 field.
                static const char* name()
                {
                    return "reserved1";
                }
            };
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::NavSigFields::ListMembers::Element field.
        struct ElementCommon
        {
            /// @brief Name of the @ref cc_ublox::message::NavSigFields::ListMembers::Element field.
            static const char* name()
            {
                return "";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavSigFields::List field.
    struct ListCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavSigFields::List field.
        static const char* name()
        {
            return "list";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::NavSig message.
struct NavSigCommon
{
    /// @brief Name of the @ref cc_ublox::message::NavSig message.
    static const char* name()
    {
        return "NAV-SIG";
    }
};

} // namespace message

} // namespace cc_ublox
