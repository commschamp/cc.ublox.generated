// Generated by commsdsl2comms v6.3.4

/// @file
/// @brief Contains definition of <b>"TIM-SVIN"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/message/TimSvinCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref TimSvin.
/// @tparam TOpt Extra options
/// @see @ref TimSvin
/// @headerfile cc_ublox/message/TimSvin.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct TimSvinFields
{
    /// @brief Definition of <b>"dur"</b> field.
    class Dur : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimSvinFieldsCommon::DurCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::DurCommon::name();
        }
    };

    /// @brief Definition of <b>"meanX"</b> field.
    class MeanX : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimSvinFieldsCommon::MeanXCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::MeanXCommon::name();
        }
    };

    /// @brief Definition of <b>"meanY"</b> field.
    class MeanY : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimSvinFieldsCommon::MeanYCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::MeanYCommon::name();
        }
    };

    /// @brief Definition of <b>"meanZ"</b> field.
    class MeanZ : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimSvinFieldsCommon::MeanZCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::MeanZCommon::name();
        }
    };

    /// @brief Definition of <b>"meanV"</b> field.
    class MeanV : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimSvinFieldsCommon::MeanVCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::MeanVCommon::name();
        }
    };

    /// @brief Definition of <b>"obs"</b> field.
    class Obs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimSvinFieldsCommon::ObsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::ObsCommon::name();
        }
    };

    /// @brief Definition of <b>"valid"</b> field.
    class Valid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimSvinFieldsCommon::ValidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::ValidCommon::name();
        }
    };

    /// @brief Definition of <b>"active"</b> field.
    class Active : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimSvinFieldsCommon::ActiveCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::ActiveCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimSvinFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Dur,
        MeanX,
        MeanY,
        MeanZ,
        MeanV,
        Obs,
        Valid,
        Active,
        Reserved1
    >;
};

/// @brief Definition of <b>"TIM-SVIN"</b> message class.
/// @details
///     See @ref TimSvinFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/TimSvin.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class TimSvin : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::TimSvin,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_TimSvin>,
        comms::option::def::FieldsImpl<typename TimSvinFields<TOpt>::All>,
        comms::option::def::MsgType<TimSvin<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::TimSvin,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_TimSvin>,
            comms::option::def::FieldsImpl<typename TimSvinFields<TOpt>::All>,
            comms::option::def::MsgType<TimSvin<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_dur index, @b Field_dur type and @b field_dur() access fuction
    ///         for @ref TimSvinFields::Dur field.
    ///     @li @b FieldIdx_meanX index, @b Field_meanX type and @b field_meanX() access fuction
    ///         for @ref TimSvinFields::MeanX field.
    ///     @li @b FieldIdx_meanY index, @b Field_meanY type and @b field_meanY() access fuction
    ///         for @ref TimSvinFields::MeanY field.
    ///     @li @b FieldIdx_meanZ index, @b Field_meanZ type and @b field_meanZ() access fuction
    ///         for @ref TimSvinFields::MeanZ field.
    ///     @li @b FieldIdx_meanV index, @b Field_meanV type and @b field_meanV() access fuction
    ///         for @ref TimSvinFields::MeanV field.
    ///     @li @b FieldIdx_obs index, @b Field_obs type and @b field_obs() access fuction
    ///         for @ref TimSvinFields::Obs field.
    ///     @li @b FieldIdx_valid index, @b Field_valid type and @b field_valid() access fuction
    ///         for @ref TimSvinFields::Valid field.
    ///     @li @b FieldIdx_active index, @b Field_active type and @b field_active() access fuction
    ///         for @ref TimSvinFields::Active field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref TimSvinFields::Reserved1 field.
    COMMS_MSG_FIELDS_NAMES(
        dur,
        meanX,
        meanY,
        meanZ,
        meanV,
        obs,
        valid,
        active,
        reserved1
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 28U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 28U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::TimSvinCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
