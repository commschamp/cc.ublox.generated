// Generated by commsdsl2comms v6.3.0

/// @file
/// @brief Contains definition of <b>"NAV-TIMEGLO"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/message/NavTimegloCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavTimeglo.
/// @tparam TOpt Extra options
/// @see @ref NavTimeglo
/// @headerfile cc_ublox/message/NavTimeglo.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavTimegloFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"TOD"</b> field.
    class TOD : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::TODCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::TODCommon::name();
        }
    };

    /// @brief Definition of <b>"fTOD"</b> field.
    class FTOD : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds,
            comms::option::def::ValidNumValueRange<-500000000L, 500000000L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds,
                comms::option::def::ValidNumValueRange<-500000000L, 500000000L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::FTODCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::FTODCommon::name();
        }
    };

    /// @brief Definition of <b>"Nt"</b> field.
    class Nt : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsDays
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsDays
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::NtCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::NtCommon::name();
        }
    };

    /// @brief Definition of <b>"N4"</b> field.
    class N4 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::N4Common::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::N4Common::name();
        }
    };

    /// @brief Definition of <b>"valid"</b> field.
    class Valid : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_todValid, @b getBitValue_todValid() and @b setBitValue_todValid().
        ///      @li @b BitIdx_dateValid, @b getBitValue_dateValid() and @b setBitValue_dateValid().
        COMMS_BITMASK_BITS_SEQ(
            todValid,
            dateValid
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::NavTimegloFieldsCommon::ValidCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::NavTimegloFieldsCommon::ValidCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::ValidCommon::name();
        }
    };

    /// @brief Definition of <b>"tAcc"</b> field.
    class TAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::TAccCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimegloFieldsCommon::TAccCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        TOD,
        FTOD,
        Nt,
        N4,
        Valid,
        TAcc
    >;
};

/// @brief Definition of <b>"NAV-TIMEGLO"</b> message class.
/// @details
///     See @ref NavTimegloFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavTimeglo.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavTimeglo : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavTimeglo,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavTimeglo>,
        comms::option::def::FieldsImpl<typename NavTimegloFields<TOpt>::All>,
        comms::option::def::MsgType<NavTimeglo<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavTimeglo,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavTimeglo>,
            comms::option::def::FieldsImpl<typename NavTimegloFields<TOpt>::All>,
            comms::option::def::MsgType<NavTimeglo<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavTimegloFields::Itow field.
    ///     @li @b FieldIdx_tOD index, @b Field_tOD type and @b field_tOD() access fuction
    ///         for @ref NavTimegloFields::TOD field.
    ///     @li @b FieldIdx_fTOD index, @b Field_fTOD type and @b field_fTOD() access fuction
    ///         for @ref NavTimegloFields::FTOD field.
    ///     @li @b FieldIdx_nt index, @b Field_nt type and @b field_nt() access fuction
    ///         for @ref NavTimegloFields::Nt field.
    ///     @li @b FieldIdx_n4 index, @b Field_n4 type and @b field_n4() access fuction
    ///         for @ref NavTimegloFields::N4 field.
    ///     @li @b FieldIdx_valid index, @b Field_valid type and @b field_valid() access fuction
    ///         for @ref NavTimegloFields::Valid field.
    ///     @li @b FieldIdx_tAcc index, @b Field_tAcc type and @b field_tAcc() access fuction
    ///         for @ref NavTimegloFields::TAcc field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        tOD,
        fTOD,
        nt,
        n4,
        valid,
        tAcc
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 20U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 20U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavTimegloCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
