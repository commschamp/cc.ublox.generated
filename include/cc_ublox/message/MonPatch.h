// Generated by commsdsl2comms v6.1.0

/// @file
/// @brief Contains definition of <b>"MON-PATCH"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/MonPatchCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MonPatch.
/// @tparam TOpt Extra options
/// @see @ref MonPatch
/// @headerfile cc_ublox/message/MonPatch.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MonPatchFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MonPatchFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonPatchFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"nEntries"</b> field.
    class NEntries : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MonPatchFieldsCommon::NEntriesCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonPatchFieldsCommon::NEntriesCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Scope for all the member fields of
            ///     @ref PatchInfo field.
            struct PatchInfoMembers
            {
                /// @brief Definition of <b>""</b> field.
                class Bits : public
                    comms::field::BitmaskValue<
                        cc_ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<1U>
                    >
                {
                    using Base =
                        comms::field::BitmaskValue<
                            cc_ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<1U>
                        >;
                public:
                    /// @brief Provides names and generates access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values and functions are:
                    ///      @li @b BitIdx_activated, @b getBitValue_activated() and @b setBitValue_activated().
                    COMMS_BITMASK_BITS_SEQ(
                        activated
                    );

                    /// @brief Retrieve name of the bit.
                    /// @see @ref cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::BitsCommon::bitName().
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::BitsCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::BitsCommon::name();
                    }
                };

                /// @brief Definition of <b>"location"</b> field.
                /// @see @ref cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::ValueType
                class Location : public
                    comms::field::EnumValue<
                        cc_ublox::field::FieldBase<>,
                        cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::ValueType,
                        comms::option::def::FixedBitLength<2U>,
                        comms::option::def::ValidNumValueRange<0, 3>
                    >
                {
                    using Base =
                        comms::field::EnumValue<
                            cc_ublox::field::FieldBase<>,
                            cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::ValueType,
                            comms::option::def::FixedBitLength<2U>,
                            comms::option::def::ValidNumValueRange<0, 3>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Single value name info entry.
                    using ValueNameInfo = cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::ValueNameInfo;

                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @see @ref cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::ValueNamesMapInfo.
                    using ValueNamesMapInfo = cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::ValueNamesMapInfo;

                    /// @brief Retrieve name of the enum value.
                    /// @see @ref cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::valueName().
                    static const char* valueName(ValueType val)
                    {
                        return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::valueName(val);
                    }

                    /// @brief Retrieve name of the enum value.
                    /// @see @ref cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::valueName().
                    static const char* valueNameOf(ValueType val)
                    {
                        return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::valueName(val);
                    }

                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::getValue());
                    }

                    /// @brief Retrieve map of enum value names.
                    /// @see @ref cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::valueNamesMap().
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::valueNamesMap();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::LocationCommon::name();
                    }
                };

                /// @brief Definition of <b>"res4"</b> field.
                /// @details
                ///     Reserved field with 4 bytes length
                class Res4 : public
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::FixedBitLength<29U>,
                        comms::option::def::ValidNumValue<0>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_ublox::field::FieldBase<>,
                            std::uint32_t,
                            comms::option::def::FixedBitLength<29U>,
                            comms::option::def::ValidNumValue<0>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::Res4Common::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoMembersCommon::Res4Common::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Bits,
                       Location,
                       Res4
                    >;
            };

            /// @brief Definition of <b>"patchInfo"</b> field.
            class PatchInfo : public
                comms::field::Bitfield<
                    cc_ublox::field::FieldBase<>,
                    typename PatchInfoMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bitfield<
                        cc_ublox::field::FieldBase<>,
                        typename PatchInfoMembers::All,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
                ///         for cc_ublox::message::MonPatchFields::ListMembers::ElementMembers::PatchInfoMembers::Bits member field.
                ///     @li @b FieldIdx_location index, @b Field_location type and @b field_location() access function -
                ///         for cc_ublox::message::MonPatchFields::ListMembers::ElementMembers::PatchInfoMembers::Location member field.
                ///     @li @b FieldIdx_res4 index, @b Field_res4 type and @b field_res4() access function -
                ///         for cc_ublox::message::MonPatchFields::ListMembers::ElementMembers::PatchInfoMembers::Res4 member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    bits,
                    location,
                    res4
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchInfoCommon::name();
                }
            };

            /// @brief Definition of <b>"comparatorNumber"</b> field.
            class ComparatorNumber : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::ComparatorNumberCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::ComparatorNumberCommon::name();
                }
            };

            /// @brief Definition of <b>"patchAddress"</b> field.
            class PatchAddress : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchAddressCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchAddressCommon::name();
                }
            };

            /// @brief Definition of <b>"patchData"</b> field.
            class PatchData : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchDataCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementMembersCommon::PatchDataCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   PatchInfo,
                   ComparatorNumber,
                   PatchAddress,
                   PatchData
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_patchInfo index, @b Field_patchInfo type and @b field_patchInfo() access function -
            ///         for cc_ublox::message::MonPatchFields::ListMembers::ElementMembers::PatchInfo member field.
            ///     @li @b FieldIdx_comparatorNumber index, @b Field_comparatorNumber type and @b field_comparatorNumber() access function -
            ///         for cc_ublox::message::MonPatchFields::ListMembers::ElementMembers::ComparatorNumber member field.
            ///     @li @b FieldIdx_patchAddress index, @b Field_patchAddress type and @b field_patchAddress() access function -
            ///         for cc_ublox::message::MonPatchFields::ListMembers::ElementMembers::PatchAddress member field.
            ///     @li @b FieldIdx_patchData index, @b Field_patchData type and @b field_patchData() access function -
            ///         for cc_ublox::message::MonPatchFields::ListMembers::ElementMembers::PatchData member field.
            COMMS_FIELD_MEMBERS_NAMES(
                patchInfo,
                comparatorNumber,
                patchAddress,
                patchData
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonPatchFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::MonPatchFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::MonPatchFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonPatchFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        NEntries,
        List
    >;
};

/// @brief Definition of <b>"MON-PATCH"</b> message class.
/// @details
///     See @ref MonPatchFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MonPatch.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MonPatch : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonPatch,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonPatch>,
        comms::option::def::FieldsImpl<typename MonPatchFields<TOpt>::All>,
        comms::option::def::MsgType<MonPatch<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonPatch,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonPatch>,
            comms::option::def::FieldsImpl<typename MonPatchFields<TOpt>::All>,
            comms::option::def::MsgType<MonPatch<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MonPatchFields::Version field.
    ///     @li @b FieldIdx_nEntries index, @b Field_nEntries type and @b field_nEntries() access fuction
    ///         for @ref MonPatchFields::NEntries field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref MonPatchFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        nEntries,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 4U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MonPatchCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_nEntries().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_nEntries().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_nEntries().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_nEntries().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
