// Generated by commsdsl2comms v6.0.0

/// @file
/// @brief Contains definition of <b>"NAV-SLAS"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/GnssId.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/message/NavSlasCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavSlas.
/// @tparam TOpt Extra options
/// @see @ref NavSlas
/// @headerfile cc_ublox/message/NavSlas.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavSlasFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSlasFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved0"</b> field.
    class Reserved0 : public
        cc_ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::Reserved0Common::name();
        }
    };

    /// @brief Definition of <b>"gmsLon"</b> field.
    class GmsLon : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 1000>,
            comms::option::def::UnitsDegrees
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 1000>,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSlasFieldsCommon::GmsLonCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 3U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::GmsLonCommon::name();
        }
    };

    /// @brief Definition of <b>"gmsLat"</b> field.
    class GmsLat : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 1000>,
            comms::option::def::UnitsDegrees
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 1000>,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSlasFieldsCommon::GmsLatCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 3U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::GmsLatCommon::name();
        }
    };

    /// @brief Definition of <b>"gmsCode"</b> field.
    class GmsCode : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSlasFieldsCommon::GmsCodeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::GmsCodeCommon::name();
        }
    };

    /// @brief Definition of <b>"qzssSvId"</b> field.
    class QzssSvId : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSlasFieldsCommon::QzssSvIdCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::QzssSvIdCommon::name();
        }
    };

    /// @brief Definition of <b>"serviceFlags"</b> field.
    class ServiceFlags : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xF8U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xF8U, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_gmsAvailable, @b getBitValue_gmsAvailable() and @b setBitValue_gmsAvailable().
        ///      @li @b BitIdx_qzssSvAvailable, @b getBitValue_qzssSvAvailable() and @b setBitValue_qzssSvAvailable().
        ///      @li @b BitIdx_testMode, @b getBitValue_testMode() and @b setBitValue_testMode().
        COMMS_BITMASK_BITS_SEQ(
            gmsAvailable,
            qzssSvAvailable,
            testMode
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::NavSlasFieldsCommon::ServiceFlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::NavSlasFieldsCommon::ServiceFlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::ServiceFlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"cnt"</b> field.
    class Cnt : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSlasFieldsCommon::CntCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::CntCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"gnssId"</b> field.
            using GnssId =
                cc_ublox::field::GnssId<
                    TOpt
                >;

            /// @brief Definition of <b>"svid"</b> field.
            class Svid : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavSlasFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSlasFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::name();
                }
            };

            /// @brief Definition of <b>"sigId"</b> field.
            class SigId : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavSlasFieldsCommon::ListMembersCommon::ElementMembersCommon::SigIdCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSlasFieldsCommon::ListMembersCommon::ElementMembersCommon::SigIdCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved1"</b> field.
            class Reserved1 : public
                cc_ublox::field::Res4<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res4<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSlasFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved1Common::name();
                }
            };

            /// @brief Definition of <b>"prc"</b> field.
            class Prc : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int16_t,
                    comms::option::def::UnitsCentimeters
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::int16_t,
                        comms::option::def::UnitsCentimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavSlasFieldsCommon::ListMembersCommon::ElementMembersCommon::PrcCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSlasFieldsCommon::ListMembersCommon::ElementMembersCommon::PrcCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   GnssId,
                   Svid,
                   SigId,
                   Reserved1,
                   Prc
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_gnssId index, @b Field_gnssId type and @b field_gnssId() access function -
            ///         for cc_ublox::message::NavSlasFields::ListMembers::ElementMembers::GnssId member field.
            ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access function -
            ///         for cc_ublox::message::NavSlasFields::ListMembers::ElementMembers::Svid member field.
            ///     @li @b FieldIdx_sigId index, @b Field_sigId type and @b field_sigId() access function -
            ///         for cc_ublox::message::NavSlasFields::ListMembers::ElementMembers::SigId member field.
            ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access function -
            ///         for cc_ublox::message::NavSlasFields::ListMembers::ElementMembers::Reserved1 member field.
            ///     @li @b FieldIdx_prc index, @b Field_prc type and @b field_prc() access function -
            ///         for cc_ublox::message::NavSlasFields::ListMembers::ElementMembers::Prc member field.
            COMMS_FIELD_MEMBERS_NAMES(
                gnssId,
                svid,
                sigId,
                reserved1,
                prc
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavSlasFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::NavSlasFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::NavSlasFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSlasFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Version,
        Reserved0,
        GmsLon,
        GmsLat,
        GmsCode,
        QzssSvId,
        ServiceFlags,
        Cnt,
        List
    >;
};

/// @brief Definition of <b>"NAV-SLAS"</b> message class.
/// @details
///     See @ref NavSlasFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavSlas.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavSlas : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavSlas,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavSlas>,
        comms::option::def::FieldsImpl<typename NavSlasFields<TOpt>::All>,
        comms::option::def::MsgType<NavSlas<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavSlas,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavSlas>,
            comms::option::def::FieldsImpl<typename NavSlasFields<TOpt>::All>,
            comms::option::def::MsgType<NavSlas<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavSlasFields::Itow field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavSlasFields::Version field.
    ///     @li @b FieldIdx_reserved0 index, @b Field_reserved0 type and @b field_reserved0() access fuction
    ///         for @ref NavSlasFields::Reserved0 field.
    ///     @li @b FieldIdx_gmsLon index, @b Field_gmsLon type and @b field_gmsLon() access fuction
    ///         for @ref NavSlasFields::GmsLon field.
    ///     @li @b FieldIdx_gmsLat index, @b Field_gmsLat type and @b field_gmsLat() access fuction
    ///         for @ref NavSlasFields::GmsLat field.
    ///     @li @b FieldIdx_gmsCode index, @b Field_gmsCode type and @b field_gmsCode() access fuction
    ///         for @ref NavSlasFields::GmsCode field.
    ///     @li @b FieldIdx_qzssSvId index, @b Field_qzssSvId type and @b field_qzssSvId() access fuction
    ///         for @ref NavSlasFields::QzssSvId field.
    ///     @li @b FieldIdx_serviceFlags index, @b Field_serviceFlags type and @b field_serviceFlags() access fuction
    ///         for @ref NavSlasFields::ServiceFlags field.
    ///     @li @b FieldIdx_cnt index, @b Field_cnt type and @b field_cnt() access fuction
    ///         for @ref NavSlasFields::Cnt field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref NavSlasFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        version,
        reserved0,
        gmsLon,
        gmsLat,
        gmsCode,
        qzssSvId,
        serviceFlags,
        cnt,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 20U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavSlasCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_cnt().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_cnt().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_cnt().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_cnt().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
