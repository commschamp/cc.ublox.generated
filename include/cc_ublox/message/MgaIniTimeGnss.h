// Generated by commsdsl2comms v6.3.3

/// @file
/// @brief Contains definition of <b>"MGA-BDS-TIME_GNSS"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/GnssId.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/message/MgaIniTimeGnssCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MgaIniTimeGnss.
/// @tparam TOpt Extra options
/// @see @ref MgaIniTimeGnss
/// @headerfile cc_ublox/message/MgaIniTimeGnss.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MgaIniTimeGnssFields
{
    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<17>,
            comms::option::def::ValidNumValue<17>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<17>,
                comms::option::def::ValidNumValue<17>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::TypeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::TypeCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(17);
            return true;
        }
    };

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Ref field.
    struct RefMembers
    {
        /// @brief Definition of <b>"source"</b> field.
        /// @see @ref cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::ValueType
        class Source : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::ValueType,
                comms::option::def::FixedBitLength<4U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::ValueType,
                    comms::option::def::FixedBitLength<4U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::SourceCommon::name();
            }
        };

        /// @brief Definition of <b>""</b> field.
        class Bits : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<4U>,
                comms::option::def::BitmaskReservedBits<0xCU, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<4U>,
                    comms::option::def::BitmaskReservedBits<0xCU, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_fall, @b getBitValue_fall() and @b setBitValue_fall().
            ///      @li @b BitIdx_last, @b getBitValue_last() and @b setBitValue_last().
            COMMS_BITMASK_BITS_SEQ(
                fall,
                last
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::BitsCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::BitsCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefMembersCommon::BitsCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Source,
               Bits
            >;
    };

    /// @brief Definition of <b>"ref"</b> field.
    class Ref : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename RefMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename RefMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_source index, @b Field_source type and @b field_source() access function -
        ///         for cc_ublox::message::MgaIniTimeGnssFields::RefMembers::Source member field.
        ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
        ///         for cc_ublox::message::MgaIniTimeGnssFields::RefMembers::Bits member field.
        COMMS_FIELD_MEMBERS_NAMES(
            source,
            bits
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::RefCommon::name();
        }
    };

    /// @brief Definition of <b>"gnssId"</b> field.
    using GnssId =
        cc_ublox::field::GnssId<
            TOpt
        >;

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"week"</b> field.
    class Week : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::WeekCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::WeekCommon::name();
        }
    };

    /// @brief Definition of <b>"iTOW"</b> field.
    using Tow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"ns"</b> field.
    class Ns : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::NsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::NsCommon::name();
        }
    };

    /// @brief Definition of <b>"tAccS"</b> field.
    class TAccS : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::TAccSCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::TAccSCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"tAccNs"</b> field.
    class TAccNs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::TAccNsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaIniTimeGnssFieldsCommon::TAccNsCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Type,
        Version,
        Ref,
        GnssId,
        Reserved1,
        Week,
        Tow,
        Ns,
        TAccS,
        Reserved2,
        TAccNs
    >;
};

/// @brief Definition of <b>"MGA-BDS-TIME_GNSS"</b> message class.
/// @details
///     See @ref MgaIniTimeGnssFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MgaIniTimeGnss.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MgaIniTimeGnss : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MgaIniTimeGnss,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaIni>,
        comms::option::def::FieldsImpl<typename MgaIniTimeGnssFields<TOpt>::All>,
        comms::option::def::MsgType<MgaIniTimeGnss<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MgaIniTimeGnss,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaIni>,
            comms::option::def::FieldsImpl<typename MgaIniTimeGnssFields<TOpt>::All>,
            comms::option::def::MsgType<MgaIniTimeGnss<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref MgaIniTimeGnssFields::Type field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MgaIniTimeGnssFields::Version field.
    ///     @li @b FieldIdx_ref index, @b Field_ref type and @b field_ref() access fuction
    ///         for @ref MgaIniTimeGnssFields::Ref field.
    ///     @li @b FieldIdx_gnssId index, @b Field_gnssId type and @b field_gnssId() access fuction
    ///         for @ref MgaIniTimeGnssFields::GnssId field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref MgaIniTimeGnssFields::Reserved1 field.
    ///     @li @b FieldIdx_week index, @b Field_week type and @b field_week() access fuction
    ///         for @ref MgaIniTimeGnssFields::Week field.
    ///     @li @b FieldIdx_tow index, @b Field_tow type and @b field_tow() access fuction
    ///         for @ref MgaIniTimeGnssFields::Tow field.
    ///     @li @b FieldIdx_ns index, @b Field_ns type and @b field_ns() access fuction
    ///         for @ref MgaIniTimeGnssFields::Ns field.
    ///     @li @b FieldIdx_tAccS index, @b Field_tAccS type and @b field_tAccS() access fuction
    ///         for @ref MgaIniTimeGnssFields::TAccS field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref MgaIniTimeGnssFields::Reserved2 field.
    ///     @li @b FieldIdx_tAccNs index, @b Field_tAccNs type and @b field_tAccNs() access fuction
    ///         for @ref MgaIniTimeGnssFields::TAccNs field.
    COMMS_MSG_FIELDS_NAMES(
        type,
        version,
        ref,
        gnssId,
        reserved1,
        week,
        tow,
        ns,
        tAccS,
        reserved2,
        tAccNs
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 24U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 24U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MgaIniTimeGnssCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
