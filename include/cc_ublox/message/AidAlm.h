// Generated by commsdsl2comms v6.2.1

/// @file
/// @brief Contains definition of <b>"AID-ALM"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/AidAlmCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/field/Optional.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref AidAlm.
/// @tparam TOpt Extra options
/// @see @ref AidAlm
/// @headerfile cc_ublox/message/AidAlm.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct AidAlmFields
{
    /// @brief Definition of <b>"svid"</b> field.
    class Svid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlmFieldsCommon::SvidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlmFieldsCommon::SvidCommon::name();
        }
    };

    /// @brief Definition of <b>"week"</b> field.
    class Week : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsWeeks
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsWeeks
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlmFieldsCommon::WeekCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlmFieldsCommon::WeekCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Dwrd field.
    struct DwrdMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref List field.
        struct ListMembers
        {
            /// @brief Definition of <b>"element"</b> field.
            class Element : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::AidAlmFieldsCommon::DwrdMembersCommon::ListMembersCommon::ElementCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::AidAlmFieldsCommon::DwrdMembersCommon::ListMembersCommon::ElementCommon::name();
                }
            };
        };

        /// @brief Definition of <b>"dwrd"</b> field.
        class List : public
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::AidAlmFields::DwrdMembers::List,
                comms::option::def::SequenceFixedSize<8U>
            >
        {
            using Base =
                comms::field::ArrayList<
                    cc_ublox::field::FieldBase<>,
                    typename ListMembers::Element,
                    typename TOpt::message::AidAlmFields::DwrdMembers::List,
                    comms::option::def::SequenceFixedSize<8U>
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::AidAlmFieldsCommon::DwrdMembersCommon::ListCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"dwrd"</b> field.
    class Dwrd : public
        comms::field::Optional<
            typename DwrdMembers::List
        >
    {
        using Base =
            comms::field::Optional<
                typename DwrdMembers::List
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlmFieldsCommon::DwrdCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Svid,
        Week,
        Dwrd
    >;
};

/// @brief Definition of <b>"AID-ALM"</b> message class.
/// @details
///     See @ref AidAlmFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/AidAlm.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class AidAlm : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::AidAlm,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAlm>,
        comms::option::def::FieldsImpl<typename AidAlmFields<TOpt>::All>,
        comms::option::def::MsgType<AidAlm<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::AidAlm,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAlm>,
            comms::option::def::FieldsImpl<typename AidAlmFields<TOpt>::All>,
            comms::option::def::MsgType<AidAlm<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access fuction
    ///         for @ref AidAlmFields::Svid field.
    ///     @li @b FieldIdx_week index, @b Field_week type and @b field_week() access fuction
    ///         for @ref AidAlmFields::Week field.
    ///     @li @b FieldIdx_dwrd index, @b Field_dwrd type and @b field_dwrd() access fuction
    ///         for @ref AidAlmFields::Dwrd field.
    COMMS_MSG_FIELDS_NAMES(
        svid,
        week,
        dwrd
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 40U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::AidAlmCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_dwrd>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_dwrd();

            es = Base::template doReadFrom<FieldIdx_dwrd>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_dwrd() || updated;
       return updated;
    }

private:
    void readPrepare_dwrd()
    {
        refresh_dwrd();
    }

    bool refresh_dwrd()
    {
        auto mode = comms::field::OptionalMode::Missing;
        if (field_week().getValue() != static_cast<typename Field_week::ValueType>(0U)) {
            mode = comms::field::OptionalMode::Exists;
        }

        if (field_dwrd().getMode() == mode) {
            return false;
        }

        field_dwrd().setMode(mode);
        return true;
    }
};

} // namespace message

} // namespace cc_ublox
