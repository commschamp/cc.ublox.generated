// Generated by commsdsl2comms v6.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::LogBatch message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include "cc_ublox/field/DayCommon.h"
#include "cc_ublox/field/DopCommon.h"
#include "cc_ublox/field/GpsFixCommon.h"
#include "cc_ublox/field/HAccCommon.h"
#include "cc_ublox/field/HMSLCommon.h"
#include "cc_ublox/field/HeadingAccCommon.h"
#include "cc_ublox/field/HeadingCommon.h"
#include "cc_ublox/field/HeightCommon.h"
#include "cc_ublox/field/HourCommon.h"
#include "cc_ublox/field/ItowCommon.h"
#include "cc_ublox/field/LatCommon.h"
#include "cc_ublox/field/LonCommon.h"
#include "cc_ublox/field/MinCommon.h"
#include "cc_ublox/field/MonthCommon.h"
#include "cc_ublox/field/PsmStateCommon.h"
#include "cc_ublox/field/Res1Common.h"
#include "cc_ublox/field/Res2Common.h"
#include "cc_ublox/field/Res4Common.h"
#include "cc_ublox/field/SecCommon.h"
#include "cc_ublox/field/VAccCommon.h"
#include "cc_ublox/field/VelCommon.h"
#include "cc_ublox/field/YearCommon.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::LogBatch message.
/// @see cc_ublox::message::LogBatchFields
struct LogBatchFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::ContentValid field.
    struct ContentValidCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::ContentValid field.
        static const char* name()
        {
            return "contentValid";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::LogBatchFields::ContentValid field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "extraPvt",
                "extraOdo"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::MsgCount field.
    struct MsgCountCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::MsgCount field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::MsgCount field.
        static const char* name()
        {
            return "msgCount";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::ITOW field.
    using ITOWCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Year field.
    using YearCommon = cc_ublox::field::YearCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Month field.
    using MonthCommon = cc_ublox::field::MonthCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Day field.
    using DayCommon = cc_ublox::field::DayCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Hour field.
    using HourCommon = cc_ublox::field::HourCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Min field.
    using MinCommon = cc_ublox::field::MinCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Sec field.
    using SecCommon = cc_ublox::field::SecCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Valid field.
    struct ValidCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::Valid field.
        static const char* name()
        {
            return "valid";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::LogBatchFields::Valid field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "validDate",
                "validTime"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::TAcc field.
    struct TAccCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::TAcc field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::TAcc field.
        static const char* name()
        {
            return "tAcc";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::FracSec field.
    struct FracSecCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::FracSec field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::FracSec field.
        static const char* name()
        {
            return "fracSec";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::FixType field.
    struct FixTypeCommon : public cc_ublox::field::GpsFixCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::FixType field.
        static const char* name()
        {
            return "fixType";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::LogBatchFields::Flags field.
    struct FlagsMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::LogBatchFields::FlagsMembers::BitsLow field.
        struct BitsLowCommon
        {
            /// @brief Name of the @ref cc_ublox::message::LogBatchFields::FlagsMembers::BitsLow field.
            static const char* name()
            {
                return "bitsLow";
            }

            /// @brief Retrieve name of the bit of
            ///     @ref cc_ublox::message::LogBatchFields::FlagsMembers::BitsLow field.
            static const char* bitName(std::size_t idx)
            {
                static const char* Map[] = {
                    "gnssFixOK",
                    "diffSoln"
                };

                static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                if (MapSize <= idx) {
                    return nullptr;
                }

                return Map[idx];
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::LogBatchFields::FlagsMembers::PsmState field.
        using PsmStateCommon = cc_ublox::field::PsmStateCommon;

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::LogBatchFields::FlagsMembers::Reserved field.
        struct ReservedCommon : public cc_ublox::field::Res1Common
        {
            /// @brief Name of the @ref cc_ublox::message::LogBatchFields::FlagsMembers::Reserved field.
            static const char* name()
            {
                return "reserved";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::Flags field.
        static const char* name()
        {
            return "flags";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Flags2 field.
    struct Flags2Common
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::Flags2 field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::Flags2 field.
        static const char* name()
        {
            return "flags2";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::NumSV field.
    struct NumSVCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::NumSV field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::NumSV field.
        static const char* name()
        {
            return "numSV";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Lon field.
    using LonCommon = cc_ublox::field::LonCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Lat field.
    using LatCommon = cc_ublox::field::LatCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Height field.
    using HeightCommon = cc_ublox::field::HeightCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::HMSL field.
    using HMSLCommon = cc_ublox::field::HMSLCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::HAcc field.
    using HAccCommon = cc_ublox::field::HAccCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::VAcc field.
    using VAccCommon = cc_ublox::field::VAccCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::VelN field.
    struct VelNCommon : public cc_ublox::field::VelCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::VelN field.
        static const char* name()
        {
            return "velN";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::VelE field.
    struct VelECommon : public cc_ublox::field::VelCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::VelE field.
        static const char* name()
        {
            return "velE";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::VelD field.
    struct VelDCommon : public cc_ublox::field::VelCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::VelD field.
        static const char* name()
        {
            return "velD";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::GSpeed field.
    struct GSpeedCommon : public cc_ublox::field::VelCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::GSpeed field.
        static const char* name()
        {
            return "gSpeed";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::HeadMot field.
    struct HeadMotCommon : public cc_ublox::field::HeadingCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::HeadMot field.
        static const char* name()
        {
            return "headMot";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::SAcc field.
    struct SAccCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::SAcc field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::SAcc field.
        static const char* name()
        {
            return "sAcc";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::HeadAcc field.
    struct HeadAccCommon : public cc_ublox::field::HeadingAccCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::HeadAcc field.
        static const char* name()
        {
            return "headAcc";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::PDOP field.
    struct PDOPCommon : public cc_ublox::field::DopCommon
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::PDOP field.
        static const char* name()
        {
            return "pDOP";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Reserved0 field.
    struct Reserved0Common : public cc_ublox::field::Res2Common
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::Reserved0 field.
        static const char* name()
        {
            return "reserved0";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Distance field.
    struct DistanceCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::Distance field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::Distance field.
        static const char* name()
        {
            return "distance";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::TotalDistance field.
    struct TotalDistanceCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::TotalDistance field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::TotalDistance field.
        static const char* name()
        {
            return "totalDistance";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::TotalStd field.
    struct TotalStdCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::LogBatchFields::TotalStd field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::TotalStd field.
        static const char* name()
        {
            return "totalStd";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::LogBatchFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res4Common
    {
        /// @brief Name of the @ref cc_ublox::message::LogBatchFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::LogBatch message.
struct LogBatchCommon
{
    /// @brief Name of the @ref cc_ublox::message::LogBatch message.
    static const char* name()
    {
        return "LOG-BATCH";
    }
};

} // namespace message

} // namespace cc_ublox
