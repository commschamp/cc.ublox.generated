// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::NavTimeutc message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/DayCommon.h"
#include "cc_ublox/field/HourCommon.h"
#include "cc_ublox/field/ItowCommon.h"
#include "cc_ublox/field/MinCommon.h"
#include "cc_ublox/field/MonthCommon.h"
#include "cc_ublox/field/SecCommon.h"
#include "cc_ublox/field/YearCommon.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::NavTimeutc message.
/// @see cc_ublox::message::NavTimeutcFields
struct NavTimeutcFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Itow field.
    using ItowCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::TAcc field.
    struct TAccCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavTimeutcFields::TAcc field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::NavTimeutcFields::TAcc field.
        static const char* name()
        {
            return "tAcc";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Nano field.
    struct NanoCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavTimeutcFields::Nano field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::NavTimeutcFields::Nano field.
        static const char* name()
        {
            return "nano";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Year field.
    using YearCommon = cc_ublox::field::YearCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Month field.
    using MonthCommon = cc_ublox::field::MonthCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Day field.
    using DayCommon = cc_ublox::field::DayCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Hour field.
    using HourCommon = cc_ublox::field::HourCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Min field.
    using MinCommon = cc_ublox::field::MinCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Sec field.
    using SecCommon = cc_ublox::field::SecCommon;

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::NavTimeutcFields::Valid field.
    struct ValidMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::NavTimeutcFields::ValidMembers::Bits field.
        struct BitsCommon
        {
            /// @brief Name of the @ref cc_ublox::message::NavTimeutcFields::ValidMembers::Bits field.
            static const char* name()
            {
                return "";
            }

            /// @brief Retrieve name of the bit of
            ///     @ref cc_ublox::message::NavTimeutcFields::ValidMembers::Bits field.
            static const char* bitName(std::size_t idx)
            {
                static const char* Map[] = {
                    "validTOW",
                    "validWKN",
                    "validUTC"
                };

                static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                if (MapSize <= idx) {
                    return nullptr;
                }

                return Map[idx];
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::NavTimeutcFields::ValidMembers::UtcStandard field.
        struct UtcStandardCommon
        {
            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::NavTimeutcFields::ValidMembers::UtcStandard field.
            enum class ValueType : std::uint8_t
            {
                NotAvailable = 0, ///< value <b>Not Available</b>. 
                CRL = 1, ///< value @b CRL. 
                NIST = 2, ///< value @b NIST. 
                USNO = 3, ///< value @b USNO. 
                BIPM = 4, ///< value @b BIPM. 
                EuLab = 5, ///< value @b EuLab. 
                SU = 6, ///< value @b SU. 
                NTSC = 7, ///< value @b NTSC. 
                Unknown = 15, ///< value @b Unknown. 

                // --- Extra values generated for convenience ---
                FirstValue = 0, ///< First defined value.
                LastValue = 15, ///< Last defined value.
                ValuesLimit = 16, ///< Upper limit for defined values.
            };

            /// @brief Single value name info entry
            using ValueNameInfo = std::pair<ValueType, const char*>;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

            /// @brief Name of the @ref cc_ublox::message::NavTimeutcFields::ValidMembers::UtcStandard field.
            static const char* name()
            {
                return "utcStandard";
            }

            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                auto namesMapInfo = valueNamesMap();
                auto begIter = namesMapInfo.first;
                auto endIter = begIter + namesMapInfo.second;
                auto iter = std::lower_bound(
                    begIter, endIter, val,
                    [](const ValueNameInfo& info, ValueType v) -> bool
                    {
                        return info.first < v;
                    });

                if ((iter == endIter) || (iter->first != val)) {
                    return nullptr;
                }

                return iter->second;
            }

            /// @brief Retrieve map of enum value names
            static ValueNamesMapInfo valueNamesMap()
            {
                static const ValueNameInfo Map[] = {
                    std::make_pair(ValueType::NotAvailable, "Not Available"),
                    std::make_pair(ValueType::CRL, "CRL"),
                    std::make_pair(ValueType::NIST, "NIST"),
                    std::make_pair(ValueType::USNO, "USNO"),
                    std::make_pair(ValueType::BIPM, "BIPM"),
                    std::make_pair(ValueType::EuLab, "EuLab"),
                    std::make_pair(ValueType::SU, "SU"),
                    std::make_pair(ValueType::NTSC, "NTSC"),
                    std::make_pair(ValueType::Unknown, "Unknown")
                };
                static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                return std::make_pair(&Map[0], MapSize);
            }
        };

        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::NavTimeutcFields::ValidMembers::UtcStandard field.
        using UtcStandardVal = UtcStandardCommon::ValueType;
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavTimeutcFields::Valid field.
    struct ValidCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavTimeutcFields::Valid field.
        static const char* name()
        {
            return "valid";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::NavTimeutc message.
struct NavTimeutcCommon
{
    /// @brief Name of the @ref cc_ublox::message::NavTimeutc message.
    static const char* name()
    {
        return "NAV-TIMEUTC";
    }
};

} // namespace message

} // namespace cc_ublox
