// Generated by commsdsl2comms v6.1.0

/// @file
/// @brief Contains definition of <b>"CFG-VALDEL"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/CfgValKeyId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/message/CfgValdelCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref CfgValdel.
/// @tparam TOpt Extra options
/// @see @ref CfgValdel
/// @headerfile cc_ublox/message/CfgValdel.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct CfgValdelFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValueRange<0, 1>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValueRange<0, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgValdelFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgValdelFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"layers"</b> field.
    class Layers : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xF9U, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xF9U, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_bbr.
        ///      @li @b BitIdx_flash.
        COMMS_BITMASK_BITS(
            bbr=1,
            flash=2
        );

        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_bbr() and @b setBitValue_bbr().
        ///      @li @b getBitValue_flash() and @b setBitValue_flash().
        COMMS_BITMASK_BITS_ACCESS(
            bbr,
            flash
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::CfgValdelFieldsCommon::LayersCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::CfgValdelFieldsCommon::LayersCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgValdelFieldsCommon::LayersCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Transaction field.
    struct TransactionMembers
    {
        /// @brief Definition of <b>"action"</b> field.
        /// @see @ref cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::ValueType
        class Action : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 3>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ActionCommon::name();
            }
        };

        /// @brief Definition of <b>"reserved"</b> field.
        class Reserved : public
            cc_ublox::field::Res1<
                TOpt,
                comms::option::def::FixedBitLength<6U>
            >
        {
            using Base =
                cc_ublox::field::Res1<
                    TOpt,
                    comms::option::def::FixedBitLength<6U>
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgValdelFieldsCommon::TransactionMembersCommon::ReservedCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Action,
               Reserved
            >;
    };

    /// @brief Definition of <b>"transaction"</b> field.
    class Transaction : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename TransactionMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename TransactionMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_action index, @b Field_action type and @b field_action() access function -
        ///         for cc_ublox::message::CfgValdelFields::TransactionMembers::Action member field.
        ///     @li @b FieldIdx_reserved index, @b Field_reserved type and @b field_reserved() access function -
        ///         for cc_ublox::message::CfgValdelFields::TransactionMembers::Reserved member field.
        COMMS_FIELD_MEMBERS_NAMES(
            action,
            reserved
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgValdelFieldsCommon::TransactionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved0"</b> field.
    class Reserved0 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgValdelFieldsCommon::Reserved0Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Keys field.
    struct KeysMembers
    {
        /// @brief Definition of <b>"Element"</b> field.
        class Element : public
            cc_ublox::field::CfgValKeyId<
                TOpt
            >
        {
            using Base =
                cc_ublox::field::CfgValKeyId<
                    TOpt
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgValdelFieldsCommon::KeysMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"keys"</b> field.
    class Keys : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename KeysMembers::Element,
            typename TOpt::message::CfgValdelFields::Keys
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename KeysMembers::Element,
                typename TOpt::message::CfgValdelFields::Keys
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgValdelFieldsCommon::KeysCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Layers,
        Transaction,
        Reserved0,
        Keys
    >;
};

/// @brief Definition of <b>"CFG-VALDEL"</b> message class.
/// @details
///     See @ref CfgValdelFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/CfgValdel.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class CfgValdel : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::CfgValdel,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgValdel>,
        comms::option::def::FieldsImpl<typename CfgValdelFields<TOpt>::All>,
        comms::option::def::MsgType<CfgValdel<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::CfgValdel,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgValdel>,
            comms::option::def::FieldsImpl<typename CfgValdelFields<TOpt>::All>,
            comms::option::def::MsgType<CfgValdel<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref CfgValdelFields::Version field.
    ///     @li @b FieldIdx_layers index, @b Field_layers type and @b field_layers() access fuction
    ///         for @ref CfgValdelFields::Layers field.
    ///     @li @b FieldIdx_transaction index, @b Field_transaction type and @b field_transaction() access fuction
    ///         for @ref CfgValdelFields::Transaction field.
    ///     @li @b FieldIdx_reserved0 index, @b Field_reserved0 type and @b field_reserved0() access fuction
    ///         for @ref CfgValdelFields::Reserved0 field.
    ///     @li @b FieldIdx_keys index, @b Field_keys type and @b field_keys() access fuction
    ///         for @ref CfgValdelFields::Keys field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        layers,
        transaction,
        reserved0,
        keys
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 4U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::CfgValdelCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
