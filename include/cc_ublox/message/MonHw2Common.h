// Generated by commsdsl2comms v5.1.3

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::MonHw2 message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/Res3Common.h"
#include "cc_ublox/field/Res4Common.h"
#include "cc_ublox/field/Res8Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::MonHw2 message.
/// @see cc_ublox::message::MonHw2Fields
struct MonHw2FieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::OfsI field.
    struct OfsICommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MonHw2Fields::OfsI field.
        using ValueType = std::int8_t;

        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::OfsI field.
        static const char* name()
        {
            return "ofsI";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::MagI field.
    struct MagICommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MonHw2Fields::MagI field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::MagI field.
        static const char* name()
        {
            return "magI";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::OfsQ field.
    struct OfsQCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MonHw2Fields::OfsQ field.
        using ValueType = std::int8_t;

        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::OfsQ field.
        static const char* name()
        {
            return "ofsQ";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::MagQ field.
    struct MagQCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MonHw2Fields::MagQ field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::MagQ field.
        static const char* name()
        {
            return "magQ";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::CfgSource field.
    struct CfgSourceCommon
    {
        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::MonHw2Fields::CfgSource field.
        enum class ValueType : std::uint8_t
        {
            FlashImage = 102, ///< value @b FlashImage. 
            OTP = 111, ///< value @b OTP. 
            ConfigPins = 112, ///< value @b ConfigPins. 
            ROM = 114, ///< value @b ROM. 

            // --- Extra values generated for convenience ---
            FirstValue = 102, ///< First defined value.
            LastValue = 114, ///< Last defined value.
            ValuesLimit = 115, ///< Upper limit for defined values.
        };

        /// @brief Single value name info entry
        using ValueNameInfo = std::pair<ValueType, const char*>;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::CfgSource field.
        static const char* name()
        {
            return "cfgSource";
        }

        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            auto begIter = namesMapInfo.first;
            auto endIter = begIter + namesMapInfo.second;
            auto iter = std::lower_bound(
                begIter, endIter, val,
                [](const ValueNameInfo& info, ValueType v) -> bool
                {
                    return info.first < v;
                });

            if ((iter == endIter) || (iter->first != val)) {
                return nullptr;
            }

            return iter->second;
        }

        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const ValueNameInfo Map[] = {
                std::make_pair(ValueType::FlashImage, "FlashImage"),
                std::make_pair(ValueType::OTP, "OTP"),
                std::make_pair(ValueType::ConfigPins, "ConfigPins"),
                std::make_pair(ValueType::ROM, "ROM")
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };

    /// @brief Values enumerator for
    ///     @ref cc_ublox::message::MonHw2Fields::CfgSource field.
    using CfgSourceVal = CfgSourceCommon::ValueType;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res3Common
    {
        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::LowLevCfg field.
    struct LowLevCfgCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MonHw2Fields::LowLevCfg field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::LowLevCfg field.
        static const char* name()
        {
            return "lowLevCfg";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::Reserved2 field.
    struct Reserved2Common : public cc_ublox::field::Res8Common
    {
        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::Reserved2 field.
        static const char* name()
        {
            return "reserved2";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::PostStatus field.
    struct PostStatusCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MonHw2Fields::PostStatus field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::PostStatus field.
        static const char* name()
        {
            return "postStatus";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonHw2Fields::Reserved3 field.
    struct Reserved3Common : public cc_ublox::field::Res4Common
    {
        /// @brief Name of the @ref cc_ublox::message::MonHw2Fields::Reserved3 field.
        static const char* name()
        {
            return "reserved3";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::MonHw2 message.
struct MonHw2Common
{
    /// @brief Name of the @ref cc_ublox::message::MonHw2 message.
    static const char* name()
    {
        return "MON-HW2";
    }
};

} // namespace message

} // namespace cc_ublox
