// Generated by commsdsl2comms v5.1.3

/// @file
/// @brief Contains definition of <b>"CFG-PRT (UART)"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/CfgPrtFlags.h"
#include "cc_ublox/field/CfgPrtInProtoMask.h"
#include "cc_ublox/field/CfgPrtOutProtoMask.h"
#include "cc_ublox/field/CfgPrtTxReady.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/message/CfgPrtUartCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref CfgPrtUart.
/// @tparam TOpt Extra options
/// @see @ref CfgPrtUart
/// @headerfile cc_ublox/message/CfgPrtUart.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct CfgPrtUartFields
{
    /// @brief Definition of <b>"portId"</b> field.
    class PortId : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::PortIdCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::PortIdCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(1);
            return true;
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"txReady"</b> field.
    class TxReady : public
        cc_ublox::field::CfgPrtTxReady<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgPrtTxReady<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::TxReadyCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Mode field.
    struct ModeMembers
    {
        /// @brief Definition of <b>"reservedLow"</b> field.
        /// @details
        ///     Reserved field with 1 byte length
        class ReservedLow : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<6U>,
                comms::option::def::ValidNumValue<0>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<6U>,
                    comms::option::def::ValidNumValue<0>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ReservedLowCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ReservedLowCommon::name();
            }
        };

        /// @brief Definition of <b>"charLen"</b> field.
        /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::ValueType
        class CharLen : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::ValueType,
                comms::option::def::DefaultNumValue<3>,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 3>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::ValueType,
                    comms::option::def::DefaultNumValue<3>,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::CharLenCommon::name();
            }
        };

        /// @brief Definition of <b>"reservedMid"</b> field.
        /// @details
        ///     Reserved field with 1 byte length
        class ReservedMid : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<1U>,
                comms::option::def::ValidNumValue<0>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<1U>,
                    comms::option::def::ValidNumValue<0>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ReservedMidCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ReservedMidCommon::name();
            }
        };

        /// @brief Definition of <b>"parity"</b> field.
        /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::ValueType
        class Parity : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::ValueType,
                comms::option::def::DefaultNumValue<4>,
                comms::option::def::FixedBitLength<3U>,
                comms::option::def::ValidNumValueRange<0, 1>,
                comms::option::def::ValidNumValueRange<4, 5>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::ValueType,
                    comms::option::def::DefaultNumValue<4>,
                    comms::option::def::FixedBitLength<3U>,
                    comms::option::def::ValidNumValueRange<0, 1>,
                    comms::option::def::ValidNumValueRange<4, 5>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ParityCommon::name();
            }
        };

        /// @brief Definition of <b>"nStopBits"</b> field.
        /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::ValueType
        class NStopBits : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 3>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 3>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::NStopBitsCommon::name();
            }
        };

        /// @brief Definition of <b>"reservedHigh"</b> field.
        /// @details
        ///     Reserved field with 3 bytes length
        class ReservedHigh : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FixedBitLength<18U>,
                comms::option::def::ValidNumValue<0>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FixedBitLength<18U>,
                    comms::option::def::ValidNumValue<0>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ReservedHighCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgPrtUartFieldsCommon::ModeMembersCommon::ReservedHighCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               ReservedLow,
               CharLen,
               ReservedMid,
               Parity,
               NStopBits,
               ReservedHigh
            >;
    };

    /// @brief Definition of <b>"mode"</b> field.
    class Mode : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename ModeMembers::All
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename ModeMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_reservedLow index, @b Field_reservedLow type and @b field_reservedLow() access function -
        ///         for cc_ublox::message::CfgPrtUartFields::ModeMembers::ReservedLow member field.
        ///     @li @b FieldIdx_charLen index, @b Field_charLen type and @b field_charLen() access function -
        ///         for cc_ublox::message::CfgPrtUartFields::ModeMembers::CharLen member field.
        ///     @li @b FieldIdx_reservedMid index, @b Field_reservedMid type and @b field_reservedMid() access function -
        ///         for cc_ublox::message::CfgPrtUartFields::ModeMembers::ReservedMid member field.
        ///     @li @b FieldIdx_parity index, @b Field_parity type and @b field_parity() access function -
        ///         for cc_ublox::message::CfgPrtUartFields::ModeMembers::Parity member field.
        ///     @li @b FieldIdx_nStopBits index, @b Field_nStopBits type and @b field_nStopBits() access function -
        ///         for cc_ublox::message::CfgPrtUartFields::ModeMembers::NStopBits member field.
        ///     @li @b FieldIdx_reservedHigh index, @b Field_reservedHigh type and @b field_reservedHigh() access function -
        ///         for cc_ublox::message::CfgPrtUartFields::ModeMembers::ReservedHigh member field.
        COMMS_FIELD_MEMBERS_NAMES(
            reservedLow,
            charLen,
            reservedMid,
            parity,
            nStopBits,
            reservedHigh
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::ModeCommon::name();
        }
    };

    /// @brief Definition of <b>"baudRate"</b> field.
    class BaudRate : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::DefaultNumValue<115200L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::DefaultNumValue<115200L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::BaudRateCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::BaudRateCommon::name();
        }
    };

    /// @brief Definition of <b>"inProtoMask"</b> field.
    class InProtoMask : public
        cc_ublox::field::CfgPrtInProtoMask<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgPrtInProtoMask<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::InProtoMaskCommon::name();
        }
    };

    /// @brief Definition of <b>"outProtoMask"</b> field.
    class OutProtoMask : public
        cc_ublox::field::CfgPrtOutProtoMask<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgPrtOutProtoMask<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::OutProtoMaskCommon::name();
        }
    };

    /// @brief Definition of <b>"cfgPrtFlags"</b> field.
    using CfgPrtFlags =
        cc_ublox::field::CfgPrtFlags<
            TOpt
        >;

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgPrtUartFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        PortId,
        Reserved1,
        TxReady,
        Mode,
        BaudRate,
        InProtoMask,
        OutProtoMask,
        CfgPrtFlags,
        Reserved2
    >;
};

/// @brief Definition of <b>"CFG-PRT (UART)"</b> message class.
/// @details
///     See @ref CfgPrtUartFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/CfgPrtUart.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class CfgPrtUart : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgPrt>,
        comms::option::def::FieldsImpl<typename CfgPrtUartFields<TOpt>::All>,
        comms::option::def::MsgType<CfgPrtUart<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgPrt>,
            comms::option::def::FieldsImpl<typename CfgPrtUartFields<TOpt>::All>,
            comms::option::def::MsgType<CfgPrtUart<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_portId index, @b Field_portId type and @b field_portId() access fuction
    ///         for @ref CfgPrtUartFields::PortId field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref CfgPrtUartFields::Reserved1 field.
    ///     @li @b FieldIdx_txReady index, @b Field_txReady type and @b field_txReady() access fuction
    ///         for @ref CfgPrtUartFields::TxReady field.
    ///     @li @b FieldIdx_mode index, @b Field_mode type and @b field_mode() access fuction
    ///         for @ref CfgPrtUartFields::Mode field.
    ///     @li @b FieldIdx_baudRate index, @b Field_baudRate type and @b field_baudRate() access fuction
    ///         for @ref CfgPrtUartFields::BaudRate field.
    ///     @li @b FieldIdx_inProtoMask index, @b Field_inProtoMask type and @b field_inProtoMask() access fuction
    ///         for @ref CfgPrtUartFields::InProtoMask field.
    ///     @li @b FieldIdx_outProtoMask index, @b Field_outProtoMask type and @b field_outProtoMask() access fuction
    ///         for @ref CfgPrtUartFields::OutProtoMask field.
    ///     @li @b FieldIdx_cfgPrtFlags index, @b Field_cfgPrtFlags type and @b field_cfgPrtFlags() access fuction
    ///         for @ref CfgPrtUartFields::CfgPrtFlags field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref CfgPrtUartFields::Reserved2 field.
    COMMS_MSG_FIELDS_NAMES(
        portId,
        reserved1,
        txReady,
        mode,
        baudRate,
        inProtoMask,
        outProtoMask,
        cfgPrtFlags,
        reserved2
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 20U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 20U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::CfgPrtUartCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
