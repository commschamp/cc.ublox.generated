// Generated by commsdsl2comms v6.2.4

/// @file
/// @brief Contains definition of <b>"TIM-TOS"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/Day.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/GnssId.h"
#include "cc_ublox/field/Hour.h"
#include "cc_ublox/field/Min.h"
#include "cc_ublox/field/Month.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Sec.h"
#include "cc_ublox/field/Year.h"
#include "cc_ublox/message/TimTosCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref TimTos.
/// @tparam TOpt Extra options
/// @see @ref TimTos
/// @headerfile cc_ublox/message/TimTos.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct TimTosFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"gnssId"</b> field.
    using GnssId =
        cc_ublox::field::GnssId<
            TOpt
        >;

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>""</b> field.
        class BitsLow : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<8U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<8U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_leapNow, @b getBitValue_leapNow() and @b setBitValue_leapNow().
            ///      @li @b BitIdx_leapSoon, @b getBitValue_leapSoon() and @b setBitValue_leapSoon().
            ///      @li @b BitIdx_leapPositive, @b getBitValue_leapPositive() and @b setBitValue_leapPositive().
            ///      @li @b BitIdx_timeInLimit, @b getBitValue_timeInLimit() and @b setBitValue_timeInLimit().
            ///      @li @b BitIdx_intOscInLimit, @b getBitValue_intOscInLimit() and @b setBitValue_intOscInLimit().
            ///      @li @b BitIdx_extOscInLimit, @b getBitValue_extOscInLimit() and @b setBitValue_extOscInLimit().
            ///      @li @b BitIdx_gnssTimeValid, @b getBitValue_gnssTimeValid() and @b setBitValue_gnssTimeValid().
            ///      @li @b BitIdx_UTCTimeValid, @b getBitValue_UTCTimeValid() and @b setBitValue_UTCTimeValid().
            COMMS_BITMASK_BITS_SEQ(
                leapNow,
                leapSoon,
                leapPositive,
                timeInLimit,
                intOscInLimit,
                extOscInLimit,
                gnssTimeValid,
                UTCTimeValid
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::BitsLowCommon::name();
            }
        };

        /// @brief Definition of <b>"DiscSrc"</b> field.
        /// @see @ref cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::ValueType
        class DiscSrc : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::ValueType,
                comms::option::def::FixedBitLength<3U>,
                comms::option::def::ValidNumValueRange<0, 5>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::ValueType,
                    comms::option::def::FixedBitLength<3U>,
                    comms::option::def::ValidNumValueRange<0, 5>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::DiscSrcCommon::name();
            }
        };

        /// @brief Definition of <b>""</b> field.
        class BitsHigh : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<21U>,
                comms::option::def::BitmaskReservedBits<0x1FFFF8UL, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<21U>,
                    comms::option::def::BitmaskReservedBits<0x1FFFF8UL, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_raim, @b getBitValue_raim() and @b setBitValue_raim().
            ///      @li @b BitIdx_cohPulse, @b getBitValue_cohPulse() and @b setBitValue_cohPulse().
            ///      @li @b BitIdx_lockedPulse, @b getBitValue_lockedPulse() and @b setBitValue_lockedPulse().
            COMMS_BITMASK_BITS_SEQ(
                raim,
                cohPulse,
                lockedPulse
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::BitsHighCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::BitsHighCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::TimTosFieldsCommon::FlagsMembersCommon::BitsHighCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               BitsLow,
               DiscSrc,
               BitsHigh
            >;
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename FlagsMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename FlagsMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_bitsLow index, @b Field_bitsLow type and @b field_bitsLow() access function -
        ///         for cc_ublox::message::TimTosFields::FlagsMembers::BitsLow member field.
        ///     @li @b FieldIdx_discSrc index, @b Field_discSrc type and @b field_discSrc() access function -
        ///         for cc_ublox::message::TimTosFields::FlagsMembers::DiscSrc member field.
        ///     @li @b FieldIdx_bitsHigh index, @b Field_bitsHigh type and @b field_bitsHigh() access function -
        ///         for cc_ublox::message::TimTosFields::FlagsMembers::BitsHigh member field.
        COMMS_FIELD_MEMBERS_NAMES(
            bitsLow,
            discSrc,
            bitsHigh
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"year"</b> field.
    using Year =
        cc_ublox::field::Year<
            TOpt
        >;

    /// @brief Definition of <b>"month"</b> field.
    using Month =
        cc_ublox::field::Month<
            TOpt
        >;

    /// @brief Definition of <b>"day"</b> field.
    using Day =
        cc_ublox::field::Day<
            TOpt
        >;

    /// @brief Definition of <b>"hour"</b> field.
    using Hour =
        cc_ublox::field::Hour<
            TOpt
        >;

    /// @brief Definition of <b>"min"</b> field.
    using Min =
        cc_ublox::field::Min<
            TOpt
        >;

    /// @brief Definition of <b>"sec"</b> field.
    using Sec =
        cc_ublox::field::Sec<
            TOpt
        >;

    /// @brief Definition of <b>"utcStandard"</b> field.
    /// @see @ref cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::ValueType
    class UtcStandard : public
        comms::field::EnumValue<
            cc_ublox::field::FieldBase<>,
            cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::ValueType,
            comms::option::def::ValidNumValue<0>,
            comms::option::def::ValidNumValue<3>,
            comms::option::def::ValidNumValueRange<6, 7>
        >
    {
        using Base =
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::ValueType,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::ValidNumValue<3>,
                comms::option::def::ValidNumValueRange<6, 7>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::valueName(val);
        }

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::valueName().
        static const char* valueNameOf(ValueType val)
        {
            return cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::UtcStandardCommon::name();
        }
    };

    /// @brief Definition of <b>"utcOffset"</b> field.
    class UtcOffset : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::UtcOffsetCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::UtcOffsetCommon::name();
        }
    };

    /// @brief Definition of <b>"utcUncertainty"</b> field.
    class UtcUncertainty : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::UtcUncertaintyCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::UtcUncertaintyCommon::name();
        }
    };

    /// @brief Definition of <b>"week"</b> field.
    class Week : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsWeeks
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsWeeks
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::WeekCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::WeekCommon::name();
        }
    };

    /// @brief Definition of <b>"TOW"</b> field.
    class TOW : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::TOWCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::TOWCommon::name();
        }
    };

    /// @brief Definition of <b>"gnssOffset"</b> field.
    class GnssOffset : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::GnssOffsetCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::GnssOffsetCommon::name();
        }
    };

    /// @brief Definition of <b>"gnssUncertainy"</b> field.
    class GnssUncertainy : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::GnssUncertainyCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::GnssUncertainyCommon::name();
        }
    };

    /// @brief Definition of <b>"intOscOffset"</b> field.
    class IntOscOffset : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 256>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 256>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::IntOscOffsetCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 8U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::IntOscOffsetCommon::name();
        }
    };

    /// @brief Definition of <b>"intOscUncertainty"</b> field.
    class IntOscUncertainty : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 256>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 256>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::IntOscUncertaintyCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 8U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::IntOscUncertaintyCommon::name();
        }
    };

    /// @brief Definition of <b>"extOscOffset"</b> field.
    class ExtOscOffset : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 256>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 256>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::ExtOscOffsetCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 8U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::ExtOscOffsetCommon::name();
        }
    };

    /// @brief Definition of <b>"extOscUncertainty"</b> field.
    class ExtOscUncertainty : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 256>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 256>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimTosFieldsCommon::ExtOscUncertaintyCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 8U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimTosFieldsCommon::ExtOscUncertaintyCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        GnssId,
        Reserved1,
        Flags,
        Year,
        Month,
        Day,
        Hour,
        Min,
        Sec,
        UtcStandard,
        UtcOffset,
        UtcUncertainty,
        Week,
        TOW,
        GnssOffset,
        GnssUncertainy,
        IntOscOffset,
        IntOscUncertainty,
        ExtOscOffset,
        ExtOscUncertainty
    >;
};

/// @brief Definition of <b>"TIM-TOS"</b> message class.
/// @details
///     See @ref TimTosFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/TimTos.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class TimTos : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::TimTos,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_TimTos>,
        comms::option::def::FieldsImpl<typename TimTosFields<TOpt>::All>,
        comms::option::def::MsgType<TimTos<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::TimTos,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_TimTos>,
            comms::option::def::FieldsImpl<typename TimTosFields<TOpt>::All>,
            comms::option::def::MsgType<TimTos<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref TimTosFields::Version field.
    ///     @li @b FieldIdx_gnssId index, @b Field_gnssId type and @b field_gnssId() access fuction
    ///         for @ref TimTosFields::GnssId field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref TimTosFields::Reserved1 field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref TimTosFields::Flags field.
    ///     @li @b FieldIdx_year index, @b Field_year type and @b field_year() access fuction
    ///         for @ref TimTosFields::Year field.
    ///     @li @b FieldIdx_month index, @b Field_month type and @b field_month() access fuction
    ///         for @ref TimTosFields::Month field.
    ///     @li @b FieldIdx_day index, @b Field_day type and @b field_day() access fuction
    ///         for @ref TimTosFields::Day field.
    ///     @li @b FieldIdx_hour index, @b Field_hour type and @b field_hour() access fuction
    ///         for @ref TimTosFields::Hour field.
    ///     @li @b FieldIdx_min index, @b Field_min type and @b field_min() access fuction
    ///         for @ref TimTosFields::Min field.
    ///     @li @b FieldIdx_sec index, @b Field_sec type and @b field_sec() access fuction
    ///         for @ref TimTosFields::Sec field.
    ///     @li @b FieldIdx_utcStandard index, @b Field_utcStandard type and @b field_utcStandard() access fuction
    ///         for @ref TimTosFields::UtcStandard field.
    ///     @li @b FieldIdx_utcOffset index, @b Field_utcOffset type and @b field_utcOffset() access fuction
    ///         for @ref TimTosFields::UtcOffset field.
    ///     @li @b FieldIdx_utcUncertainty index, @b Field_utcUncertainty type and @b field_utcUncertainty() access fuction
    ///         for @ref TimTosFields::UtcUncertainty field.
    ///     @li @b FieldIdx_week index, @b Field_week type and @b field_week() access fuction
    ///         for @ref TimTosFields::Week field.
    ///     @li @b FieldIdx_tOW index, @b Field_tOW type and @b field_tOW() access fuction
    ///         for @ref TimTosFields::TOW field.
    ///     @li @b FieldIdx_gnssOffset index, @b Field_gnssOffset type and @b field_gnssOffset() access fuction
    ///         for @ref TimTosFields::GnssOffset field.
    ///     @li @b FieldIdx_gnssUncertainy index, @b Field_gnssUncertainy type and @b field_gnssUncertainy() access fuction
    ///         for @ref TimTosFields::GnssUncertainy field.
    ///     @li @b FieldIdx_intOscOffset index, @b Field_intOscOffset type and @b field_intOscOffset() access fuction
    ///         for @ref TimTosFields::IntOscOffset field.
    ///     @li @b FieldIdx_intOscUncertainty index, @b Field_intOscUncertainty type and @b field_intOscUncertainty() access fuction
    ///         for @ref TimTosFields::IntOscUncertainty field.
    ///     @li @b FieldIdx_extOscOffset index, @b Field_extOscOffset type and @b field_extOscOffset() access fuction
    ///         for @ref TimTosFields::ExtOscOffset field.
    ///     @li @b FieldIdx_extOscUncertainty index, @b Field_extOscUncertainty type and @b field_extOscUncertainty() access fuction
    ///         for @ref TimTosFields::ExtOscUncertainty field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        gnssId,
        reserved1,
        flags,
        year,
        month,
        day,
        hour,
        min,
        sec,
        utcStandard,
        utcOffset,
        utcUncertainty,
        week,
        tOW,
        gnssOffset,
        gnssUncertainy,
        intOscOffset,
        intOscUncertainty,
        extOscOffset,
        extOscUncertainty
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 56U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 56U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::TimTosCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
