// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains definition of <b>"LOG-RETRIEVESTRING"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/Day.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Hour.h"
#include "cc_ublox/field/Min.h"
#include "cc_ublox/field/Month.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Sec.h"
#include "cc_ublox/field/Year.h"
#include "cc_ublox/message/LogRetrievestringCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/field/String.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref LogRetrievestring.
/// @tparam TOpt Extra options
/// @see @ref LogRetrievestring
/// @headerfile cc_ublox/message/LogRetrievestring.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct LogRetrievestringFields
{
    /// @brief Definition of <b>"entryIndex"</b> field.
    class EntryIndex : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::EntryIndexCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::EntryIndexCommon::name();
        }
    };

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"year"</b> field.
    using Year =
        cc_ublox::field::Year<
            TOpt
        >;

    /// @brief Definition of <b>"month"</b> field.
    using Month =
        cc_ublox::field::Month<
            TOpt
        >;

    /// @brief Definition of <b>"day"</b> field.
    using Day =
        cc_ublox::field::Day<
            TOpt
        >;

    /// @brief Definition of <b>"hour"</b> field.
    using Hour =
        cc_ublox::field::Hour<
            TOpt
        >;

    /// @brief Definition of <b>"minute"</b> field.
    class Minute : public
        cc_ublox::field::Min<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Min<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::MinuteCommon::name();
        }
    };

    /// @brief Definition of <b>"second"</b> field.
    class Second : public
        cc_ublox::field::Sec<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Sec<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::SecondCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"byteCount"</b> field.
    class ByteCount : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::ByteCountCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::ByteCountCommon::name();
        }
    };

    /// @brief Definition of <b>"bytes"</b> field.
    class Bytes : public
        comms::field::String<
            cc_ublox::field::FieldBase<>,
            typename TOpt::message::LogRetrievestringFields::Bytes,
            comms::option::def::SequenceLengthForcingEnabled
        >
    {
        using Base =
            comms::field::String<
                cc_ublox::field::FieldBase<>,
                typename TOpt::message::LogRetrievestringFields::Bytes,
                comms::option::def::SequenceLengthForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogRetrievestringFieldsCommon::BytesCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        EntryIndex,
        Version,
        Reserved1,
        Year,
        Month,
        Day,
        Hour,
        Minute,
        Second,
        Reserved2,
        ByteCount,
        Bytes
    >;
};

/// @brief Definition of <b>"LOG-RETRIEVESTRING"</b> message class.
/// @details
///     See @ref LogRetrievestringFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/LogRetrievestring.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class LogRetrievestring : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::LogRetrievestring,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_LogRetrievestring>,
        comms::option::def::FieldsImpl<typename LogRetrievestringFields<TOpt>::All>,
        comms::option::def::MsgType<LogRetrievestring<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::LogRetrievestring,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_LogRetrievestring>,
            comms::option::def::FieldsImpl<typename LogRetrievestringFields<TOpt>::All>,
            comms::option::def::MsgType<LogRetrievestring<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_entryIndex index, @b Field_entryIndex type and @b field_entryIndex() access fuction
    ///         for @ref LogRetrievestringFields::EntryIndex field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref LogRetrievestringFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref LogRetrievestringFields::Reserved1 field.
    ///     @li @b FieldIdx_year index, @b Field_year type and @b field_year() access fuction
    ///         for @ref LogRetrievestringFields::Year field.
    ///     @li @b FieldIdx_month index, @b Field_month type and @b field_month() access fuction
    ///         for @ref LogRetrievestringFields::Month field.
    ///     @li @b FieldIdx_day index, @b Field_day type and @b field_day() access fuction
    ///         for @ref LogRetrievestringFields::Day field.
    ///     @li @b FieldIdx_hour index, @b Field_hour type and @b field_hour() access fuction
    ///         for @ref LogRetrievestringFields::Hour field.
    ///     @li @b FieldIdx_minute index, @b Field_minute type and @b field_minute() access fuction
    ///         for @ref LogRetrievestringFields::Minute field.
    ///     @li @b FieldIdx_second index, @b Field_second type and @b field_second() access fuction
    ///         for @ref LogRetrievestringFields::Second field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref LogRetrievestringFields::Reserved2 field.
    ///     @li @b FieldIdx_byteCount index, @b Field_byteCount type and @b field_byteCount() access fuction
    ///         for @ref LogRetrievestringFields::ByteCount field.
    ///     @li @b FieldIdx_bytes index, @b Field_bytes type and @b field_bytes() access fuction
    ///         for @ref LogRetrievestringFields::Bytes field.
    COMMS_MSG_FIELDS_NAMES(
        entryIndex,
        version,
        reserved1,
        year,
        month,
        day,
        hour,
        minute,
        second,
        reserved2,
        byteCount,
        bytes
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 16U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::LogRetrievestringCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_bytes>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_bytes();

            es = Base::template doReadFrom<FieldIdx_bytes>(iter, len);
        } while (false);
        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_bytes() || updated;
       return updated;
    }

private:
    void readPrepare_bytes()
    {
        field_bytes().forceReadLength(
            static_cast<std::size_t>(field_byteCount().getValue()));
    }

    bool refresh_bytes()
    {
        auto expectedLength = static_cast<std::size_t>(field_byteCount().getValue());
        auto realLength = field_bytes().value().size();
        if (expectedLength == realLength) {
            return false;
        }

        using LenValueType = typename std::decay<decltype(field_byteCount().getValue())>::type;
        static const auto MaxLenValue = static_cast<std::size_t>(std::numeric_limits<LenValueType>::max());
        auto maxAllowedLen = std::min(MaxLenValue, realLength);
        field_byteCount().setValue(maxAllowedLen);
        if (maxAllowedLen < realLength) {
            field_bytes().value().resize(maxAllowedLen);
        }
        return true;
    }
};

} // namespace message

} // namespace cc_ublox
