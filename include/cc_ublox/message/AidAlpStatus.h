// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains definition of <b>"AID-ALP (Status)"</b> message and its fields.

#pragma once

#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/AidAlpStatusCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/EnumValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref AidAlpStatus.
/// @tparam TOpt Extra options
/// @see @ref AidAlpStatus
/// @headerfile cc_ublox/message/AidAlpStatus.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct AidAlpStatusFields
{
    /// @brief Definition of <b>"status"</b> field.
    /// @see @ref cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::ValueType
    class Status : public
        comms::field::EnumValue<
            cc_ublox::field::FieldBase<>,
            cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::ValueType,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::ValidNumValueRange<0, 1>
        >
    {
        using Base =
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::ValueType,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::ValidNumValueRange<0, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::valueName(val);
        }

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::valueName().
        static const char* valueNameOf(ValueType val)
        {
            return cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpStatusFieldsCommon::StatusCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Status
    >;
};

/// @brief Definition of <b>"AID-ALP (Status)"</b> message class.
/// @details
///     See @ref AidAlpStatusFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/AidAlpStatus.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class AidAlpStatus : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAlp>,
        comms::option::def::FieldsImpl<typename AidAlpStatusFields<TOpt>::All>,
        comms::option::def::MsgType<AidAlpStatus<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAlp>,
            comms::option::def::FieldsImpl<typename AidAlpStatusFields<TOpt>::All>,
            comms::option::def::MsgType<AidAlpStatus<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_status index, @b Field_status type and @b field_status() access fuction
    ///         for @ref AidAlpStatusFields::Status field.
    COMMS_MSG_FIELDS_NAMES(
        status
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 1U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 1U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::AidAlpStatusCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
