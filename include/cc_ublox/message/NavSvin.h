// Generated by commsdsl2comms v6.0.0

/// @file
/// @brief Contains definition of <b>"NAV-SVIN"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/message/NavSvinCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavSvin.
/// @tparam TOpt Extra options
/// @see @ref NavSvin
/// @headerfile cc_ublox/message/NavSvin.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavSvinFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"dur"</b> field.
    class Dur : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::DurCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::DurCommon::name();
        }
    };

    /// @brief Definition of <b>"meanX"</b> field.
    class MeanX : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanXCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanXCommon::name();
        }
    };

    /// @brief Definition of <b>"meanY"</b> field.
    class MeanY : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanYCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanYCommon::name();
        }
    };

    /// @brief Definition of <b>"meanZ"</b> field.
    class MeanZ : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanZCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanZCommon::name();
        }
    };

    /// @brief Definition of <b>"meanXHP"</b> field.
    class MeanXHP : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanXHPCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanXHPCommon::name();
        }
    };

    /// @brief Definition of <b>"meanYHP"</b> field.
    class MeanYHP : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanYHPCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanYHPCommon::name();
        }
    };

    /// @brief Definition of <b>"meanZHP"</b> field.
    class MeanZHP : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanZHPCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanZHPCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"meanAcc"</b> field.
    class MeanAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanAccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::MeanAccCommon::name();
        }
    };

    /// @brief Definition of <b>"obs"</b> field.
    class Obs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::ObsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::ObsCommon::name();
        }
    };

    /// @brief Definition of <b>"valid"</b> field.
    class Valid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::ValidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::ValidCommon::name();
        }
    };

    /// @brief Definition of <b>"active"</b> field.
    class Active : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSvinFieldsCommon::ActiveCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::ActiveCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved3"</b> field.
    class Reserved3 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSvinFieldsCommon::Reserved3Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        Itow,
        Dur,
        MeanX,
        MeanY,
        MeanZ,
        MeanXHP,
        MeanYHP,
        MeanZHP,
        Reserved2,
        MeanAcc,
        Obs,
        Valid,
        Active,
        Reserved3
    >;
};

/// @brief Definition of <b>"NAV-SVIN"</b> message class.
/// @details
///     See @ref NavSvinFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavSvin.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavSvin : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavSvin,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavSvin>,
        comms::option::def::FieldsImpl<typename NavSvinFields<TOpt>::All>,
        comms::option::def::MsgType<NavSvin<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavSvin,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavSvin>,
            comms::option::def::FieldsImpl<typename NavSvinFields<TOpt>::All>,
            comms::option::def::MsgType<NavSvin<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavSvinFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavSvinFields::Reserved1 field.
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavSvinFields::Itow field.
    ///     @li @b FieldIdx_dur index, @b Field_dur type and @b field_dur() access fuction
    ///         for @ref NavSvinFields::Dur field.
    ///     @li @b FieldIdx_meanX index, @b Field_meanX type and @b field_meanX() access fuction
    ///         for @ref NavSvinFields::MeanX field.
    ///     @li @b FieldIdx_meanY index, @b Field_meanY type and @b field_meanY() access fuction
    ///         for @ref NavSvinFields::MeanY field.
    ///     @li @b FieldIdx_meanZ index, @b Field_meanZ type and @b field_meanZ() access fuction
    ///         for @ref NavSvinFields::MeanZ field.
    ///     @li @b FieldIdx_meanXHP index, @b Field_meanXHP type and @b field_meanXHP() access fuction
    ///         for @ref NavSvinFields::MeanXHP field.
    ///     @li @b FieldIdx_meanYHP index, @b Field_meanYHP type and @b field_meanYHP() access fuction
    ///         for @ref NavSvinFields::MeanYHP field.
    ///     @li @b FieldIdx_meanZHP index, @b Field_meanZHP type and @b field_meanZHP() access fuction
    ///         for @ref NavSvinFields::MeanZHP field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref NavSvinFields::Reserved2 field.
    ///     @li @b FieldIdx_meanAcc index, @b Field_meanAcc type and @b field_meanAcc() access fuction
    ///         for @ref NavSvinFields::MeanAcc field.
    ///     @li @b FieldIdx_obs index, @b Field_obs type and @b field_obs() access fuction
    ///         for @ref NavSvinFields::Obs field.
    ///     @li @b FieldIdx_valid index, @b Field_valid type and @b field_valid() access fuction
    ///         for @ref NavSvinFields::Valid field.
    ///     @li @b FieldIdx_active index, @b Field_active type and @b field_active() access fuction
    ///         for @ref NavSvinFields::Active field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref NavSvinFields::Reserved3 field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        itow,
        dur,
        meanX,
        meanY,
        meanZ,
        meanXHP,
        meanYHP,
        meanZHP,
        reserved2,
        meanAcc,
        obs,
        valid,
        active,
        reserved3
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 40U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 40U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavSvinCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
