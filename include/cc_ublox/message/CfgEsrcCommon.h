// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::CfgEsrc message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/Res2Common.h"
#include "cc_ublox/field/Res4Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::CfgEsrc message.
/// @see cc_ublox::message::CfgEsrcFields
struct CfgEsrcFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgEsrcFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgEsrcFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgEsrcFields::NumSources field.
    struct NumSourcesCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgEsrcFields::NumSources field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::NumSources field.
        static const char* name()
        {
            return "numSources";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgEsrcFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res2Common
    {
        /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::CfgEsrcFields::List field.
    struct ListMembersCommon
    {
        /// @brief Scope for all the common definitions of the member fields of
        ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::Element field.
        struct ElementMembersCommon
        {
            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::ExtInt field.
            struct ExtIntCommon
            {
                /// @brief Values enumerator for
                ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::ExtInt field.
                enum class ValueType : std::uint8_t
                {
                    EXTINT0 = 0, ///< value @b EXTINT0. 
                    EXTINT1 = 1, ///< value @b EXTINT1. 

                    // --- Extra values generated for convenience ---
                    FirstValue = 0, ///< First defined value.
                    LastValue = 1, ///< Last defined value.
                    ValuesLimit = 2, ///< Upper limit for defined values.
                };

                /// @brief Single value name info entry
                using ValueNameInfo = const char*;

                /// @brief Type returned from @ref valueNamesMap() member function.
                /// @details The @b first value of the pair is pointer to the map array,
                ///     The @b second value of the pair is the size of the array.
                using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::ExtInt field.
                static const char* name()
                {
                    return "extInt";
                }

                /// @brief Retrieve name of the enum value
                static const char* valueName(ValueType val)
                {
                    auto namesMapInfo = valueNamesMap();
                    if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                        return nullptr;
                    }

                    return namesMapInfo.first[static_cast<std::size_t>(val)];
                }

                /// @brief Retrieve map of enum value names
                static ValueNamesMapInfo valueNamesMap()
                {
                    static const char* Map[] = {
                        "EXTINT0",
                        "EXTINT1"
                    };
                    static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                    return std::make_pair(&Map[0], MapSize);
                }
            };

            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::ExtInt field.
            using ExtIntVal = ExtIntCommon::ValueType;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::SourceType field.
            struct SourceTypeCommon
            {
                /// @brief Values enumerator for
                ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::SourceType field.
                enum class ValueType : std::uint8_t
                {
                    None = 0, ///< value @b None. 
                    Frequency = 1, ///< value @b Frequency. 
                    Time = 2, ///< value @b Time. 
                    ExternalOsc = 3, ///< value @b ExternalOsc. 

                    // --- Extra values generated for convenience ---
                    FirstValue = 0, ///< First defined value.
                    LastValue = 3, ///< Last defined value.
                    ValuesLimit = 4, ///< Upper limit for defined values.
                };

                /// @brief Single value name info entry
                using ValueNameInfo = const char*;

                /// @brief Type returned from @ref valueNamesMap() member function.
                /// @details The @b first value of the pair is pointer to the map array,
                ///     The @b second value of the pair is the size of the array.
                using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::SourceType field.
                static const char* name()
                {
                    return "sourceType";
                }

                /// @brief Retrieve name of the enum value
                static const char* valueName(ValueType val)
                {
                    auto namesMapInfo = valueNamesMap();
                    if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                        return nullptr;
                    }

                    return namesMapInfo.first[static_cast<std::size_t>(val)];
                }

                /// @brief Retrieve map of enum value names
                static ValueNamesMapInfo valueNamesMap()
                {
                    static const char* Map[] = {
                        "None",
                        "Frequency",
                        "Time",
                        "ExternalOsc"
                    };
                    static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                    return std::make_pair(&Map[0], MapSize);
                }
            };

            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::SourceType field.
            using SourceTypeVal = SourceTypeCommon::ValueType;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Flags field.
            struct FlagsCommon
            {
                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Flags field.
                static const char* name()
                {
                    return "flags";
                }

                /// @brief Retrieve name of the bit of
                ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Flags field.
                static const char* bitName(std::size_t idx)
                {
                    static const char* Map[] = {
                        "polarity",
                        "gnssUtc"
                    };

                    static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                    if (MapSize <= idx) {
                        return nullptr;
                    }

                    return Map[idx];
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Freq field.
            struct FreqCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Freq field.
                using ValueType = std::uint32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Freq field.
                static const char* name()
                {
                    return "freq";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Reserved2 field.
            struct Reserved2Common : public cc_ublox::field::Res4Common
            {
                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Reserved2 field.
                static const char* name()
                {
                    return "reserved2";
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::WithTemp field.
            struct WithTempCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::WithTemp field.
                using ValueType = std::uint32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::WithTemp field.
                static const char* name()
                {
                    return "withTemp";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::WithAge field.
            struct WithAgeCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::WithAge field.
                using ValueType = std::uint32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::WithAge field.
                static const char* name()
                {
                    return "withAge";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::TimeToTemp field.
            struct TimeToTempCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::TimeToTemp field.
                using ValueType = std::uint16_t;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::TimeToTemp field.
                static const char* name()
                {
                    return "timeToTemp";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::MaxDevLifeTime field.
            struct MaxDevLifeTimeCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::MaxDevLifeTime field.
                using ValueType = std::uint16_t;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::MaxDevLifeTime field.
                static const char* name()
                {
                    return "maxDevLifeTime";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Offset field.
            struct OffsetCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Offset field.
                using ValueType = std::int32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Offset field.
                static const char* name()
                {
                    return "offset";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::OffsetUncertainty field.
            struct OffsetUncertaintyCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::OffsetUncertainty field.
                using ValueType = std::uint32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::OffsetUncertainty field.
                static const char* name()
                {
                    return "offsetUncertainty";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Jitter field.
            struct JitterCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Jitter field.
                using ValueType = std::uint32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::ElementMembers::Jitter field.
                static const char* name()
                {
                    return "jitter";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::CfgEsrcFields::ListMembers::Element field.
        struct ElementCommon
        {
            /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::ListMembers::Element field.
            static const char* name()
            {
                return "";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgEsrcFields::List field.
    struct ListCommon
    {
        /// @brief Name of the @ref cc_ublox::message::CfgEsrcFields::List field.
        static const char* name()
        {
            return "list";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::CfgEsrc message.
struct CfgEsrcCommon
{
    /// @brief Name of the @ref cc_ublox::message::CfgEsrc message.
    static const char* name()
    {
        return "CFG-ESRC";
    }
};

} // namespace message

} // namespace cc_ublox
