// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains definition of <b>"NAV-SBAS"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/field/SbasService.h"
#include "cc_ublox/field/SbasSys.h"
#include "cc_ublox/message/NavSbasCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavSbas.
/// @tparam TOpt Extra options
/// @see @ref NavSbas
/// @headerfile cc_ublox/message/NavSbas.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavSbasFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"geo"</b> field.
    class Geo : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSbasFieldsCommon::GeoCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSbasFieldsCommon::GeoCommon::name();
        }
    };

    /// @brief Definition of <b>"mode"</b> field.
    /// @see @ref cc_ublox::message::NavSbasFieldsCommon::ModeCommon::ValueType
    class Mode : public
        comms::field::EnumValue<
            cc_ublox::field::FieldBase<>,
            cc_ublox::message::NavSbasFieldsCommon::ModeCommon::ValueType,
            comms::option::def::ValidNumValueRange<0, 1>,
            comms::option::def::ValidNumValue<3>
        >
    {
        using Base =
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavSbasFieldsCommon::ModeCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>,
                comms::option::def::ValidNumValue<3>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = cc_ublox::message::NavSbasFieldsCommon::ModeCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref cc_ublox::message::NavSbasFieldsCommon::ModeCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = cc_ublox::message::NavSbasFieldsCommon::ModeCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::NavSbasFieldsCommon::ModeCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return cc_ublox::message::NavSbasFieldsCommon::ModeCommon::valueName(val);
        }

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::NavSbasFieldsCommon::ModeCommon::valueName().
        static const char* valueNameOf(ValueType val)
        {
            return cc_ublox::message::NavSbasFieldsCommon::ModeCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref cc_ublox::message::NavSbasFieldsCommon::ModeCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return cc_ublox::message::NavSbasFieldsCommon::ModeCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSbasFieldsCommon::ModeCommon::name();
        }
    };

    /// @brief Definition of <b>"sys"</b> field.
    class Sys : public
        cc_ublox::field::SbasSys<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::SbasSys<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSbasFieldsCommon::SysCommon::name();
        }
    };

    /// @brief Definition of <b>"service"</b> field.
    class Service : public
        cc_ublox::field::SbasService<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::SbasService<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSbasFieldsCommon::ServiceCommon::name();
        }
    };

    /// @brief Definition of <b>"cnt"</b> field.
    class Cnt : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavSbasFieldsCommon::CntCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSbasFieldsCommon::CntCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSbasFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"svid"</b> field.
            class Svid : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::name();
                }
            };

            /// @brief Definition of <b>"flags"</b> field.
            class Flags : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsCommon::name();
                }
            };

            /// @brief Definition of <b>"udre"</b> field.
            class Udre : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::UdreCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::UdreCommon::name();
                }
            };

            /// @brief Definition of <b>"svSys"</b> field.
            class SvSys : public
                cc_ublox::field::SbasSys<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::SbasSys<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::SvSysCommon::name();
                }
            };

            /// @brief Definition of <b>"svService"</b> field.
            class SvService : public
                cc_ublox::field::SbasService<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::SbasService<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::SvServiceCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved2"</b> field.
            class Reserved2 : public
                cc_ublox::field::Res1<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res1<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved2Common::name();
                }
            };

            /// @brief Definition of <b>"prc"</b> field.
            class Prc : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int16_t,
                    comms::option::def::UnitsCentimeters
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::int16_t,
                        comms::option::def::UnitsCentimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::PrcCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::PrcCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved3"</b> field.
            class Reserved3 : public
                cc_ublox::field::Res2<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res2<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved3Common::name();
                }
            };

            /// @brief Definition of <b>"ic"</b> field.
            class Ic : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int16_t,
                    comms::option::def::UnitsCentimeters
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::int16_t,
                        comms::option::def::UnitsCentimeters
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::IcCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementMembersCommon::IcCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Svid,
                   Flags,
                   Udre,
                   SvSys,
                   SvService,
                   Reserved2,
                   Prc,
                   Reserved3,
                   Ic
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::Svid member field.
            ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::Flags member field.
            ///     @li @b FieldIdx_udre index, @b Field_udre type and @b field_udre() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::Udre member field.
            ///     @li @b FieldIdx_svSys index, @b Field_svSys type and @b field_svSys() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::SvSys member field.
            ///     @li @b FieldIdx_svService index, @b Field_svService type and @b field_svService() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::SvService member field.
            ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::Reserved2 member field.
            ///     @li @b FieldIdx_prc index, @b Field_prc type and @b field_prc() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::Prc member field.
            ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::Reserved3 member field.
            ///     @li @b FieldIdx_ic index, @b Field_ic type and @b field_ic() access function -
            ///         for cc_ublox::message::NavSbasFields::ListMembers::ElementMembers::Ic member field.
            COMMS_FIELD_MEMBERS_NAMES(
                svid,
                flags,
                udre,
                svSys,
                svService,
                reserved2,
                prc,
                reserved3,
                ic
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavSbasFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::NavSbasFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::NavSbasFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavSbasFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Geo,
        Mode,
        Sys,
        Service,
        Cnt,
        Reserved1,
        List
    >;
};

/// @brief Definition of <b>"NAV-SBAS"</b> message class.
/// @details
///     See @ref NavSbasFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavSbas.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavSbas : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavSbas,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavSbas>,
        comms::option::def::FieldsImpl<typename NavSbasFields<TOpt>::All>,
        comms::option::def::MsgType<NavSbas<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavSbas,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavSbas>,
            comms::option::def::FieldsImpl<typename NavSbasFields<TOpt>::All>,
            comms::option::def::MsgType<NavSbas<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavSbasFields::Itow field.
    ///     @li @b FieldIdx_geo index, @b Field_geo type and @b field_geo() access fuction
    ///         for @ref NavSbasFields::Geo field.
    ///     @li @b FieldIdx_mode index, @b Field_mode type and @b field_mode() access fuction
    ///         for @ref NavSbasFields::Mode field.
    ///     @li @b FieldIdx_sys index, @b Field_sys type and @b field_sys() access fuction
    ///         for @ref NavSbasFields::Sys field.
    ///     @li @b FieldIdx_service index, @b Field_service type and @b field_service() access fuction
    ///         for @ref NavSbasFields::Service field.
    ///     @li @b FieldIdx_cnt index, @b Field_cnt type and @b field_cnt() access fuction
    ///         for @ref NavSbasFields::Cnt field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavSbasFields::Reserved1 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref NavSbasFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        geo,
        mode,
        sys,
        service,
        cnt,
        reserved1,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 12U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavSbasCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);
        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_cnt().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_cnt().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_cnt().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_cnt().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
