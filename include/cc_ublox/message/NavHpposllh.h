// Generated by commsdsl2comms v6.0.0

/// @file
/// @brief Contains definition of <b>"NAV-HPPOSLLH"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/HMSL.h"
#include "cc_ublox/field/Height.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Lat.h"
#include "cc_ublox/field/Lon.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/message/NavHpposllhCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavHpposllh.
/// @tparam TOpt Extra options
/// @see @ref NavHpposllh
/// @headerfile cc_ublox/message/NavHpposllh.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavHpposllhFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_invalidLlh, @b getBitValue_invalidLlh() and @b setBitValue_invalidLlh().
        COMMS_BITMASK_BITS_SEQ(
            invalidLlh
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::NavHpposllhFieldsCommon::FlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::NavHpposllhFieldsCommon::FlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"lon"</b> field.
    using Lon =
        cc_ublox::field::Lon<
            TOpt
        >;

    /// @brief Definition of <b>"lat"</b> field.
    using Lat =
        cc_ublox::field::Lat<
            TOpt
        >;

    /// @brief Definition of <b>"height"</b> field.
    using Height =
        cc_ublox::field::Height<
            TOpt
        >;

    /// @brief Definition of <b>"hMSL"</b> field.
    using HMSL =
        cc_ublox::field::HMSL<
            TOpt
        >;

    /// @brief Definition of <b>"lonHp"</b> field.
    class LonHp : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 100000000L>,
            comms::option::def::UnitsDegrees,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 100000000L>,
                comms::option::def::UnitsDegrees,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::LonHpCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 9U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::LonHpCommon::name();
        }
    };

    /// @brief Definition of <b>"latHp"</b> field.
    class LatHp : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 100000000L>,
            comms::option::def::UnitsDegrees,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 100000000L>,
                comms::option::def::UnitsDegrees,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::LatHpCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 9U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::LatHpCommon::name();
        }
    };

    /// @brief Definition of <b>"heigthHp"</b> field.
    class HeigthHp : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-9, 9>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-9, 9>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::HeigthHpCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::HeigthHpCommon::name();
        }
    };

    /// @brief Definition of <b>"hMSLHp"</b> field.
    class HMSLHp : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-9, 9>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-9, 9>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::HMSLHpCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::HMSLHpCommon::name();
        }
    };

    /// @brief Definition of <b>"hAcc"</b> field.
    class HAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::HAccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::HAccCommon::name();
        }
    };

    /// @brief Definition of <b>"vAcc"</b> field.
    class VAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::VAccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavHpposllhFieldsCommon::VAccCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        Flags,
        Itow,
        Lon,
        Lat,
        Height,
        HMSL,
        LonHp,
        LatHp,
        HeigthHp,
        HMSLHp,
        HAcc,
        VAcc
    >;
};

/// @brief Definition of <b>"NAV-HPPOSLLH"</b> message class.
/// @details
///     See @ref NavHpposllhFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavHpposllh.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavHpposllh : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavHpposllh,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavHpposllh>,
        comms::option::def::FieldsImpl<typename NavHpposllhFields<TOpt>::All>,
        comms::option::def::MsgType<NavHpposllh<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavHpposllh,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavHpposllh>,
            comms::option::def::FieldsImpl<typename NavHpposllhFields<TOpt>::All>,
            comms::option::def::MsgType<NavHpposllh<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavHpposllhFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavHpposllhFields::Reserved1 field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref NavHpposllhFields::Flags field.
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavHpposllhFields::Itow field.
    ///     @li @b FieldIdx_lon index, @b Field_lon type and @b field_lon() access fuction
    ///         for @ref NavHpposllhFields::Lon field.
    ///     @li @b FieldIdx_lat index, @b Field_lat type and @b field_lat() access fuction
    ///         for @ref NavHpposllhFields::Lat field.
    ///     @li @b FieldIdx_height index, @b Field_height type and @b field_height() access fuction
    ///         for @ref NavHpposllhFields::Height field.
    ///     @li @b FieldIdx_hMSL index, @b Field_hMSL type and @b field_hMSL() access fuction
    ///         for @ref NavHpposllhFields::HMSL field.
    ///     @li @b FieldIdx_lonHp index, @b Field_lonHp type and @b field_lonHp() access fuction
    ///         for @ref NavHpposllhFields::LonHp field.
    ///     @li @b FieldIdx_latHp index, @b Field_latHp type and @b field_latHp() access fuction
    ///         for @ref NavHpposllhFields::LatHp field.
    ///     @li @b FieldIdx_heigthHp index, @b Field_heigthHp type and @b field_heigthHp() access fuction
    ///         for @ref NavHpposllhFields::HeigthHp field.
    ///     @li @b FieldIdx_hMSLHp index, @b Field_hMSLHp type and @b field_hMSLHp() access fuction
    ///         for @ref NavHpposllhFields::HMSLHp field.
    ///     @li @b FieldIdx_hAcc index, @b Field_hAcc type and @b field_hAcc() access fuction
    ///         for @ref NavHpposllhFields::HAcc field.
    ///     @li @b FieldIdx_vAcc index, @b Field_vAcc type and @b field_vAcc() access fuction
    ///         for @ref NavHpposllhFields::VAcc field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        flags,
        itow,
        lon,
        lat,
        height,
        hMSL,
        lonHp,
        latHp,
        heigthHp,
        hMSLHp,
        hAcc,
        vAcc
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 36U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 36U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavHpposllhCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
