// Generated by commsdsl2comms v6.1.0

/// @file
/// @brief Contains definition of <b>"ESF-RAW"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/message/EsfRawCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref EsfRaw.
/// @tparam TOpt Extra options
/// @see @ref EsfRaw
/// @headerfile cc_ublox/message/EsfRaw.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct EsfRawFields
{
    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::EsfRawFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Data field.
    struct DataMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"dataField"</b> field.
            class DataField : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FixedLength<3U>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::FixedLength<3U>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::EsfRawFieldsCommon::DataMembersCommon::ElementMembersCommon::DataFieldCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::EsfRawFieldsCommon::DataMembersCommon::ElementMembersCommon::DataFieldCommon::name();
                }
            };

            /// @brief Definition of <b>"dataType"</b> field.
            class DataType : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::EsfRawFieldsCommon::DataMembersCommon::ElementMembersCommon::DataTypeCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::EsfRawFieldsCommon::DataMembersCommon::ElementMembersCommon::DataTypeCommon::name();
                }
            };

            /// @brief Definition of <b>"sTtag"</b> field.
            class STtag : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::EsfRawFieldsCommon::DataMembersCommon::ElementMembersCommon::STtagCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::EsfRawFieldsCommon::DataMembersCommon::ElementMembersCommon::STtagCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   DataField,
                   DataType,
                   STtag
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_dataField index, @b Field_dataField type and @b field_dataField() access function -
            ///         for cc_ublox::message::EsfRawFields::DataMembers::ElementMembers::DataField member field.
            ///     @li @b FieldIdx_dataType index, @b Field_dataType type and @b field_dataType() access function -
            ///         for cc_ublox::message::EsfRawFields::DataMembers::ElementMembers::DataType member field.
            ///     @li @b FieldIdx_sTtag index, @b Field_sTtag type and @b field_sTtag() access function -
            ///         for cc_ublox::message::EsfRawFields::DataMembers::ElementMembers::STtag member field.
            COMMS_FIELD_MEMBERS_NAMES(
                dataField,
                dataType,
                sTtag
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::EsfRawFieldsCommon::DataMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"data"</b> field.
    class Data : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename DataMembers::Element,
            typename TOpt::message::EsfRawFields::Data
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename DataMembers::Element,
                typename TOpt::message::EsfRawFields::Data
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::EsfRawFieldsCommon::DataCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Reserved1,
        Data
    >;
};

/// @brief Definition of <b>"ESF-RAW"</b> message class.
/// @details
///     See @ref EsfRawFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/EsfRaw.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class EsfRaw : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::EsfRaw,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_EsfRaw>,
        comms::option::def::FieldsImpl<typename EsfRawFields<TOpt>::All>,
        comms::option::def::MsgType<EsfRaw<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::EsfRaw,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_EsfRaw>,
            comms::option::def::FieldsImpl<typename EsfRawFields<TOpt>::All>,
            comms::option::def::MsgType<EsfRaw<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref EsfRawFields::Reserved1 field.
    ///     @li @b FieldIdx_data index, @b Field_data type and @b field_data() access fuction
    ///         for @ref EsfRawFields::Data field.
    COMMS_MSG_FIELDS_NAMES(
        reserved1,
        data
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 4U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::EsfRawCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
