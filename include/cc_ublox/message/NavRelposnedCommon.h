// Generated by commsdsl2comms v6.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::NavRelposned message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/ItowCommon.h"
#include "cc_ublox/field/Res1Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::NavRelposned message.
/// @see cc_ublox::message::NavRelposnedFields
struct NavRelposnedFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res1Common
    {
        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::RefStationId field.
    struct RefStationIdCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::RefStationId field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::RefStationId field.
        static const char* name()
        {
            return "refStationId";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::Itow field.
    using ItowCommon = cc_ublox::field::ItowCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::RelPosN field.
    struct RelPosNCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::RelPosN field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::RelPosN field.
        static const char* name()
        {
            return "relPosN";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::RelPosE field.
    struct RelPosECommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::RelPosE field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::RelPosE field.
        static const char* name()
        {
            return "relPosE";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::RelPosD field.
    struct RelPosDCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::RelPosD field.
        using ValueType = std::int32_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::RelPosD field.
        static const char* name()
        {
            return "relPosD";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::RelPosHPN field.
    struct RelPosHPNCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::RelPosHPN field.
        using ValueType = std::int8_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::RelPosHPN field.
        static const char* name()
        {
            return "relPosHPN";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::RelPosHPE field.
    struct RelPosHPECommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::RelPosHPE field.
        using ValueType = std::int8_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::RelPosHPE field.
        static const char* name()
        {
            return "relPosHPE";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::RelPosHPD field.
    struct RelPosHPDCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::RelPosHPD field.
        using ValueType = std::int8_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::RelPosHPD field.
        static const char* name()
        {
            return "relPosHPD";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::Reserved2 field.
    struct Reserved2Common : public cc_ublox::field::Res1Common
    {
        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::Reserved2 field.
        static const char* name()
        {
            return "reserved2";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::AccN field.
    struct AccNCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::AccN field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::AccN field.
        static const char* name()
        {
            return "accN";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::AccE field.
    struct AccECommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::AccE field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::AccE field.
        static const char* name()
        {
            return "accE";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::AccD field.
    struct AccDCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::NavRelposnedFields::AccD field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::AccD field.
        static const char* name()
        {
            return "accD";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::NavRelposnedFields::Flags field.
    struct FlagsMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::BitsLow field.
        struct BitsLowCommon
        {
            /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::BitsLow field.
            static const char* name()
            {
                return "";
            }

            /// @brief Retrieve name of the bit of
            ///     @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::BitsLow field.
            static const char* bitName(std::size_t idx)
            {
                static const char* Map[] = {
                    "gnssFixOK",
                    "diffSoln",
                    "relPosValid"
                };

                static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                if (MapSize <= idx) {
                    return nullptr;
                }

                return Map[idx];
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::CarrSoln field.
        struct CarrSolnCommon
        {
            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::CarrSoln field.
            enum class ValueType : std::uint8_t
            {
                NoCarrier = 0, ///< value <b>No carrier</b>. 
                FloatSolution = 1, ///< value <b>Float solution</b>. 
                FixedSolution = 2, ///< value <b>Fixed solution</b>. 

                // --- Extra values generated for convenience ---
                FirstValue = 0, ///< First defined value.
                LastValue = 2, ///< Last defined value.
                ValuesLimit = 3, ///< Upper limit for defined values.
            };

            /// @brief Single value name info entry
            using ValueNameInfo = const char*;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

            /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::CarrSoln field.
            static const char* name()
            {
                return "carrSoln";
            }

            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                auto namesMapInfo = valueNamesMap();
                if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                    return nullptr;
                }

                return namesMapInfo.first[static_cast<std::size_t>(val)];
            }

            /// @brief Retrieve map of enum value names
            static ValueNamesMapInfo valueNamesMap()
            {
                static const char* Map[] = {
                    "No carrier",
                    "Float solution",
                    "Fixed solution"
                };
                static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                return std::make_pair(&Map[0], MapSize);
            }
        };

        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::CarrSoln field.
        using CarrSolnVal = CarrSolnCommon::ValueType;

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::BitsHigh field.
        struct BitsHighCommon
        {
            /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::BitsHigh field.
            static const char* name()
            {
                return "";
            }

            /// @brief Retrieve name of the bit of
            ///     @ref cc_ublox::message::NavRelposnedFields::FlagsMembers::BitsHigh field.
            static const char* bitName(std::size_t idx)
            {
                static const char* Map[] = {
                    "isMoving",
                    "refPosMiss",
                    "refObsMiss"
                };

                static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                if (MapSize <= idx) {
                    return nullptr;
                }

                return Map[idx];
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::NavRelposnedFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_ublox::message::NavRelposnedFields::Flags field.
        static const char* name()
        {
            return "flags";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::NavRelposned message.
struct NavRelposnedCommon
{
    /// @brief Name of the @ref cc_ublox::message::NavRelposned message.
    static const char* name()
    {
        return "NAV-RELPOSNED";
    }
};

} // namespace message

} // namespace cc_ublox
