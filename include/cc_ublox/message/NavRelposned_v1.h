// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains definition of <b>"NAV-RELPOSNED (V1)"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/message/NavRelposned_v1Common.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavRelposned_v1.
/// @tparam TOpt Extra options
/// @see @ref NavRelposned_v1
/// @headerfile cc_ublox/message/NavRelposned_v1.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavRelposned_v1Fields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::HasName,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::VersionCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(1);
            return true;
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"refStationId"</b> field.
    class RefStationId : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::HasName,
            comms::option::def::ValidNumValueRange<0, 4095>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::HasName,
                comms::option::def::ValidNumValueRange<0, 4095>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RefStationIdCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RefStationIdCommon::name();
        }
    };

    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"relPosN"</b> field.
    class RelPosN : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosNCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosNCommon::name();
        }
    };

    /// @brief Definition of <b>"relPosE"</b> field.
    class RelPosE : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosECommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosECommon::name();
        }
    };

    /// @brief Definition of <b>"relPosD"</b> field.
    class RelPosD : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosDCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosDCommon::name();
        }
    };

    /// @brief Definition of <b>"relPosLength"</b> field.
    class RelPosLength : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsCentimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsCentimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosLengthCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosLengthCommon::name();
        }
    };

    /// @brief Definition of <b>"relPosHeading"</b> field.
    class RelPosHeading : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 100000L>,
            comms::option::def::UnitsDegrees
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 100000L>,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHeadingCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 5U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHeadingCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res4<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"relPosHPN"</b> field.
    class RelPosHPN : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHPNCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHPNCommon::name();
        }
    };

    /// @brief Definition of <b>"relPosHPE"</b> field.
    class RelPosHPE : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHPECommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHPECommon::name();
        }
    };

    /// @brief Definition of <b>"relPosHPD"</b> field.
    class RelPosHPD : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHPDCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHPDCommon::name();
        }
    };

    /// @brief Definition of <b>"relPosHPLength"</b> field.
    class RelPosHPLength : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters,
            comms::option::def::ValidNumValueRange<-99, 99>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters,
                comms::option::def::ValidNumValueRange<-99, 99>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHPLengthCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::RelPosHPLengthCommon::name();
        }
    };

    /// @brief Definition of <b>"accN"</b> field.
    class AccN : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccNCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccNCommon::name();
        }
    };

    /// @brief Definition of <b>"accE"</b> field.
    class AccE : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccECommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccECommon::name();
        }
    };

    /// @brief Definition of <b>"accD"</b> field.
    class AccD : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccDCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccDCommon::name();
        }
    };

    /// @brief Definition of <b>"accLength"</b> field.
    class AccLength : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 10>,
            comms::option::def::UnitsMillimeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 10>,
                comms::option::def::UnitsMillimeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccLengthCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 1U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccLengthCommon::name();
        }
    };

    /// @brief Definition of <b>"accHeading"</b> field.
    class AccHeading : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::ScalingRatio<1, 100000L>,
            comms::option::def::UnitsDegrees
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::ScalingRatio<1, 100000L>,
                comms::option::def::UnitsDegrees
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccHeadingCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 5U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::AccHeadingCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved3"</b> field.
    class Reserved3 : public
        cc_ublox::field::Res4<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::Reserved3Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>""</b> field.
        class BitsLow : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::HasName,
                comms::option::def::FixedBitLength<3U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::HasName,
                    comms::option::def::FixedBitLength<3U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_gnssFixOK, @b getBitValue_gnssFixOK() and @b setBitValue_gnssFixOK().
            ///      @li @b BitIdx_diffSoln, @b getBitValue_diffSoln() and @b setBitValue_diffSoln().
            ///      @li @b BitIdx_relPosValid, @b getBitValue_relPosValid() and @b setBitValue_relPosValid().
            COMMS_BITMASK_BITS_SEQ(
                gnssFixOK,
                diffSoln,
                relPosValid
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName().
            static const char* bitName(std::size_t idx)
            {
                return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName(idx);
            }

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return bitName(static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::BitsLowCommon::name();
            }
        };

        /// @brief Definition of <b>"carrSoln"</b> field.
        /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueType
        class CarrSoln : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueType,
                comms::option::def::HasName,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueType,
                    comms::option::def::HasName,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::CarrSolnCommon::name();
            }
        };

        /// @brief Definition of <b>""</b> field.
        class BitsHigh : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::HasName,
                comms::option::def::FixedBitLength<27U>,
                comms::option::def::BitmaskReservedBits<0x7FFFFF0UL, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::HasName,
                    comms::option::def::FixedBitLength<27U>,
                    comms::option::def::BitmaskReservedBits<0x7FFFFF0UL, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_isMoving, @b getBitValue_isMoving() and @b setBitValue_isMoving().
            ///      @li @b BitIdx_refPosMiss, @b getBitValue_refPosMiss() and @b setBitValue_refPosMiss().
            ///      @li @b BitIdx_refObsMiss, @b getBitValue_refObsMiss() and @b setBitValue_refObsMiss().
            ///      @li @b BitIdx_relPosHeadingValid, @b getBitValue_relPosHeadingValid() and @b setBitValue_relPosHeadingValid().
            COMMS_BITMASK_BITS_SEQ(
                isMoving,
                refPosMiss,
                refObsMiss,
                relPosHeadingValid
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::BitsHighCommon::bitName().
            static const char* bitName(std::size_t idx)
            {
                return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::BitsHighCommon::bitName(idx);
            }

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::BitsHighCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return bitName(static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsMembersCommon::BitsHighCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               BitsLow,
               CarrSoln,
               BitsHigh
            >;
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename FlagsMembers::All,
            comms::option::def::HasName,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename FlagsMembers::All,
                comms::option::def::HasName,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_bitsLow index, @b Field_bitsLow type and @b field_bitsLow() access function -
        ///         for cc_ublox::message::NavRelposned_v1Fields::FlagsMembers::BitsLow member field.
        ///     @li @b FieldIdx_carrSoln index, @b Field_carrSoln type and @b field_carrSoln() access function -
        ///         for cc_ublox::message::NavRelposned_v1Fields::FlagsMembers::CarrSoln member field.
        ///     @li @b FieldIdx_bitsHigh index, @b Field_bitsHigh type and @b field_bitsHigh() access function -
        ///         for cc_ublox::message::NavRelposned_v1Fields::FlagsMembers::BitsHigh member field.
        COMMS_FIELD_MEMBERS_NAMES(
            bitsLow,
            carrSoln,
            bitsHigh
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavRelposned_v1FieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        RefStationId,
        Itow,
        RelPosN,
        RelPosE,
        RelPosD,
        RelPosLength,
        RelPosHeading,
        Reserved2,
        RelPosHPN,
        RelPosHPE,
        RelPosHPD,
        RelPosHPLength,
        AccN,
        AccE,
        AccD,
        AccLength,
        AccHeading,
        Reserved3,
        Flags
    >;
};

/// @brief Definition of <b>"NAV-RELPOSNED (V1)"</b> message class.
/// @details
/// .incUpdated version of NAV-RELPOSNED (v1), message introduced in
/// .incublox-9 @n
///     See @ref NavRelposned_v1Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavRelposned_v1.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavRelposned_v1 : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavRelposned_v1,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavRelposned>,
        comms::option::def::FieldsImpl<typename NavRelposned_v1Fields<TOpt>::All>,
        comms::option::def::MsgType<NavRelposned_v1<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavRelposned_v1,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavRelposned>,
            comms::option::def::FieldsImpl<typename NavRelposned_v1Fields<TOpt>::All>,
            comms::option::def::MsgType<NavRelposned_v1<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavRelposned_v1Fields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref NavRelposned_v1Fields::Reserved1 field.
    ///     @li @b FieldIdx_refStationId index, @b Field_refStationId type and @b field_refStationId() access fuction
    ///         for @ref NavRelposned_v1Fields::RefStationId field.
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavRelposned_v1Fields::Itow field.
    ///     @li @b FieldIdx_relPosN index, @b Field_relPosN type and @b field_relPosN() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosN field.
    ///     @li @b FieldIdx_relPosE index, @b Field_relPosE type and @b field_relPosE() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosE field.
    ///     @li @b FieldIdx_relPosD index, @b Field_relPosD type and @b field_relPosD() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosD field.
    ///     @li @b FieldIdx_relPosLength index, @b Field_relPosLength type and @b field_relPosLength() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosLength field.
    ///     @li @b FieldIdx_relPosHeading index, @b Field_relPosHeading type and @b field_relPosHeading() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosHeading field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref NavRelposned_v1Fields::Reserved2 field.
    ///     @li @b FieldIdx_relPosHPN index, @b Field_relPosHPN type and @b field_relPosHPN() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosHPN field.
    ///     @li @b FieldIdx_relPosHPE index, @b Field_relPosHPE type and @b field_relPosHPE() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosHPE field.
    ///     @li @b FieldIdx_relPosHPD index, @b Field_relPosHPD type and @b field_relPosHPD() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosHPD field.
    ///     @li @b FieldIdx_relPosHPLength index, @b Field_relPosHPLength type and @b field_relPosHPLength() access fuction
    ///         for @ref NavRelposned_v1Fields::RelPosHPLength field.
    ///     @li @b FieldIdx_accN index, @b Field_accN type and @b field_accN() access fuction
    ///         for @ref NavRelposned_v1Fields::AccN field.
    ///     @li @b FieldIdx_accE index, @b Field_accE type and @b field_accE() access fuction
    ///         for @ref NavRelposned_v1Fields::AccE field.
    ///     @li @b FieldIdx_accD index, @b Field_accD type and @b field_accD() access fuction
    ///         for @ref NavRelposned_v1Fields::AccD field.
    ///     @li @b FieldIdx_accLength index, @b Field_accLength type and @b field_accLength() access fuction
    ///         for @ref NavRelposned_v1Fields::AccLength field.
    ///     @li @b FieldIdx_accHeading index, @b Field_accHeading type and @b field_accHeading() access fuction
    ///         for @ref NavRelposned_v1Fields::AccHeading field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref NavRelposned_v1Fields::Reserved3 field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref NavRelposned_v1Fields::Flags field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        refStationId,
        itow,
        relPosN,
        relPosE,
        relPosD,
        relPosLength,
        relPosHeading,
        reserved2,
        relPosHPN,
        relPosHPE,
        relPosHPD,
        relPosHPLength,
        accN,
        accE,
        accD,
        accLength,
        accHeading,
        reserved3,
        flags
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 64U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 64U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavRelposned_v1Common::name();
    }
};

} // namespace message

} // namespace cc_ublox
