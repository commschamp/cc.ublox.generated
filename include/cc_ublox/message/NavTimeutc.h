// Generated by commsdsl2comms v6.3.0

/// @file
/// @brief Contains definition of <b>"NAV-TIMEUTC"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/Day.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Hour.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Min.h"
#include "cc_ublox/field/Month.h"
#include "cc_ublox/field/Sec.h"
#include "cc_ublox/field/Year.h"
#include "cc_ublox/message/NavTimeutcCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavTimeutc.
/// @tparam TOpt Extra options
/// @see @ref NavTimeutc
/// @headerfile cc_ublox/message/NavTimeutc.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavTimeutcFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"tAcc"</b> field.
    class TAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavTimeutcFieldsCommon::TAccCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimeutcFieldsCommon::TAccCommon::name();
        }
    };

    /// @brief Definition of <b>"nano"</b> field.
    class Nano : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds,
            comms::option::def::ValidNumValueRange<-1000000000L, 100000000L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds,
                comms::option::def::ValidNumValueRange<-1000000000L, 100000000L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavTimeutcFieldsCommon::NanoCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimeutcFieldsCommon::NanoCommon::name();
        }
    };

    /// @brief Definition of <b>"year"</b> field.
    using Year =
        cc_ublox::field::Year<
            TOpt
        >;

    /// @brief Definition of <b>"month"</b> field.
    using Month =
        cc_ublox::field::Month<
            TOpt
        >;

    /// @brief Definition of <b>"day"</b> field.
    using Day =
        cc_ublox::field::Day<
            TOpt
        >;

    /// @brief Definition of <b>"hour"</b> field.
    using Hour =
        cc_ublox::field::Hour<
            TOpt
        >;

    /// @brief Definition of <b>"min"</b> field.
    using Min =
        cc_ublox::field::Min<
            TOpt
        >;

    /// @brief Definition of <b>"sec"</b> field.
    using Sec =
        cc_ublox::field::Sec<
            TOpt
        >;

    /// @brief Scope for all the member fields of
    ///     @ref Valid field.
    struct ValidMembers
    {
        /// @brief Definition of <b>""</b> field.
        class Bits : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<4U>,
                comms::option::def::BitmaskReservedBits<0x8U, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<4U>,
                    comms::option::def::BitmaskReservedBits<0x8U, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_validTOW, @b getBitValue_validTOW() and @b setBitValue_validTOW().
            ///      @li @b BitIdx_validWKN, @b getBitValue_validWKN() and @b setBitValue_validWKN().
            ///      @li @b BitIdx_validUTC, @b getBitValue_validUTC() and @b setBitValue_validUTC().
            COMMS_BITMASK_BITS_SEQ(
                validTOW,
                validWKN,
                validUTC
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::BitsCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::BitsCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::BitsCommon::name();
            }
        };

        /// @brief Definition of <b>"utcStandard"</b> field.
        /// @see @ref cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::ValueType
        class UtcStandard : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::ValueType,
                comms::option::def::FixedBitLength<4U>,
                comms::option::def::ValidNumValueRange<0, 7>,
                comms::option::def::ValidNumValue<15>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::ValueType,
                    comms::option::def::FixedBitLength<4U>,
                    comms::option::def::ValidNumValueRange<0, 7>,
                    comms::option::def::ValidNumValue<15>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavTimeutcFieldsCommon::ValidMembersCommon::UtcStandardCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Bits,
               UtcStandard
            >;
    };

    /// @brief Definition of <b>"valid"</b> field.
    class Valid : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename ValidMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename ValidMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
        ///         for cc_ublox::message::NavTimeutcFields::ValidMembers::Bits member field.
        ///     @li @b FieldIdx_utcStandard index, @b Field_utcStandard type and @b field_utcStandard() access function -
        ///         for cc_ublox::message::NavTimeutcFields::ValidMembers::UtcStandard member field.
        COMMS_FIELD_MEMBERS_NAMES(
            bits,
            utcStandard
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavTimeutcFieldsCommon::ValidCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        TAcc,
        Nano,
        Year,
        Month,
        Day,
        Hour,
        Min,
        Sec,
        Valid
    >;
};

/// @brief Definition of <b>"NAV-TIMEUTC"</b> message class.
/// @details
///     See @ref NavTimeutcFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavTimeutc.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavTimeutc : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavTimeutc,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavTimeutc>,
        comms::option::def::FieldsImpl<typename NavTimeutcFields<TOpt>::All>,
        comms::option::def::MsgType<NavTimeutc<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavTimeutc,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavTimeutc>,
            comms::option::def::FieldsImpl<typename NavTimeutcFields<TOpt>::All>,
            comms::option::def::MsgType<NavTimeutc<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavTimeutcFields::Itow field.
    ///     @li @b FieldIdx_tAcc index, @b Field_tAcc type and @b field_tAcc() access fuction
    ///         for @ref NavTimeutcFields::TAcc field.
    ///     @li @b FieldIdx_nano index, @b Field_nano type and @b field_nano() access fuction
    ///         for @ref NavTimeutcFields::Nano field.
    ///     @li @b FieldIdx_year index, @b Field_year type and @b field_year() access fuction
    ///         for @ref NavTimeutcFields::Year field.
    ///     @li @b FieldIdx_month index, @b Field_month type and @b field_month() access fuction
    ///         for @ref NavTimeutcFields::Month field.
    ///     @li @b FieldIdx_day index, @b Field_day type and @b field_day() access fuction
    ///         for @ref NavTimeutcFields::Day field.
    ///     @li @b FieldIdx_hour index, @b Field_hour type and @b field_hour() access fuction
    ///         for @ref NavTimeutcFields::Hour field.
    ///     @li @b FieldIdx_min index, @b Field_min type and @b field_min() access fuction
    ///         for @ref NavTimeutcFields::Min field.
    ///     @li @b FieldIdx_sec index, @b Field_sec type and @b field_sec() access fuction
    ///         for @ref NavTimeutcFields::Sec field.
    ///     @li @b FieldIdx_valid index, @b Field_valid type and @b field_valid() access fuction
    ///         for @ref NavTimeutcFields::Valid field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        tAcc,
        nano,
        year,
        month,
        day,
        hour,
        min,
        sec,
        valid
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 20U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 20U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavTimeutcCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
