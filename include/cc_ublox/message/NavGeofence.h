// Generated by commsdsl2comms v6.3.0

/// @file
/// @brief Contains definition of <b>"NAV-GEOFENCE"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/GeofenceState.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/message/NavGeofenceCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavGeofence.
/// @tparam TOpt Extra options
/// @see @ref NavGeofence
/// @headerfile cc_ublox/message/NavGeofence.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavGeofenceFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"status"</b> field.
    /// @see @ref cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::ValueType
    class Status : public
        comms::field::EnumValue<
            cc_ublox::field::FieldBase<>,
            cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::ValueType,
            comms::option::def::ValidNumValueRange<0, 1>
        >
    {
        using Base =
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::valueName(val);
        }

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::valueName().
        static const char* valueNameOf(ValueType val)
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::StatusCommon::name();
        }
    };

    /// @brief Definition of <b>"numFences"</b> field.
    class NumFences : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::NumFencesCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::NumFencesCommon::name();
        }
    };

    /// @brief Definition of <b>"combState"</b> field.
    class CombState : public
        cc_ublox::field::GeofenceState<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::GeofenceState<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::CombStateCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"state"</b> field.
            class State : public
                cc_ublox::field::GeofenceState<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::GeofenceState<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementMembersCommon::StateCommon::name();
                }
            };

            /// @brief Definition of <b>"id"</b> field.
            class Id : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Single special value name info entry.
                using SpecialNameInfo = cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementMembersCommon::IdCommon::SpecialNameInfo;

                /// @brief Type returned from @ref specialNamesMap() member function.
                /// @details The @b first value of the pair is pointer to the map array,
                ///     The @b second value of the pair is the size of the array.
                using SpecialNamesMapInfo = cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementMembersCommon::IdCommon::SpecialNamesMapInfo;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementMembersCommon::IdCommon::hasSpecials();
                }

                /// @brief Special value <b>"NotAvailable"</b>.
                /// @see @ref cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementMembersCommon::IdCommon::valueNotAvailable().
                static constexpr ValueType valueNotAvailable()
                {
                    return cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementMembersCommon::IdCommon::valueNotAvailable();
                }

                /// @brief Check the value is equal to special @ref valueNotAvailable().
                bool isNotAvailable() const
                {
                    return Base::getValue() == valueNotAvailable();
                }

                /// @brief Assign special value @ref valueNotAvailable() to the field.
                void setNotAvailable()
                {
                    Base::setValue(valueNotAvailable());
                }

                /// @brief Retrieve map of special value names
                static SpecialNamesMapInfo specialNamesMap()
                {
                    return cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementMembersCommon::IdCommon::specialNamesMap();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementMembersCommon::IdCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   State,
                   Id
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_state index, @b Field_state type and @b field_state() access function -
            ///         for cc_ublox::message::NavGeofenceFields::ListMembers::ElementMembers::State member field.
            ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access function -
            ///         for cc_ublox::message::NavGeofenceFields::ListMembers::ElementMembers::Id member field.
            COMMS_FIELD_MEMBERS_NAMES(
                state,
                id
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::NavGeofenceFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::NavGeofenceFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::NavGeofenceFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavGeofenceFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Version,
        Status,
        NumFences,
        CombState,
        List
    >;
};

/// @brief Definition of <b>"NAV-GEOFENCE"</b> message class.
/// @details
///     See @ref NavGeofenceFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavGeofence.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavGeofence : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavGeofence,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavGeofence>,
        comms::option::def::FieldsImpl<typename NavGeofenceFields<TOpt>::All>,
        comms::option::def::MsgType<NavGeofence<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavGeofence,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavGeofence>,
            comms::option::def::FieldsImpl<typename NavGeofenceFields<TOpt>::All>,
            comms::option::def::MsgType<NavGeofence<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavGeofenceFields::Itow field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref NavGeofenceFields::Version field.
    ///     @li @b FieldIdx_status index, @b Field_status type and @b field_status() access fuction
    ///         for @ref NavGeofenceFields::Status field.
    ///     @li @b FieldIdx_numFences index, @b Field_numFences type and @b field_numFences() access fuction
    ///         for @ref NavGeofenceFields::NumFences field.
    ///     @li @b FieldIdx_combState index, @b Field_combState type and @b field_combState() access fuction
    ///         for @ref NavGeofenceFields::CombState field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref NavGeofenceFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        version,
        status,
        numFences,
        combState,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavGeofenceCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numFences().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numFences().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_numFences().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_numFences().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
