// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains definition of <b>"RXM-MEASX"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/GnssId.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/field/Res8.h"
#include "cc_ublox/message/RxmMeasxCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref RxmMeasx.
/// @tparam TOpt Extra options
/// @see @ref RxmMeasx
/// @headerfile cc_ublox/message/RxmMeasx.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct RxmMeasxFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValueRange<0, 1>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValueRange<0, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"gpsTOW"</b> field.
    class GpsTOW : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::GpsTOWCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::GpsTOWCommon::name();
        }
    };

    /// @brief Definition of <b>"gloTOW"</b> field.
    class GloTOW : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::GloTOWCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::GloTOWCommon::name();
        }
    };

    /// @brief Definition of <b>"bdsTOW"</b> field.
    class BdsTOW : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::BdsTOWCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::BdsTOWCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"qzssTOW"</b> field.
    class QzssTOW : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::QzssTOWCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::QzssTOWCommon::name();
        }
    };

    /// @brief Definition of <b>"gpsTOWacc"</b> field.
    class GpsTOWacc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<1, 16>,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 16>,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::GpsTOWaccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 2U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::GpsTOWaccCommon::name();
        }
    };

    /// @brief Definition of <b>"gloTOWacc"</b> field.
    class GloTOWacc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<1, 16>,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 16>,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::GloTOWaccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 2U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::GloTOWaccCommon::name();
        }
    };

    /// @brief Definition of <b>"bdsTOWacc"</b> field.
    class BdsTOWacc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<1, 16>,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 16>,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::BdsTOWaccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 2U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::BdsTOWaccCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved3"</b> field.
    class Reserved3 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::Reserved3Common::name();
        }
    };

    /// @brief Definition of <b>"qzssTOWacc"</b> field.
    class QzssTOWacc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<1, 16>,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 16>,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::QzssTOWaccCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 2U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::QzssTOWaccCommon::name();
        }
    };

    /// @brief Definition of <b>"numSV"</b> field.
    class NumSV : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::NumSVCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::NumSVCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>"towSet"</b> field.
        /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::ValueType
        class TowSet : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::TowSetCommon::name();
            }
        };

        /// @brief Definition of <b>"reserved"</b> field.
        class Reserved : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<6U>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<6U>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::ReservedCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::RxmMeasxFieldsCommon::FlagsMembersCommon::ReservedCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               TowSet,
               Reserved
            >;
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename FlagsMembers::All
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename FlagsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_towSet index, @b Field_towSet type and @b field_towSet() access function -
        ///         for cc_ublox::message::RxmMeasxFields::FlagsMembers::TowSet member field.
        ///     @li @b FieldIdx_reserved index, @b Field_reserved type and @b field_reserved() access function -
        ///         for cc_ublox::message::RxmMeasxFields::FlagsMembers::Reserved member field.
        COMMS_FIELD_MEMBERS_NAMES(
            towSet,
            reserved
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved4"</b> field.
    class Reserved4 : public
        cc_ublox::field::Res8<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res8<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::Reserved4Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"gnssId"</b> field.
            using GnssId =
                cc_ublox::field::GnssId<
                    TOpt
                >;

            /// @brief Definition of <b>"svid"</b> field.
            class Svid : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::SvidCommon::name();
                }
            };

            /// @brief Definition of <b>"cNo"</b> field.
            class CNo : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::ValidNumValueRange<0, 63>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::ValidNumValueRange<0, 63>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::CNoCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::CNoCommon::name();
                }
            };

            /// @brief Definition of <b>"mpathIndic"</b> field.
            /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::ValueType
            class MpathIndic : public
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 3>
                >
            {
                using Base =
                    comms::field::EnumValue<
                        cc_ublox::field::FieldBase<>,
                        cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::ValueType,
                        comms::option::def::ValidNumValueRange<0, 3>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Single value name info entry.
                using ValueNameInfo = cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::ValueNameInfo;

                /// @brief Type returned from @ref valueNamesMap() member function.
                /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::ValueNamesMapInfo.
                using ValueNamesMapInfo = cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::ValueNamesMapInfo;

                /// @brief Retrieve name of the enum value.
                /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::valueName().
                static const char* valueName(ValueType val)
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::valueName(val);
                }

                /// @brief Retrieve name of the enum value.
                /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::valueName().
                static const char* valueNameOf(ValueType val)
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::valueName(val);
                }

                /// @brief Retrieve name of the @b current value
                const char* valueName() const
                {
                    return valueName(Base::getValue());
                }

                /// @brief Retrieve map of enum value names.
                /// @see @ref cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::valueNamesMap().
                static ValueNamesMapInfo valueNamesMap()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::valueNamesMap();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::MpathIndicCommon::name();
                }
            };

            /// @brief Definition of <b>"dopplerMS"</b> field.
            class DopplerMS : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<4, 100>,
                    comms::option::def::UnitsMetersPerSecond
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::int32_t,
                        comms::option::def::ScalingRatio<4, 100>,
                        comms::option::def::UnitsMetersPerSecond
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::DopplerMSCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 2U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::DopplerMSCommon::name();
                }
            };

            /// @brief Definition of <b>"dopplerHz"</b> field.
            class DopplerHz : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<2, 100>,
                    comms::option::def::UnitsHertz
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::int32_t,
                        comms::option::def::ScalingRatio<2, 100>,
                        comms::option::def::UnitsHertz
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::DopplerHzCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 2U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::DopplerHzCommon::name();
                }
            };

            /// @brief Definition of <b>"wholeChips"</b> field.
            class WholeChips : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::ValidNumValueRange<0, 1022>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::ValidNumValueRange<0, 1022>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::WholeChipsCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::WholeChipsCommon::name();
                }
            };

            /// @brief Definition of <b>"fracChips"</b> field.
            class FracChips : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::ValidNumValueRange<0, 1023>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::ValidNumValueRange<0, 1023>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::FracChipsCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::FracChipsCommon::name();
                }
            };

            /// @brief Definition of <b>"codePhase"</b> field.
            class CodePhase : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 2097152L>,
                    comms::option::def::UnitsMilliseconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::ScalingRatio<1, 2097152L>,
                        comms::option::def::UnitsMilliseconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::CodePhaseCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 9U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::CodePhaseCommon::name();
                }
            };

            /// @brief Definition of <b>"intCodePhase"</b> field.
            class IntCodePhase : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::UnitsMilliseconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::UnitsMilliseconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::IntCodePhaseCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::IntCodePhaseCommon::name();
                }
            };

            /// @brief Definition of <b>"pseuRangeRMSErr"</b> field.
            class PseuRangeRMSErr : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::ValidNumValueRange<0, 63>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::ValidNumValueRange<0, 63>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::PseuRangeRMSErrCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::PseuRangeRMSErrCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved5"</b> field.
            class Reserved5 : public
                cc_ublox::field::Res2<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res2<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved5Common::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   GnssId,
                   Svid,
                   CNo,
                   MpathIndic,
                   DopplerMS,
                   DopplerHz,
                   WholeChips,
                   FracChips,
                   CodePhase,
                   IntCodePhase,
                   PseuRangeRMSErr,
                   Reserved5
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_gnssId index, @b Field_gnssId type and @b field_gnssId() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::GnssId member field.
            ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::Svid member field.
            ///     @li @b FieldIdx_cNo index, @b Field_cNo type and @b field_cNo() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::CNo member field.
            ///     @li @b FieldIdx_mpathIndic index, @b Field_mpathIndic type and @b field_mpathIndic() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::MpathIndic member field.
            ///     @li @b FieldIdx_dopplerMS index, @b Field_dopplerMS type and @b field_dopplerMS() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::DopplerMS member field.
            ///     @li @b FieldIdx_dopplerHz index, @b Field_dopplerHz type and @b field_dopplerHz() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::DopplerHz member field.
            ///     @li @b FieldIdx_wholeChips index, @b Field_wholeChips type and @b field_wholeChips() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::WholeChips member field.
            ///     @li @b FieldIdx_fracChips index, @b Field_fracChips type and @b field_fracChips() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::FracChips member field.
            ///     @li @b FieldIdx_codePhase index, @b Field_codePhase type and @b field_codePhase() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::CodePhase member field.
            ///     @li @b FieldIdx_intCodePhase index, @b Field_intCodePhase type and @b field_intCodePhase() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::IntCodePhase member field.
            ///     @li @b FieldIdx_pseuRangeRMSErr index, @b Field_pseuRangeRMSErr type and @b field_pseuRangeRMSErr() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::PseuRangeRMSErr member field.
            ///     @li @b FieldIdx_reserved5 index, @b Field_reserved5 type and @b field_reserved5() access function -
            ///         for cc_ublox::message::RxmMeasxFields::ListMembers::ElementMembers::Reserved5 member field.
            COMMS_FIELD_MEMBERS_NAMES(
                gnssId,
                svid,
                cNo,
                mpathIndic,
                dopplerMS,
                dopplerHz,
                wholeChips,
                fracChips,
                codePhase,
                intCodePhase,
                pseuRangeRMSErr,
                reserved5
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::RxmMeasxFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::RxmMeasxFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::RxmMeasxFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmMeasxFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        GpsTOW,
        GloTOW,
        BdsTOW,
        Reserved2,
        QzssTOW,
        GpsTOWacc,
        GloTOWacc,
        BdsTOWacc,
        Reserved3,
        QzssTOWacc,
        NumSV,
        Flags,
        Reserved4,
        List
    >;
};

/// @brief Definition of <b>"RXM-MEASX"</b> message class.
/// @details
///     See @ref RxmMeasxFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/RxmMeasx.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class RxmMeasx : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::RxmMeasx,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_RxmMeasx>,
        comms::option::def::FieldsImpl<typename RxmMeasxFields<TOpt>::All>,
        comms::option::def::MsgType<RxmMeasx<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::RxmMeasx,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_RxmMeasx>,
            comms::option::def::FieldsImpl<typename RxmMeasxFields<TOpt>::All>,
            comms::option::def::MsgType<RxmMeasx<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref RxmMeasxFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref RxmMeasxFields::Reserved1 field.
    ///     @li @b FieldIdx_gpsTOW index, @b Field_gpsTOW type and @b field_gpsTOW() access fuction
    ///         for @ref RxmMeasxFields::GpsTOW field.
    ///     @li @b FieldIdx_gloTOW index, @b Field_gloTOW type and @b field_gloTOW() access fuction
    ///         for @ref RxmMeasxFields::GloTOW field.
    ///     @li @b FieldIdx_bdsTOW index, @b Field_bdsTOW type and @b field_bdsTOW() access fuction
    ///         for @ref RxmMeasxFields::BdsTOW field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref RxmMeasxFields::Reserved2 field.
    ///     @li @b FieldIdx_qzssTOW index, @b Field_qzssTOW type and @b field_qzssTOW() access fuction
    ///         for @ref RxmMeasxFields::QzssTOW field.
    ///     @li @b FieldIdx_gpsTOWacc index, @b Field_gpsTOWacc type and @b field_gpsTOWacc() access fuction
    ///         for @ref RxmMeasxFields::GpsTOWacc field.
    ///     @li @b FieldIdx_gloTOWacc index, @b Field_gloTOWacc type and @b field_gloTOWacc() access fuction
    ///         for @ref RxmMeasxFields::GloTOWacc field.
    ///     @li @b FieldIdx_bdsTOWacc index, @b Field_bdsTOWacc type and @b field_bdsTOWacc() access fuction
    ///         for @ref RxmMeasxFields::BdsTOWacc field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref RxmMeasxFields::Reserved3 field.
    ///     @li @b FieldIdx_qzssTOWacc index, @b Field_qzssTOWacc type and @b field_qzssTOWacc() access fuction
    ///         for @ref RxmMeasxFields::QzssTOWacc field.
    ///     @li @b FieldIdx_numSV index, @b Field_numSV type and @b field_numSV() access fuction
    ///         for @ref RxmMeasxFields::NumSV field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref RxmMeasxFields::Flags field.
    ///     @li @b FieldIdx_reserved4 index, @b Field_reserved4 type and @b field_reserved4() access fuction
    ///         for @ref RxmMeasxFields::Reserved4 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref RxmMeasxFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        gpsTOW,
        gloTOW,
        bdsTOW,
        reserved2,
        qzssTOW,
        gpsTOWacc,
        gloTOWacc,
        bdsTOWacc,
        reserved3,
        qzssTOWacc,
        numSV,
        flags,
        reserved4,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 44U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::RxmMeasxCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);
        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numSV().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numSV().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_numSV().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_numSV().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
