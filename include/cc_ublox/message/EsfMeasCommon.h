// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::EsfMeas message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::EsfMeas message.
/// @see cc_ublox::message::EsfMeasFields
struct EsfMeasFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfMeasFields::TimeTag field.
    struct TimeTagCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::EsfMeasFields::TimeTag field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::TimeTag field.
        static const char* name()
        {
            return "timeTag";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::EsfMeasFields::Flags field.
    struct FlagsMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::EsfMeasFields::FlagsMembers::TimeMarkSent field.
        struct TimeMarkSentCommon
        {
            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::EsfMeasFields::FlagsMembers::TimeMarkSent field.
            enum class ValueType : std::uint8_t
            {
                None = 0, ///< value @b None. 
                Ext0 = 1, ///< value @b Ext0. 
                Ext1 = 2, ///< value @b Ext1. 

                // --- Extra values generated for convenience ---
                FirstValue = 0, ///< First defined value.
                LastValue = 2, ///< Last defined value.
                ValuesLimit = 3, ///< Upper limit for defined values.
            };

            /// @brief Single value name info entry
            using ValueNameInfo = const char*;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

            /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::FlagsMembers::TimeMarkSent field.
            static const char* name()
            {
                return "timeMarkSent";
            }

            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                auto namesMapInfo = valueNamesMap();
                if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                    return nullptr;
                }

                return namesMapInfo.first[static_cast<std::size_t>(val)];
            }

            /// @brief Retrieve map of enum value names
            static ValueNamesMapInfo valueNamesMap()
            {
                static const char* Map[] = {
                    "None",
                    "Ext0",
                    "Ext1"
                };
                static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                return std::make_pair(&Map[0], MapSize);
            }
        };

        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::EsfMeasFields::FlagsMembers::TimeMarkSent field.
        using TimeMarkSentVal = TimeMarkSentCommon::ValueType;

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::EsfMeasFields::FlagsMembers::Bits field.
        struct BitsCommon
        {
            /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::FlagsMembers::Bits field.
            static const char* name()
            {
                return "";
            }

            /// @brief Retrieve name of the bit of
            ///     @ref cc_ublox::message::EsfMeasFields::FlagsMembers::Bits field.
            static const char* bitName(std::size_t idx)
            {
                static const char* Map[] = {
                    "timeMarkEdge",
                    "calibTtagValid"
                };

                static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                if (MapSize <= idx) {
                    return nullptr;
                }

                return Map[idx];
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfMeasFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::Flags field.
        static const char* name()
        {
            return "flags";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfMeasFields::Id field.
    struct IdCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::EsfMeasFields::Id field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::Id field.
        static const char* name()
        {
            return "id";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::EsfMeasFields::List field.
    struct ListMembersCommon
    {
        /// @brief Scope for all the common definitions of the member fields of
        ///     @ref cc_ublox::message::EsfMeasFields::ListMembers::Element field.
        struct ElementMembersCommon
        {
            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::DataField field.
            struct DataFieldCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::DataField field.
                using ValueType = std::uint32_t;

                /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::DataField field.
                static const char* name()
                {
                    return "dataField";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::DataType field.
            struct DataTypeCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::DataType field.
                using ValueType = std::uint8_t;

                /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::DataType field.
                static const char* name()
                {
                    return "dataType";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::Reserved field.
            struct ReservedCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::Reserved field.
                using ValueType = std::uint8_t;

                /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::Reserved field.
                static const char* name()
                {
                    return "reserved";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::EsfMeasFields::ListMembers::Element field.
        struct ElementCommon
        {
            /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::ListMembers::Element field.
            static const char* name()
            {
                return "";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfMeasFields::List field.
    struct ListCommon
    {
        /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::List field.
        static const char* name()
        {
            return "list";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::EsfMeasFields::CalibTtag field.
    struct CalibTtagMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::EsfMeasFields::CalibTtagMembers::CalibTtag field.
        struct CalibTtagCommon
        {
            /// @brief Re-definition of the value type used by
            ///     cc_ublox::message::EsfMeasFields::CalibTtagMembers::CalibTtag field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::CalibTtagMembers::CalibTtag field.
            static const char* name()
            {
                return "calibTtag";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::EsfMeasFields::CalibTtag field.
    struct CalibTtagCommon
    {
        /// @brief Name of the @ref cc_ublox::message::EsfMeasFields::CalibTtag field.
        static const char* name()
        {
            return "calibTtag";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::EsfMeas message.
struct EsfMeasCommon
{
    /// @brief Name of the @ref cc_ublox::message::EsfMeas message.
    static const char* name()
    {
        return "ESF-MEAS";
    }
};

} // namespace message

} // namespace cc_ublox
