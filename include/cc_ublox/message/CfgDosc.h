// Generated by commsdsl2comms v6.3.4

/// @file
/// @brief Contains definition of <b>"CFG-DOSC"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/message/CfgDoscCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref CfgDosc.
/// @tparam TOpt Extra options
/// @see @ref CfgDosc
/// @headerfile cc_ublox/message/CfgDosc.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct CfgDoscFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgDoscFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgDoscFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"numOsc"</b> field.
    class NumOsc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgDoscFieldsCommon::NumOscCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgDoscFieldsCommon::NumOscCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgDoscFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"oscId"</b> field.
            /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::ValueType
            class OscId : public
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::ValueType,
                    comms::option::def::ValidNumValueRange<0, 1>
                >
            {
                using Base =
                    comms::field::EnumValue<
                        cc_ublox::field::FieldBase<>,
                        cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::ValueType,
                        comms::option::def::ValidNumValueRange<0, 1>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Single value name info entry.
                using ValueNameInfo = cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::ValueNameInfo;

                /// @brief Type returned from @ref valueNamesMap() member function.
                /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::ValueNamesMapInfo.
                using ValueNamesMapInfo = cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::ValueNamesMapInfo;

                /// @brief Retrieve name of the enum value.
                /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::valueName().
                static const char* valueName(ValueType val)
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::valueName(val);
                }

                /// @brief Retrieve name of the enum value.
                /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::valueName().
                static const char* valueNameOf(ValueType val)
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::valueName(val);
                }

                /// @brief Retrieve name of the @b current value
                const char* valueName() const
                {
                    return valueName(Base::getValue());
                }

                /// @brief Retrieve map of enum value names.
                /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::valueNamesMap().
                static ValueNamesMapInfo valueNamesMap()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::valueNamesMap();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::OscIdCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved2"</b> field.
            class Reserved2 : public
                cc_ublox::field::Res1<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res1<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved2Common::name();
                }
            };

            /// @brief Scope for all the member fields of
            ///     @ref Flags field.
            struct FlagsMembers
            {
                /// @brief Definition of <b>""</b> field.
                class Bits : public
                    comms::field::BitmaskValue<
                        cc_ublox::field::FieldBase<>,
                        comms::option::def::FixedBitLength<1U>
                    >
                {
                    using Base =
                        comms::field::BitmaskValue<
                            cc_ublox::field::FieldBase<>,
                            comms::option::def::FixedBitLength<1U>
                        >;
                public:
                    /// @brief Provides names and generates access functions for internal bits.
                    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
                    ///     related to @b comms::field::BitmaskValue class from COMMS library
                    ///     for details.
                    ///
                    ///      The generated enum values and functions are:
                    ///      @li @b BitIdx_isCalibrated, @b getBitValue_isCalibrated() and @b setBitValue_isCalibrated().
                    COMMS_BITMASK_BITS_SEQ(
                        isCalibrated
                    );

                    /// @brief Retrieve name of the bit.
                    /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsCommon::bitName().
                    static const char* bitName(BitIdx idx)
                    {
                        return
                            cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsCommon::bitName(
                                static_cast<std::size_t>(idx));
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::BitsCommon::name();
                    }
                };

                /// @brief Definition of <b>"controlIf"</b> field.
                /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::ValueType
                class ControlIf : public
                    comms::field::EnumValue<
                        cc_ublox::field::FieldBase<>,
                        cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::ValueType,
                        comms::option::def::FixedBitLength<4U>,
                        comms::option::def::ValidNumValueRange<0, 2>,
                        comms::option::def::ValidNumValueRange<13, 15>
                    >
                {
                    using Base =
                        comms::field::EnumValue<
                            cc_ublox::field::FieldBase<>,
                            cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::ValueType,
                            comms::option::def::FixedBitLength<4U>,
                            comms::option::def::ValidNumValueRange<0, 2>,
                            comms::option::def::ValidNumValueRange<13, 15>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Single value name info entry.
                    using ValueNameInfo = cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::ValueNameInfo;

                    /// @brief Type returned from @ref valueNamesMap() member function.
                    /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::ValueNamesMapInfo.
                    using ValueNamesMapInfo = cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::ValueNamesMapInfo;

                    /// @brief Retrieve name of the enum value.
                    /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::valueName().
                    static const char* valueName(ValueType val)
                    {
                        return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::valueName(val);
                    }

                    /// @brief Retrieve name of the enum value.
                    /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::valueName().
                    static const char* valueNameOf(ValueType val)
                    {
                        return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::valueName(val);
                    }

                    /// @brief Retrieve name of the @b current value
                    const char* valueName() const
                    {
                        return valueName(Base::getValue());
                    }

                    /// @brief Retrieve map of enum value names.
                    /// @see @ref cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::valueNamesMap().
                    static ValueNamesMapInfo valueNamesMap()
                    {
                        return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::valueNamesMap();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ControlIfCommon::name();
                    }
                };

                /// @brief Definition of <b>"reserved"</b> field.
                /// @details
                ///     Reserved field with 2 bytes length
                class Reserved : public
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::FixedBitLength<11U>,
                        comms::option::def::ValidNumValue<0>
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_ublox::field::FieldBase<>,
                            std::uint16_t,
                            comms::option::def::FixedBitLength<11U>,
                            comms::option::def::ValidNumValue<0>
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ReservedCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsMembersCommon::ReservedCommon::name();
                    }
                };

                /// @brief All members bundled in @b std::tuple.
                using All =
                    std::tuple<
                       Bits,
                       ControlIf,
                       Reserved
                    >;
            };

            /// @brief Definition of <b>"flags"</b> field.
            class Flags : public
                comms::field::Bitfield<
                    cc_ublox::field::FieldBase<>,
                    typename FlagsMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >
            {
                using Base =
                    comms::field::Bitfield<
                        cc_ublox::field::FieldBase<>,
                        typename FlagsMembers::All,
                        comms::option::def::HasVersionDependentMembers<false>
                    >;
            public:
                /// @brief Allow access to internal fields.
                /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
                ///     related to @b comms::field::Bitfield class from COMMS library
                ///     for details.
                ///
                ///     The generated values, types and access functions are:
                ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
                ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::FlagsMembers::Bits member field.
                ///     @li @b FieldIdx_controlIf index, @b Field_controlIf type and @b field_controlIf() access function -
                ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::FlagsMembers::ControlIf member field.
                ///     @li @b FieldIdx_reserved index, @b Field_reserved type and @b field_reserved() access function -
                ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::FlagsMembers::Reserved member field.
                COMMS_FIELD_MEMBERS_NAMES(
                    bits,
                    controlIf,
                    reserved
                );

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FlagsCommon::name();
                }
            };

            /// @brief Definition of <b>"freq"</b> field.
            class Freq : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 4>,
                    comms::option::def::UnitsHertz
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::ScalingRatio<1, 4>,
                        comms::option::def::UnitsHertz
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FreqCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 2U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::FreqCommon::name();
                }
            };

            /// @brief Definition of <b>"phaseOffset"</b> field.
            class PhaseOffset : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::int32_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseOffsetCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::PhaseOffsetCommon::name();
                }
            };

            /// @brief Definition of <b>"withTemp"</b> field.
            class WithTemp : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 256>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::ScalingRatio<1, 256>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::WithTempCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 8U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::WithTempCommon::name();
                }
            };

            /// @brief Definition of <b>"withAge"</b> field.
            class WithAge : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::ScalingRatio<1, 256>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::ScalingRatio<1, 256>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::WithAgeCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 8U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::WithAgeCommon::name();
                }
            };

            /// @brief Definition of <b>"timeToTemp"</b> field.
            class TimeToTemp : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::UnitsSeconds
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::UnitsSeconds
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::TimeToTempCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::TimeToTempCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved3"</b> field.
            class Reserved3 : public
                cc_ublox::field::Res2<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res2<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved3Common::name();
                }
            };

            /// @brief Definition of <b>"gainVco"</b> field.
            class GainVco : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::int32_t,
                    comms::option::def::ScalingRatio<1, 65536L>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::int32_t,
                        comms::option::def::ScalingRatio<1, 65536L>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::GainVcoCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 9U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::GainVcoCommon::name();
                }
            };

            /// @brief Definition of <b>"gainUncertainty"</b> field.
            class GainUncertainty : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::ScalingRatio<1, 256>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::ScalingRatio<1, 256>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::GainUncertaintyCommon::hasSpecials();
                }

                /// @brief Requested number of digits after decimal point when value
                ///     is displayed.
                static constexpr unsigned displayDecimals()
                {
                    return 8U;
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::GainUncertaintyCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved4"</b> field.
            class Reserved4 : public
                cc_ublox::field::Res3<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res3<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved4Common::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   OscId,
                   Reserved2,
                   Flags,
                   Freq,
                   PhaseOffset,
                   WithTemp,
                   WithAge,
                   TimeToTemp,
                   Reserved3,
                   GainVco,
                   GainUncertainty,
                   Reserved4
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_oscId index, @b Field_oscId type and @b field_oscId() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::OscId member field.
            ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::Reserved2 member field.
            ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::Flags member field.
            ///     @li @b FieldIdx_freq index, @b Field_freq type and @b field_freq() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::Freq member field.
            ///     @li @b FieldIdx_phaseOffset index, @b Field_phaseOffset type and @b field_phaseOffset() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::PhaseOffset member field.
            ///     @li @b FieldIdx_withTemp index, @b Field_withTemp type and @b field_withTemp() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::WithTemp member field.
            ///     @li @b FieldIdx_withAge index, @b Field_withAge type and @b field_withAge() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::WithAge member field.
            ///     @li @b FieldIdx_timeToTemp index, @b Field_timeToTemp type and @b field_timeToTemp() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::TimeToTemp member field.
            ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::Reserved3 member field.
            ///     @li @b FieldIdx_gainVco index, @b Field_gainVco type and @b field_gainVco() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::GainVco member field.
            ///     @li @b FieldIdx_gainUncertainty index, @b Field_gainUncertainty type and @b field_gainUncertainty() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::GainUncertainty member field.
            ///     @li @b FieldIdx_reserved4 index, @b Field_reserved4 type and @b field_reserved4() access function -
            ///         for cc_ublox::message::CfgDoscFields::ListMembers::ElementMembers::Reserved4 member field.
            COMMS_FIELD_MEMBERS_NAMES(
                oscId,
                reserved2,
                flags,
                freq,
                phaseOffset,
                withTemp,
                withAge,
                timeToTemp,
                reserved3,
                gainVco,
                gainUncertainty,
                reserved4
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgDoscFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::CfgDoscFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::CfgDoscFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgDoscFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        NumOsc,
        Reserved1,
        List
    >;
};

/// @brief Definition of <b>"CFG-DOSC"</b> message class.
/// @details
///     See @ref CfgDoscFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/CfgDosc.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class CfgDosc : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgDosc>,
        comms::option::def::FieldsImpl<typename CfgDoscFields<TOpt>::All>,
        comms::option::def::MsgType<CfgDosc<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgDosc>,
            comms::option::def::FieldsImpl<typename CfgDoscFields<TOpt>::All>,
            comms::option::def::MsgType<CfgDosc<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref CfgDoscFields::Version field.
    ///     @li @b FieldIdx_numOsc index, @b Field_numOsc type and @b field_numOsc() access fuction
    ///         for @ref CfgDoscFields::NumOsc field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref CfgDoscFields::Reserved1 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref CfgDoscFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        numOsc,
        reserved1,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 4U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::CfgDoscCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numOsc().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numOsc().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_numOsc().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_numOsc().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
