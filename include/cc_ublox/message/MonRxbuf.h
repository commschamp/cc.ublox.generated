// Generated by commsdsl2comms v5.1.3

/// @file
/// @brief Contains definition of <b>"MON-RXBUF"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/MonRxbufCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MonRxbuf.
/// @tparam TOpt Extra options
/// @see @ref MonRxbuf
/// @headerfile cc_ublox/message/MonRxbuf.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MonRxbufFields
{
    /// @brief Scope for all the member fields of
    ///     @ref Pending field.
    struct PendingMembers
    {
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::MonRxbufFieldsCommon::PendingMembersCommon::ElementCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonRxbufFieldsCommon::PendingMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"pending"</b> field.
    class Pending : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename PendingMembers::Element,
            typename TOpt::message::MonRxbufFields::Pending,
            comms::option::def::SequenceFixedSize<6U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename PendingMembers::Element,
                typename TOpt::message::MonRxbufFields::Pending,
                comms::option::def::SequenceFixedSize<6U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonRxbufFieldsCommon::PendingCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Usage field.
    struct UsageMembers
    {
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::MonRxbufFieldsCommon::UsageMembersCommon::ElementCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonRxbufFieldsCommon::UsageMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"usage"</b> field.
    class Usage : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename UsageMembers::Element,
            typename TOpt::message::MonRxbufFields::Usage,
            comms::option::def::SequenceFixedSize<6U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename UsageMembers::Element,
                typename TOpt::message::MonRxbufFields::Usage,
                comms::option::def::SequenceFixedSize<6U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonRxbufFieldsCommon::UsageCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref PeakUsage field.
    struct PeakUsageMembers
    {
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::MonRxbufFieldsCommon::PeakUsageMembersCommon::ElementCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonRxbufFieldsCommon::PeakUsageMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"peakUsage"</b> field.
    class PeakUsage : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename PeakUsageMembers::Element,
            typename TOpt::message::MonRxbufFields::PeakUsage,
            comms::option::def::SequenceFixedSize<6U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename PeakUsageMembers::Element,
                typename TOpt::message::MonRxbufFields::PeakUsage,
                comms::option::def::SequenceFixedSize<6U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonRxbufFieldsCommon::PeakUsageCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Pending,
        Usage,
        PeakUsage
    >;
};

/// @brief Definition of <b>"MON-RXBUF"</b> message class.
/// @details
///     See @ref MonRxbufFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MonRxbuf.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MonRxbuf : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonRxbuf,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonRxbuf>,
        comms::option::def::FieldsImpl<typename MonRxbufFields<TOpt>::All>,
        comms::option::def::MsgType<MonRxbuf<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonRxbuf,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonRxbuf>,
            comms::option::def::FieldsImpl<typename MonRxbufFields<TOpt>::All>,
            comms::option::def::MsgType<MonRxbuf<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_pending index, @b Field_pending type and @b field_pending() access fuction
    ///         for @ref MonRxbufFields::Pending field.
    ///     @li @b FieldIdx_usage index, @b Field_usage type and @b field_usage() access fuction
    ///         for @ref MonRxbufFields::Usage field.
    ///     @li @b FieldIdx_peakUsage index, @b Field_peakUsage type and @b field_peakUsage() access fuction
    ///         for @ref MonRxbufFields::PeakUsage field.
    COMMS_MSG_FIELDS_NAMES(
        pending,
        usage,
        peakUsage
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 24U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 24U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MonRxbufCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
