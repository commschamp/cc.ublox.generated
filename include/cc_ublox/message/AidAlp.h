// Generated by commsdsl2comms v6.3.0

/// @file
/// @brief Contains definition of <b>"AID-ALP"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/message/AidAlpCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref AidAlp.
/// @tparam TOpt Extra options
/// @see @ref AidAlp
/// @headerfile cc_ublox/message/AidAlp.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct AidAlpFields
{
    /// @brief Definition of <b>"predTow"</b> field.
    class PredTow : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpFieldsCommon::PredTowCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::PredTowCommon::name();
        }
    };

    /// @brief Definition of <b>"predDur"</b> field.
    class PredDur : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpFieldsCommon::PredDurCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::PredDurCommon::name();
        }
    };

    /// @brief Definition of <b>"age"</b> field.
    class Age : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpFieldsCommon::AgeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::AgeCommon::name();
        }
    };

    /// @brief Definition of <b>"predWno"</b> field.
    class PredWno : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpFieldsCommon::PredWnoCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::PredWnoCommon::name();
        }
    };

    /// @brief Definition of <b>"almWno"</b> field.
    class AlmWno : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpFieldsCommon::AlmWnoCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::AlmWnoCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"svs"</b> field.
    class Svs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::AidAlpFieldsCommon::SvsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::SvsCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"reserved3"</b> field.
    class Reserved3 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::AidAlpFieldsCommon::Reserved3Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        PredTow,
        PredDur,
        Age,
        PredWno,
        AlmWno,
        Reserved1,
        Svs,
        Reserved2,
        Reserved3
    >;
};

/// @brief Definition of <b>"AID-ALP"</b> message class.
/// @details
///     See @ref AidAlpFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/AidAlp.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class AidAlp : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::AidAlp,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAlp>,
        comms::option::def::FieldsImpl<typename AidAlpFields<TOpt>::All>,
        comms::option::def::MsgType<AidAlp<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::AidAlp,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_AidAlp>,
            comms::option::def::FieldsImpl<typename AidAlpFields<TOpt>::All>,
            comms::option::def::MsgType<AidAlp<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_predTow index, @b Field_predTow type and @b field_predTow() access fuction
    ///         for @ref AidAlpFields::PredTow field.
    ///     @li @b FieldIdx_predDur index, @b Field_predDur type and @b field_predDur() access fuction
    ///         for @ref AidAlpFields::PredDur field.
    ///     @li @b FieldIdx_age index, @b Field_age type and @b field_age() access fuction
    ///         for @ref AidAlpFields::Age field.
    ///     @li @b FieldIdx_predWno index, @b Field_predWno type and @b field_predWno() access fuction
    ///         for @ref AidAlpFields::PredWno field.
    ///     @li @b FieldIdx_almWno index, @b Field_almWno type and @b field_almWno() access fuction
    ///         for @ref AidAlpFields::AlmWno field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref AidAlpFields::Reserved1 field.
    ///     @li @b FieldIdx_svs index, @b Field_svs type and @b field_svs() access fuction
    ///         for @ref AidAlpFields::Svs field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref AidAlpFields::Reserved2 field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref AidAlpFields::Reserved3 field.
    COMMS_MSG_FIELDS_NAMES(
        predTow,
        predDur,
        age,
        predWno,
        almWno,
        reserved1,
        svs,
        reserved2,
        reserved3
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 24U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 24U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::AidAlpCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
