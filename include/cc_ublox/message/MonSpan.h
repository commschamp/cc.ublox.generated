// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains definition of <b>"MON-SPAN"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/message/MonSpanCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MonSpan.
/// @tparam TOpt Extra options
/// @see @ref MonSpan
/// @headerfile cc_ublox/message/MonSpan.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MonSpanFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MonSpanFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonSpanFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"numRfblocks"</b> field.
    class NumRfblocks : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MonSpanFieldsCommon::NumRfblocksCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonSpanFieldsCommon::NumRfblocksCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved0"</b> field.
    class Reserved0 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonSpanFieldsCommon::Reserved0Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Scope for all the member fields of
            ///     @ref Spectrum field.
            struct SpectrumMembers
            {
                /// @brief Definition of <b>"element"</b> field.
                class Element : public
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >
                {
                    using Base =
                        comms::field::IntValue<
                            cc_ublox::field::FieldBase<>,
                            std::uint8_t
                        >;
                public:
                    /// @brief Re-definition of the value type.
                    using ValueType = typename Base::ValueType;

                    /// @brief Compile time detection of special values presence.
                    static constexpr bool hasSpecials()
                    {
                        return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::SpectrumMembersCommon::ElementCommon::hasSpecials();
                    }

                    /// @brief Name of the field.
                    static const char* name()
                    {
                        return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::SpectrumMembersCommon::ElementCommon::name();
                    }
                };
            };

            /// @brief Definition of <b>"spectrum"</b> field.
            class Spectrum : public
                comms::field::ArrayList<
                    cc_ublox::field::FieldBase<>,
                    typename SpectrumMembers::Element,
                    typename TOpt::message::MonSpanFields::ListMembers::ElementMembers::Spectrum,
                    comms::option::def::SequenceFixedSize<256U>
                >
            {
                using Base =
                    comms::field::ArrayList<
                        cc_ublox::field::FieldBase<>,
                        typename SpectrumMembers::Element,
                        typename TOpt::message::MonSpanFields::ListMembers::ElementMembers::Spectrum,
                        comms::option::def::SequenceFixedSize<256U>
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::SpectrumCommon::name();
                }
            };

            /// @brief Definition of <b>"span"</b> field.
            class Span : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsHertz
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::UnitsHertz
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::SpanCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::SpanCommon::name();
                }
            };

            /// @brief Definition of <b>"res"</b> field.
            class Res : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsHertz
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::UnitsHertz
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::ResCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::ResCommon::name();
                }
            };

            /// @brief Definition of <b>"center"</b> field.
            class Center : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsHertz
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::UnitsHertz
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::CenterCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::CenterCommon::name();
                }
            };

            /// @brief Definition of <b>"pga"</b> field.
            class Pga : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::PgaCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::PgaCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved1"</b> field.
            class Reserved1 : public
                cc_ublox::field::Res3<
                    TOpt
                >
            {
                using Base =
                    cc_ublox::field::Res3<
                        TOpt
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved1Common::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   Spectrum,
                   Span,
                   Res,
                   Center,
                   Pga,
                   Reserved1
                >;
        };

        /// @brief Definition of <b>"element"</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_spectrum index, @b Field_spectrum type and @b field_spectrum() access function -
            ///         for cc_ublox::message::MonSpanFields::ListMembers::ElementMembers::Spectrum member field.
            ///     @li @b FieldIdx_span index, @b Field_span type and @b field_span() access function -
            ///         for cc_ublox::message::MonSpanFields::ListMembers::ElementMembers::Span member field.
            ///     @li @b FieldIdx_res index, @b Field_res type and @b field_res() access function -
            ///         for cc_ublox::message::MonSpanFields::ListMembers::ElementMembers::Res member field.
            ///     @li @b FieldIdx_center index, @b Field_center type and @b field_center() access function -
            ///         for cc_ublox::message::MonSpanFields::ListMembers::ElementMembers::Center member field.
            ///     @li @b FieldIdx_pga index, @b Field_pga type and @b field_pga() access function -
            ///         for cc_ublox::message::MonSpanFields::ListMembers::ElementMembers::Pga member field.
            ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access function -
            ///         for cc_ublox::message::MonSpanFields::ListMembers::ElementMembers::Reserved1 member field.
            COMMS_FIELD_MEMBERS_NAMES(
                spectrum,
                span,
                res,
                center,
                pga,
                reserved1
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonSpanFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::MonSpanFields::List,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::MonSpanFields::List,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonSpanFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        NumRfblocks,
        Reserved0,
        List
    >;
};

/// @brief Definition of <b>"MON-SPAN"</b> message class.
/// @details
///     See @ref MonSpanFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MonSpan.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MonSpan : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonSpan,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonSpan>,
        comms::option::def::FieldsImpl<typename MonSpanFields<TOpt>::All>,
        comms::option::def::MsgType<MonSpan<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonSpan,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonSpan>,
            comms::option::def::FieldsImpl<typename MonSpanFields<TOpt>::All>,
            comms::option::def::MsgType<MonSpan<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MonSpanFields::Version field.
    ///     @li @b FieldIdx_numRfblocks index, @b Field_numRfblocks type and @b field_numRfblocks() access fuction
    ///         for @ref MonSpanFields::NumRfblocks field.
    ///     @li @b FieldIdx_reserved0 index, @b Field_reserved0 type and @b field_reserved0() access fuction
    ///         for @ref MonSpanFields::Reserved0 field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref MonSpanFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        numRfblocks,
        reserved0,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 4U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MonSpanCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_list>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_list();

            es = Base::template doReadFrom<FieldIdx_list>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_list() || updated;
       return updated;
    }

private:
    void readPrepare_list()
    {
        field_list().forceReadElemCount(
            static_cast<std::size_t>(field_numRfblocks().getValue()));
    }

    bool refresh_list()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numRfblocks().getValue());
            auto realValue = field_list().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_numRfblocks().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_list().value().resize(maxAllowedValue);
            }
            field_numRfblocks().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
