// Generated by commsdsl2comms v7.0.0

/// @file
/// @brief Contains definition of <b>"MON-IO"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/message/MonIoCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bundle.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MonIo.
/// @tparam TOpt Extra options
/// @see @ref MonIo
/// @headerfile cc_ublox/message/MonIo.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MonIoFields
{
    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"rxBytes"</b> field.
            class RxBytes : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::HasName
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::RxBytesCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::RxBytesCommon::name();
                }
            };

            /// @brief Definition of <b>"txBytes"</b> field.
            class TxBytes : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::HasName
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::TxBytesCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::TxBytesCommon::name();
                }
            };

            /// @brief Definition of <b>"parityErrs"</b> field.
            class ParityErrs : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::HasName
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::ParityErrsCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::ParityErrsCommon::name();
                }
            };

            /// @brief Definition of <b>"framingErrs"</b> field.
            class FramingErrs : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::HasName
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::FramingErrsCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::FramingErrsCommon::name();
                }
            };

            /// @brief Definition of <b>"overrunErrs"</b> field.
            class OverrunErrs : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::HasName
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::OverrunErrsCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::OverrunErrsCommon::name();
                }
            };

            /// @brief Definition of <b>"breakCond"</b> field.
            class BreakCond : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::HasName
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint16_t,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::BreakCondCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::BreakCondCommon::name();
                }
            };

            /// @brief Definition of <b>"rxBusy"</b> field.
            class RxBusy : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::HasName
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::RxBusyCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::RxBusyCommon::name();
                }
            };

            /// @brief Definition of <b>"txBusy"</b> field.
            class TxBusy : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::HasName
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::TxBusyCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::TxBusyCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved1"</b> field.
            class Reserved1 : public
                cc_ublox::field::Res2<
                    TOpt,
                    comms::option::def::HasName
                >
            {
                using Base =
                    cc_ublox::field::Res2<
                        TOpt,
                        comms::option::def::HasName
                    >;
            public:
                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementMembersCommon::Reserved1Common::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   RxBytes,
                   TxBytes,
                   ParityErrs,
                   FramingErrs,
                   OverrunErrs,
                   BreakCond,
                   RxBusy,
                   TxBusy,
                   Reserved1
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bundle<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All,
                comms::option::def::HasName,
                comms::option::def::HasVersionDependentMembers<false>
            >
        {
            using Base =
                comms::field::Bundle<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All,
                    comms::option::def::HasName,
                    comms::option::def::HasVersionDependentMembers<false>
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bundle class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_rxBytes index, @b Field_rxBytes type and @b field_rxBytes() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::RxBytes member field.
            ///     @li @b FieldIdx_txBytes index, @b Field_txBytes type and @b field_txBytes() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::TxBytes member field.
            ///     @li @b FieldIdx_parityErrs index, @b Field_parityErrs type and @b field_parityErrs() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::ParityErrs member field.
            ///     @li @b FieldIdx_framingErrs index, @b Field_framingErrs type and @b field_framingErrs() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::FramingErrs member field.
            ///     @li @b FieldIdx_overrunErrs index, @b Field_overrunErrs type and @b field_overrunErrs() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::OverrunErrs member field.
            ///     @li @b FieldIdx_breakCond index, @b Field_breakCond type and @b field_breakCond() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::BreakCond member field.
            ///     @li @b FieldIdx_rxBusy index, @b Field_rxBusy type and @b field_rxBusy() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::RxBusy member field.
            ///     @li @b FieldIdx_txBusy index, @b Field_txBusy type and @b field_txBusy() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::TxBusy member field.
            ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access function -
            ///         for cc_ublox::message::MonIoFields::ListMembers::ElementMembers::Reserved1 member field.
            COMMS_FIELD_MEMBERS_NAMES(
                rxBytes,
                txBytes,
                parityErrs,
                framingErrs,
                overrunErrs,
                breakCond,
                rxBusy,
                txBusy,
                reserved1
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonIoFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::MonIoFields::List,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::MonIoFields::List,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonIoFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        List
    >;
};

/// @brief Definition of <b>"MON-IO"</b> message class.
/// @details
///     See @ref MonIoFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MonIo.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MonIo : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonIo,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonIo>,
        comms::option::def::FieldsImpl<typename MonIoFields<TOpt>::All>,
        comms::option::def::MsgType<MonIo<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonIo,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonIo>,
            comms::option::def::FieldsImpl<typename MonIoFields<TOpt>::All>,
            comms::option::def::MsgType<MonIo<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref MonIoFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 0U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MonIoCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
