// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains definition of <b>"MGA-GLO-TIMEOFFSET"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/message/MgaGloTimeoffsetCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MgaGloTimeoffset.
/// @tparam TOpt Extra options
/// @see @ref MgaGloTimeoffset
/// @headerfile cc_ublox/message/MgaGloTimeoffset.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MgaGloTimeoffsetFields
{
    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<3>,
            comms::option::def::ValidNumValue<3>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<3>,
                comms::option::def::ValidNumValue<3>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::TypeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::TypeCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(3);
            return true;
        }
    };

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"N"</b> field.
    class N : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsDays
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsDays
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::NCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::NCommon::name();
        }
    };

    /// @brief Definition of <b>"tauC"</b> field.
    class TauC : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 134217728L>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 134217728L>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::TauCCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::TauCCommon::name();
        }
    };

    /// @brief Definition of <b>"tauGps"</b> field.
    class TauGps : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::TauGpsCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::TauGpsCommon::name();
        }
    };

    /// @brief Definition of <b>"B1"</b> field.
    class B1 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 1024>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 1024>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::B1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::B1Common::name();
        }
    };

    /// @brief Definition of <b>"B2"</b> field.
    class B2 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 65536L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 65536L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::B2Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::B2Common::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGloTimeoffsetFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Type,
        Version,
        N,
        TauC,
        TauGps,
        B1,
        B2,
        Reserved1
    >;
};

/// @brief Definition of <b>"MGA-GLO-TIMEOFFSET"</b> message class.
/// @details
///     See @ref MgaGloTimeoffsetFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MgaGloTimeoffset.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MgaGloTimeoffset : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MgaGloTimeoffset,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaGlo>,
        comms::option::def::FieldsImpl<typename MgaGloTimeoffsetFields<TOpt>::All>,
        comms::option::def::MsgType<MgaGloTimeoffset<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MgaGloTimeoffset,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaGlo>,
            comms::option::def::FieldsImpl<typename MgaGloTimeoffsetFields<TOpt>::All>,
            comms::option::def::MsgType<MgaGloTimeoffset<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref MgaGloTimeoffsetFields::Type field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MgaGloTimeoffsetFields::Version field.
    ///     @li @b FieldIdx_n index, @b Field_n type and @b field_n() access fuction
    ///         for @ref MgaGloTimeoffsetFields::N field.
    ///     @li @b FieldIdx_tauC index, @b Field_tauC type and @b field_tauC() access fuction
    ///         for @ref MgaGloTimeoffsetFields::TauC field.
    ///     @li @b FieldIdx_tauGps index, @b Field_tauGps type and @b field_tauGps() access fuction
    ///         for @ref MgaGloTimeoffsetFields::TauGps field.
    ///     @li @b FieldIdx_b1 index, @b Field_b1 type and @b field_b1() access fuction
    ///         for @ref MgaGloTimeoffsetFields::B1 field.
    ///     @li @b FieldIdx_b2 index, @b Field_b2 type and @b field_b2() access fuction
    ///         for @ref MgaGloTimeoffsetFields::B2 field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref MgaGloTimeoffsetFields::Reserved1 field.
    COMMS_MSG_FIELDS_NAMES(
        type,
        version,
        n,
        tauC,
        tauGps,
        b1,
        b2,
        reserved1
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 20U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 20U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MgaGloTimeoffsetCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
