// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains definition of <b>"NAV-DOP"</b> message and its fields.

#pragma once

#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/Dop.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/message/NavDopCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref NavDop.
/// @tparam TOpt Extra options
/// @see @ref NavDop
/// @headerfile cc_ublox/message/NavDop.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct NavDopFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"gDOP"</b> field.
    class GDOP : public
        cc_ublox::field::Dop<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Dop<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDopFieldsCommon::GDOPCommon::name();
        }
    };

    /// @brief Definition of <b>"pDOP"</b> field.
    class PDOP : public
        cc_ublox::field::Dop<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Dop<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDopFieldsCommon::PDOPCommon::name();
        }
    };

    /// @brief Definition of <b>"tDOP"</b> field.
    class TDOP : public
        cc_ublox::field::Dop<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Dop<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDopFieldsCommon::TDOPCommon::name();
        }
    };

    /// @brief Definition of <b>"vDOP"</b> field.
    class VDOP : public
        cc_ublox::field::Dop<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Dop<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDopFieldsCommon::VDOPCommon::name();
        }
    };

    /// @brief Definition of <b>"hDOP"</b> field.
    class HDOP : public
        cc_ublox::field::Dop<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Dop<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDopFieldsCommon::HDOPCommon::name();
        }
    };

    /// @brief Definition of <b>"nDOP"</b> field.
    class NDOP : public
        cc_ublox::field::Dop<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Dop<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDopFieldsCommon::NDOPCommon::name();
        }
    };

    /// @brief Definition of <b>"eDOP"</b> field.
    class EDOP : public
        cc_ublox::field::Dop<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Dop<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::NavDopFieldsCommon::EDOPCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        GDOP,
        PDOP,
        TDOP,
        VDOP,
        HDOP,
        NDOP,
        EDOP
    >;
};

/// @brief Definition of <b>"NAV-DOP"</b> message class.
/// @details
///     See @ref NavDopFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/NavDop.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class NavDop : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::NavDop,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavDop>,
        comms::option::def::FieldsImpl<typename NavDopFields<TOpt>::All>,
        comms::option::def::MsgType<NavDop<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::NavDop,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_NavDop>,
            comms::option::def::FieldsImpl<typename NavDopFields<TOpt>::All>,
            comms::option::def::MsgType<NavDop<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref NavDopFields::Itow field.
    ///     @li @b FieldIdx_gDOP index, @b Field_gDOP type and @b field_gDOP() access fuction
    ///         for @ref NavDopFields::GDOP field.
    ///     @li @b FieldIdx_pDOP index, @b Field_pDOP type and @b field_pDOP() access fuction
    ///         for @ref NavDopFields::PDOP field.
    ///     @li @b FieldIdx_tDOP index, @b Field_tDOP type and @b field_tDOP() access fuction
    ///         for @ref NavDopFields::TDOP field.
    ///     @li @b FieldIdx_vDOP index, @b Field_vDOP type and @b field_vDOP() access fuction
    ///         for @ref NavDopFields::VDOP field.
    ///     @li @b FieldIdx_hDOP index, @b Field_hDOP type and @b field_hDOP() access fuction
    ///         for @ref NavDopFields::HDOP field.
    ///     @li @b FieldIdx_nDOP index, @b Field_nDOP type and @b field_nDOP() access fuction
    ///         for @ref NavDopFields::NDOP field.
    ///     @li @b FieldIdx_eDOP index, @b Field_eDOP type and @b field_eDOP() access fuction
    ///         for @ref NavDopFields::EDOP field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        gDOP,
        pDOP,
        tDOP,
        vDOP,
        hDOP,
        nDOP,
        eDOP
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 18U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 18U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::NavDopCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
