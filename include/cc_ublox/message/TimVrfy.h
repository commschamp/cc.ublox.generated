// Generated by commsdsl2comms v6.2.4

/// @file
/// @brief Contains definition of <b>"TIM-VRFY"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/message/TimVrfyCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref TimVrfy.
/// @tparam TOpt Extra options
/// @see @ref TimVrfy
/// @headerfile cc_ublox/message/TimVrfy.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct TimVrfyFields
{
    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"frac"</b> field.
    class Frac : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::FracCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::FracCommon::name();
        }
    };

    /// @brief Definition of <b>"deltaMs"</b> field.
    class DeltaMs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::DeltaMsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::DeltaMsCommon::name();
        }
    };

    /// @brief Definition of <b>"deltaNs"</b> field.
    class DeltaNs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::DeltaNsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::DeltaNsCommon::name();
        }
    };

    /// @brief Definition of <b>"wno"</b> field.
    class Wno : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::UnitsWeeks
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::UnitsWeeks
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::WnoCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::WnoCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>"src"</b> field.
        /// @see @ref cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::ValueType
        class Src : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::ValueType,
                comms::option::def::FixedBitLength<3U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::ValueType,
                    comms::option::def::FixedBitLength<3U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::SrcCommon::name();
            }
        };

        /// @brief Definition of <b>"reserved"</b> field.
        /// @details
        ///     Reserved field with 1 byte length
        class Reserved : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<5U>,
                comms::option::def::ValidNumValue<0>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<5U>,
                    comms::option::def::ValidNumValue<0>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::ReservedCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::TimVrfyFieldsCommon::FlagsMembersCommon::ReservedCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               Src,
               Reserved
            >;
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename FlagsMembers::All,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename FlagsMembers::All,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_src index, @b Field_src type and @b field_src() access function -
        ///         for cc_ublox::message::TimVrfyFields::FlagsMembers::Src member field.
        ///     @li @b FieldIdx_reserved index, @b Field_reserved type and @b field_reserved() access function -
        ///         for cc_ublox::message::TimVrfyFields::FlagsMembers::Reserved member field.
        COMMS_FIELD_MEMBERS_NAMES(
            src,
            reserved
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimVrfyFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Itow,
        Frac,
        DeltaMs,
        DeltaNs,
        Wno,
        Flags,
        Reserved1
    >;
};

/// @brief Definition of <b>"TIM-VRFY"</b> message class.
/// @details
///     See @ref TimVrfyFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/TimVrfy.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class TimVrfy : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::TimVrfy,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_TimVrfy>,
        comms::option::def::FieldsImpl<typename TimVrfyFields<TOpt>::All>,
        comms::option::def::MsgType<TimVrfy<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::TimVrfy,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_TimVrfy>,
            comms::option::def::FieldsImpl<typename TimVrfyFields<TOpt>::All>,
            comms::option::def::MsgType<TimVrfy<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref TimVrfyFields::Itow field.
    ///     @li @b FieldIdx_frac index, @b Field_frac type and @b field_frac() access fuction
    ///         for @ref TimVrfyFields::Frac field.
    ///     @li @b FieldIdx_deltaMs index, @b Field_deltaMs type and @b field_deltaMs() access fuction
    ///         for @ref TimVrfyFields::DeltaMs field.
    ///     @li @b FieldIdx_deltaNs index, @b Field_deltaNs type and @b field_deltaNs() access fuction
    ///         for @ref TimVrfyFields::DeltaNs field.
    ///     @li @b FieldIdx_wno index, @b Field_wno type and @b field_wno() access fuction
    ///         for @ref TimVrfyFields::Wno field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref TimVrfyFields::Flags field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref TimVrfyFields::Reserved1 field.
    COMMS_MSG_FIELDS_NAMES(
        itow,
        frac,
        deltaMs,
        deltaNs,
        wno,
        flags,
        reserved1
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 20U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 20U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::TimVrfyCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
