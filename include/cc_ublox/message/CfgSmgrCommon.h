// Generated by commsdsl2comms v6.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::CfgSmgr message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/Res2Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::CfgSmgr message.
/// @see cc_ublox::message::CfgSmgrFields
struct CfgSmgrFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgSmgrFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::MinGNSSFix field.
    struct MinGNSSFixCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgSmgrFields::MinGNSSFix field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::MinGNSSFix field.
        static const char* name()
        {
            return "minGNSSFix";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::MaxFreqChangeRate field.
    struct MaxFreqChangeRateCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgSmgrFields::MaxFreqChangeRate field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::MaxFreqChangeRate field.
        static const char* name()
        {
            return "maxFreqChangeRate";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::MaxPhaseCorrRate field.
    struct MaxPhaseCorrRateCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgSmgrFields::MaxPhaseCorrRate field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::MaxPhaseCorrRate field.
        static const char* name()
        {
            return "maxPhaseCorrRate";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res2Common
    {
        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::FreqTolerance field.
    struct FreqToleranceCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgSmgrFields::FreqTolerance field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::FreqTolerance field.
        static const char* name()
        {
            return "freqTolerance";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::TimeTolerance field.
    struct TimeToleranceCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgSmgrFields::TimeTolerance field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::TimeTolerance field.
        static const char* name()
        {
            return "timeTolerance";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::MessageCfg field.
    struct MessageCfgCommon
    {
        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::MessageCfg field.
        static const char* name()
        {
            return "messageCfg";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::CfgSmgrFields::MessageCfg field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "measInternal",
                "measGNSS",
                "measEXTINT0",
                "measEXTINT1"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::MaxSlewRate field.
    struct MaxSlewRateCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgSmgrFields::MaxSlewRate field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::MaxSlewRate field.
        static const char* name()
        {
            return "maxSlewRate";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::CfgSmgrFields::Flags field.
    struct FlagsMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::BitsLow field.
        struct BitsLowCommon
        {
            /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::BitsLow field.
            static const char* name()
            {
                return "";
            }

            /// @brief Retrieve name of the bit of
            ///     @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::BitsLow field.
            static const char* bitName(std::size_t idx)
            {
                static const char* Map[] = {
                    "disableInternal",
                    "disableExternal",
                    "preferenceMode",
                    "enableGNSS",
                    "enableEXTINT0",
                    "enableEXTINT1",
                    "enableHostMeasInt",
                    "enableHostMeasExt",
                    nullptr,
                    nullptr,
                    "useAnyFix",
                    "disableMaxSlewRate",
                    "issueFreqWarning",
                    "issueTimeWarning"
                };

                static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                if (MapSize <= idx) {
                    return nullptr;
                }

                return Map[idx];
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::TPCoherent field.
        struct TPCoherentCommon
        {
            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::TPCoherent field.
            enum class ValueType : std::uint8_t
            {
                Coherent = 0, ///< value @b Coherent. 
                NonCoherent = 1, ///< value @b NonCoherent. 
                PostInitCoherent = 2, ///< value @b PostInitCoherent. 

                // --- Extra values generated for convenience ---
                FirstValue = 0, ///< First defined value.
                LastValue = 2, ///< Last defined value.
                ValuesLimit = 3, ///< Upper limit for defined values.
            };

            /// @brief Single value name info entry
            using ValueNameInfo = const char*;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

            /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::TPCoherent field.
            static const char* name()
            {
                return "TPCoherent";
            }

            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                auto namesMapInfo = valueNamesMap();
                if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                    return nullptr;
                }

                return namesMapInfo.first[static_cast<std::size_t>(val)];
            }

            /// @brief Retrieve map of enum value names
            static ValueNamesMapInfo valueNamesMap()
            {
                static const char* Map[] = {
                    "Coherent",
                    "NonCoherent",
                    "PostInitCoherent"
                };
                static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                return std::make_pair(&Map[0], MapSize);
            }
        };

        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::TPCoherent field.
        using TPCoherentVal = TPCoherentCommon::ValueType;

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::BitsHigh field.
        struct BitsHighCommon
        {
            /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::BitsHigh field.
            static const char* name()
            {
                return "";
            }

            /// @brief Retrieve name of the bit of
            ///     @ref cc_ublox::message::CfgSmgrFields::FlagsMembers::BitsHigh field.
            static const char* bitName(std::size_t idx)
            {
                static const char* Map[] = {
                    "disableOffset"
                };

                static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                if (MapSize <= idx) {
                    return nullptr;
                }

                return Map[idx];
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgSmgrFields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_ublox::message::CfgSmgrFields::Flags field.
        static const char* name()
        {
            return "flags";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::CfgSmgr message.
struct CfgSmgrCommon
{
    /// @brief Name of the @ref cc_ublox::message::CfgSmgr message.
    static const char* name()
    {
        return "CFG-SMGR";
    }
};

} // namespace message

} // namespace cc_ublox
