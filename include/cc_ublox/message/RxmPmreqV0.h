// Generated by commsdsl2comms v6.3.4

/// @file
/// @brief Contains definition of <b>"RXM-PMREQ (v0)"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/message/RxmPmreqV0Common.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref RxmPmreqV0.
/// @tparam TOpt Extra options
/// @see @ref RxmPmreqV0
/// @headerfile cc_ublox/message/RxmPmreqV0.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct RxmPmreqV0Fields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::ValidNumValue<0>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::ValidNumValue<0>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmPmreqV0FieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmPmreqV0FieldsCommon::VersionCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(0);
            return true;
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmPmreqV0FieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"duration"</b> field.
    class Duration : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMilliseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmPmreqV0FieldsCommon::DurationCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmPmreqV0FieldsCommon::DurationCommon::name();
        }
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<4U>,
            comms::option::def::BitmaskReservedBits<0xFFFFFFF9UL, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<4U>,
                comms::option::def::BitmaskReservedBits<0xFFFFFFF9UL, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_backup.
        ///      @li @b BitIdx_force.
        COMMS_BITMASK_BITS(
            backup=1,
            force=2
        );

        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_backup() and @b setBitValue_backup().
        ///      @li @b getBitValue_force() and @b setBitValue_force().
        COMMS_BITMASK_BITS_ACCESS(
            backup,
            force
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::RxmPmreqV0FieldsCommon::FlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::RxmPmreqV0FieldsCommon::FlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmPmreqV0FieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"wakeupSources"</b> field.
    class WakeupSources : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<4U>,
            comms::option::def::BitmaskReservedBits<0xFFFFFF17UL, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<4U>,
                comms::option::def::BitmaskReservedBits<0xFFFFFF17UL, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_uartrx.
        ///      @li @b BitIdx_extint0.
        ///      @li @b BitIdx_extint1.
        ///      @li @b BitIdx_spics.
        COMMS_BITMASK_BITS(
            uartrx=3,
            extint0=5,
            extint1=6,
            spics=7
        );

        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_uartrx() and @b setBitValue_uartrx().
        ///      @li @b getBitValue_extint0() and @b setBitValue_extint0().
        ///      @li @b getBitValue_extint1() and @b setBitValue_extint1().
        ///      @li @b getBitValue_spics() and @b setBitValue_spics().
        COMMS_BITMASK_BITS_ACCESS(
            uartrx,
            extint0,
            extint1,
            spics
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::RxmPmreqV0FieldsCommon::WakeupSourcesCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::RxmPmreqV0FieldsCommon::WakeupSourcesCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmPmreqV0FieldsCommon::WakeupSourcesCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        Duration,
        Flags,
        WakeupSources
    >;
};

/// @brief Definition of <b>"RXM-PMREQ (v0)"</b> message class.
/// @details
///     See @ref RxmPmreqV0Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/RxmPmreqV0.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class RxmPmreqV0 : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::RxmPmreqV0,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_RxmPmreq>,
        comms::option::def::FieldsImpl<typename RxmPmreqV0Fields<TOpt>::All>,
        comms::option::def::MsgType<RxmPmreqV0<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::RxmPmreqV0,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_RxmPmreq>,
            comms::option::def::FieldsImpl<typename RxmPmreqV0Fields<TOpt>::All>,
            comms::option::def::MsgType<RxmPmreqV0<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref RxmPmreqV0Fields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref RxmPmreqV0Fields::Reserved1 field.
    ///     @li @b FieldIdx_duration index, @b Field_duration type and @b field_duration() access fuction
    ///         for @ref RxmPmreqV0Fields::Duration field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref RxmPmreqV0Fields::Flags field.
    ///     @li @b FieldIdx_wakeupSources index, @b Field_wakeupSources type and @b field_wakeupSources() access fuction
    ///         for @ref RxmPmreqV0Fields::WakeupSources field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        duration,
        flags,
        wakeupSources
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 16U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 16U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::RxmPmreqV0Common::name();
    }
};

} // namespace message

} // namespace cc_ublox
