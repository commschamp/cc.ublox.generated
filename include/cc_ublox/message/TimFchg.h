// Generated by commsdsl2comms v6.2.4

/// @file
/// @brief Contains definition of <b>"TIM-FCHG"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/message/TimFchgCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref TimFchg.
/// @tparam TOpt Extra options
/// @see @ref TimFchg
/// @headerfile cc_ublox/message/TimFchg.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct TimFchgFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimFchgFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimFchgFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimFchgFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"iTOW"</b> field.
    using Itow =
        cc_ublox::field::Itow<
            TOpt
        >;

    /// @brief Definition of <b>"intDeltaFreq"</b> field.
    class IntDeltaFreq : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 256>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 256>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimFchgFieldsCommon::IntDeltaFreqCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 8U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimFchgFieldsCommon::IntDeltaFreqCommon::name();
        }
    };

    /// @brief Definition of <b>"intDeltaFreqUnc"</b> field.
    class IntDeltaFreqUnc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 256>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 256>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimFchgFieldsCommon::IntDeltaFreqUncCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 8U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimFchgFieldsCommon::IntDeltaFreqUncCommon::name();
        }
    };

    /// @brief Definition of <b>"intRaw"</b> field.
    class IntRaw : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimFchgFieldsCommon::IntRawCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimFchgFieldsCommon::IntRawCommon::name();
        }
    };

    /// @brief Definition of <b>"extDeltaFreq"</b> field.
    class ExtDeltaFreq : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 256>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 256>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimFchgFieldsCommon::ExtDeltaFreqCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 8U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimFchgFieldsCommon::ExtDeltaFreqCommon::name();
        }
    };

    /// @brief Definition of <b>"extDeltaFreqUnc"</b> field.
    class ExtDeltaFreqUnc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 256>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 256>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimFchgFieldsCommon::ExtDeltaFreqUncCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 8U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimFchgFieldsCommon::ExtDeltaFreqUncCommon::name();
        }
    };

    /// @brief Definition of <b>"extRaw"</b> field.
    class ExtRaw : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::TimFchgFieldsCommon::ExtRawCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::TimFchgFieldsCommon::ExtRawCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        Itow,
        IntDeltaFreq,
        IntDeltaFreqUnc,
        IntRaw,
        ExtDeltaFreq,
        ExtDeltaFreqUnc,
        ExtRaw
    >;
};

/// @brief Definition of <b>"TIM-FCHG"</b> message class.
/// @details
///     See @ref TimFchgFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/TimFchg.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class TimFchg : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::TimFchg,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_TimFchg>,
        comms::option::def::FieldsImpl<typename TimFchgFields<TOpt>::All>,
        comms::option::def::MsgType<TimFchg<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::TimFchg,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_TimFchg>,
            comms::option::def::FieldsImpl<typename TimFchgFields<TOpt>::All>,
            comms::option::def::MsgType<TimFchg<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref TimFchgFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref TimFchgFields::Reserved1 field.
    ///     @li @b FieldIdx_itow index, @b Field_itow type and @b field_itow() access fuction
    ///         for @ref TimFchgFields::Itow field.
    ///     @li @b FieldIdx_intDeltaFreq index, @b Field_intDeltaFreq type and @b field_intDeltaFreq() access fuction
    ///         for @ref TimFchgFields::IntDeltaFreq field.
    ///     @li @b FieldIdx_intDeltaFreqUnc index, @b Field_intDeltaFreqUnc type and @b field_intDeltaFreqUnc() access fuction
    ///         for @ref TimFchgFields::IntDeltaFreqUnc field.
    ///     @li @b FieldIdx_intRaw index, @b Field_intRaw type and @b field_intRaw() access fuction
    ///         for @ref TimFchgFields::IntRaw field.
    ///     @li @b FieldIdx_extDeltaFreq index, @b Field_extDeltaFreq type and @b field_extDeltaFreq() access fuction
    ///         for @ref TimFchgFields::ExtDeltaFreq field.
    ///     @li @b FieldIdx_extDeltaFreqUnc index, @b Field_extDeltaFreqUnc type and @b field_extDeltaFreqUnc() access fuction
    ///         for @ref TimFchgFields::ExtDeltaFreqUnc field.
    ///     @li @b FieldIdx_extRaw index, @b Field_extRaw type and @b field_extRaw() access fuction
    ///         for @ref TimFchgFields::ExtRaw field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        itow,
        intDeltaFreq,
        intDeltaFreqUnc,
        intRaw,
        extDeltaFreq,
        extDeltaFreqUnc,
        extRaw
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 32U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 32U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::TimFchgCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
