// Generated by commsdsl2comms v5.1.3

/// @file
/// @brief Contains definition of <b>"MON-VER"</b> message and its fields.

#pragma once

#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/MonVerCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/String.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MonVer.
/// @tparam TOpt Extra options
/// @see @ref MonVer
/// @headerfile cc_ublox/message/MonVer.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MonVerFields
{
    /// @brief Definition of <b>"swVersion"</b> field.
    class SwVersion : public
        comms::field::String<
            cc_ublox::field::FieldBase<>,
            typename TOpt::message::MonVerFields::SwVersion,
            comms::option::def::SequenceFixedSize<30U>
        >
    {
        using Base =
            comms::field::String<
                cc_ublox::field::FieldBase<>,
                typename TOpt::message::MonVerFields::SwVersion,
                comms::option::def::SequenceFixedSize<30U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonVerFieldsCommon::SwVersionCommon::name();
        }
    };

    /// @brief Definition of <b>"hwVersion"</b> field.
    class HwVersion : public
        comms::field::String<
            cc_ublox::field::FieldBase<>,
            typename TOpt::message::MonVerFields::HwVersion,
            comms::option::def::SequenceFixedSize<10U>
        >
    {
        using Base =
            comms::field::String<
                cc_ublox::field::FieldBase<>,
                typename TOpt::message::MonVerFields::HwVersion,
                comms::option::def::SequenceFixedSize<10U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonVerFieldsCommon::HwVersionCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Definition of <b>"extension"</b> field.
        class Extension : public
            comms::field::String<
                cc_ublox::field::FieldBase<>,
                typename TOpt::message::MonVerFields::ListMembers::Extension,
                comms::option::def::SequenceFixedSize<30U>
            >
        {
            using Base =
                comms::field::String<
                    cc_ublox::field::FieldBase<>,
                    typename TOpt::message::MonVerFields::ListMembers::Extension,
                    comms::option::def::SequenceFixedSize<30U>
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonVerFieldsCommon::ListMembersCommon::ExtensionCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Extension,
            typename TOpt::message::MonVerFields::List
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Extension,
                typename TOpt::message::MonVerFields::List
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonVerFieldsCommon::ListCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        SwVersion,
        HwVersion,
        List
    >;
};

/// @brief Definition of <b>"MON-VER"</b> message class.
/// @details
///     See @ref MonVerFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MonVer.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MonVer : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonVer,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonVer>,
        comms::option::def::FieldsImpl<typename MonVerFields<TOpt>::All>,
        comms::option::def::MsgType<MonVer<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonVer,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonVer>,
            comms::option::def::FieldsImpl<typename MonVerFields<TOpt>::All>,
            comms::option::def::MsgType<MonVer<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_swVersion index, @b Field_swVersion type and @b field_swVersion() access fuction
    ///         for @ref MonVerFields::SwVersion field.
    ///     @li @b FieldIdx_hwVersion index, @b Field_hwVersion type and @b field_hwVersion() access fuction
    ///         for @ref MonVerFields::HwVersion field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref MonVerFields::List field.
    COMMS_MSG_FIELDS_NAMES(
        swVersion,
        hwVersion,
        list
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 40U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MonVerCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
