// Generated by commsdsl2comms v7.0.0

/// @file
/// @brief Contains definition of <b>"LOG-BATCH"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/Day.h"
#include "cc_ublox/field/Dop.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/GpsFix.h"
#include "cc_ublox/field/HAcc.h"
#include "cc_ublox/field/HMSL.h"
#include "cc_ublox/field/Heading.h"
#include "cc_ublox/field/HeadingAcc.h"
#include "cc_ublox/field/Height.h"
#include "cc_ublox/field/Hour.h"
#include "cc_ublox/field/Itow.h"
#include "cc_ublox/field/Lat.h"
#include "cc_ublox/field/Lon.h"
#include "cc_ublox/field/Min.h"
#include "cc_ublox/field/Month.h"
#include "cc_ublox/field/PsmState.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/field/Sec.h"
#include "cc_ublox/field/VAcc.h"
#include "cc_ublox/field/Vel.h"
#include "cc_ublox/field/Year.h"
#include "cc_ublox/message/LogBatchCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref LogBatch.
/// @tparam TOpt Extra options
/// @see @ref LogBatch
/// @headerfile cc_ublox/message/LogBatch.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct LogBatchFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::HasName,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"contentValid"</b> field.
    class ContentValid : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::HasName,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::HasName,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_extraPvt, @b getBitValue_extraPvt() and @b setBitValue_extraPvt().
        ///      @li @b BitIdx_extraOdo, @b getBitValue_extraOdo() and @b setBitValue_extraOdo().
        COMMS_BITMASK_BITS_SEQ(
            extraPvt,
            extraOdo
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::LogBatchFieldsCommon::ContentValidCommon::bitName().
        static const char* bitName(std::size_t idx)
        {
            return cc_ublox::message::LogBatchFieldsCommon::ContentValidCommon::bitName(idx);
        }

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::LogBatchFieldsCommon::ContentValidCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return bitName(static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::ContentValidCommon::name();
        }
    };

    /// @brief Definition of <b>"msgCount"</b> field.
    class MsgCount : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::MsgCountCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::MsgCountCommon::name();
        }
    };

    /// @brief Definition of <b>"iTOW"</b> field.
    using ITOW =
        cc_ublox::field::Itow<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"year"</b> field.
    using Year =
        cc_ublox::field::Year<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"month"</b> field.
    using Month =
        cc_ublox::field::Month<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"day"</b> field.
    using Day =
        cc_ublox::field::Day<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"hour"</b> field.
    using Hour =
        cc_ublox::field::Hour<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"min"</b> field.
    using Min =
        cc_ublox::field::Min<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"sec"</b> field.
    using Sec =
        cc_ublox::field::Sec<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"valid"</b> field.
    class Valid : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::HasName,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::HasName,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFCU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_validDate, @b getBitValue_validDate() and @b setBitValue_validDate().
        ///      @li @b BitIdx_validTime, @b getBitValue_validTime() and @b setBitValue_validTime().
        COMMS_BITMASK_BITS_SEQ(
            validDate,
            validTime
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::LogBatchFieldsCommon::ValidCommon::bitName().
        static const char* bitName(std::size_t idx)
        {
            return cc_ublox::message::LogBatchFieldsCommon::ValidCommon::bitName(idx);
        }

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::LogBatchFieldsCommon::ValidCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return bitName(static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::ValidCommon::name();
        }
    };

    /// @brief Definition of <b>"tAcc"</b> field.
    class TAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::TAccCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::TAccCommon::name();
        }
    };

    /// @brief Definition of <b>"fracSec"</b> field.
    class FracSec : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::FracSecCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::FracSecCommon::name();
        }
    };

    /// @brief Definition of <b>"fixType"</b> field.
    class FixType : public
        cc_ublox::field::GpsFix<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::GpsFix<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::FixTypeCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>"bitsLow"</b> field.
        class BitsLow : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::HasName,
                comms::option::def::FixedBitLength<2U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::HasName,
                    comms::option::def::FixedBitLength<2U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_gnssFixOK, @b getBitValue_gnssFixOK() and @b setBitValue_gnssFixOK().
            ///      @li @b BitIdx_diffSoln, @b getBitValue_diffSoln() and @b setBitValue_diffSoln().
            COMMS_BITMASK_BITS_SEQ(
                gnssFixOK,
                diffSoln
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::LogBatchFieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName().
            static const char* bitName(std::size_t idx)
            {
                return cc_ublox::message::LogBatchFieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName(idx);
            }

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::LogBatchFieldsCommon::FlagsMembersCommon::BitsLowCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return bitName(static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::LogBatchFieldsCommon::FlagsMembersCommon::BitsLowCommon::name();
            }
        };

        /// @brief Definition of <b>"psmState"</b> field.
        using PsmState =
            cc_ublox::field::PsmState<
                TOpt,
                comms::option::def::HasName,
                comms::option::def::FixedBitLength<3U>
            >;

        /// @brief Definition of <b>"reserved"</b> field.
        class Reserved : public
            cc_ublox::field::Res1<
                TOpt,
                comms::option::def::HasName,
                comms::option::def::FixedBitLength<3U>
            >
        {
            using Base =
                cc_ublox::field::Res1<
                    TOpt,
                    comms::option::def::HasName,
                    comms::option::def::FixedBitLength<3U>
                >;
        public:
            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::LogBatchFieldsCommon::FlagsMembersCommon::ReservedCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               BitsLow,
               PsmState,
               Reserved
            >;
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename FlagsMembers::All,
            comms::option::def::HasName,
            comms::option::def::HasVersionDependentMembers<false>
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename FlagsMembers::All,
                comms::option::def::HasName,
                comms::option::def::HasVersionDependentMembers<false>
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_bitsLow index, @b Field_bitsLow type and @b field_bitsLow() access function -
        ///         for cc_ublox::message::LogBatchFields::FlagsMembers::BitsLow member field.
        ///     @li @b FieldIdx_psmState index, @b Field_psmState type and @b field_psmState() access function -
        ///         for cc_ublox::message::LogBatchFields::FlagsMembers::PsmState member field.
        ///     @li @b FieldIdx_reserved index, @b Field_reserved type and @b field_reserved() access function -
        ///         for cc_ublox::message::LogBatchFields::FlagsMembers::Reserved member field.
        COMMS_FIELD_MEMBERS_NAMES(
            bitsLow,
            psmState,
            reserved
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"flags2"</b> field.
    class Flags2 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::Flags2Common::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::Flags2Common::name();
        }
    };

    /// @brief Definition of <b>"numSV"</b> field.
    class NumSV : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::NumSVCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::NumSVCommon::name();
        }
    };

    /// @brief Definition of <b>"lon"</b> field.
    using Lon =
        cc_ublox::field::Lon<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"lat"</b> field.
    using Lat =
        cc_ublox::field::Lat<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"height"</b> field.
    using Height =
        cc_ublox::field::Height<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"hMSL"</b> field.
    using HMSL =
        cc_ublox::field::HMSL<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"hAcc"</b> field.
    using HAcc =
        cc_ublox::field::HAcc<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"vAcc"</b> field.
    using VAcc =
        cc_ublox::field::VAcc<
            TOpt,
            comms::option::def::HasName
        >;

    /// @brief Definition of <b>"velN"</b> field.
    class VelN : public
        cc_ublox::field::Vel<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Vel<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::VelNCommon::name();
        }
    };

    /// @brief Definition of <b>"velE"</b> field.
    class VelE : public
        cc_ublox::field::Vel<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Vel<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::VelECommon::name();
        }
    };

    /// @brief Definition of <b>"velD"</b> field.
    class VelD : public
        cc_ublox::field::Vel<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Vel<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::VelDCommon::name();
        }
    };

    /// @brief Definition of <b>"gSpeed"</b> field.
    class GSpeed : public
        cc_ublox::field::Vel<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Vel<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::GSpeedCommon::name();
        }
    };

    /// @brief Definition of <b>"headMot"</b> field.
    class HeadMot : public
        cc_ublox::field::Heading<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Heading<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::HeadMotCommon::name();
        }
    };

    /// @brief Definition of <b>"sAcc"</b> field.
    class SAcc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsMillimetersPerSecond
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsMillimetersPerSecond
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::SAccCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::SAccCommon::name();
        }
    };

    /// @brief Definition of <b>"headAcc"</b> field.
    class HeadAcc : public
        cc_ublox::field::HeadingAcc<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::HeadingAcc<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::HeadAccCommon::name();
        }
    };

    /// @brief Definition of <b>"pDOP"</b> field.
    class PDOP : public
        cc_ublox::field::Dop<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Dop<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::PDOPCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved0"</b> field.
    class Reserved0 : public
        cc_ublox::field::Res2<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::Reserved0Common::name();
        }
    };

    /// @brief Definition of <b>"distance"</b> field.
    class Distance : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsMeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::DistanceCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::DistanceCommon::name();
        }
    };

    /// @brief Definition of <b>"totalDistance"</b> field.
    class TotalDistance : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsMeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::TotalDistanceCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::TotalDistanceCommon::name();
        }
    };

    /// @brief Definition of <b>"totalStd"</b> field.
    class TotalStd : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName,
            comms::option::def::UnitsMeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::LogBatchFieldsCommon::TotalStdCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::TotalStdCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res4<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::LogBatchFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        ContentValid,
        MsgCount,
        ITOW,
        Year,
        Month,
        Day,
        Hour,
        Min,
        Sec,
        Valid,
        TAcc,
        FracSec,
        FixType,
        Flags,
        Flags2,
        NumSV,
        Lon,
        Lat,
        Height,
        HMSL,
        HAcc,
        VAcc,
        VelN,
        VelE,
        VelD,
        GSpeed,
        HeadMot,
        SAcc,
        HeadAcc,
        PDOP,
        Reserved0,
        Distance,
        TotalDistance,
        TotalStd,
        Reserved1
    >;
};

/// @brief Definition of <b>"LOG-BATCH"</b> message class.
/// @details
///     See @ref LogBatchFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/LogBatch.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class LogBatch : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::LogBatch,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_LogBatch>,
        comms::option::def::FieldsImpl<typename LogBatchFields<TOpt>::All>,
        comms::option::def::MsgType<LogBatch<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::LogBatch,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_LogBatch>,
            comms::option::def::FieldsImpl<typename LogBatchFields<TOpt>::All>,
            comms::option::def::MsgType<LogBatch<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref LogBatchFields::Version field.
    ///     @li @b FieldIdx_contentValid index, @b Field_contentValid type and @b field_contentValid() access fuction
    ///         for @ref LogBatchFields::ContentValid field.
    ///     @li @b FieldIdx_msgCount index, @b Field_msgCount type and @b field_msgCount() access fuction
    ///         for @ref LogBatchFields::MsgCount field.
    ///     @li @b FieldIdx_iTOW index, @b Field_iTOW type and @b field_iTOW() access fuction
    ///         for @ref LogBatchFields::ITOW field.
    ///     @li @b FieldIdx_year index, @b Field_year type and @b field_year() access fuction
    ///         for @ref LogBatchFields::Year field.
    ///     @li @b FieldIdx_month index, @b Field_month type and @b field_month() access fuction
    ///         for @ref LogBatchFields::Month field.
    ///     @li @b FieldIdx_day index, @b Field_day type and @b field_day() access fuction
    ///         for @ref LogBatchFields::Day field.
    ///     @li @b FieldIdx_hour index, @b Field_hour type and @b field_hour() access fuction
    ///         for @ref LogBatchFields::Hour field.
    ///     @li @b FieldIdx_min index, @b Field_min type and @b field_min() access fuction
    ///         for @ref LogBatchFields::Min field.
    ///     @li @b FieldIdx_sec index, @b Field_sec type and @b field_sec() access fuction
    ///         for @ref LogBatchFields::Sec field.
    ///     @li @b FieldIdx_valid index, @b Field_valid type and @b field_valid() access fuction
    ///         for @ref LogBatchFields::Valid field.
    ///     @li @b FieldIdx_tAcc index, @b Field_tAcc type and @b field_tAcc() access fuction
    ///         for @ref LogBatchFields::TAcc field.
    ///     @li @b FieldIdx_fracSec index, @b Field_fracSec type and @b field_fracSec() access fuction
    ///         for @ref LogBatchFields::FracSec field.
    ///     @li @b FieldIdx_fixType index, @b Field_fixType type and @b field_fixType() access fuction
    ///         for @ref LogBatchFields::FixType field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref LogBatchFields::Flags field.
    ///     @li @b FieldIdx_flags2 index, @b Field_flags2 type and @b field_flags2() access fuction
    ///         for @ref LogBatchFields::Flags2 field.
    ///     @li @b FieldIdx_numSV index, @b Field_numSV type and @b field_numSV() access fuction
    ///         for @ref LogBatchFields::NumSV field.
    ///     @li @b FieldIdx_lon index, @b Field_lon type and @b field_lon() access fuction
    ///         for @ref LogBatchFields::Lon field.
    ///     @li @b FieldIdx_lat index, @b Field_lat type and @b field_lat() access fuction
    ///         for @ref LogBatchFields::Lat field.
    ///     @li @b FieldIdx_height index, @b Field_height type and @b field_height() access fuction
    ///         for @ref LogBatchFields::Height field.
    ///     @li @b FieldIdx_hMSL index, @b Field_hMSL type and @b field_hMSL() access fuction
    ///         for @ref LogBatchFields::HMSL field.
    ///     @li @b FieldIdx_hAcc index, @b Field_hAcc type and @b field_hAcc() access fuction
    ///         for @ref LogBatchFields::HAcc field.
    ///     @li @b FieldIdx_vAcc index, @b Field_vAcc type and @b field_vAcc() access fuction
    ///         for @ref LogBatchFields::VAcc field.
    ///     @li @b FieldIdx_velN index, @b Field_velN type and @b field_velN() access fuction
    ///         for @ref LogBatchFields::VelN field.
    ///     @li @b FieldIdx_velE index, @b Field_velE type and @b field_velE() access fuction
    ///         for @ref LogBatchFields::VelE field.
    ///     @li @b FieldIdx_velD index, @b Field_velD type and @b field_velD() access fuction
    ///         for @ref LogBatchFields::VelD field.
    ///     @li @b FieldIdx_gSpeed index, @b Field_gSpeed type and @b field_gSpeed() access fuction
    ///         for @ref LogBatchFields::GSpeed field.
    ///     @li @b FieldIdx_headMot index, @b Field_headMot type and @b field_headMot() access fuction
    ///         for @ref LogBatchFields::HeadMot field.
    ///     @li @b FieldIdx_sAcc index, @b Field_sAcc type and @b field_sAcc() access fuction
    ///         for @ref LogBatchFields::SAcc field.
    ///     @li @b FieldIdx_headAcc index, @b Field_headAcc type and @b field_headAcc() access fuction
    ///         for @ref LogBatchFields::HeadAcc field.
    ///     @li @b FieldIdx_pDOP index, @b Field_pDOP type and @b field_pDOP() access fuction
    ///         for @ref LogBatchFields::PDOP field.
    ///     @li @b FieldIdx_reserved0 index, @b Field_reserved0 type and @b field_reserved0() access fuction
    ///         for @ref LogBatchFields::Reserved0 field.
    ///     @li @b FieldIdx_distance index, @b Field_distance type and @b field_distance() access fuction
    ///         for @ref LogBatchFields::Distance field.
    ///     @li @b FieldIdx_totalDistance index, @b Field_totalDistance type and @b field_totalDistance() access fuction
    ///         for @ref LogBatchFields::TotalDistance field.
    ///     @li @b FieldIdx_totalStd index, @b Field_totalStd type and @b field_totalStd() access fuction
    ///         for @ref LogBatchFields::TotalStd field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref LogBatchFields::Reserved1 field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        contentValid,
        msgCount,
        iTOW,
        year,
        month,
        day,
        hour,
        min,
        sec,
        valid,
        tAcc,
        fracSec,
        fixType,
        flags,
        flags2,
        numSV,
        lon,
        lat,
        height,
        hMSL,
        hAcc,
        vAcc,
        velN,
        velE,
        velD,
        gSpeed,
        headMot,
        sAcc,
        headAcc,
        pDOP,
        reserved0,
        distance,
        totalDistance,
        totalStd,
        reserved1
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 100U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 100U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::LogBatchCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
