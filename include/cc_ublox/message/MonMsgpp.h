// Generated by commsdsl2comms v6.3.4

/// @file
/// @brief Contains definition of <b>"MON-MSGPP"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/MonMsgppCount.h"
#include "cc_ublox/message/MonMsgppCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MonMsgpp.
/// @tparam TOpt Extra options
/// @see @ref MonMsgpp
/// @headerfile cc_ublox/message/MonMsgpp.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MonMsgppFields
{
    /// @brief Definition of <b>"msg1"</b> field.
    class Msg1 : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            cc_ublox::field::MonMsgppCount<TOpt>,
            typename TOpt::message::MonMsgppFields::Msg1,
            comms::option::def::SequenceFixedSize<8U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                cc_ublox::field::MonMsgppCount<TOpt>,
                typename TOpt::message::MonMsgppFields::Msg1,
                comms::option::def::SequenceFixedSize<8U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonMsgppFieldsCommon::Msg1Common::name();
        }
    };

    /// @brief Definition of <b>"msg2"</b> field.
    class Msg2 : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            cc_ublox::field::MonMsgppCount<TOpt>,
            typename TOpt::message::MonMsgppFields::Msg2,
            comms::option::def::SequenceFixedSize<8U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                cc_ublox::field::MonMsgppCount<TOpt>,
                typename TOpt::message::MonMsgppFields::Msg2,
                comms::option::def::SequenceFixedSize<8U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonMsgppFieldsCommon::Msg2Common::name();
        }
    };

    /// @brief Definition of <b>"msg3"</b> field.
    class Msg3 : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            cc_ublox::field::MonMsgppCount<TOpt>,
            typename TOpt::message::MonMsgppFields::Msg3,
            comms::option::def::SequenceFixedSize<8U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                cc_ublox::field::MonMsgppCount<TOpt>,
                typename TOpt::message::MonMsgppFields::Msg3,
                comms::option::def::SequenceFixedSize<8U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonMsgppFieldsCommon::Msg3Common::name();
        }
    };

    /// @brief Definition of <b>"msg4"</b> field.
    class Msg4 : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            cc_ublox::field::MonMsgppCount<TOpt>,
            typename TOpt::message::MonMsgppFields::Msg4,
            comms::option::def::SequenceFixedSize<8U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                cc_ublox::field::MonMsgppCount<TOpt>,
                typename TOpt::message::MonMsgppFields::Msg4,
                comms::option::def::SequenceFixedSize<8U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonMsgppFieldsCommon::Msg4Common::name();
        }
    };

    /// @brief Definition of <b>"msg5"</b> field.
    class Msg5 : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            cc_ublox::field::MonMsgppCount<TOpt>,
            typename TOpt::message::MonMsgppFields::Msg5,
            comms::option::def::SequenceFixedSize<8U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                cc_ublox::field::MonMsgppCount<TOpt>,
                typename TOpt::message::MonMsgppFields::Msg5,
                comms::option::def::SequenceFixedSize<8U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonMsgppFieldsCommon::Msg5Common::name();
        }
    };

    /// @brief Definition of <b>"msg6"</b> field.
    class Msg6 : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            cc_ublox::field::MonMsgppCount<TOpt>,
            typename TOpt::message::MonMsgppFields::Msg6,
            comms::option::def::SequenceFixedSize<8U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                cc_ublox::field::MonMsgppCount<TOpt>,
                typename TOpt::message::MonMsgppFields::Msg6,
                comms::option::def::SequenceFixedSize<8U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonMsgppFieldsCommon::Msg6Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Skipped field.
    struct SkippedMembers
    {
        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::MonMsgppFieldsCommon::SkippedMembersCommon::ElementCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::MonMsgppFieldsCommon::SkippedMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"skipped"</b> field.
    class Skipped : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename SkippedMembers::Element,
            typename TOpt::message::MonMsgppFields::Skipped,
            comms::option::def::SequenceFixedSize<6U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename SkippedMembers::Element,
                typename TOpt::message::MonMsgppFields::Skipped,
                comms::option::def::SequenceFixedSize<6U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MonMsgppFieldsCommon::SkippedCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Msg1,
        Msg2,
        Msg3,
        Msg4,
        Msg5,
        Msg6,
        Skipped
    >;
};

/// @brief Definition of <b>"MON-MSGPP"</b> message class.
/// @details
///     See @ref MonMsgppFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MonMsgpp.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MonMsgpp : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MonMsgpp,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonMsgpp>,
        comms::option::def::FieldsImpl<typename MonMsgppFields<TOpt>::All>,
        comms::option::def::MsgType<MonMsgpp<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MonMsgpp,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MonMsgpp>,
            comms::option::def::FieldsImpl<typename MonMsgppFields<TOpt>::All>,
            comms::option::def::MsgType<MonMsgpp<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_msg1 index, @b Field_msg1 type and @b field_msg1() access fuction
    ///         for @ref MonMsgppFields::Msg1 field.
    ///     @li @b FieldIdx_msg2 index, @b Field_msg2 type and @b field_msg2() access fuction
    ///         for @ref MonMsgppFields::Msg2 field.
    ///     @li @b FieldIdx_msg3 index, @b Field_msg3 type and @b field_msg3() access fuction
    ///         for @ref MonMsgppFields::Msg3 field.
    ///     @li @b FieldIdx_msg4 index, @b Field_msg4 type and @b field_msg4() access fuction
    ///         for @ref MonMsgppFields::Msg4 field.
    ///     @li @b FieldIdx_msg5 index, @b Field_msg5 type and @b field_msg5() access fuction
    ///         for @ref MonMsgppFields::Msg5 field.
    ///     @li @b FieldIdx_msg6 index, @b Field_msg6 type and @b field_msg6() access fuction
    ///         for @ref MonMsgppFields::Msg6 field.
    ///     @li @b FieldIdx_skipped index, @b Field_skipped type and @b field_skipped() access fuction
    ///         for @ref MonMsgppFields::Skipped field.
    COMMS_MSG_FIELDS_NAMES(
        msg1,
        msg2,
        msg3,
        msg4,
        msg5,
        msg6,
        skipped
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 120U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 120U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MonMsgppCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
