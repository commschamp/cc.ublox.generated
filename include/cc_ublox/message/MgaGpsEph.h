// Generated by commsdsl2comms v6.3.3

/// @file
/// @brief Contains definition of <b>"MGA-GPS-EPH"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res2.h"
#include "cc_ublox/message/MgaGpsEphCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MgaGpsEph.
/// @tparam TOpt Extra options
/// @see @ref MgaGpsEph
/// @headerfile cc_ublox/message/MgaGpsEph.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MgaGpsEphFields
{
    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::TypeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::TypeCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(1);
            return true;
        }
    };

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"svid"</b> field.
    class Svid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::SvidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::SvidCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"fitInterval"</b> field.
    class FitInterval : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::FitIntervalCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::FitIntervalCommon::name();
        }
    };

    /// @brief Definition of <b>"uraIndex"</b> field.
    class UraIndex : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::UraIndexCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::UraIndexCommon::name();
        }
    };

    /// @brief Definition of <b>"svHealth"</b> field.
    class SvHealth : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::SvHealthCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::SvHealthCommon::name();
        }
    };

    /// @brief Definition of <b>"tgd"</b> field.
    class Tgd : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::TgdCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::TgdCommon::name();
        }
    };

    /// @brief Definition of <b>"iodc"</b> field.
    class Iodc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::IodcCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::IodcCommon::name();
        }
    };

    /// @brief Definition of <b>"toc"</b> field.
    class Toc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<16, 1>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<16, 1>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::TocCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::TocCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief Definition of <b>"af2"</b> field.
    class Af2 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int8_t,
            comms::option::def::ScalingRatio<1, 0x80000000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int8_t,
                comms::option::def::ScalingRatio<1, 0x80000000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Af2Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Af2Common::name();
        }
    };

    /// @brief Definition of <b>"af1"</b> field.
    class Af1 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 0x80000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 0x80000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Af1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Af1Common::name();
        }
    };

    /// @brief Definition of <b>"af0"</b> field.
    class Af0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Af0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Af0Common::name();
        }
    };

    /// @brief Definition of <b>"crs"</b> field.
    class Crs : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 32>,
            comms::option::def::UnitsMeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 32>,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CrsCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CrsCommon::name();
        }
    };

    /// @brief Definition of <b>"deltaN"</b> field.
    class DeltaN : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 0x80000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 0x80000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::DeltaNCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::DeltaNCommon::name();
        }
    };

    /// @brief Definition of <b>"m0"</b> field.
    class M0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::M0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::M0Common::name();
        }
    };

    /// @brief Definition of <b>"cuc"</b> field.
    class Cuc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 536870912L>,
            comms::option::def::UnitsRadians
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 536870912L>,
                comms::option::def::UnitsRadians
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CucCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CucCommon::name();
        }
    };

    /// @brief Definition of <b>"cus"</b> field.
    class Cus : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 536870912L>,
            comms::option::def::UnitsRadians
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 536870912L>,
                comms::option::def::UnitsRadians
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CusCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CusCommon::name();
        }
    };

    /// @brief Definition of <b>"e"</b> field.
    class E : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 0x200000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 0x200000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::ECommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::ECommon::name();
        }
    };

    /// @brief Definition of <b>"sqrtA"</b> field.
    class SqrtA : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::ScalingRatio<1, 589824L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::ScalingRatio<1, 589824L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::SqrtACommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::SqrtACommon::name();
        }
    };

    /// @brief Definition of <b>"toe"</b> field.
    class Toe : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<16, 1>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<16, 1>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::ToeCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::ToeCommon::name();
        }
    };

    /// @brief Definition of <b>"cic"</b> field.
    class Cic : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 536870912L>,
            comms::option::def::UnitsRadians
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 536870912L>,
                comms::option::def::UnitsRadians
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CicCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CicCommon::name();
        }
    };

    /// @brief Definition of <b>"omega0"</b> field.
    class Omega0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Omega0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Omega0Common::name();
        }
    };

    /// @brief Definition of <b>"cis"</b> field.
    class Cis : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 536870912L>,
            comms::option::def::UnitsRadians
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 536870912L>,
                comms::option::def::UnitsRadians
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CisCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CisCommon::name();
        }
    };

    /// @brief Definition of <b>"crc"</b> field.
    class Crc : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 32>,
            comms::option::def::UnitsMeters
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 32>,
                comms::option::def::UnitsMeters
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CrcCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::CrcCommon::name();
        }
    };

    /// @brief Definition of <b>"i0"</b> field.
    class I0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::I0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::I0Common::name();
        }
    };

    /// @brief Definition of <b>"omega"</b> field.
    class Omega : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::OmegaCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::OmegaCommon::name();
        }
    };

    /// @brief Definition of <b>"omegaDot"</b> field.
    class OmegaDot : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::ScalingRatio<1, 0x80000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::ScalingRatio<1, 0x80000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::OmegaDotCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::OmegaDotCommon::name();
        }
    };

    /// @brief Definition of <b>"idot"</b> field.
    class Idot : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 0x80000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 0x80000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::IdotCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::IdotCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved3"</b> field.
    class Reserved3 : public
        cc_ublox::field::Res2<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res2<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGpsEphFieldsCommon::Reserved3Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Type,
        Version,
        Svid,
        Reserved1,
        FitInterval,
        UraIndex,
        SvHealth,
        Tgd,
        Iodc,
        Toc,
        Reserved2,
        Af2,
        Af1,
        Af0,
        Crs,
        DeltaN,
        M0,
        Cuc,
        Cus,
        E,
        SqrtA,
        Toe,
        Cic,
        Omega0,
        Cis,
        Crc,
        I0,
        Omega,
        OmegaDot,
        Idot,
        Reserved3
    >;
};

/// @brief Definition of <b>"MGA-GPS-EPH"</b> message class.
/// @details
///     See @ref MgaGpsEphFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MgaGpsEph.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MgaGpsEph : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MgaGpsEph,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaGps>,
        comms::option::def::FieldsImpl<typename MgaGpsEphFields<TOpt>::All>,
        comms::option::def::MsgType<MgaGpsEph<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MgaGpsEph,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaGps>,
            comms::option::def::FieldsImpl<typename MgaGpsEphFields<TOpt>::All>,
            comms::option::def::MsgType<MgaGpsEph<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref MgaGpsEphFields::Type field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MgaGpsEphFields::Version field.
    ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access fuction
    ///         for @ref MgaGpsEphFields::Svid field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref MgaGpsEphFields::Reserved1 field.
    ///     @li @b FieldIdx_fitInterval index, @b Field_fitInterval type and @b field_fitInterval() access fuction
    ///         for @ref MgaGpsEphFields::FitInterval field.
    ///     @li @b FieldIdx_uraIndex index, @b Field_uraIndex type and @b field_uraIndex() access fuction
    ///         for @ref MgaGpsEphFields::UraIndex field.
    ///     @li @b FieldIdx_svHealth index, @b Field_svHealth type and @b field_svHealth() access fuction
    ///         for @ref MgaGpsEphFields::SvHealth field.
    ///     @li @b FieldIdx_tgd index, @b Field_tgd type and @b field_tgd() access fuction
    ///         for @ref MgaGpsEphFields::Tgd field.
    ///     @li @b FieldIdx_iodc index, @b Field_iodc type and @b field_iodc() access fuction
    ///         for @ref MgaGpsEphFields::Iodc field.
    ///     @li @b FieldIdx_toc index, @b Field_toc type and @b field_toc() access fuction
    ///         for @ref MgaGpsEphFields::Toc field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref MgaGpsEphFields::Reserved2 field.
    ///     @li @b FieldIdx_af2 index, @b Field_af2 type and @b field_af2() access fuction
    ///         for @ref MgaGpsEphFields::Af2 field.
    ///     @li @b FieldIdx_af1 index, @b Field_af1 type and @b field_af1() access fuction
    ///         for @ref MgaGpsEphFields::Af1 field.
    ///     @li @b FieldIdx_af0 index, @b Field_af0 type and @b field_af0() access fuction
    ///         for @ref MgaGpsEphFields::Af0 field.
    ///     @li @b FieldIdx_crs index, @b Field_crs type and @b field_crs() access fuction
    ///         for @ref MgaGpsEphFields::Crs field.
    ///     @li @b FieldIdx_deltaN index, @b Field_deltaN type and @b field_deltaN() access fuction
    ///         for @ref MgaGpsEphFields::DeltaN field.
    ///     @li @b FieldIdx_m0 index, @b Field_m0 type and @b field_m0() access fuction
    ///         for @ref MgaGpsEphFields::M0 field.
    ///     @li @b FieldIdx_cuc index, @b Field_cuc type and @b field_cuc() access fuction
    ///         for @ref MgaGpsEphFields::Cuc field.
    ///     @li @b FieldIdx_cus index, @b Field_cus type and @b field_cus() access fuction
    ///         for @ref MgaGpsEphFields::Cus field.
    ///     @li @b FieldIdx_e index, @b Field_e type and @b field_e() access fuction
    ///         for @ref MgaGpsEphFields::E field.
    ///     @li @b FieldIdx_sqrtA index, @b Field_sqrtA type and @b field_sqrtA() access fuction
    ///         for @ref MgaGpsEphFields::SqrtA field.
    ///     @li @b FieldIdx_toe index, @b Field_toe type and @b field_toe() access fuction
    ///         for @ref MgaGpsEphFields::Toe field.
    ///     @li @b FieldIdx_cic index, @b Field_cic type and @b field_cic() access fuction
    ///         for @ref MgaGpsEphFields::Cic field.
    ///     @li @b FieldIdx_omega0 index, @b Field_omega0 type and @b field_omega0() access fuction
    ///         for @ref MgaGpsEphFields::Omega0 field.
    ///     @li @b FieldIdx_cis index, @b Field_cis type and @b field_cis() access fuction
    ///         for @ref MgaGpsEphFields::Cis field.
    ///     @li @b FieldIdx_crc index, @b Field_crc type and @b field_crc() access fuction
    ///         for @ref MgaGpsEphFields::Crc field.
    ///     @li @b FieldIdx_i0 index, @b Field_i0 type and @b field_i0() access fuction
    ///         for @ref MgaGpsEphFields::I0 field.
    ///     @li @b FieldIdx_omega index, @b Field_omega type and @b field_omega() access fuction
    ///         for @ref MgaGpsEphFields::Omega field.
    ///     @li @b FieldIdx_omegaDot index, @b Field_omegaDot type and @b field_omegaDot() access fuction
    ///         for @ref MgaGpsEphFields::OmegaDot field.
    ///     @li @b FieldIdx_idot index, @b Field_idot type and @b field_idot() access fuction
    ///         for @ref MgaGpsEphFields::Idot field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref MgaGpsEphFields::Reserved3 field.
    COMMS_MSG_FIELDS_NAMES(
        type,
        version,
        svid,
        reserved1,
        fitInterval,
        uraIndex,
        svHealth,
        tgd,
        iodc,
        toc,
        reserved2,
        af2,
        af1,
        af0,
        crs,
        deltaN,
        m0,
        cuc,
        cus,
        e,
        sqrtA,
        toe,
        cic,
        omega0,
        cis,
        crc,
        i0,
        omega,
        omegaDot,
        idot,
        reserved3
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 68U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 68U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MgaGpsEphCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
