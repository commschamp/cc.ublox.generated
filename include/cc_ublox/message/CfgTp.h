// Generated by commsdsl2comms v6.2.1

/// @file
/// @brief Contains definition of <b>"CFG-TP"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/message/CfgTpCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref CfgTp.
/// @tparam TOpt Extra options
/// @see @ref CfgTp
/// @headerfile cc_ublox/message/CfgTp.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct CfgTpFields
{
    /// @brief Definition of <b>"interval"</b> field.
    class Interval : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMicroseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMicroseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgTpFieldsCommon::IntervalCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::IntervalCommon::name();
        }
    };

    /// @brief Definition of <b>"length"</b> field.
    class Length : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::UnitsMicroseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMicroseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgTpFieldsCommon::LengthCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::LengthCommon::name();
        }
    };

    /// @brief Definition of <b>"status"</b> field.
    /// @see @ref cc_ublox::message::CfgTpFieldsCommon::StatusCommon::ValueType
    class Status : public
        comms::field::EnumValue<
            cc_ublox::field::FieldBase<>,
            cc_ublox::message::CfgTpFieldsCommon::StatusCommon::ValueType,
            comms::option::def::ValidNumValueRange<-1, 1>
        >
    {
        using Base =
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::CfgTpFieldsCommon::StatusCommon::ValueType,
                comms::option::def::ValidNumValueRange<-1, 1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = cc_ublox::message::CfgTpFieldsCommon::StatusCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::StatusCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = cc_ublox::message::CfgTpFieldsCommon::StatusCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::StatusCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return cc_ublox::message::CfgTpFieldsCommon::StatusCommon::valueName(val);
        }

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::StatusCommon::valueName().
        static const char* valueNameOf(ValueType val)
        {
            return cc_ublox::message::CfgTpFieldsCommon::StatusCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::StatusCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return cc_ublox::message::CfgTpFieldsCommon::StatusCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::StatusCommon::name();
        }
    };

    /// @brief Definition of <b>"timeRef"</b> field.
    /// @see @ref cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::ValueType
    class TimeRef : public
        comms::field::EnumValue<
            cc_ublox::field::FieldBase<>,
            cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::ValueType,
            comms::option::def::ValidNumValueRange<0, 2>
        >
    {
        using Base =
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::ValueType,
                comms::option::def::ValidNumValueRange<0, 2>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Single value name info entry.
        using ValueNameInfo = cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::ValueNameInfo;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::ValueNamesMapInfo.
        using ValueNamesMapInfo = cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::ValueNamesMapInfo;

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::valueName().
        static const char* valueName(ValueType val)
        {
            return cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::valueName(val);
        }

        /// @brief Retrieve name of the enum value.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::valueName().
        static const char* valueNameOf(ValueType val)
        {
            return cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::valueName(val);
        }

        /// @brief Retrieve name of the @b current value
        const char* valueName() const
        {
            return valueName(Base::getValue());
        }

        /// @brief Retrieve map of enum value names.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::valueNamesMap().
        static ValueNamesMapInfo valueNamesMap()
        {
            return cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::valueNamesMap();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::TimeRefCommon::name();
        }
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xFEU, 0x0U>
            >;
    public:
        /// @brief Provides names and generates access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values and functions are:
        ///      @li @b BitIdx_syncMode, @b getBitValue_syncMode() and @b setBitValue_syncMode().
        COMMS_BITMASK_BITS_SEQ(
            syncMode
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref cc_ublox::message::CfgTpFieldsCommon::FlagsCommon::bitName().
        static const char* bitName(BitIdx idx)
        {
            return
                cc_ublox::message::CfgTpFieldsCommon::FlagsCommon::bitName(
                    static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"res"</b> field.
    class Res : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::ResCommon::name();
        }
    };

    /// @brief Definition of <b>"antennaCableDelay"</b> field.
    class AntennaCableDelay : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgTpFieldsCommon::AntennaCableDelayCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::AntennaCableDelayCommon::name();
        }
    };

    /// @brief Definition of <b>"rfGroupDelay"</b> field.
    class RfGroupDelay : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgTpFieldsCommon::RfGroupDelayCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::RfGroupDelayCommon::name();
        }
    };

    /// @brief Definition of <b>"userDelay"</b> field.
    class UserDelay : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int32_t,
            comms::option::def::UnitsNanoseconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int32_t,
                comms::option::def::UnitsNanoseconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgTpFieldsCommon::UserDelayCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgTpFieldsCommon::UserDelayCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Interval,
        Length,
        Status,
        TimeRef,
        Flags,
        Res,
        AntennaCableDelay,
        RfGroupDelay,
        UserDelay
    >;
};

/// @brief Definition of <b>"CFG-TP"</b> message class.
/// @details
///     See @ref CfgTpFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/CfgTp.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class CfgTp : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgTp>,
        comms::option::def::FieldsImpl<typename CfgTpFields<TOpt>::All>,
        comms::option::def::MsgType<CfgTp<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgTp>,
            comms::option::def::FieldsImpl<typename CfgTpFields<TOpt>::All>,
            comms::option::def::MsgType<CfgTp<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_interval index, @b Field_interval type and @b field_interval() access fuction
    ///         for @ref CfgTpFields::Interval field.
    ///     @li @b FieldIdx_length index, @b Field_length type and @b field_length() access fuction
    ///         for @ref CfgTpFields::Length field.
    ///     @li @b FieldIdx_status index, @b Field_status type and @b field_status() access fuction
    ///         for @ref CfgTpFields::Status field.
    ///     @li @b FieldIdx_timeRef index, @b Field_timeRef type and @b field_timeRef() access fuction
    ///         for @ref CfgTpFields::TimeRef field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref CfgTpFields::Flags field.
    ///     @li @b FieldIdx_res index, @b Field_res type and @b field_res() access fuction
    ///         for @ref CfgTpFields::Res field.
    ///     @li @b FieldIdx_antennaCableDelay index, @b Field_antennaCableDelay type and @b field_antennaCableDelay() access fuction
    ///         for @ref CfgTpFields::AntennaCableDelay field.
    ///     @li @b FieldIdx_rfGroupDelay index, @b Field_rfGroupDelay type and @b field_rfGroupDelay() access fuction
    ///         for @ref CfgTpFields::RfGroupDelay field.
    ///     @li @b FieldIdx_userDelay index, @b Field_userDelay type and @b field_userDelay() access fuction
    ///         for @ref CfgTpFields::UserDelay field.
    COMMS_MSG_FIELDS_NAMES(
        interval,
        length,
        status,
        timeRef,
        flags,
        res,
        antennaCableDelay,
        rfGroupDelay,
        userDelay
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 20U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 20U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::CfgTpCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
