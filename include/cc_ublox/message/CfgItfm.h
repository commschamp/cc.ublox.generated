// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains definition of <b>"CFG-ITFM"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/CfgItfmCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref CfgItfm.
/// @tparam TOpt Extra options
/// @see @ref CfgItfm
/// @headerfile cc_ublox/message/CfgItfm.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct CfgItfmFields
{
    /// @brief Scope for all the member fields of
    ///     @ref Config field.
    struct ConfigMembers
    {
        /// @brief Definition of <b>"bbThreshold"</b> field.
        class BbThreshold : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<4U>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<4U>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::BbThresholdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::BbThresholdCommon::name();
            }
        };

        /// @brief Definition of <b>"cwThreshold"</b> field.
        class CwThreshold : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FixedBitLength<5U>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<5U>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::CwThresholdCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::CwThresholdCommon::name();
            }
        };

        /// @brief Definition of <b>"algorithmBits"</b> field.
        class AlgorithmBits : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::FixedBitLength<22U>,
                comms::option::def::DefaultNumValue<1487190L>,
                comms::option::def::ValidNumValue<1487190L>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FixedBitLength<22U>,
                    comms::option::def::DefaultNumValue<1487190L>,
                    comms::option::def::ValidNumValue<1487190L>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::AlgorithmBitsCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::AlgorithmBitsCommon::name();
            }
        };

        /// @brief Definition of <b>"bits"</b> field.
        class Bits : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<1U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<1U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_enable, @b getBitValue_enable() and @b setBitValue_enable().
            COMMS_BITMASK_BITS_SEQ(
                enable
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::BitsCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::BitsCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::ConfigMembersCommon::BitsCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               BbThreshold,
               CwThreshold,
               AlgorithmBits,
               Bits
            >;
    };

    /// @brief Definition of <b>"config"</b> field.
    class Config : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename ConfigMembers::All
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename ConfigMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_bbThreshold index, @b Field_bbThreshold type and @b field_bbThreshold() access function -
        ///         for cc_ublox::message::CfgItfmFields::ConfigMembers::BbThreshold member field.
        ///     @li @b FieldIdx_cwThreshold index, @b Field_cwThreshold type and @b field_cwThreshold() access function -
        ///         for cc_ublox::message::CfgItfmFields::ConfigMembers::CwThreshold member field.
        ///     @li @b FieldIdx_algorithmBits index, @b Field_algorithmBits type and @b field_algorithmBits() access function -
        ///         for cc_ublox::message::CfgItfmFields::ConfigMembers::AlgorithmBits member field.
        ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
        ///         for cc_ublox::message::CfgItfmFields::ConfigMembers::Bits member field.
        COMMS_FIELD_MEMBERS_NAMES(
            bbThreshold,
            cwThreshold,
            algorithmBits,
            bits
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgItfmFieldsCommon::ConfigCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Config2 field.
    struct Config2Members
    {
        /// @brief Definition of <b>"generalBits"</b> field.
        class GeneralBits : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::FixedBitLength<12U>,
                comms::option::def::DefaultNumValue<798>,
                comms::option::def::ValidNumValue<798>
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint16_t,
                    comms::option::def::FixedBitLength<12U>,
                    comms::option::def::DefaultNumValue<798>,
                    comms::option::def::ValidNumValue<798>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::GeneralBitsCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::GeneralBitsCommon::name();
            }
        };

        /// @brief Definition of <b>"antSetting"</b> field.
        /// @see @ref cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::ValueType
        class AntSetting : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::AntSettingCommon::name();
            }
        };

        /// @brief Definition of <b>"bitsHigh"</b> field.
        class BitsHigh : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<18U>,
                comms::option::def::BitmaskReservedBits<0x3FFFEUL, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<18U>,
                    comms::option::def::BitmaskReservedBits<0x3FFFEUL, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_enable2, @b getBitValue_enable2() and @b setBitValue_enable2().
            COMMS_BITMASK_BITS_SEQ(
                enable2
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::BitsHighCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::BitsHighCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::CfgItfmFieldsCommon::Config2MembersCommon::BitsHighCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               GeneralBits,
               AntSetting,
               BitsHigh
            >;
    };

    /// @brief Definition of <b>"config2"</b> field.
    class Config2 : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename Config2Members::All
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename Config2Members::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_generalBits index, @b Field_generalBits type and @b field_generalBits() access function -
        ///         for cc_ublox::message::CfgItfmFields::Config2Members::GeneralBits member field.
        ///     @li @b FieldIdx_antSetting index, @b Field_antSetting type and @b field_antSetting() access function -
        ///         for cc_ublox::message::CfgItfmFields::Config2Members::AntSetting member field.
        ///     @li @b FieldIdx_bitsHigh index, @b Field_bitsHigh type and @b field_bitsHigh() access function -
        ///         for cc_ublox::message::CfgItfmFields::Config2Members::BitsHigh member field.
        COMMS_FIELD_MEMBERS_NAMES(
            generalBits,
            antSetting,
            bitsHigh
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgItfmFieldsCommon::Config2Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Config,
        Config2
    >;
};

/// @brief Definition of <b>"CFG-ITFM"</b> message class.
/// @details
///     See @ref CfgItfmFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/CfgItfm.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class CfgItfm : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgItfm>,
        comms::option::def::FieldsImpl<typename CfgItfmFields<TOpt>::All>,
        comms::option::def::MsgType<CfgItfm<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgItfm>,
            comms::option::def::FieldsImpl<typename CfgItfmFields<TOpt>::All>,
            comms::option::def::MsgType<CfgItfm<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_config index, @b Field_config type and @b field_config() access fuction
    ///         for @ref CfgItfmFields::Config field.
    ///     @li @b FieldIdx_config2 index, @b Field_config2 type and @b field_config2() access fuction
    ///         for @ref CfgItfmFields::Config2 field.
    COMMS_MSG_FIELDS_NAMES(
        config,
        config2
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 8U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::CfgItfmCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
