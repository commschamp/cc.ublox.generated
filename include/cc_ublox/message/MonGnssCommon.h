// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::MonGnss message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include "cc_ublox/field/Res3Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::MonGnss message.
/// @see cc_ublox::message::MonGnssFields
struct MonGnssFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonGnssFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MonGnssFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::MonGnssFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonGnssFields::Supported field.
    struct SupportedCommon
    {
        /// @brief Name of the @ref cc_ublox::message::MonGnssFields::Supported field.
        static const char* name()
        {
            return "supported";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::MonGnssFields::Supported field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "GPSSup",
                "GlonassSup",
                "BeidouSup",
                "GalileoSup"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonGnssFields::DefaultGnss field.
    struct DefaultGnssCommon
    {
        /// @brief Name of the @ref cc_ublox::message::MonGnssFields::DefaultGnss field.
        static const char* name()
        {
            return "defaultGnss";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::MonGnssFields::DefaultGnss field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "GPSDef",
                "GlonassDef",
                "BeidouDef",
                "GalileoDef"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonGnssFields::Enabled field.
    struct EnabledCommon
    {
        /// @brief Name of the @ref cc_ublox::message::MonGnssFields::Enabled field.
        static const char* name()
        {
            return "enabled";
        }

        /// @brief Retrieve name of the bit of
        ///     @ref cc_ublox::message::MonGnssFields::Enabled field.
        static const char* bitName(std::size_t idx)
        {
            static const char* Map[] = {
                "GPSEna",
                "GlonassEna",
                "BeidouEna",
                "GalileoEna"
            };

            static const std::size_t MapSize = std::extent<decltype(Map)>::value;
            if (MapSize <= idx) {
                return nullptr;
            }

            return Map[idx];
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonGnssFields::Simultaneous field.
    struct SimultaneousCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MonGnssFields::Simultaneous field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::MonGnssFields::Simultaneous field.
        static const char* name()
        {
            return "simultaneous";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MonGnssFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res3Common
    {
        /// @brief Name of the @ref cc_ublox::message::MonGnssFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::MonGnss message.
struct MonGnssCommon
{
    /// @brief Name of the @ref cc_ublox::message::MonGnss message.
    static const char* name()
    {
        return "MON-GNSS";
    }
};

} // namespace message

} // namespace cc_ublox
