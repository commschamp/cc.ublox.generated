// Generated by commsdsl2comms v6.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::CfgPms message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/Res2Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::CfgPms message.
/// @see cc_ublox::message::CfgPmsFields
struct CfgPmsFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgPmsFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgPmsFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::CfgPmsFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgPmsFields::PowerSetupValue field.
    struct PowerSetupValueCommon
    {
        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::CfgPmsFields::PowerSetupValue field.
        enum class ValueType : std::uint8_t
        {
            FullPower = 0, ///< value <b>Full power</b>. 
            Balanced = 1, ///< value @b Balanced. 
            Interval = 2, ///< value @b Interval. 
            Agressive1Hz = 3, ///< value <b>Aggressive with 1Hz</b>. 
            Agressive2Hz = 4, ///< value <b>Aggressive with 2Hz</b>. 
            Agressive4Hz = 5, ///< value <b>Aggressive with 4Hz</b>. 
            Invalid = 255, ///< value @b Invalid. 

            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 255, ///< Last defined value.
        };

        /// @brief Single value name info entry
        using ValueNameInfo = std::pair<ValueType, const char*>;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

        /// @brief Name of the @ref cc_ublox::message::CfgPmsFields::PowerSetupValue field.
        static const char* name()
        {
            return "powerSetupValue";
        }

        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            auto begIter = namesMapInfo.first;
            auto endIter = begIter + namesMapInfo.second;
            auto iter = std::lower_bound(
                begIter, endIter, val,
                [](const ValueNameInfo& info, ValueType v) -> bool
                {
                    return info.first < v;
                });

            if ((iter == endIter) || (iter->first != val)) {
                return nullptr;
            }

            return iter->second;
        }

        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const ValueNameInfo Map[] = {
                std::make_pair(ValueType::FullPower, "Full power"),
                std::make_pair(ValueType::Balanced, "Balanced"),
                std::make_pair(ValueType::Interval, "Interval"),
                std::make_pair(ValueType::Agressive1Hz, "Aggressive with 1Hz"),
                std::make_pair(ValueType::Agressive2Hz, "Aggressive with 2Hz"),
                std::make_pair(ValueType::Agressive4Hz, "Aggressive with 4Hz"),
                std::make_pair(ValueType::Invalid, "Invalid")
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };

    /// @brief Values enumerator for
    ///     @ref cc_ublox::message::CfgPmsFields::PowerSetupValue field.
    using PowerSetupValueVal = PowerSetupValueCommon::ValueType;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgPmsFields::Period field.
    struct PeriodCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgPmsFields::Period field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgPmsFields::Period field.
        static const char* name()
        {
            return "period";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgPmsFields::OnTime field.
    struct OnTimeCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgPmsFields::OnTime field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgPmsFields::OnTime field.
        static const char* name()
        {
            return "onTime";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgPmsFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res2Common
    {
        /// @brief Name of the @ref cc_ublox::message::CfgPmsFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::CfgPms message.
struct CfgPmsCommon
{
    /// @brief Name of the @ref cc_ublox::message::CfgPms message.
    static const char* name()
    {
        return "CFG-PMS";
    }
};

} // namespace message

} // namespace cc_ublox
