// Generated by commsdsl2comms v6.3.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::CfgTmode3 message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/AltCommon.h"
#include "cc_ublox/field/AltHPCommon.h"
#include "cc_ublox/field/FixedPosAccCommon.h"
#include "cc_ublox/field/LatCommon.h"
#include "cc_ublox/field/LatHPCommon.h"
#include "cc_ublox/field/LonCommon.h"
#include "cc_ublox/field/LonHPCommon.h"
#include "cc_ublox/field/Res1Common.h"
#include "cc_ublox/field/Res8Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::CfgTmode3 message.
/// @see cc_ublox::message::CfgTmode3Fields
struct CfgTmode3FieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgTmode3Fields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res1Common
    {
        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::CfgTmode3Fields::Flags field.
    struct FlagsMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::CfgTmode3Fields::FlagsMembers::Mode field.
        struct ModeCommon
        {
            /// @brief Values enumerator for
            ///     @ref cc_ublox::message::CfgTmode3Fields::FlagsMembers::Mode field.
            enum class ValueType : std::uint8_t
            {
                Disabled = 0, ///< value @b Disabled. 
                SurveyIn = 1, ///< value <b>Survey In</b>. 
                FixedMode = 2, ///< value <b>Fixed Mode</b>. 

                // --- Extra values generated for convenience ---
                FirstValue = 0, ///< First defined value.
                LastValue = 2, ///< Last defined value.
                ValuesLimit = 3, ///< Upper limit for defined values.
            };

            /// @brief Single value name info entry
            using ValueNameInfo = const char*;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @details The @b first value of the pair is pointer to the map array,
            ///     The @b second value of the pair is the size of the array.
            using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

            /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::FlagsMembers::Mode field.
            static const char* name()
            {
                return "mode";
            }

            /// @brief Retrieve name of the enum value
            static const char* valueName(ValueType val)
            {
                auto namesMapInfo = valueNamesMap();
                if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                    return nullptr;
                }

                return namesMapInfo.first[static_cast<std::size_t>(val)];
            }

            /// @brief Retrieve map of enum value names
            static ValueNamesMapInfo valueNamesMap()
            {
                static const char* Map[] = {
                    "Disabled",
                    "Survey In",
                    "Fixed Mode"
                };
                static const std::size_t MapSize = std::extent<decltype(Map)>::value;

                return std::make_pair(&Map[0], MapSize);
            }
        };

        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::CfgTmode3Fields::FlagsMembers::Mode field.
        using ModeVal = ModeCommon::ValueType;

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::CfgTmode3Fields::FlagsMembers::Bits field.
        struct BitsCommon
        {
            /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::FlagsMembers::Bits field.
            static const char* name()
            {
                return "";
            }

            /// @brief Retrieve name of the bit of
            ///     @ref cc_ublox::message::CfgTmode3Fields::FlagsMembers::Bits field.
            static const char* bitName(std::size_t idx)
            {
                static const char* Map[] = {
                    "lla"
                };

                static const std::size_t MapSize = std::extent<decltype(Map)>::value;
                if (MapSize <= idx) {
                    return nullptr;
                }

                return Map[idx];
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::Flags field.
    struct FlagsCommon
    {
        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::Flags field.
        static const char* name()
        {
            return "flags";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::CfgTmode3Fields::Ecef field.
    struct EcefMembersCommon
    {
        /// @brief Scope for all the common definitions of the member fields of
        ///     @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrap field.
        struct EcefWrapMembersCommon
        {
            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefX field.
            struct EcefXCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefX field.
                using ValueType = std::int32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefX field.
                static const char* name()
                {
                    return "ecefX";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefY field.
            struct EcefYCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefY field.
                using ValueType = std::int32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefY field.
                static const char* name()
                {
                    return "ecefY";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefZ field.
            struct EcefZCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefZ field.
                using ValueType = std::int32_t;

                /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefZ field.
                static const char* name()
                {
                    return "ecefZ";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefXHP field.
            struct EcefXHPCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefXHP field.
                using ValueType = std::int8_t;

                /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefXHP field.
                static const char* name()
                {
                    return "ecefXHP";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefYHP field.
            struct EcefYHPCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefYHP field.
                using ValueType = std::int8_t;

                /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefYHP field.
                static const char* name()
                {
                    return "ecefYHP";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefZHP field.
            struct EcefZHPCommon
            {
                /// @brief Re-definition of the value type used by
                ///     cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefZHP field.
                using ValueType = std::int8_t;

                /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrapMembers::EcefZHP field.
                static const char* name()
                {
                    return "ecefZHP";
                }

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return false;
                }
            };
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrap field.
        struct EcefWrapCommon
        {
            /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::EcefMembers::EcefWrap field.
            static const char* name()
            {
                return "";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::Ecef field.
    struct EcefCommon
    {
        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::Ecef field.
        static const char* name()
        {
            return "ecef";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::message::CfgTmode3Fields::Lla field.
    struct LlaMembersCommon
    {
        /// @brief Scope for all the common definitions of the member fields of
        ///     @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrap field.
        struct LlaWrapMembersCommon
        {
            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrapMembers::Lat field.
            using LatCommon = cc_ublox::field::LatCommon;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrapMembers::Lon field.
            using LonCommon = cc_ublox::field::LonCommon;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrapMembers::Alt field.
            using AltCommon = cc_ublox::field::AltCommon;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrapMembers::LatHP field.
            using LatHPCommon = cc_ublox::field::LatHPCommon;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrapMembers::LonHP field.
            using LonHPCommon = cc_ublox::field::LonHPCommon;

            /// @brief Common types and functions for
            ///     @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrapMembers::AltHP field.
            using AltHPCommon = cc_ublox::field::AltHPCommon;
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrap field.
        struct LlaWrapCommon
        {
            /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::LlaMembers::LlaWrap field.
            static const char* name()
            {
                return "";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::Lla field.
    struct LlaCommon
    {
        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::Lla field.
        static const char* name()
        {
            return "lla";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::Reserved2 field.
    struct Reserved2Common : public cc_ublox::field::Res1Common
    {
        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::Reserved2 field.
        static const char* name()
        {
            return "reserved2";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::FixedPosAcc field.
    using FixedPosAccCommon = cc_ublox::field::FixedPosAccCommon;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::SvinMinDur field.
    struct SvinMinDurCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgTmode3Fields::SvinMinDur field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::SvinMinDur field.
        static const char* name()
        {
            return "svinMinDur";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::SvinVarLimit field.
    struct SvinVarLimitCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgTmode3Fields::SvinVarLimit field.
        using ValueType = std::uint32_t;

        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::SvinVarLimit field.
        static const char* name()
        {
            return "svinVarLimit";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgTmode3Fields::Reserved3 field.
    struct Reserved3Common : public cc_ublox::field::Res8Common
    {
        /// @brief Name of the @ref cc_ublox::message::CfgTmode3Fields::Reserved3 field.
        static const char* name()
        {
            return "reserved3";
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::CfgTmode3 message.
struct CfgTmode3Common
{
    /// @brief Name of the @ref cc_ublox::message::CfgTmode3 message.
    static const char* name()
    {
        return "CFG-TMODE3";
    }
};

} // namespace message

} // namespace cc_ublox
