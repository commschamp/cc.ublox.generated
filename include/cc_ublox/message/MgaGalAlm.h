// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains definition of <b>"MGA-GAL-ALM"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res4.h"
#include "cc_ublox/message/MgaGalAlmCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref MgaGalAlm.
/// @tparam TOpt Extra options
/// @see @ref MgaGalAlm
/// @headerfile cc_ublox/message/MgaGalAlm.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct MgaGalAlmFields
{
    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<2>,
            comms::option::def::ValidNumValue<2>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<2>,
                comms::option::def::ValidNumValue<2>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::TypeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::TypeCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(2);
            return true;
        }
    };

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"svid"</b> field.
    class Svid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::SvidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::SvidCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"ioda"</b> field.
    class Ioda : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::IodaCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::IodaCommon::name();
        }
    };

    /// @brief Definition of <b>"almWNa"</b> field.
    class AlmWNa : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::AlmWNaCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::AlmWNaCommon::name();
        }
    };

    /// @brief Definition of <b>"toa"</b> field.
    class Toa : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<600, 1>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<600, 1>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::ToaCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::ToaCommon::name();
        }
    };

    /// @brief Definition of <b>"deltaSqrtA"</b> field.
    class DeltaSqrtA : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 512>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 512>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::DeltaSqrtACommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::DeltaSqrtACommon::name();
        }
    };

    /// @brief Definition of <b>"e"</b> field.
    class E : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::ScalingRatio<1, 65536L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::ScalingRatio<1, 65536L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::ECommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::ECommon::name();
        }
    };

    /// @brief Definition of <b>"deltaI"</b> field.
    class DeltaI : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 16384>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 16384>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::DeltaICommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::DeltaICommon::name();
        }
    };

    /// @brief Definition of <b>"omega0"</b> field.
    class Omega0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 32768L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 32768L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::Omega0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::Omega0Common::name();
        }
    };

    /// @brief Definition of <b>"omegaDot"</b> field.
    class OmegaDot : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 0x200000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 0x200000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::OmegaDotCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::OmegaDotCommon::name();
        }
    };

    /// @brief Definition of <b>"omega"</b> field.
    class Omega : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 32768L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 32768L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::OmegaCommon::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::OmegaCommon::name();
        }
    };

    /// @brief Definition of <b>"m0"</b> field.
    class M0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 32768L>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 32768L>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::M0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::M0Common::name();
        }
    };

    /// @brief Definition of <b>"af0"</b> field.
    class Af0 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 524288L>,
            comms::option::def::UnitsSeconds
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 524288L>,
                comms::option::def::UnitsSeconds
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::Af0Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::Af0Common::name();
        }
    };

    /// @brief Definition of <b>"af1"</b> field.
    class Af1 : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::int16_t,
            comms::option::def::ScalingRatio<1, 0x4000000000LL>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::int16_t,
                comms::option::def::ScalingRatio<1, 0x4000000000LL>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::Af1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::Af1Common::name();
        }
    };

    /// @brief Definition of <b>"healthE1B"</b> field.
    class HealthE1B : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::HealthE1BCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::HealthE1BCommon::name();
        }
    };

    /// @brief Definition of <b>"healthE5b"</b> field.
    class HealthE5b : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::HealthE5bCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::HealthE5bCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res4<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res4<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::MgaGalAlmFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Type,
        Version,
        Svid,
        Reserved1,
        Ioda,
        AlmWNa,
        Toa,
        DeltaSqrtA,
        E,
        DeltaI,
        Omega0,
        OmegaDot,
        Omega,
        M0,
        Af0,
        Af1,
        HealthE1B,
        HealthE5b,
        Reserved2
    >;
};

/// @brief Definition of <b>"MGA-GAL-ALM"</b> message class.
/// @details
///     See @ref MgaGalAlmFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/MgaGalAlm.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class MgaGalAlm : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::MgaGalAlm,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaGal>,
        comms::option::def::FieldsImpl<typename MgaGalAlmFields<TOpt>::All>,
        comms::option::def::MsgType<MgaGalAlm<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::MgaGalAlm,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_MgaGal>,
            comms::option::def::FieldsImpl<typename MgaGalAlmFields<TOpt>::All>,
            comms::option::def::MsgType<MgaGalAlm<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref MgaGalAlmFields::Type field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref MgaGalAlmFields::Version field.
    ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access fuction
    ///         for @ref MgaGalAlmFields::Svid field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref MgaGalAlmFields::Reserved1 field.
    ///     @li @b FieldIdx_ioda index, @b Field_ioda type and @b field_ioda() access fuction
    ///         for @ref MgaGalAlmFields::Ioda field.
    ///     @li @b FieldIdx_almWNa index, @b Field_almWNa type and @b field_almWNa() access fuction
    ///         for @ref MgaGalAlmFields::AlmWNa field.
    ///     @li @b FieldIdx_toa index, @b Field_toa type and @b field_toa() access fuction
    ///         for @ref MgaGalAlmFields::Toa field.
    ///     @li @b FieldIdx_deltaSqrtA index, @b Field_deltaSqrtA type and @b field_deltaSqrtA() access fuction
    ///         for @ref MgaGalAlmFields::DeltaSqrtA field.
    ///     @li @b FieldIdx_e index, @b Field_e type and @b field_e() access fuction
    ///         for @ref MgaGalAlmFields::E field.
    ///     @li @b FieldIdx_deltaI index, @b Field_deltaI type and @b field_deltaI() access fuction
    ///         for @ref MgaGalAlmFields::DeltaI field.
    ///     @li @b FieldIdx_omega0 index, @b Field_omega0 type and @b field_omega0() access fuction
    ///         for @ref MgaGalAlmFields::Omega0 field.
    ///     @li @b FieldIdx_omegaDot index, @b Field_omegaDot type and @b field_omegaDot() access fuction
    ///         for @ref MgaGalAlmFields::OmegaDot field.
    ///     @li @b FieldIdx_omega index, @b Field_omega type and @b field_omega() access fuction
    ///         for @ref MgaGalAlmFields::Omega field.
    ///     @li @b FieldIdx_m0 index, @b Field_m0 type and @b field_m0() access fuction
    ///         for @ref MgaGalAlmFields::M0 field.
    ///     @li @b FieldIdx_af0 index, @b Field_af0 type and @b field_af0() access fuction
    ///         for @ref MgaGalAlmFields::Af0 field.
    ///     @li @b FieldIdx_af1 index, @b Field_af1 type and @b field_af1() access fuction
    ///         for @ref MgaGalAlmFields::Af1 field.
    ///     @li @b FieldIdx_healthE1B index, @b Field_healthE1B type and @b field_healthE1B() access fuction
    ///         for @ref MgaGalAlmFields::HealthE1B field.
    ///     @li @b FieldIdx_healthE5b index, @b Field_healthE5b type and @b field_healthE5b() access fuction
    ///         for @ref MgaGalAlmFields::HealthE5b field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref MgaGalAlmFields::Reserved2 field.
    COMMS_MSG_FIELDS_NAMES(
        type,
        version,
        svid,
        reserved1,
        ioda,
        almWNa,
        toa,
        deltaSqrtA,
        e,
        deltaI,
        omega0,
        omegaDot,
        omega,
        m0,
        af0,
        af1,
        healthE1B,
        healthE5b,
        reserved2
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 32U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 32U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::MgaGalAlmCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
