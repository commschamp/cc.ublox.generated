// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::CfgRate message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::CfgRate message.
/// @see cc_ublox::message::CfgRateFields
struct CfgRateFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgRateFields::MeasRate field.
    struct MeasRateCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgRateFields::MeasRate field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgRateFields::MeasRate field.
        static const char* name()
        {
            return "measRate";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgRateFields::NavRate field.
    struct NavRateCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::CfgRateFields::NavRate field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::CfgRateFields::NavRate field.
        static const char* name()
        {
            return "navRate";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::CfgRateFields::TimeRef field.
    struct TimeRefCommon
    {
        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::CfgRateFields::TimeRef field.
        enum class ValueType : std::uint16_t
        {
            UTC = 0, ///< value @b UTC. 
            GPS = 1, ///< value @b GPS. 
            GLONASS = 2, ///< value @b GLONASS. 
            BeiDou = 3, ///< value @b BeiDou. 
            Galileo = 4, ///< value @b Galileo. 

            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 4, ///< Last defined value.
            ValuesLimit = 5, ///< Upper limit for defined values.
        };

        /// @brief Single value name info entry
        using ValueNameInfo = const char*;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

        /// @brief Name of the @ref cc_ublox::message::CfgRateFields::TimeRef field.
        static const char* name()
        {
            return "timeRef";
        }

        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                return nullptr;
            }

            return namesMapInfo.first[static_cast<std::size_t>(val)];
        }

        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const char* Map[] = {
                "UTC",
                "GPS",
                "GLONASS",
                "BeiDou",
                "Galileo"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };

    /// @brief Values enumerator for
    ///     @ref cc_ublox::message::CfgRateFields::TimeRef field.
    using TimeRefVal = TimeRefCommon::ValueType;
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::CfgRate message.
struct CfgRateCommon
{
    /// @brief Name of the @ref cc_ublox::message::CfgRate message.
    static const char* name()
    {
        return "CFG-RATE";
    }
};

} // namespace message

} // namespace cc_ublox
