// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains definition of <b>"SEC-SIGN"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/MsgId.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/message/SecSignCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref SecSign.
/// @tparam TOpt Extra options
/// @see @ref SecSign
/// @headerfile cc_ublox/message/SecSign.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct SecSignFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::HasName,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::SecSignFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::SecSignFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res3<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::SecSignFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"msgId"</b> field.
    class MsgId : public
        cc_ublox::field::MsgId<
            TOpt,
            comms::option::def::HasName
        >
    {
        using Base =
            cc_ublox::field::MsgId<
                TOpt,
                comms::option::def::HasName
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::SecSignFieldsCommon::MsgIdCommon::name();
        }
    };

    /// @brief Definition of <b>"checksum"</b> field.
    class Checksum : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::SecSignFieldsCommon::ChecksumCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::SecSignFieldsCommon::ChecksumCommon::name();
        }
    };

    /// @brief Definition of <b>"hash"</b> field.
    class Hash : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::SecSignFields::Hash,
            comms::option::def::HasName,
            comms::option::def::SequenceFixedSize<32U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::SecSignFields::Hash,
                comms::option::def::HasName,
                comms::option::def::SequenceFixedSize<32U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::SecSignFieldsCommon::HashCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Reserved1,
        MsgId,
        Checksum,
        Hash
    >;
};

/// @brief Definition of <b>"SEC-SIGN"</b> message class.
/// @details
///     See @ref SecSignFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/SecSign.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class SecSign : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::SecSign,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_SecSign>,
        comms::option::def::FieldsImpl<typename SecSignFields<TOpt>::All>,
        comms::option::def::MsgType<SecSign<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::SecSign,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_SecSign>,
            comms::option::def::FieldsImpl<typename SecSignFields<TOpt>::All>,
            comms::option::def::MsgType<SecSign<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref SecSignFields::Version field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref SecSignFields::Reserved1 field.
    ///     @li @b FieldIdx_msgId index, @b Field_msgId type and @b field_msgId() access fuction
    ///         for @ref SecSignFields::MsgId field.
    ///     @li @b FieldIdx_checksum index, @b Field_checksum type and @b field_checksum() access fuction
    ///         for @ref SecSignFields::Checksum field.
    ///     @li @b FieldIdx_hash index, @b Field_hash type and @b field_hash() access fuction
    ///         for @ref SecSignFields::Hash field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        reserved1,
        msgId,
        checksum,
        hash
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 40U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 40U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::SecSignCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
