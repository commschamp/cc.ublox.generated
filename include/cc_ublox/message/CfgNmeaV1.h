// Generated by commsdsl2comms v6.1.0

/// @file
/// @brief Contains definition of <b>"CFG-NMEA (V1)"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/CfgMainTalkerId.h"
#include "cc_ublox/field/CfgNmeaFilter.h"
#include "cc_ublox/field/CfgNmeaFlags.h"
#include "cc_ublox/field/CfgNmeaGnssToFilter.h"
#include "cc_ublox/field/CfgNmeaGsvTalkerId.h"
#include "cc_ublox/field/CfgNmeaNumSV.h"
#include "cc_ublox/field/CfgNmeaSvNumbering.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/NmeaVersion.h"
#include "cc_ublox/field/Res6.h"
#include "cc_ublox/message/CfgNmeaV1Common.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref CfgNmeaV1.
/// @tparam TOpt Extra options
/// @see @ref CfgNmeaV1
/// @headerfile cc_ublox/message/CfgNmeaV1.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct CfgNmeaV1Fields
{
    /// @brief Definition of <b>"filter"</b> field.
    class Filter : public
        cc_ublox::field::CfgNmeaFilter<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgNmeaFilter<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::FilterCommon::name();
        }
    };

    /// @brief Definition of <b>"nmeaVersion"</b> field.
    class NmeaVersion : public
        cc_ublox::field::NmeaVersion<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::NmeaVersion<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::NmeaVersionCommon::name();
        }
    };

    /// @brief Definition of <b>"numSV"</b> field.
    class NumSV : public
        cc_ublox::field::CfgNmeaNumSV<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgNmeaNumSV<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::NumSVCommon::name();
        }
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        cc_ublox::field::CfgNmeaFlags<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgNmeaFlags<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"gnssToFilter"</b> field.
    class GnssToFilter : public
        cc_ublox::field::CfgNmeaGnssToFilter<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgNmeaGnssToFilter<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::GnssToFilterCommon::name();
        }
    };

    /// @brief Definition of <b>"svNumbering"</b> field.
    class SvNumbering : public
        cc_ublox::field::CfgNmeaSvNumbering<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgNmeaSvNumbering<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::SvNumberingCommon::name();
        }
    };

    /// @brief Definition of <b>"mainTalkerId"</b> field.
    class MainTalkerId : public
        cc_ublox::field::CfgMainTalkerId<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgMainTalkerId<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::MainTalkerIdCommon::name();
        }
    };

    /// @brief Definition of <b>"gsvTalkerId"</b> field.
    class GsvTalkerId : public
        cc_ublox::field::CfgNmeaGsvTalkerId<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::CfgNmeaGsvTalkerId<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::GsvTalkerIdCommon::name();
        }
    };

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValue<1>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValue<1>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::VersionCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(1);
            return true;
        }
    };

    /// @brief Definition of <b>"bdsTalkerId"</b> field.
    class BdsTalkerId : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::CfgNmeaV1Fields::BdsTalkerId,
            comms::option::def::SequenceFixedSize<2U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::CfgNmeaV1Fields::BdsTalkerId,
                comms::option::def::SequenceFixedSize<2U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::BdsTalkerIdCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res6<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res6<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::CfgNmeaV1FieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Filter,
        NmeaVersion,
        NumSV,
        Flags,
        GnssToFilter,
        SvNumbering,
        MainTalkerId,
        GsvTalkerId,
        Version,
        BdsTalkerId,
        Reserved1
    >;
};

/// @brief Definition of <b>"CFG-NMEA (V1)"</b> message class.
/// @details
///     See @ref CfgNmeaV1Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/CfgNmeaV1.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class CfgNmeaV1 : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgNmea>,
        comms::option::def::FieldsImpl<typename CfgNmeaV1Fields<TOpt>::All>,
        comms::option::def::MsgType<CfgNmeaV1<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_CfgNmea>,
            comms::option::def::FieldsImpl<typename CfgNmeaV1Fields<TOpt>::All>,
            comms::option::def::MsgType<CfgNmeaV1<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_filter index, @b Field_filter type and @b field_filter() access fuction
    ///         for @ref CfgNmeaV1Fields::Filter field.
    ///     @li @b FieldIdx_nmeaVersion index, @b Field_nmeaVersion type and @b field_nmeaVersion() access fuction
    ///         for @ref CfgNmeaV1Fields::NmeaVersion field.
    ///     @li @b FieldIdx_numSV index, @b Field_numSV type and @b field_numSV() access fuction
    ///         for @ref CfgNmeaV1Fields::NumSV field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref CfgNmeaV1Fields::Flags field.
    ///     @li @b FieldIdx_gnssToFilter index, @b Field_gnssToFilter type and @b field_gnssToFilter() access fuction
    ///         for @ref CfgNmeaV1Fields::GnssToFilter field.
    ///     @li @b FieldIdx_svNumbering index, @b Field_svNumbering type and @b field_svNumbering() access fuction
    ///         for @ref CfgNmeaV1Fields::SvNumbering field.
    ///     @li @b FieldIdx_mainTalkerId index, @b Field_mainTalkerId type and @b field_mainTalkerId() access fuction
    ///         for @ref CfgNmeaV1Fields::MainTalkerId field.
    ///     @li @b FieldIdx_gsvTalkerId index, @b Field_gsvTalkerId type and @b field_gsvTalkerId() access fuction
    ///         for @ref CfgNmeaV1Fields::GsvTalkerId field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref CfgNmeaV1Fields::Version field.
    ///     @li @b FieldIdx_bdsTalkerId index, @b Field_bdsTalkerId type and @b field_bdsTalkerId() access fuction
    ///         for @ref CfgNmeaV1Fields::BdsTalkerId field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref CfgNmeaV1Fields::Reserved1 field.
    COMMS_MSG_FIELDS_NAMES(
        filter,
        nmeaVersion,
        numSV,
        flags,
        gnssToFilter,
        svNumbering,
        mainTalkerId,
        gsvTalkerId,
        version,
        bdsTalkerId,
        reserved1
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 20U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 20U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::CfgNmeaV1Common::name();
    }
};

} // namespace message

} // namespace cc_ublox
