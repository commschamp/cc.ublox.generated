// Generated by commsdsl2comms v6.3.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::message::MgaFlashAck message and its fields.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>
#include "cc_ublox/field/Res1Common.h"

namespace cc_ublox
{

namespace message
{

/// @brief Common types and functions for fields of 
///     @ref cc_ublox::message::MgaFlashAck message.
/// @see cc_ublox::message::MgaFlashAckFields
struct MgaFlashAckFieldsCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MgaFlashAckFields::Type field.
    struct TypeCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MgaFlashAckFields::Type field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::MgaFlashAckFields::Type field.
        static const char* name()
        {
            return "type";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MgaFlashAckFields::Version field.
    struct VersionCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MgaFlashAckFields::Version field.
        using ValueType = std::uint8_t;

        /// @brief Name of the @ref cc_ublox::message::MgaFlashAckFields::Version field.
        static const char* name()
        {
            return "version";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MgaFlashAckFields::Ack field.
    struct AckCommon
    {
        /// @brief Values enumerator for
        ///     @ref cc_ublox::message::MgaFlashAckFields::Ack field.
        enum class ValueType : std::uint8_t
        {
            Ack = 0, ///< value @b Ack. 
            NakRetransmit = 1, ///< value @b NakRetransmit. 
            NakGiveUp = 2, ///< value @b NakGiveUp. 

            // --- Extra values generated for convenience ---
            FirstValue = 0, ///< First defined value.
            LastValue = 2, ///< Last defined value.
            ValuesLimit = 3, ///< Upper limit for defined values.
        };

        /// @brief Single value name info entry
        using ValueNameInfo = const char*;

        /// @brief Type returned from @ref valueNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

        /// @brief Name of the @ref cc_ublox::message::MgaFlashAckFields::Ack field.
        static const char* name()
        {
            return "ack";
        }

        /// @brief Retrieve name of the enum value
        static const char* valueName(ValueType val)
        {
            auto namesMapInfo = valueNamesMap();
            if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
                return nullptr;
            }

            return namesMapInfo.first[static_cast<std::size_t>(val)];
        }

        /// @brief Retrieve map of enum value names
        static ValueNamesMapInfo valueNamesMap()
        {
            static const char* Map[] = {
                "Ack",
                "NakRetransmit",
                "NakGiveUp"
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };

    /// @brief Values enumerator for
    ///     @ref cc_ublox::message::MgaFlashAckFields::Ack field.
    using AckVal = AckCommon::ValueType;

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MgaFlashAckFields::Reserved1 field.
    struct Reserved1Common : public cc_ublox::field::Res1Common
    {
        /// @brief Name of the @ref cc_ublox::message::MgaFlashAckFields::Reserved1 field.
        static const char* name()
        {
            return "reserved1";
        }
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::message::MgaFlashAckFields::Sequence field.
    struct SequenceCommon
    {
        /// @brief Re-definition of the value type used by
        ///     cc_ublox::message::MgaFlashAckFields::Sequence field.
        using ValueType = std::uint16_t;

        /// @brief Name of the @ref cc_ublox::message::MgaFlashAckFields::Sequence field.
        static const char* name()
        {
            return "sequence";
        }

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return false;
        }
    };
};

/// @brief Common types and functions of 
///     @ref cc_ublox::message::MgaFlashAck message.
struct MgaFlashAckCommon
{
    /// @brief Name of the @ref cc_ublox::message::MgaFlashAck message.
    static const char* name()
    {
        return "MGA-FLASH-ACK";
    }
};

} // namespace message

} // namespace cc_ublox
