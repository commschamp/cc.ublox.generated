// Generated by commsdsl2comms v6.2.4

/// @file
/// @brief Contains definition of <b>"RXM-SFRBX"</b> message and its fields.

#pragma once

#include <algorithm>
#include <cstdint>
#include <limits>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/GnssId.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/message/RxmSfrbxCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref RxmSfrbx.
/// @tparam TOpt Extra options
/// @see @ref RxmSfrbx
/// @headerfile cc_ublox/message/RxmSfrbx.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct RxmSfrbxFields
{
    /// @brief Definition of <b>"gnssId"</b> field.
    using GnssId =
        cc_ublox::field::GnssId<
            TOpt
        >;

    /// @brief Definition of <b>"svid"</b> field.
    class Svid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::SvidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::SvidCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"freqId"</b> field.
    class FreqId : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValueRange<0, 13>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValueRange<0, 13>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::FreqIdCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::FreqIdCommon::name();
        }
    };

    /// @brief Definition of <b>"numWords"</b> field.
    class NumWords : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::NumWordsCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::NumWordsCommon::name();
        }
    };

    /// @brief Definition of <b>"chn"</b> field.
    /// @details
    ///     Introduced in ublox-9
    class Chn : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::ChnCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::ChnCommon::name();
        }
    };

    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::DefaultNumValue<1>,
            comms::option::def::ValidNumValueRange<1, 2>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::DefaultNumValue<1>,
                comms::option::def::ValidNumValueRange<1, 2>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved3"</b> field.
    class Reserved3 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::Reserved3Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Dwrd field.
    struct DwrdMembers
    {
        /// @brief Definition of <b>"element"</b> field.
        class Element : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::RxmSfrbxFieldsCommon::DwrdMembersCommon::ElementCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::RxmSfrbxFieldsCommon::DwrdMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"dwrd"</b> field.
    class Dwrd : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename DwrdMembers::Element,
            typename TOpt::message::RxmSfrbxFields::Dwrd,
            comms::option::def::SequenceSizeForcingEnabled
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename DwrdMembers::Element,
                typename TOpt::message::RxmSfrbxFields::Dwrd,
                comms::option::def::SequenceSizeForcingEnabled
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmSfrbxFieldsCommon::DwrdCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        GnssId,
        Svid,
        Reserved1,
        FreqId,
        NumWords,
        Chn,
        Version,
        Reserved3,
        Dwrd
    >;
};

/// @brief Definition of <b>"RXM-SFRBX"</b> message class.
/// @details
///     See @ref RxmSfrbxFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/RxmSfrbx.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class RxmSfrbx : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::RxmSfrbx,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_RxmSfrbx>,
        comms::option::def::FieldsImpl<typename RxmSfrbxFields<TOpt>::All>,
        comms::option::def::MsgType<RxmSfrbx<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::RxmSfrbx,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_RxmSfrbx>,
            comms::option::def::FieldsImpl<typename RxmSfrbxFields<TOpt>::All>,
            comms::option::def::MsgType<RxmSfrbx<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_gnssId index, @b Field_gnssId type and @b field_gnssId() access fuction
    ///         for @ref RxmSfrbxFields::GnssId field.
    ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access fuction
    ///         for @ref RxmSfrbxFields::Svid field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref RxmSfrbxFields::Reserved1 field.
    ///     @li @b FieldIdx_freqId index, @b Field_freqId type and @b field_freqId() access fuction
    ///         for @ref RxmSfrbxFields::FreqId field.
    ///     @li @b FieldIdx_numWords index, @b Field_numWords type and @b field_numWords() access fuction
    ///         for @ref RxmSfrbxFields::NumWords field.
    ///     @li @b FieldIdx_chn index, @b Field_chn type and @b field_chn() access fuction
    ///         for @ref RxmSfrbxFields::Chn field.
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref RxmSfrbxFields::Version field.
    ///     @li @b FieldIdx_reserved3 index, @b Field_reserved3 type and @b field_reserved3() access fuction
    ///         for @ref RxmSfrbxFields::Reserved3 field.
    ///     @li @b FieldIdx_dwrd index, @b Field_dwrd type and @b field_dwrd() access fuction
    ///         for @ref RxmSfrbxFields::Dwrd field.
    COMMS_MSG_FIELDS_NAMES(
        gnssId,
        svid,
        reserved1,
        freqId,
        numWords,
        chn,
        version,
        reserved3,
        dwrd
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::RxmSfrbxCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_dwrd>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_dwrd();

            es = Base::template doReadFrom<FieldIdx_dwrd>(iter, len);
        } while (false);

        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_dwrd() || updated;
       return updated;
    }

private:
    void readPrepare_dwrd()
    {
        field_dwrd().forceReadElemCount(
            static_cast<std::size_t>(field_numWords().getValue()));
    }

    bool refresh_dwrd()
    {
        bool updated = false;
        do {
            auto expectedValue = static_cast<std::size_t>(field_numWords().getValue());
            auto realValue = field_dwrd().value().size();
            if (expectedValue == realValue) {
                break;
            }

            using PrefixValueType = typename std::decay<decltype(field_numWords().getValue())>::type;
            static const auto MaxPrefixValue = static_cast<std::size_t>(std::numeric_limits<PrefixValueType>::max());
            auto maxAllowedValue = std::min(MaxPrefixValue, realValue);
            if (maxAllowedValue < realValue) {
                field_dwrd().value().resize(maxAllowedValue);
            }
            field_numWords().setValue(maxAllowedValue);
            updated = true;
        } while (false);

        return updated;
    }
};

} // namespace message

} // namespace cc_ublox
