// Generated by commsdsl2comms v6.3.3

/// @file
/// @brief Contains definition of <b>"RXM-RLM (Long)"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/Res1.h"
#include "cc_ublox/field/Res3.h"
#include "cc_ublox/message/RxmRlmLongCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref RxmRlmLong.
/// @tparam TOpt Extra options
/// @see @ref RxmRlmLong
/// @headerfile cc_ublox/message/RxmRlmLong.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct RxmRlmLongFields
{
    /// @brief Definition of <b>"version"</b> field.
    class Version : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::ValidNumValue<0>
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::ValidNumValue<0>
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::VersionCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::VersionCommon::name();
        }
    };

    /// @brief Definition of <b>"type"</b> field.
    class Type : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            comms::option::def::FailOnInvalid<>,
            comms::option::def::DefaultNumValue<2>,
            comms::option::def::ValidNumValue<2>,
            comms::option::def::HasCustomRefresh
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::FailOnInvalid<>,
                comms::option::def::DefaultNumValue<2>,
                comms::option::def::ValidNumValue<2>,
                comms::option::def::HasCustomRefresh
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::TypeCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::TypeCommon::name();
        }

        /// @brief Generated refresh functionality.
        bool refresh()
        {
            bool updated = Base::refresh();
            if (Base::valid()) {
                return updated;
            };
            Base::setValue(2);
            return true;
        }
    };

    /// @brief Definition of <b>"svid"</b> field.
    class Svid : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::SvidCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::SvidCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved1"</b> field.
    class Reserved1 : public
        cc_ublox::field::Res1<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res1<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::Reserved1Common::name();
        }
    };

    /// @brief Definition of <b>"beacon"</b> field.
    class Beacon : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::RxmRlmLongFields::Beacon,
            comms::option::def::SequenceFixedSize<8U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::RxmRlmLongFields::Beacon,
                comms::option::def::SequenceFixedSize<8U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::BeaconCommon::name();
        }
    };

    /// @brief Definition of <b>"message"</b> field.
    class Message : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::MessageCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::MessageCommon::name();
        }
    };

    /// @brief Definition of <b>"params"</b> field.
    class Params : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::message::RxmRlmLongFields::Params,
            comms::option::def::SequenceFixedSize<12U>
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::message::RxmRlmLongFields::Params,
                comms::option::def::SequenceFixedSize<12U>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::ParamsCommon::name();
        }
    };

    /// @brief Definition of <b>"reserved2"</b> field.
    class Reserved2 : public
        cc_ublox::field::Res3<
            TOpt
        >
    {
        using Base =
            cc_ublox::field::Res3<
                TOpt
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::RxmRlmLongFieldsCommon::Reserved2Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        Version,
        Type,
        Svid,
        Reserved1,
        Beacon,
        Message,
        Params,
        Reserved2
    >;
};

/// @brief Definition of <b>"RXM-RLM (Long)"</b> message class.
/// @details
///     See @ref RxmRlmLongFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/RxmRlmLong.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class RxmRlmLong : public
    comms::MessageBase<
        TMsgBase,
        typename TOpt::message::RxmRlmLong,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_RxmRlm>,
        comms::option::def::FieldsImpl<typename RxmRlmLongFields<TOpt>::All>,
        comms::option::def::MsgType<RxmRlmLong<TMsgBase, TOpt> >,
        comms::option::def::HasName
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            typename TOpt::message::RxmRlmLong,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_RxmRlm>,
            comms::option::def::FieldsImpl<typename RxmRlmLongFields<TOpt>::All>,
            comms::option::def::MsgType<RxmRlmLong<TMsgBase, TOpt> >,
            comms::option::def::HasName
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_version index, @b Field_version type and @b field_version() access fuction
    ///         for @ref RxmRlmLongFields::Version field.
    ///     @li @b FieldIdx_type index, @b Field_type type and @b field_type() access fuction
    ///         for @ref RxmRlmLongFields::Type field.
    ///     @li @b FieldIdx_svid index, @b Field_svid type and @b field_svid() access fuction
    ///         for @ref RxmRlmLongFields::Svid field.
    ///     @li @b FieldIdx_reserved1 index, @b Field_reserved1 type and @b field_reserved1() access fuction
    ///         for @ref RxmRlmLongFields::Reserved1 field.
    ///     @li @b FieldIdx_beacon index, @b Field_beacon type and @b field_beacon() access fuction
    ///         for @ref RxmRlmLongFields::Beacon field.
    ///     @li @b FieldIdx_message index, @b Field_message type and @b field_message() access fuction
    ///         for @ref RxmRlmLongFields::Message field.
    ///     @li @b FieldIdx_params index, @b Field_params type and @b field_params() access fuction
    ///         for @ref RxmRlmLongFields::Params field.
    ///     @li @b FieldIdx_reserved2 index, @b Field_reserved2 type and @b field_reserved2() access fuction
    ///         for @ref RxmRlmLongFields::Reserved2 field.
    COMMS_MSG_FIELDS_NAMES(
        version,
        type,
        svid,
        reserved1,
        beacon,
        message,
        params,
        reserved2
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 28U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 28U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::RxmRlmLongCommon::name();
    }
};

} // namespace message

} // namespace cc_ublox
