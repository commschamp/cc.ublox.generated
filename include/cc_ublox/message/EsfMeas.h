// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains definition of <b>"ESF-MEAS"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "cc_ublox/MsgId.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/message/EsfMeasCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/MessageBase.h"
#include "comms/field/ArrayList.h"
#include "comms/field/Bitfield.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/EnumValue.h"
#include "comms/field/IntValue.h"
#include "comms/field/Optional.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace message
{

/// @brief Fields of @ref EsfMeas.
/// @tparam TOpt Extra options
/// @see @ref EsfMeas
/// @headerfile cc_ublox/message/EsfMeas.h
template <typename TOpt = cc_ublox::options::DefaultOptions>
struct EsfMeasFields
{
    /// @brief Definition of <b>"timeTag"</b> field.
    class TimeTag : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint32_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::EsfMeasFieldsCommon::TimeTagCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::EsfMeasFieldsCommon::TimeTagCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref Flags field.
    struct FlagsMembers
    {
        /// @brief Definition of <b>"timeMarkSent"</b> field.
        /// @see @ref cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::ValueType
        class TimeMarkSent : public
            comms::field::EnumValue<
                cc_ublox::field::FieldBase<>,
                cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::ValueType,
                comms::option::def::FixedBitLength<2U>,
                comms::option::def::ValidNumValueRange<0, 2>
            >
        {
            using Base =
                comms::field::EnumValue<
                    cc_ublox::field::FieldBase<>,
                    cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::ValueType,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValueRange<0, 2>
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Single value name info entry.
            using ValueNameInfo = cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::ValueNameInfo;

            /// @brief Type returned from @ref valueNamesMap() member function.
            /// @see @ref cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::ValueNamesMapInfo.
            using ValueNamesMapInfo = cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::ValueNamesMapInfo;

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::valueName().
            static const char* valueName(ValueType val)
            {
                return cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::valueName(val);
            }

            /// @brief Retrieve name of the enum value.
            /// @see @ref cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::valueName().
            static const char* valueNameOf(ValueType val)
            {
                return cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::valueName(val);
            }

            /// @brief Retrieve name of the @b current value
            const char* valueName() const
            {
                return valueName(Base::getValue());
            }

            /// @brief Retrieve map of enum value names.
            /// @see @ref cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::valueNamesMap().
            static ValueNamesMapInfo valueNamesMap()
            {
                return cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::valueNamesMap();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::TimeMarkSentCommon::name();
            }
        };

        /// @brief Definition of <b>""</b> field.
        class Bits : public
            comms::field::BitmaskValue<
                cc_ublox::field::FieldBase<>,
                comms::option::def::FixedBitLength<14U>,
                comms::option::def::BitmaskReservedBits<0x3FFCU, 0x0U>
            >
        {
            using Base =
                comms::field::BitmaskValue<
                    cc_ublox::field::FieldBase<>,
                    comms::option::def::FixedBitLength<14U>,
                    comms::option::def::BitmaskReservedBits<0x3FFCU, 0x0U>
                >;
        public:
            /// @brief Provides names and generates access functions for internal bits.
            /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
            ///     related to @b comms::field::BitmaskValue class from COMMS library
            ///     for details.
            ///
            ///      The generated enum values and functions are:
            ///      @li @b BitIdx_timeMarkEdge, @b getBitValue_timeMarkEdge() and @b setBitValue_timeMarkEdge().
            ///      @li @b BitIdx_calibTtagValid, @b getBitValue_calibTtagValid() and @b setBitValue_calibTtagValid().
            COMMS_BITMASK_BITS_SEQ(
                timeMarkEdge,
                calibTtagValid
            );

            /// @brief Retrieve name of the bit.
            /// @see @ref cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::BitsCommon::bitName().
            static const char* bitName(BitIdx idx)
            {
                return
                    cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::BitsCommon::bitName(
                        static_cast<std::size_t>(idx));
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::EsfMeasFieldsCommon::FlagsMembersCommon::BitsCommon::name();
            }
        };

        /// @brief All members bundled in @b std::tuple.
        using All =
            std::tuple<
               TimeMarkSent,
               Bits
            >;
    };

    /// @brief Definition of <b>"flags"</b> field.
    class Flags : public
        comms::field::Bitfield<
            cc_ublox::field::FieldBase<>,
            typename FlagsMembers::All
        >
    {
        using Base =
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename FlagsMembers::All
            >;
    public:
        /// @brief Allow access to internal fields.
        /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
        ///     related to @b comms::field::Bitfield class from COMMS library
        ///     for details.
        ///
        ///     The generated values, types and access functions are:
        ///     @li @b FieldIdx_timeMarkSent index, @b Field_timeMarkSent type and @b field_timeMarkSent() access function -
        ///         for cc_ublox::message::EsfMeasFields::FlagsMembers::TimeMarkSent member field.
        ///     @li @b FieldIdx_bits index, @b Field_bits type and @b field_bits() access function -
        ///         for cc_ublox::message::EsfMeasFields::FlagsMembers::Bits member field.
        COMMS_FIELD_MEMBERS_NAMES(
            timeMarkSent,
            bits
        );

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::EsfMeasFieldsCommon::FlagsCommon::name();
        }
    };

    /// @brief Definition of <b>"id"</b> field.
    class Id : public
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint16_t
        >
    {
        using Base =
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint16_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return cc_ublox::message::EsfMeasFieldsCommon::IdCommon::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::EsfMeasFieldsCommon::IdCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref List field.
    struct ListMembers
    {
        /// @brief Scope for all the member fields of
        ///     @ref Element field.
        struct ElementMembers
        {
            /// @brief Definition of <b>"dataField"</b> field.
            class DataField : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::FixedBitLength<24U>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint32_t,
                        comms::option::def::FixedBitLength<24U>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::EsfMeasFieldsCommon::ListMembersCommon::ElementMembersCommon::DataFieldCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::EsfMeasFieldsCommon::ListMembersCommon::ElementMembersCommon::DataFieldCommon::name();
                }
            };

            /// @brief Definition of <b>"dataType"</b> field.
            class DataType : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<6U>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FixedBitLength<6U>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::EsfMeasFieldsCommon::ListMembersCommon::ElementMembersCommon::DataTypeCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::EsfMeasFieldsCommon::ListMembersCommon::ElementMembersCommon::DataTypeCommon::name();
                }
            };

            /// @brief Definition of <b>"reserved"</b> field.
            /// @details
            ///     Reserved field with 1 byte length
            class Reserved : public
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::FixedBitLength<2U>,
                    comms::option::def::ValidNumValue<0>
                >
            {
                using Base =
                    comms::field::IntValue<
                        cc_ublox::field::FieldBase<>,
                        std::uint8_t,
                        comms::option::def::FixedBitLength<2U>,
                        comms::option::def::ValidNumValue<0>
                    >;
            public:
                /// @brief Re-definition of the value type.
                using ValueType = typename Base::ValueType;

                /// @brief Compile time detection of special values presence.
                static constexpr bool hasSpecials()
                {
                    return cc_ublox::message::EsfMeasFieldsCommon::ListMembersCommon::ElementMembersCommon::ReservedCommon::hasSpecials();
                }

                /// @brief Name of the field.
                static const char* name()
                {
                    return cc_ublox::message::EsfMeasFieldsCommon::ListMembersCommon::ElementMembersCommon::ReservedCommon::name();
                }
            };

            /// @brief All members bundled in @b std::tuple.
            using All =
                std::tuple<
                   DataField,
                   DataType,
                   Reserved
                >;
        };

        /// @brief Definition of <b>""</b> field.
        class Element : public
            comms::field::Bitfield<
                cc_ublox::field::FieldBase<>,
                typename ElementMembers::All
            >
        {
            using Base =
                comms::field::Bitfield<
                    cc_ublox::field::FieldBase<>,
                    typename ElementMembers::All
                >;
        public:
            /// @brief Allow access to internal fields.
            /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
            ///     related to @b comms::field::Bitfield class from COMMS library
            ///     for details.
            ///
            ///     The generated values, types and access functions are:
            ///     @li @b FieldIdx_dataField index, @b Field_dataField type and @b field_dataField() access function -
            ///         for cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::DataField member field.
            ///     @li @b FieldIdx_dataType index, @b Field_dataType type and @b field_dataType() access function -
            ///         for cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::DataType member field.
            ///     @li @b FieldIdx_reserved index, @b Field_reserved type and @b field_reserved() access function -
            ///         for cc_ublox::message::EsfMeasFields::ListMembers::ElementMembers::Reserved member field.
            COMMS_FIELD_MEMBERS_NAMES(
                dataField,
                dataType,
                reserved
            );

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::EsfMeasFieldsCommon::ListMembersCommon::ElementCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"list"</b> field.
    class List : public
        comms::field::ArrayList<
            cc_ublox::field::FieldBase<>,
            typename ListMembers::Element,
            typename TOpt::message::EsfMeasFields::List
        >
    {
        using Base =
            comms::field::ArrayList<
                cc_ublox::field::FieldBase<>,
                typename ListMembers::Element,
                typename TOpt::message::EsfMeasFields::List
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::EsfMeasFieldsCommon::ListCommon::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref CalibTtag field.
    struct CalibTtagMembers
    {
        /// @brief Definition of <b>"calibTtag"</b> field.
        class CalibTtag : public
            comms::field::IntValue<
                cc_ublox::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::UnitsMilliseconds
            >
        {
            using Base =
                comms::field::IntValue<
                    cc_ublox::field::FieldBase<>,
                    std::uint32_t,
                    comms::option::def::UnitsMilliseconds
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return cc_ublox::message::EsfMeasFieldsCommon::CalibTtagMembersCommon::CalibTtagCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return cc_ublox::message::EsfMeasFieldsCommon::CalibTtagMembersCommon::CalibTtagCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"calibTtag"</b> field.
    class CalibTtag : public
        comms::field::Optional<
            typename CalibTtagMembers::CalibTtag
        >
    {
        using Base =
            comms::field::Optional<
                typename CalibTtagMembers::CalibTtag
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return cc_ublox::message::EsfMeasFieldsCommon::CalibTtagCommon::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        TimeTag,
        Flags,
        Id,
        List,
        CalibTtag
    >;
};

/// @brief Definition of <b>"ESF-MEAS"</b> message class.
/// @details
///     See @ref EsfMeasFields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile cc_ublox/message/EsfMeas.h
template <typename TMsgBase, typename TOpt = cc_ublox::options::DefaultOptions>
class EsfMeas : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_EsfMeas>,
        comms::option::def::FieldsImpl<typename EsfMeasFields<TOpt>::All>,
        comms::option::def::MsgType<EsfMeas<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<cc_ublox::MsgId_EsfMeas>,
            comms::option::def::FieldsImpl<typename EsfMeasFields<TOpt>::All>,
            comms::option::def::MsgType<EsfMeas<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_timeTag index, @b Field_timeTag type and @b field_timeTag() access fuction
    ///         for @ref EsfMeasFields::TimeTag field.
    ///     @li @b FieldIdx_flags index, @b Field_flags type and @b field_flags() access fuction
    ///         for @ref EsfMeasFields::Flags field.
    ///     @li @b FieldIdx_id index, @b Field_id type and @b field_id() access fuction
    ///         for @ref EsfMeasFields::Id field.
    ///     @li @b FieldIdx_list index, @b Field_list type and @b field_list() access fuction
    ///         for @ref EsfMeasFields::List field.
    ///     @li @b FieldIdx_calibTtag index, @b Field_calibTtag type and @b field_calibTtag() access fuction
    ///         for @ref EsfMeasFields::CalibTtag field.
    COMMS_MSG_FIELDS_NAMES(
        timeTag,
        flags,
        id,
        list,
        calibTtag
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static_assert(MsgMinLen == 8U, "Unexpected min serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return cc_ublox::message::EsfMeasCommon::name();
    }

    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_calibTtag>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }

            readPrepare_calibTtag();

            es = Base::template doReadFrom<FieldIdx_calibTtag>(iter, len);
        } while (false);
        return es;
    }

    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_calibTtag() || updated;
       return updated;
    }

private:
    void readPrepare_calibTtag()
    {
        refresh_calibTtag();
    }

    bool refresh_calibTtag()
    {
        auto mode = comms::field::OptionalMode::Missing;
        if (field_flags().field_bits().getBitValue_calibTtagValid()) {
            mode = comms::field::OptionalMode::Exists;
        }

        if (field_calibTtag().getMode() == mode) {
            return false;
        }

        field_calibTtag().setMode(mode);
        return true;
    }
};

} // namespace message

} // namespace cc_ublox
