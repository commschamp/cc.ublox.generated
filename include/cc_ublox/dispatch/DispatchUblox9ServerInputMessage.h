// Generated by commsdsl2comms v6.2.1

/// @file
/// @brief Contains dispatch to handling function(s) for ublox9 platform server input input messages.

#pragma once

#include "cc_ublox/MsgId.h"
#include "cc_ublox/input/Ublox9ServerInputMessages.h"
#include "cc_ublox/options/DefaultOptions.h"

namespace cc_ublox
{

namespace dispatch
{

/// @brief Dispatch message object to its appropriate handling function.
/// @details @b switch statement based (on message ID) cast and dispatch functionality.
/// @tparam TProtOptions Protocol options struct used for the application,
///     like @ref cc_ublox::options::DefaultOptions.
/// @param[in] id Numeric message ID.
/// @param[in] idx Index of the message among messages with the same ID.
/// @param[in] msg Message object held by reference to its interface class.
/// @param[in] handler Reference to handling object. Must define
///     @b handle() member function for every message type it exects
///     to handle and one for the interface class as well.
///     @code
///     using MyInterface = cc_ublox::Message<...>;
///     using MyNavPosecefPoll = cc_ublox::message::NavPosecefPoll<MyInterface, cc_ublox::options::DefaultOptions>;
///     using MyNavPosllhPoll = cc_ublox::message::NavPosllhPoll<MyInterface, cc_ublox::options::DefaultOptions>;
///     struct MyHandler {
///         void handle(MyNavPosecefPoll& msg) {...}
///         void handle(MyNavPosllhPoll& msg) {...}
///         ...
///         // Handle all unexpected or irrelevant messages.
///         void handle(MyInterface& msg) {...}
///     };
///     @endcode
///     Every @b handle() function may return a value, but every
///     function must return the @b same type.
/// @note Defined in cc_ublox/dispatch/DispatchUblox9ServerInputMessage.h
template<typename TProtOptions, typename TMsg, typename THandler>
auto dispatchUblox9ServerInputMessage(
    cc_ublox::MsgId id,
    std::size_t idx,
    TMsg& msg,
    THandler& handler) -> decltype(handler.handle(msg))
{
    using InterfaceType = typename std::decay<decltype(msg)>::type;
    switch(id) {
    case cc_ublox::MsgId_NavPosecef:
    {
        using MsgType = cc_ublox::message::NavPosecefPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavPosllh:
    {
        using MsgType = cc_ublox::message::NavPosllhPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavStatus:
    {
        using MsgType = cc_ublox::message::NavStatusPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavDop:
    {
        using MsgType = cc_ublox::message::NavDopPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavPvt:
    {
        using MsgType = cc_ublox::message::NavPvtPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavOdo:
    {
        using MsgType = cc_ublox::message::NavOdoPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavResetodo:
    {
        using MsgType = cc_ublox::message::NavResetodo<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavVelecef:
    {
        using MsgType = cc_ublox::message::NavVelecefPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavVelned:
    {
        using MsgType = cc_ublox::message::NavVelnedPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavHpposecef:
    {
        using MsgType = cc_ublox::message::NavHpposecefPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavHpposllh:
    {
        using MsgType = cc_ublox::message::NavHpposllhPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavTimeutc:
    {
        using MsgType = cc_ublox::message::NavTimeutcPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavClock:
    {
        using MsgType = cc_ublox::message::NavClockPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavTimeglo:
    {
        using MsgType = cc_ublox::message::NavTimegloPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavTimebds:
    {
        using MsgType = cc_ublox::message::NavTimebdsPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavTimegal:
    {
        using MsgType = cc_ublox::message::NavTimegalPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavTimels:
    {
        using MsgType = cc_ublox::message::NavTimelsPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavSbas:
    {
        using MsgType = cc_ublox::message::NavSbasPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavOrb:
    {
        using MsgType = cc_ublox::message::NavOrbPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavSat:
    {
        using MsgType = cc_ublox::message::NavSatPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavGeofence:
    {
        using MsgType = cc_ublox::message::NavGeofencePoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavSvin:
    {
        using MsgType = cc_ublox::message::NavSvinPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavRelposned:
    {
        using MsgType = cc_ublox::message::NavRelposnedPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavSlas:
    {
        using MsgType = cc_ublox::message::NavSlasPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavSig:
    {
        using MsgType = cc_ublox::message::NavSigPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavAopstatus:
    {
        using MsgType = cc_ublox::message::NavAopstatusPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_RxmRawx:
    {
        using MsgType = cc_ublox::message::RxmRawxPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_RxmPmreq:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::RxmPmreqV0<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::RxmPmreq<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgPrt:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgPrtDdc<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgPrtUart<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::CfgPrtUsb<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 3U:
        {
            using MsgType = cc_ublox::message::CfgPrtSpi<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 4U:
        {
            using MsgType = cc_ublox::message::CfgPrtPortPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 5U:
        {
            using MsgType = cc_ublox::message::CfgPrtPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgMsg:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgMsg<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgMsgCurrent<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::CfgMsgPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgInf:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgInf<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgInfPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgRst:
    {
        using MsgType = cc_ublox::message::CfgRst<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgDat:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgDatUser<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgDatPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgRate:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgRate<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgRatePoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgCfg:
    {
        using MsgType = cc_ublox::message::CfgCfg<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgAnt:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgAnt<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgAntPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgSbas:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgSbas<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgSbasPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgNmea:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgNmeaV1<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgNmeaPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgUsb:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgUsb<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgUsbPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgOdo:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgOdo<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgOdoPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgNavx5:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgNavx5V2<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgNavx5Poll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgNav5:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgNav5<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgNav5Poll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgTp5:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgTp5<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgTp5PollSelect<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::CfgTp5Poll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgRinv:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgRinv<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgRinvPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgItfm:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgItfm<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgItfmPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgGnss:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgGnss<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgGnssPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgLogfilter:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgLogfilter<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgLogfilterPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgPwr:
    {
        using MsgType = cc_ublox::message::CfgPwr<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgGeofence:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgGeofence<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgGeofencePoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgDgnss:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgDgnss<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgDgnssPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgTmode3:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgTmode3<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgTmode3Poll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgValset:
    {
        using MsgType = cc_ublox::message::CfgValset<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgValget:
    {
        using MsgType = cc_ublox::message::CfgValgetPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgValdel:
    {
        using MsgType = cc_ublox::message::CfgValdel<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_UpdSos:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::UpdSosClear<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::UpdSosCreate<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::UpdSosPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_MonIo:
    {
        using MsgType = cc_ublox::message::MonIoPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonVer:
    {
        using MsgType = cc_ublox::message::MonVerPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonMsgpp:
    {
        using MsgType = cc_ublox::message::MonMsgppPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonRxbuf:
    {
        using MsgType = cc_ublox::message::MonRxbufPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonTxbuf:
    {
        using MsgType = cc_ublox::message::MonTxbufPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonHw:
    {
        using MsgType = cc_ublox::message::MonHwPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonHw2:
    {
        using MsgType = cc_ublox::message::MonHw2Poll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonPatch:
    {
        using MsgType = cc_ublox::message::MonPatchPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonGnss:
    {
        using MsgType = cc_ublox::message::MonGnssPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonSpan:
    {
        using MsgType = cc_ublox::message::MonSpanPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonComms:
    {
        using MsgType = cc_ublox::message::MonCommsPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonHw3:
    {
        using MsgType = cc_ublox::message::MonHw3Poll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonRf:
    {
        using MsgType = cc_ublox::message::MonRfPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_TimTp:
    {
        using MsgType = cc_ublox::message::TimTpPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_TimTm2:
    {
        using MsgType = cc_ublox::message::TimTm2Poll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_TimVrfy:
    {
        using MsgType = cc_ublox::message::TimVrfyPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MgaGps:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::MgaGpsEph<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::MgaGpsAlm<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::MgaGpsHealth<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 3U:
        {
            using MsgType = cc_ublox::message::MgaGpsUtc<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 4U:
        {
            using MsgType = cc_ublox::message::MgaGpsIono<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_MgaGal:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::MgaGalEph<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::MgaGalAlm<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::MgaGalTimeoffset<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 3U:
        {
            using MsgType = cc_ublox::message::MgaGalUtc<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_MgaBds:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::MgaBdsEph<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::MgaBdsAlm<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::MgaBdsHealth<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 3U:
        {
            using MsgType = cc_ublox::message::MgaBdsUtc<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 4U:
        {
            using MsgType = cc_ublox::message::MgaBdsIono<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_MgaQzss:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::MgaQzssEph<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::MgaQzssAlm<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::MgaQzssHealth<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_MgaGlo:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::MgaGloEph<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::MgaGloAlm<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::MgaGloTimeoffset<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_MgaAno:
    {
        using MsgType = cc_ublox::message::MgaAno<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MgaIni:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::MgaIniPosXyz<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::MgaIniPosLlh<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::MgaIniTimeUtc<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 3U:
        {
            using MsgType = cc_ublox::message::MgaIniTimeGnss<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 4U:
        {
            using MsgType = cc_ublox::message::MgaIniClkd<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 5U:
        {
            using MsgType = cc_ublox::message::MgaIniFreq<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 6U:
        {
            using MsgType = cc_ublox::message::MgaIniEop<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_MgaDbd:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::MgaDbd<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::MgaDbdPoll<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_LogErase:
    {
        using MsgType = cc_ublox::message::LogErase<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_LogString:
    {
        using MsgType = cc_ublox::message::LogString<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_LogCreate:
    {
        using MsgType = cc_ublox::message::LogCreate<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_LogInfo:
    {
        using MsgType = cc_ublox::message::LogInfoPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_LogRetrieve:
    {
        using MsgType = cc_ublox::message::LogRetrieve<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_LogFindtime:
    {
        using MsgType = cc_ublox::message::LogFindtime<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_LogRetrievebatch:
    {
        using MsgType = cc_ublox::message::LogRetrievebatch<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_SecUniqid:
    {
        using MsgType = cc_ublox::message::SecUniqidPoll<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    default:
        break;
    };

    return handler.handle(msg);
}

/// @brief Dispatch message object to its appropriate handling function.
/// @details Same as other dispatchUblox9ServerInputMessage(), but without @b idx parameter.
/// @tparam TProtOptions Protocol options struct used for the application,
///     like @ref cc_ublox::options::DefaultOptions.
/// @param[in] id Numeric message ID.
/// @param[in] msg Message object held by reference to its interface class.
/// @param[in] handler Reference to handling object.
/// @see dispatchUblox9ServerInputMessage()
/// @note Defined in cc_ublox/dispatch/DispatchUblox9ServerInputMessage.h
template<typename TProtOptions, typename TMsg, typename THandler>
auto dispatchUblox9ServerInputMessage(
    cc_ublox::MsgId id,
    TMsg& msg,
    THandler& handler) -> decltype(handler.handle(msg))
{
    return dispatchUblox9ServerInputMessage<TProtOptions>(id, 0U, msg, handler);
}

/// @brief Dispatch message object to its appropriate handling function.
/// @details Same as other dispatchUblox9ServerInputMessage(), but passing
///     cc_ublox::options::DefaultOptions as first template parameter.
/// @param[in] id Numeric message ID.
/// @param[in] idx Index of the message among messages with the same ID.
/// @param[in] msg Message object held by reference to its interface class.
/// @param[in] handler Reference to handling object.
/// @see dispatchUblox9ServerInputMessage()
/// @note Defined in cc_ublox/dispatch/DispatchUblox9ServerInputMessage.h
template<typename TMsg, typename THandler>
auto dispatchUblox9ServerInputMessageDefaultOptions(
    cc_ublox::MsgId id,
    std::size_t idx,
    TMsg& msg,
    THandler& handler) -> decltype(handler.handle(msg))
{
    return dispatchUblox9ServerInputMessage<cc_ublox::options::DefaultOptions>(id, idx, msg, handler);
}

/// @brief Dispatch message object to its appropriate handling function.
/// @details Same as other dispatchUblox9ServerInputMessageDefaultOptions(), 
///     but without @b idx parameter.
/// @param[in] id Numeric message ID.
/// @param[in] msg Message object held by reference to its interface class.
/// @param[in] handler Reference to handling object.
/// @see dispatchUblox9ServerInputMessageDefaultOptions()
/// @note Defined in cc_ublox/dispatch/DispatchUblox9ServerInputMessage.h
template<typename TMsg, typename THandler>
auto dispatchUblox9ServerInputMessageDefaultOptions(
    cc_ublox::MsgId id,
    TMsg& msg,
    THandler& handler) -> decltype(handler.handle(msg))
{
    return dispatchUblox9ServerInputMessage<cc_ublox::options::DefaultOptions>(id, msg, handler);
}

/// @brief Message dispatcher class to be used with
///     @b comms::processAllWithDispatchViaDispatcher() function (or similar).
/// @tparam TProtOptions Protocol options struct used for the application,
///     like @ref cc_ublox::options::DefaultOptions.
/// @headerfile cc_ublox/dispatch/DispatchUblox9ServerInputMessage.h
template <typename TProtOptions = cc_ublox::options::DefaultOptions>
struct Ublox9ServerInputMsgDispatcher
{
    /// @brief Class detection tag
    using MsgDispatcherTag = void;

    /// @brief Dispatch message to its handler.
    /// @details Uses appropriate @ref dispatchUblox9ServerInputMessage() function.
    /// @param[in] id ID of the message.
    /// @param[in] idx Index (or offset) of the message among those having the same numeric ID.
    /// @param[in] msg Reference to message object.
    /// @param[in] handler Reference to handler object.
    /// @return What the @ref dispatchUblox9ServerInputMessage() function returns.
    template <typename TMsg, typename THandler>
    static auto dispatch(cc_ublox::MsgId id, std::size_t idx, TMsg& msg, THandler& handler) ->
        decltype(cc_ublox::dispatch::dispatchUblox9ServerInputMessage<TProtOptions>(id, idx, msg, handler))
    {
        return cc_ublox::dispatch::dispatchUblox9ServerInputMessage<TProtOptions>(id, idx, msg, handler);
    }

    /// @brief Complementary dispatch function.
    /// @details Same as other dispatch without @b TAllMessages template parameter,
    ///     used by  @b comms::processAllWithDispatchViaDispatcher().
    template <typename TAllMessages, typename TMsg, typename THandler>
    static auto dispatch(cc_ublox::MsgId id, std::size_t idx, TMsg& msg, THandler& handler) ->
        decltype(dispatch(id, idx, msg, handler))
    {
        return dispatch(id, idx, msg, handler);
    }

    /// @brief Dispatch message to its handler.
    /// @details Uses appropriate @ref dispatchUblox9ServerInputMessage() function.
    /// @param[in] id ID of the message.
    /// @param[in] msg Reference to message object.
    /// @param[in] handler Reference to handler object.
    /// @return What the @ref dispatchUblox9ServerInputMessage() function returns.
    template <typename TMsg, typename THandler>
    static auto dispatch(cc_ublox::MsgId id, TMsg& msg, THandler& handler) ->
        decltype(cc_ublox::dispatch::dispatchUblox9ServerInputMessage<TProtOptions>(id, msg, handler))
    {
        return cc_ublox::dispatch::dispatchUblox9ServerInputMessage<TProtOptions>(id, msg, handler);
    }

    /// @brief Complementary dispatch function.
    /// @details Same as other dispatch without @b TAllMessages template parameter,
    ///     used by  @b comms::processAllWithDispatchViaDispatcher().
    template <typename TAllMessages, typename TMsg, typename THandler>
    static auto dispatch(cc_ublox::MsgId id, TMsg& msg, THandler& handler) ->
        decltype(dispatch(id, msg, handler))
    {
        return dispatch(id, msg, handler);
    }
};

/// @brief Message dispatcher class to be used with
///     @b comms::processAllWithDispatchViaDispatcher() function (or similar).
/// @details Same as Ublox9ServerInputMsgDispatcher, but passing
///     @ref cc_ublox::options::DefaultOptions as template parameter.
/// @note Defined in cc_ublox/dispatch/DispatchUblox9ServerInputMessage.h
using Ublox9ServerInputMsgDispatcherDefaultOptions =
    Ublox9ServerInputMsgDispatcher<>;

} // namespace dispatch

} // namespace cc_ublox
