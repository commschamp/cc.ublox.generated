// Generated by commsdsl2comms v6.3.3

/// @file
/// @brief Contains dispatch to handling function(s) for ublox5 platform client input input messages.

#pragma once

#include "cc_ublox/MsgId.h"
#include "cc_ublox/input/Ublox5ClientInputMessages.h"
#include "cc_ublox/options/DefaultOptions.h"

namespace cc_ublox
{

namespace dispatch
{

/// @brief Dispatch message object to its appropriate handling function.
/// @details @b switch statement based (on message ID) cast and dispatch functionality.
/// @tparam TProtOptions Protocol options struct used for the application,
///     like @ref cc_ublox::options::DefaultOptions.
/// @param[in] id Numeric message ID.
/// @param[in] idx Index of the message among messages with the same ID.
/// @param[in] msg Message object held by reference to its interface class.
/// @param[in] handler Reference to handling object. Must define
///     @b handle() member function for every message type it exects
///     to handle and one for the interface class as well.
///     @code
///     using MyInterface = cc_ublox::Message<...>;
///     using MyNavPosecef = cc_ublox::message::NavPosecef<MyInterface, cc_ublox::options::DefaultOptions>;
///     using MyNavPosllh = cc_ublox::message::NavPosllh<MyInterface, cc_ublox::options::DefaultOptions>;
///     struct MyHandler {
///         void handle(MyNavPosecef& msg) {...}
///         void handle(MyNavPosllh& msg) {...}
///         ...
///         // Handle all unexpected or irrelevant messages.
///         void handle(MyInterface& msg) {...}
///     };
///     @endcode
///     Every @b handle() function may return a value, but every
///     function must return the @b same type.
/// @note Defined in cc_ublox/dispatch/DispatchUblox5ClientInputMessage.h
template<typename TProtOptions, typename TMsg, typename THandler>
auto dispatchUblox5ClientInputMessage(
    cc_ublox::MsgId id,
    std::size_t idx,
    TMsg& msg,
    THandler& handler) -> decltype(handler.handle(msg))
{
    using InterfaceType = typename std::decay<decltype(msg)>::type;
    switch(id) {
    case cc_ublox::MsgId_NavPosecef:
    {
        using MsgType = cc_ublox::message::NavPosecef<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavPosllh:
    {
        using MsgType = cc_ublox::message::NavPosllh<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavStatus:
    {
        using MsgType = cc_ublox::message::NavStatus<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavDop:
    {
        using MsgType = cc_ublox::message::NavDop<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavSol:
    {
        using MsgType = cc_ublox::message::NavSol<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavVelecef:
    {
        using MsgType = cc_ublox::message::NavVelecef<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavVelned:
    {
        using MsgType = cc_ublox::message::NavVelned<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavTimegps:
    {
        using MsgType = cc_ublox::message::NavTimegps<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavTimeutc:
    {
        using MsgType = cc_ublox::message::NavTimeutc<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavClock:
    {
        using MsgType = cc_ublox::message::NavClock<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavSvinfo:
    {
        using MsgType = cc_ublox::message::NavSvinfo<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_NavSbas:
    {
        using MsgType = cc_ublox::message::NavSbas<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_RxmSvsi:
    {
        using MsgType = cc_ublox::message::RxmSvsi<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_InfError:
    {
        using MsgType = cc_ublox::message::InfError<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_InfWarning:
    {
        using MsgType = cc_ublox::message::InfWarning<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_InfNotice:
    {
        using MsgType = cc_ublox::message::InfNotice<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_InfTest:
    {
        using MsgType = cc_ublox::message::InfTest<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_InfDebug:
    {
        using MsgType = cc_ublox::message::InfDebug<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_AckNak:
    {
        using MsgType = cc_ublox::message::AckNak<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_AckAck:
    {
        using MsgType = cc_ublox::message::AckAck<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgPrt:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgPrtDdc<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgPrtUart<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 2U:
        {
            using MsgType = cc_ublox::message::CfgPrtUsb<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 3U:
        {
            using MsgType = cc_ublox::message::CfgPrtSpi<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgMsg:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::CfgMsg<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::CfgMsgCurrent<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_CfgInf:
    {
        using MsgType = cc_ublox::message::CfgInf<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgDat:
    {
        using MsgType = cc_ublox::message::CfgDat<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgTp:
    {
        using MsgType = cc_ublox::message::CfgTp<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgRate:
    {
        using MsgType = cc_ublox::message::CfgRate<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgRxm:
    {
        using MsgType = cc_ublox::message::CfgRxm<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgAnt:
    {
        using MsgType = cc_ublox::message::CfgAnt<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgSbas:
    {
        using MsgType = cc_ublox::message::CfgSbas<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgNmea:
    {
        using MsgType = cc_ublox::message::CfgNmea<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgUsb:
    {
        using MsgType = cc_ublox::message::CfgUsb<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgTmode:
    {
        using MsgType = cc_ublox::message::CfgTmode<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgNavx5:
    {
        using MsgType = cc_ublox::message::CfgNavx5<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_CfgNav5:
    {
        using MsgType = cc_ublox::message::CfgNav5<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonIo:
    {
        using MsgType = cc_ublox::message::MonIo<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonVer:
    {
        using MsgType = cc_ublox::message::MonVer<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonMsgpp:
    {
        using MsgType = cc_ublox::message::MonMsgpp<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonRxbuf:
    {
        using MsgType = cc_ublox::message::MonRxbuf<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonTxbuf:
    {
        using MsgType = cc_ublox::message::MonTxbuf<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_MonHw:
    {
        using MsgType = cc_ublox::message::MonHw<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_AidIni:
    {
        using MsgType = cc_ublox::message::AidIni<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_AidHui:
    {
        using MsgType = cc_ublox::message::AidHui<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_AidAlm:
    {
        using MsgType = cc_ublox::message::AidAlm<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_AidEph:
    {
        using MsgType = cc_ublox::message::AidEph<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_AidAlpsrv:
    {
        switch (idx) {
        case 0U:
        {
            using MsgType = cc_ublox::message::AidAlpsrv<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        case 1U:
        {
            using MsgType = cc_ublox::message::AidAlpsrvToServer<InterfaceType, TProtOptions>;
            return handler.handle(static_cast<MsgType&>(msg));
        }
        default:
            return handler.handle(msg);
        };
        break;
    }
    case cc_ublox::MsgId_AidAlp:
    {
        using MsgType = cc_ublox::message::AidAlpStatus<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_TimTp:
    {
        using MsgType = cc_ublox::message::TimTp<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_TimTm2:
    {
        using MsgType = cc_ublox::message::TimTm2<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    case cc_ublox::MsgId_TimSvin:
    {
        using MsgType = cc_ublox::message::TimSvin<InterfaceType, TProtOptions>;
        return handler.handle(static_cast<MsgType&>(msg));
    }
    default:
        break;
    };

    return handler.handle(msg);
}

/// @brief Dispatch message object to its appropriate handling function.
/// @details Same as other dispatchUblox5ClientInputMessage(), but without @b idx parameter.
/// @tparam TProtOptions Protocol options struct used for the application,
///     like @ref cc_ublox::options::DefaultOptions.
/// @param[in] id Numeric message ID.
/// @param[in] msg Message object held by reference to its interface class.
/// @param[in] handler Reference to handling object.
/// @see dispatchUblox5ClientInputMessage()
/// @note Defined in cc_ublox/dispatch/DispatchUblox5ClientInputMessage.h
template<typename TProtOptions, typename TMsg, typename THandler>
auto dispatchUblox5ClientInputMessage(
    cc_ublox::MsgId id,
    TMsg& msg,
    THandler& handler) -> decltype(handler.handle(msg))
{
    return dispatchUblox5ClientInputMessage<TProtOptions>(id, 0U, msg, handler);
}

/// @brief Dispatch message object to its appropriate handling function.
/// @details Same as other dispatchUblox5ClientInputMessage(), but passing
///     cc_ublox::options::DefaultOptions as first template parameter.
/// @param[in] id Numeric message ID.
/// @param[in] idx Index of the message among messages with the same ID.
/// @param[in] msg Message object held by reference to its interface class.
/// @param[in] handler Reference to handling object.
/// @see dispatchUblox5ClientInputMessage()
/// @note Defined in cc_ublox/dispatch/DispatchUblox5ClientInputMessage.h
template<typename TMsg, typename THandler>
auto dispatchUblox5ClientInputMessageDefaultOptions(
    cc_ublox::MsgId id,
    std::size_t idx,
    TMsg& msg,
    THandler& handler) -> decltype(handler.handle(msg))
{
    return dispatchUblox5ClientInputMessage<cc_ublox::options::DefaultOptions>(id, idx, msg, handler);
}

/// @brief Dispatch message object to its appropriate handling function.
/// @details Same as other dispatchUblox5ClientInputMessageDefaultOptions(), 
///     but without @b idx parameter.
/// @param[in] id Numeric message ID.
/// @param[in] msg Message object held by reference to its interface class.
/// @param[in] handler Reference to handling object.
/// @see dispatchUblox5ClientInputMessageDefaultOptions()
/// @note Defined in cc_ublox/dispatch/DispatchUblox5ClientInputMessage.h
template<typename TMsg, typename THandler>
auto dispatchUblox5ClientInputMessageDefaultOptions(
    cc_ublox::MsgId id,
    TMsg& msg,
    THandler& handler) -> decltype(handler.handle(msg))
{
    return dispatchUblox5ClientInputMessage<cc_ublox::options::DefaultOptions>(id, msg, handler);
}

/// @brief Message dispatcher class to be used with
///     @b comms::processAllWithDispatchViaDispatcher() function (or similar).
/// @tparam TProtOptions Protocol options struct used for the application,
///     like @ref cc_ublox::options::DefaultOptions.
/// @headerfile cc_ublox/dispatch/DispatchUblox5ClientInputMessage.h
template <typename TProtOptions = cc_ublox::options::DefaultOptions>
struct Ublox5ClientInputMsgDispatcher
{
    /// @brief Class detection tag
    using MsgDispatcherTag = void;

    /// @brief Dispatch message to its handler.
    /// @details Uses appropriate @ref dispatchUblox5ClientInputMessage() function.
    /// @param[in] id ID of the message.
    /// @param[in] idx Index (or offset) of the message among those having the same numeric ID.
    /// @param[in] msg Reference to message object.
    /// @param[in] handler Reference to handler object.
    /// @return What the @ref dispatchUblox5ClientInputMessage() function returns.
    template <typename TMsg, typename THandler>
    static auto dispatch(cc_ublox::MsgId id, std::size_t idx, TMsg& msg, THandler& handler) ->
        decltype(cc_ublox::dispatch::dispatchUblox5ClientInputMessage<TProtOptions>(id, idx, msg, handler))
    {
        return cc_ublox::dispatch::dispatchUblox5ClientInputMessage<TProtOptions>(id, idx, msg, handler);
    }

    /// @brief Complementary dispatch function.
    /// @details Same as other dispatch without @b TAllMessages template parameter,
    ///     used by  @b comms::processAllWithDispatchViaDispatcher().
    template <typename TAllMessages, typename TMsg, typename THandler>
    static auto dispatch(cc_ublox::MsgId id, std::size_t idx, TMsg& msg, THandler& handler) ->
        decltype(dispatch(id, idx, msg, handler))
    {
        return dispatch(id, idx, msg, handler);
    }

    /// @brief Dispatch message to its handler.
    /// @details Uses appropriate @ref dispatchUblox5ClientInputMessage() function.
    /// @param[in] id ID of the message.
    /// @param[in] msg Reference to message object.
    /// @param[in] handler Reference to handler object.
    /// @return What the @ref dispatchUblox5ClientInputMessage() function returns.
    template <typename TMsg, typename THandler>
    static auto dispatch(cc_ublox::MsgId id, TMsg& msg, THandler& handler) ->
        decltype(cc_ublox::dispatch::dispatchUblox5ClientInputMessage<TProtOptions>(id, msg, handler))
    {
        return cc_ublox::dispatch::dispatchUblox5ClientInputMessage<TProtOptions>(id, msg, handler);
    }

    /// @brief Complementary dispatch function.
    /// @details Same as other dispatch without @b TAllMessages template parameter,
    ///     used by  @b comms::processAllWithDispatchViaDispatcher().
    template <typename TAllMessages, typename TMsg, typename THandler>
    static auto dispatch(cc_ublox::MsgId id, TMsg& msg, THandler& handler) ->
        decltype(dispatch(id, msg, handler))
    {
        return dispatch(id, msg, handler);
    }
};

/// @brief Message dispatcher class to be used with
///     @b comms::processAllWithDispatchViaDispatcher() function (or similar).
/// @details Same as Ublox5ClientInputMsgDispatcher, but passing
///     @ref cc_ublox::options::DefaultOptions as template parameter.
/// @note Defined in cc_ublox/dispatch/DispatchUblox5ClientInputMessage.h
using Ublox5ClientInputMsgDispatcherDefaultOptions =
    Ublox5ClientInputMsgDispatcher<>;

} // namespace dispatch

} // namespace cc_ublox
