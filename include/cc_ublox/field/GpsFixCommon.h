// Generated by commsdsl2comms v6.3.3

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::field::GpsFix field.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>

namespace cc_ublox
{

namespace field
{

/// @brief Common types and functions for
///     @ref cc_ublox::field::GpsFix field.
struct GpsFixCommon
{
    /// @brief Values enumerator for
    ///     @ref cc_ublox::field::GpsFix field.
    enum class ValueType : std::uint8_t
    {
        NoFix = 0x00U, ///< value <b>no fix</b>. 
        DeadReckon = 0x01U, ///< value <b>dead reckoning</b>. 
        Fix2D = 0x02U, ///< value <b>2D fix</b>. 
        Fix3D = 0x03U, ///< value <b>3D fix</b>. 
        GpsAndDeadReckon = 0x04U, ///< value <b>GPS + dead reckoning</b>. 
        TimeOnlyFix = 0x05U, ///< value <b>time only fix</b>. 

        // --- Extra values generated for convenience ---
        FirstValue = 0x00U, ///< First defined value.
        LastValue = 0x05U, ///< Last defined value.
        ValuesLimit = 0x06U, ///< Upper limit for defined values.
    };

    /// @brief Single value name info entry
    using ValueNameInfo = const char*;

    /// @brief Type returned from @ref valueNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

    /// @brief Name of the @ref cc_ublox::field::GpsFix field.
    static const char* name()
    {
        return "gpsFix";
    }

    /// @brief Retrieve name of the enum value
    static const char* valueName(ValueType val)
    {
        auto namesMapInfo = valueNamesMap();
        if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
            return nullptr;
        }

        return namesMapInfo.first[static_cast<std::size_t>(val)];
    }

    /// @brief Retrieve map of enum value names
    static ValueNamesMapInfo valueNamesMap()
    {
        static const char* Map[] = {
            "no fix",
            "dead reckoning",
            "2D fix",
            "3D fix",
            "GPS + dead reckoning",
            "time only fix"
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

        return std::make_pair(&Map[0], MapSize);
    }
};

/// @brief Values enumerator for
///     @ref cc_ublox::field::GpsFix field.
using GpsFixVal = GpsFixCommon::ValueType;

} // namespace field

} // namespace cc_ublox
