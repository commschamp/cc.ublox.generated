// Generated by commsdsl2comms v6.3.3

/// @file
/// @brief Contains definition of <b>"InfMask"</b> field.

#pragma once

#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/InfMaskCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/field/BitmaskValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace field
{

/// @brief Definition of <b>"InfMask"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_ublox::options::DefaultOptions, typename... TExtraOpts>
class InfMask : public
    comms::field::BitmaskValue<
        cc_ublox::field::FieldBase<>,
        TExtraOpts...,
        comms::option::def::FixedLength<1U>,
        comms::option::def::BitmaskReservedBits<0xE0U, 0x0U>
    >
{
    using Base =
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            TExtraOpts...,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xE0U, 0x0U>
        >;
public:
    /// @brief Provides names and generates access functions for internal bits.
    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
    ///     related to @b comms::field::BitmaskValue class from COMMS library
    ///     for details.
    ///
    ///      The generated enum values and functions are:
    ///      @li @b BitIdx_ERROR, @b getBitValue_ERROR() and @b setBitValue_ERROR().
    ///      @li @b BitIdx_WARNING, @b getBitValue_WARNING() and @b setBitValue_WARNING().
    ///      @li @b BitIdx_NOTICE, @b getBitValue_NOTICE() and @b setBitValue_NOTICE().
    ///      @li @b BitIdx_TEST, @b getBitValue_TEST() and @b setBitValue_TEST().
    ///      @li @b BitIdx_DEBUG, @b getBitValue_DEBUG() and @b setBitValue_DEBUG().
    COMMS_BITMASK_BITS_SEQ(
        ERROR,
        WARNING,
        NOTICE,
        TEST,
        DEBUG
    );

    /// @brief Retrieve name of the bit.
    /// @see @ref cc_ublox::field::InfMaskCommon::bitName().
    static const char* bitName(BitIdx idx)
    {
        return
            cc_ublox::field::InfMaskCommon::bitName(
                static_cast<std::size_t>(idx));
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_ublox::field::InfMaskCommon::name();
    }
};

} // namespace field

} // namespace cc_ublox
