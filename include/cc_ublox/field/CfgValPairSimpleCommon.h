// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::field::CfgValPairSimple field.

#pragma once

#include <type_traits>
#include <utility>
#include "cc_ublox/field/CfgValKeyIdCommon.h"
#include "cc_ublox/field/CfgValLCommon.h"
#include "cc_ublox/field/CfgValU1Common.h"
#include "cc_ublox/field/CfgValU2Common.h"
#include "cc_ublox/field/CfgValU4Common.h"
#include "cc_ublox/field/CfgValU8Common.h"

namespace cc_ublox
{

namespace field
{

/// @brief Scope for all the common definitions of the member fields of
///     @ref cc_ublox::field::CfgValPairSimple field.
struct CfgValPairSimpleMembersCommon
{
    /// @brief Common types and functions for
    ///     @ref cc_ublox::field::CfgValPairSimpleMembers::Key field.
    struct KeyCommon : public cc_ublox::field::CfgValKeyIdCommon
    {
        /// @brief Name of the @ref cc_ublox::field::CfgValPairSimpleMembers::Key field.
        static const char* name()
        {
            return "Key";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref cc_ublox::field::CfgValPairSimpleMembers::Val field.
    struct ValMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::L field.
        struct LCommon : public cc_ublox::field::CfgValLCommon
        {
            /// @brief Name of the @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::L field.
            static const char* name()
            {
                return "L";
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::U1 field.
        struct U1Common : public cc_ublox::field::CfgValU1Common
        {
            /// @brief Name of the @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::U1 field.
            static const char* name()
            {
                return "U1";
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::U2 field.
        struct U2Common : public cc_ublox::field::CfgValU2Common
        {
            /// @brief Name of the @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::U2 field.
            static const char* name()
            {
                return "U2";
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::U4 field.
        struct U4Common : public cc_ublox::field::CfgValU4Common
        {
            /// @brief Name of the @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::U4 field.
            static const char* name()
            {
                return "U4";
            }
        };

        /// @brief Common types and functions for
        ///     @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::U8 field.
        struct U8Common : public cc_ublox::field::CfgValU8Common
        {
            /// @brief Name of the @ref cc_ublox::field::CfgValPairSimpleMembers::ValMembers::U8 field.
            static const char* name()
            {
                return "U8";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref cc_ublox::field::CfgValPairSimpleMembers::Val field.
    struct ValCommon
    {
        /// @brief Single member name info entry
        using MemberNameInfo = const char*;

        /// @brief Type returned from @ref memberNamesMap() member function.
        /// @details The @b first value of the pair is pointer to the map array,
        ///     The @b second value of the pair is the size of the array.
        using MemberNamesMapInfo = std::pair<const MemberNameInfo*, std::size_t>;

        /// @brief Name of the @ref cc_ublox::field::CfgValPairSimpleMembers::Val field.
        static const char* name()
        {
            return "Val";
        }

        /// @brief Retrieve name of the member
        static const char* memberName(std::size_t idx)
        {
            auto namesMapInfo = memberNamesMap();
            if (namesMapInfo.second <= idx) {
                return nullptr;
            }

            return namesMapInfo.first[idx];
        }

        /// @brief Retrieve map of members names
        static MemberNamesMapInfo memberNamesMap()
        {
            static const MemberNameInfo Map[] = {
                ValMembersCommon::LCommon::name(),
                ValMembersCommon::U1Common::name(),
                ValMembersCommon::U2Common::name(),
                ValMembersCommon::U4Common::name(),
                ValMembersCommon::U8Common::name()
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            return std::make_pair(&Map[0], MapSize);
        }
    };
};

/// @brief Common types and functions for
///     @ref cc_ublox::field::CfgValPairSimple field.
struct CfgValPairSimpleCommon
{
    /// @brief Name of the @ref cc_ublox::field::CfgValPairSimple field.
    static const char* name()
    {
        return "CfgValPairSimple";
    }
};

} // namespace field

} // namespace cc_ublox
