// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains definition of <b>"cfgDatRot"</b> field.

#pragma once

#include "cc_ublox/field/CfgDatRotCommon.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/field/FloatValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace field
{

/// @brief Definition of <b>"cfgDatRot"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_ublox::options::DefaultOptions, typename... TExtraOpts>
class CfgDatRot : public
    comms::field::FloatValue<
        cc_ublox::field::FieldBase<>,
        float,
        TExtraOpts...,
        comms::option::def::HasName,
        comms::option::def::InvalidByDefault
    >
{
    using Base =
        comms::field::FloatValue<
            cc_ublox::field::FieldBase<>,
            float,
            TExtraOpts...,
            comms::option::def::HasName,
            comms::option::def::InvalidByDefault
        >;
public:
    /// @brief Re-definition of the value type.
    using ValueType = typename Base::ValueType;

    /// @brief Compile time detection of special values presence.
    static constexpr bool hasSpecials()
    {
        return cc_ublox::field::CfgDatRotCommon::hasSpecials();
    }

    /// @brief Requested number of digits after decimal point when value
    ///     is displayed.
    static constexpr unsigned displayDecimals()
    {
        return 0U;
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_ublox::field::CfgDatRotCommon::name();
    }

    /// @brief Generated validity check functionality.
    bool valid() const
    {
        if (Base::valid()) {
            return true;
        }

        if ((static_cast<ValueType>(-20.000000) <= Base::getValue()) &&
            (Base::getValue() <= static_cast<ValueType>(20.000000))) {
            return true;
        }

        return false;
    }
};

} // namespace field

} // namespace cc_ublox
