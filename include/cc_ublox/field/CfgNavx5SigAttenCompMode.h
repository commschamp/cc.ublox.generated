// Generated by commsdsl2comms v6.3.0

/// @file
/// @brief Contains definition of <b>"sigAttenCompMode"</b> field.

#pragma once

#include <cstdint>
#include "cc_ublox/field/CfgNavx5SigAttenCompModeCommon.h"
#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace field
{

/// @brief Definition of <b>"sigAttenCompMode"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_ublox::options::DefaultOptions, typename... TExtraOpts>
class CfgNavx5SigAttenCompMode : public
    comms::field::IntValue<
        cc_ublox::field::FieldBase<>,
        std::uint8_t,
        TExtraOpts...
    >
{
    using Base =
        comms::field::IntValue<
            cc_ublox::field::FieldBase<>,
            std::uint8_t,
            TExtraOpts...
        >;
public:
    /// @brief Re-definition of the value type.
    using ValueType = typename Base::ValueType;

    /// @brief Single special value name info entry.
    using SpecialNameInfo = cc_ublox::field::CfgNavx5SigAttenCompModeCommon::SpecialNameInfo;

    /// @brief Type returned from @ref specialNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using SpecialNamesMapInfo = cc_ublox::field::CfgNavx5SigAttenCompModeCommon::SpecialNamesMapInfo;

    /// @brief Compile time detection of special values presence.
    static constexpr bool hasSpecials()
    {
        return cc_ublox::field::CfgNavx5SigAttenCompModeCommon::hasSpecials();
    }

    /// @brief Special value <b>"Disabled"</b>.
    /// @see @ref cc_ublox::field::CfgNavx5SigAttenCompModeCommon::valueDisabled().
    static constexpr ValueType valueDisabled()
    {
        return cc_ublox::field::CfgNavx5SigAttenCompModeCommon::valueDisabled();
    }

    /// @brief Check the value is equal to special @ref valueDisabled().
    bool isDisabled() const
    {
        return Base::getValue() == valueDisabled();
    }

    /// @brief Assign special value @ref valueDisabled() to the field.
    void setDisabled()
    {
        Base::setValue(valueDisabled());
    }

    /// @brief Special value <b>"Automatic"</b>.
    /// @see @ref cc_ublox::field::CfgNavx5SigAttenCompModeCommon::valueAutomatic().
    static constexpr ValueType valueAutomatic()
    {
        return cc_ublox::field::CfgNavx5SigAttenCompModeCommon::valueAutomatic();
    }

    /// @brief Check the value is equal to special @ref valueAutomatic().
    bool isAutomatic() const
    {
        return Base::getValue() == valueAutomatic();
    }

    /// @brief Assign special value @ref valueAutomatic() to the field.
    void setAutomatic()
    {
        Base::setValue(valueAutomatic());
    }

    /// @brief Retrieve map of special value names
    static SpecialNamesMapInfo specialNamesMap()
    {
        return cc_ublox::field::CfgNavx5SigAttenCompModeCommon::specialNamesMap();
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_ublox::field::CfgNavx5SigAttenCompModeCommon::name();
    }
};

} // namespace field

} // namespace cc_ublox
