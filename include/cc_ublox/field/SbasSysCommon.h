// Generated by commsdsl2comms v5.2.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::field::SbasSys field.

#pragma once

#include <algorithm>
#include <cstdint>
#include <iterator>
#include <type_traits>
#include <utility>

namespace cc_ublox
{

namespace field
{

/// @brief Common types and functions for
///     @ref cc_ublox::field::SbasSys field.
struct SbasSysCommon
{
    /// @brief Values enumerator for
    ///     @ref cc_ublox::field::SbasSys field.
    enum class ValueType : std::int8_t
    {
        Unknown = -1, ///< value @b Unknown. 
        WAAS = 0, ///< value @b WAAS. 
        EGNOS = 1, ///< value @b EGNOS. 
        MSAS = 2, ///< value @b MSAS. 
        GAGAN = 3, ///< value @b GAGAN. 
        GPS = 16, ///< value @b GPS. 

        // --- Extra values generated for convenience ---
        FirstValue = -1, ///< First defined value.
        LastValue = 16, ///< Last defined value.
        ValuesLimit = 17, ///< Upper limit for defined values.
    };

    /// @brief Single value name info entry
    using ValueNameInfo = std::pair<ValueType, const char*>;

    /// @brief Type returned from @ref valueNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

    /// @brief Name of the @ref cc_ublox::field::SbasSys field.
    static const char* name()
    {
        return "sbasSys";
    }

    /// @brief Retrieve name of the enum value
    static const char* valueName(ValueType val)
    {
        auto namesMapInfo = valueNamesMap();
        auto begIter = namesMapInfo.first;
        auto endIter = begIter + namesMapInfo.second;
        auto iter = std::lower_bound(
            begIter, endIter, val,
            [](const ValueNameInfo& info, ValueType v) -> bool
            {
                return info.first < v;
            });

        if ((iter == endIter) || (iter->first != val)) {
            return nullptr;
        }

        return iter->second;
    }

    /// @brief Retrieve map of enum value names
    static ValueNamesMapInfo valueNamesMap()
    {
        static const ValueNameInfo Map[] = {
            std::make_pair(ValueType::Unknown, "Unknown"),
            std::make_pair(ValueType::WAAS, "WAAS"),
            std::make_pair(ValueType::EGNOS, "EGNOS"),
            std::make_pair(ValueType::MSAS, "MSAS"),
            std::make_pair(ValueType::GAGAN, "GAGAN"),
            std::make_pair(ValueType::GPS, "GPS")
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

        return std::make_pair(&Map[0], MapSize);
    }
};

/// @brief Values enumerator for
///     @ref cc_ublox::field::SbasSys field.
using SbasSysVal = SbasSysCommon::ValueType;

} // namespace field

} // namespace cc_ublox
