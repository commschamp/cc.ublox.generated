// Generated by commsdsl2comms v5.1.2

/// @file
/// @brief Contains definition of <b>"sbasService"</b> field.

#pragma once

#include "cc_ublox/field/FieldBase.h"
#include "cc_ublox/field/SbasServiceCommon.h"
#include "cc_ublox/options/DefaultOptions.h"
#include "comms/field/BitmaskValue.h"
#include "comms/options.h"

namespace cc_ublox
{

namespace field
{

/// @brief Definition of <b>"sbasService"</b> field.
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = cc_ublox::options::DefaultOptions, typename... TExtraOpts>
class SbasService : public
    comms::field::BitmaskValue<
        cc_ublox::field::FieldBase<>,
        TExtraOpts...,
        comms::option::def::FixedLength<1U>,
        comms::option::def::BitmaskReservedBits<0xE0U, 0x0U>
    >
{
    using Base =
        comms::field::BitmaskValue<
            cc_ublox::field::FieldBase<>,
            TExtraOpts...,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xE0U, 0x0U>
        >;
public:
    /// @brief Provides names and generates access functions for internal bits.
    /// @details See definition of @b COMMS_BITMASK_BITS_SEQ macro
    ///     related to @b comms::field::BitmaskValue class from COMMS library
    ///     for details.
    ///
    ///      The generated enum values and functions are:
    ///      @li @b BitIdx_Ranging, @b getBitValue_Ranging() and @b setBitValue_Ranging().
    ///      @li @b BitIdx_Corrections, @b getBitValue_Corrections() and @b setBitValue_Corrections().
    ///      @li @b BitIdx_Integrity, @b getBitValue_Integrity() and @b setBitValue_Integrity().
    ///      @li @b BitIdx_Testmode, @b getBitValue_Testmode() and @b setBitValue_Testmode().
    ///      @li @b BitIdx_Bad, @b getBitValue_Bad() and @b setBitValue_Bad().
    COMMS_BITMASK_BITS_SEQ(
        Ranging,
        Corrections,
        Integrity,
        Testmode,
        Bad
    );

    /// @brief Retrieve name of the bit.
    /// @see @ref cc_ublox::field::SbasServiceCommon::bitName().
    static const char* bitName(BitIdx idx)
    {
        return
            cc_ublox::field::SbasServiceCommon::bitName(
                static_cast<std::size_t>(idx));
    }

    /// @brief Name of the field.
    static const char* name()
    {
        return cc_ublox::field::SbasServiceCommon::name();
    }
};

} // namespace field

} // namespace cc_ublox
