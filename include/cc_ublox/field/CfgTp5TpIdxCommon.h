// Generated by commsdsl2comms v5.1.3

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref cc_ublox::field::CfgTp5TpIdx field.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>

namespace cc_ublox
{

namespace field
{

/// @brief Common types and functions for
///     @ref cc_ublox::field::CfgTp5TpIdx field.
struct CfgTp5TpIdxCommon
{
    /// @brief Values enumerator for
    ///     @ref cc_ublox::field::CfgTp5TpIdx field.
    enum class ValueType : std::uint8_t
    {
        TIMEPULSE = 0, ///< value @b TIMEPULSE. 
        TIMEPULSE2 = 1, ///< value @b TIMEPULSE2. 

        // --- Extra values generated for convenience ---
        FirstValue = 0, ///< First defined value.
        LastValue = 1, ///< Last defined value.
        ValuesLimit = 2, ///< Upper limit for defined values.
    };

    /// @brief Single value name info entry
    using ValueNameInfo = const char*;

    /// @brief Type returned from @ref valueNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using ValueNamesMapInfo = std::pair<const ValueNameInfo*, std::size_t>;

    /// @brief Name of the @ref cc_ublox::field::CfgTp5TpIdx field.
    static const char* name()
    {
        return "tpIdx";
    }

    /// @brief Retrieve name of the enum value
    static const char* valueName(ValueType val)
    {
        auto namesMapInfo = valueNamesMap();
        if (namesMapInfo.second <= static_cast<std::size_t>(val)) {
            return nullptr;
        }

        return namesMapInfo.first[static_cast<std::size_t>(val)];
    }

    /// @brief Retrieve map of enum value names
    static ValueNamesMapInfo valueNamesMap()
    {
        static const char* Map[] = {
            "TIMEPULSE",
            "TIMEPULSE2"
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

        return std::make_pair(&Map[0], MapSize);
    }
};

/// @brief Values enumerator for
///     @ref cc_ublox::field::CfgTp5TpIdx field.
using CfgTp5TpIdxVal = CfgTp5TpIdxCommon::ValueType;

} // namespace field

} // namespace cc_ublox
