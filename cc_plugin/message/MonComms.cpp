// Generated by commsdsl2comms v3.6.4

#include "MonComms.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/MonComms.h"
#include "cc_plugin/field/Res1.h"
#include "cc_plugin/field/Res8.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_version()
{
    using Field = ublox::message::MonCommsFields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_nPorts()
{
    using Field = ublox::message::MonCommsFields<>::NPorts;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .readOnly()
            .asMap();
    
}

static QVariantMap createProps_txErrors()
{
    using Field = ublox::message::MonCommsFields<>::TxErrors;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(0U, "mem")
            .add(1U, "alloc")
            .asMap();
    
}

static QVariantMap createProps_reserved0()
{
    using Field = ublox::message::MonCommsFields<>::Reserved0;
    auto props = cc_plugin::field::createProps_res1(Field::name());
    return props;
    
}

struct ProtIdsMembers
{
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::MonCommsFields<>::ProtIdsMembers::Element;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .add("UBX", 0)
                .add("NMEA", 1)
                .add("RTCM2", 2)
                .add("RTCM3", 5)
                .add("None", 255)
                .asMap();
        
    }
    
};

static QVariantMap createProps_protIds()
{
    using Field = ublox::message::MonCommsFields<>::ProtIds;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(ProtIdsMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_portId()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::PortId;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_txPending()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::TxPending;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_txBytes()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::TxBytes;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_txUsage()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::TxUsage;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_txPeakUsage()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::TxPeakUsage;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_rxPending()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::RxPending;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_rxBytes()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::RxBytes;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_rxUsage()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::RxUsage;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_rxPeakUsage()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::RxPeakUsage;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_overrunErrs()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::OverrunErrs;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        struct MsgsMembers
        {
            static QVariantMap createProps_element()
            {
                using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::MsgsMembers::Element;
                return
                    cc::property::field::ForField<Field>()
                        .name(Field::name())
                        .asMap();
                
            }
            
        };
        
        static QVariantMap createProps_msgs()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::Msgs;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .add(MsgsMembers::createProps_element())
                    .serialisedHidden()
                    .appendIndexToElementName()
                    .asMap();
            
        }
        
        static QVariantMap createProps_reserved1()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::Reserved1;
            auto props = cc_plugin::field::createProps_res8(Field::name());
            return props;
            
        }
        
        static QVariantMap createProps_skipped()
        {
            using Field = ublox::message::MonCommsFields<>::ListMembers::ElementMembers::Skipped;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
    };
    
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::MonCommsFields<>::ListMembers::Element;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .add(ElementMembers::createProps_portId())
                .add(ElementMembers::createProps_txPending())
                .add(ElementMembers::createProps_txBytes())
                .add(ElementMembers::createProps_txUsage())
                .add(ElementMembers::createProps_txPeakUsage())
                .add(ElementMembers::createProps_rxPending())
                .add(ElementMembers::createProps_rxBytes())
                .add(ElementMembers::createProps_rxUsage())
                .add(ElementMembers::createProps_rxPeakUsage())
                .add(ElementMembers::createProps_overrunErrs())
                .add(ElementMembers::createProps_msgs())
                .add(ElementMembers::createProps_reserved1())
                .add(ElementMembers::createProps_skipped())
                .asMap();
        
    }
    
};

static QVariantMap createProps_list()
{
    using Field = ublox::message::MonCommsFields<>::List;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(ListMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version());
    props.append(createProps_nPorts());
    props.append(createProps_txErrors());
    props.append(createProps_reserved0());
    props.append(createProps_protIds());
    props.append(createProps_list());
    return props;
}

} // namespace

class MonCommsImpl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::MonComms<ublox::cc_plugin::Message>,
        MonCommsImpl
    >
{
public:
    MonCommsImpl() = default;
    MonCommsImpl(const MonCommsImpl&) = delete;
    MonCommsImpl(MonCommsImpl&&) = delete;
    virtual ~MonCommsImpl() = default;
    MonCommsImpl& operator=(const MonCommsImpl&) = default;
    MonCommsImpl& operator=(MonCommsImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonComms::MonComms() : m_pImpl(new MonCommsImpl) {}
MonComms::~MonComms() = default;

MonComms& MonComms::operator=(const MonComms& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonComms& MonComms::operator=(MonComms&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* MonComms::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonComms::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonComms::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonComms::resetImpl()
{
    m_pImpl->reset();
}

bool MonComms::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const MonComms*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonComms::MsgIdParamType MonComms::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonComms::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonComms::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonComms::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonComms::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonComms::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


