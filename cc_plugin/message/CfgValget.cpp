// Generated by commsdsl2comms v3.7.0

#include "CfgValget.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/CfgValget.h"
#include "cc_plugin/field/CfgValLayer.h"
#include "cc_plugin/field/CfgValPairSimple.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_version()
{
    using Field = ublox::message::CfgValgetFields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .readOnly()
            .asMap();
    
}

static QVariantMap createProps_layer()
{
    using Field = ublox::message::CfgValgetFields<>::Layer;
    auto props = cc_plugin::field::createProps_cfgValLayer(Field::name());
    return props;
    
}

static QVariantMap createProps_position()
{
    using Field = ublox::message::CfgValgetFields<>::Position;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

struct CfgdataMembers
{
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::CfgValgetFields<>::CfgdataMembers::Element;
        auto props = cc_plugin::field::createProps_cfgValPairSimple(Field::name());
        return props;
        
    }
    
};

static QVariantMap createProps_cfgdata()
{
    using Field = ublox::message::CfgValgetFields<>::Cfgdata;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(CfgdataMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version());
    props.append(createProps_layer());
    props.append(createProps_position());
    props.append(createProps_cfgdata());
    return props;
}

} // namespace

class CfgValgetImpl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::CfgValget<ublox::cc_plugin::Message>,
        CfgValgetImpl
    >
{
public:
    CfgValgetImpl() = default;
    CfgValgetImpl(const CfgValgetImpl&) = delete;
    CfgValgetImpl(CfgValgetImpl&&) = delete;
    virtual ~CfgValgetImpl() = default;
    CfgValgetImpl& operator=(const CfgValgetImpl&) = default;
    CfgValgetImpl& operator=(CfgValgetImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgValget::CfgValget() : m_pImpl(new CfgValgetImpl) {}
CfgValget::~CfgValget() = default;

CfgValget& CfgValget::operator=(const CfgValget& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgValget& CfgValget::operator=(CfgValget&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgValget::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgValget::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgValget::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgValget::resetImpl()
{
    m_pImpl->reset();
}

bool CfgValget::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgValget*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgValget::MsgIdParamType CfgValget::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgValget::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgValget::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgValget::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgValget::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgValget::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


