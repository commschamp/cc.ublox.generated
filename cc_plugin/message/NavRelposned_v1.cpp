// Generated by commsdsl2comms v3.6.4

#include "NavRelposned_v1.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/NavRelposned_v1.h"
#include "cc_plugin/field/Itow.h"
#include "cc_plugin/field/Res1.h"
#include "cc_plugin/field/Res4.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_version()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_reserved1()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::Reserved1;
    auto props = cc_plugin::field::createProps_res1(Field::name());
    return props;
    
}

static QVariantMap createProps_refStationId()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RefStationId;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_itow()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::Itow;
    auto props = cc_plugin::field::createProps_itow(Field::name());
    return props;
    
}

static QVariantMap createProps_relPosN()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosN;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_relPosE()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosE;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_relPosD()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosD;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_relPosLength()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosLength;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_relPosHeading()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosHeading;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(5U)
            .asMap();
    
}

static QVariantMap createProps_reserved2()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::Reserved2;
    auto props = cc_plugin::field::createProps_res4(Field::name());
    return props;
    
}

static QVariantMap createProps_relPosHPN()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosHPN;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(1U)
            .asMap();
    
}

static QVariantMap createProps_relPosHPE()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosHPE;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(1U)
            .asMap();
    
}

static QVariantMap createProps_relPosHPD()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosHPD;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(1U)
            .asMap();
    
}

static QVariantMap createProps_relPosHPLength()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::RelPosHPLength;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(1U)
            .asMap();
    
}

static QVariantMap createProps_accN()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::AccN;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(1U)
            .asMap();
    
}

static QVariantMap createProps_accE()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::AccE;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(1U)
            .asMap();
    
}

static QVariantMap createProps_accD()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::AccD;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(1U)
            .asMap();
    
}

static QVariantMap createProps_accLength()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::AccLength;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(1U)
            .asMap();
    
}

static QVariantMap createProps_accHeading()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::AccHeading;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(5U)
            .asMap();
    
}

static QVariantMap createProps_reserved3()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::Reserved3;
    auto props = cc_plugin::field::createProps_res4(Field::name());
    return props;
    
}

struct FlagsMembers
{
    static QVariantMap createProps_bitsLow()
    {
        using Field = ublox::message::NavRelposned_v1Fields<>::FlagsMembers::BitsLow;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden()
                .add(0U, "gnssFixOK")
                .add(1U, "diffSoln")
                .add(2U, "relPosValid")
                .asMap();
        
    }
    
    static QVariantMap createProps_carrSoln()
    {
        using Field = ublox::message::NavRelposned_v1Fields<>::FlagsMembers::CarrSoln;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden()
                .add("No carrier", 0)
                .add("Float solution", 1)
                .add("Fixed solution", 2)
                .asMap();
        
    }
    
    static QVariantMap createProps_bitsHigh()
    {
        using Field = ublox::message::NavRelposned_v1Fields<>::FlagsMembers::BitsHigh;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden()
                .add(0U, "isMoving")
                .add(1U, "refPosMiss")
                .add(2U, "refObsMiss")
                .add(3U, "relPosHeadingValid")
                .asMap();
        
    }
    
};

static QVariantMap createProps_flags()
{
    using Field = ublox::message::NavRelposned_v1Fields<>::Flags;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(FlagsMembers::createProps_bitsLow())
            .add(FlagsMembers::createProps_carrSoln())
            .add(FlagsMembers::createProps_bitsHigh())
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version());
    props.append(createProps_reserved1());
    props.append(createProps_refStationId());
    props.append(createProps_itow());
    props.append(createProps_relPosN());
    props.append(createProps_relPosE());
    props.append(createProps_relPosD());
    props.append(createProps_relPosLength());
    props.append(createProps_relPosHeading());
    props.append(createProps_reserved2());
    props.append(createProps_relPosHPN());
    props.append(createProps_relPosHPE());
    props.append(createProps_relPosHPD());
    props.append(createProps_relPosHPLength());
    props.append(createProps_accN());
    props.append(createProps_accE());
    props.append(createProps_accD());
    props.append(createProps_accLength());
    props.append(createProps_accHeading());
    props.append(createProps_reserved3());
    props.append(createProps_flags());
    return props;
}

} // namespace

class NavRelposned_v1Impl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::NavRelposned_v1<ublox::cc_plugin::Message>,
        NavRelposned_v1Impl
    >
{
public:
    NavRelposned_v1Impl() = default;
    NavRelposned_v1Impl(const NavRelposned_v1Impl&) = delete;
    NavRelposned_v1Impl(NavRelposned_v1Impl&&) = delete;
    virtual ~NavRelposned_v1Impl() = default;
    NavRelposned_v1Impl& operator=(const NavRelposned_v1Impl&) = default;
    NavRelposned_v1Impl& operator=(NavRelposned_v1Impl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavRelposned_v1::NavRelposned_v1() : m_pImpl(new NavRelposned_v1Impl) {}
NavRelposned_v1::~NavRelposned_v1() = default;

NavRelposned_v1& NavRelposned_v1::operator=(const NavRelposned_v1& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavRelposned_v1& NavRelposned_v1::operator=(NavRelposned_v1&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavRelposned_v1::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavRelposned_v1::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavRelposned_v1::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavRelposned_v1::resetImpl()
{
    m_pImpl->reset();
}

bool NavRelposned_v1::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const NavRelposned_v1*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavRelposned_v1::MsgIdParamType NavRelposned_v1::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavRelposned_v1::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavRelposned_v1::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavRelposned_v1::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavRelposned_v1::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavRelposned_v1::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


