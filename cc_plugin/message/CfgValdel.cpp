// Generated by commsdsl2comms v3.7.0

#include "CfgValdel.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/CfgValdel.h"
#include "cc_plugin/field/CfgValKeyId.h"
#include "cc_plugin/field/Res1.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_version()
{
    using Field = ublox::message::CfgValdelFields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_layers()
{
    using Field = ublox::message::CfgValdelFields<>::Layers;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(1U, "bbr")
            .add(2U, "flash")
            .asMap();
    
}

struct TransactionMembers
{
    static QVariantMap createProps_action()
    {
        using Field = ublox::message::CfgValdelFields<>::TransactionMembers::Action;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden()
                .add("Transactionless", 0)
                .add("Start", 1)
                .add("Ongoing", 2)
                .add("End", 3)
                .asMap();
        
    }
    
    static QVariantMap createProps_reserved()
    {
        using Field = ublox::message::CfgValdelFields<>::TransactionMembers::Reserved;
        auto props = cc_plugin::field::createProps_res1(Field::name(), true);
        return props;
        
    }
    
};

static QVariantMap createProps_transaction()
{
    using Field = ublox::message::CfgValdelFields<>::Transaction;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(TransactionMembers::createProps_action())
            .add(TransactionMembers::createProps_reserved())
            .asMap();
    
}

static QVariantMap createProps_reserved0()
{
    using Field = ublox::message::CfgValdelFields<>::Reserved0;
    auto props = cc_plugin::field::createProps_res1(Field::name());
    return props;
    
}

struct KeysMembers
{
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::CfgValdelFields<>::KeysMembers::Element;
        auto props = cc_plugin::field::createProps_cfgValKeyId(Field::name());
        return props;
        
    }
    
};

static QVariantMap createProps_keys()
{
    using Field = ublox::message::CfgValdelFields<>::Keys;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(KeysMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version());
    props.append(createProps_layers());
    props.append(createProps_transaction());
    props.append(createProps_reserved0());
    props.append(createProps_keys());
    return props;
}

} // namespace

class CfgValdelImpl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::CfgValdel<ublox::cc_plugin::Message>,
        CfgValdelImpl
    >
{
public:
    CfgValdelImpl() = default;
    CfgValdelImpl(const CfgValdelImpl&) = delete;
    CfgValdelImpl(CfgValdelImpl&&) = delete;
    virtual ~CfgValdelImpl() = default;
    CfgValdelImpl& operator=(const CfgValdelImpl&) = default;
    CfgValdelImpl& operator=(CfgValdelImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgValdel::CfgValdel() : m_pImpl(new CfgValdelImpl) {}
CfgValdel::~CfgValdel() = default;

CfgValdel& CfgValdel::operator=(const CfgValdel& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgValdel& CfgValdel::operator=(CfgValdel&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgValdel::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgValdel::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgValdel::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgValdel::resetImpl()
{
    m_pImpl->reset();
}

bool CfgValdel::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgValdel*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgValdel::MsgIdParamType CfgValdel::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgValdel::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgValdel::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgValdel::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgValdel::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgValdel::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


