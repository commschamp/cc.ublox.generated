// Generated by commsdsl2comms v3.6.4

#include "MonSpan.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/MonSpan.h"
#include "cc_plugin/field/Res2.h"
#include "cc_plugin/field/Res3.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_version()
{
    using Field = ublox::message::MonSpanFields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_numRfblocks()
{
    using Field = ublox::message::MonSpanFields<>::NumRfblocks;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_reserved0()
{
    using Field = ublox::message::MonSpanFields<>::Reserved0;
    auto props = cc_plugin::field::createProps_res2(Field::name());
    return props;
    
}

struct ListMembers
{
    struct ElementMembers
    {
        struct SpectrumMembers
        {
            static QVariantMap createProps_element()
            {
                using Field = ublox::message::MonSpanFields<>::ListMembers::ElementMembers::SpectrumMembers::Element;
                return
                    cc::property::field::ForField<Field>()
                        .name(Field::name())
                        .asMap();
                
            }
            
        };
        
        static QVariantMap createProps_spectrum()
        {
            using Field = ublox::message::MonSpanFields<>::ListMembers::ElementMembers::Spectrum;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .add(SpectrumMembers::createProps_element())
                    .serialisedHidden()
                    .appendIndexToElementName()
                    .asMap();
            
        }
        
        static QVariantMap createProps_span()
        {
            using Field = ublox::message::MonSpanFields<>::ListMembers::ElementMembers::Span;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_res()
        {
            using Field = ublox::message::MonSpanFields<>::ListMembers::ElementMembers::Res;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_center()
        {
            using Field = ublox::message::MonSpanFields<>::ListMembers::ElementMembers::Center;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_pga()
        {
            using Field = ublox::message::MonSpanFields<>::ListMembers::ElementMembers::Pga;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_reserved1()
        {
            using Field = ublox::message::MonSpanFields<>::ListMembers::ElementMembers::Reserved1;
            auto props = cc_plugin::field::createProps_res3(Field::name());
            return props;
            
        }
        
    };
    
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::MonSpanFields<>::ListMembers::Element;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .add(ElementMembers::createProps_spectrum())
                .add(ElementMembers::createProps_span())
                .add(ElementMembers::createProps_res())
                .add(ElementMembers::createProps_center())
                .add(ElementMembers::createProps_pga())
                .add(ElementMembers::createProps_reserved1())
                .asMap();
        
    }
    
};

static QVariantMap createProps_list()
{
    using Field = ublox::message::MonSpanFields<>::List;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(ListMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version());
    props.append(createProps_numRfblocks());
    props.append(createProps_reserved0());
    props.append(createProps_list());
    return props;
}

} // namespace

class MonSpanImpl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::MonSpan<ublox::cc_plugin::Message>,
        MonSpanImpl
    >
{
public:
    MonSpanImpl() = default;
    MonSpanImpl(const MonSpanImpl&) = delete;
    MonSpanImpl(MonSpanImpl&&) = delete;
    virtual ~MonSpanImpl() = default;
    MonSpanImpl& operator=(const MonSpanImpl&) = default;
    MonSpanImpl& operator=(MonSpanImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonSpan::MonSpan() : m_pImpl(new MonSpanImpl) {}
MonSpan::~MonSpan() = default;

MonSpan& MonSpan::operator=(const MonSpan& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonSpan& MonSpan::operator=(MonSpan&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* MonSpan::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonSpan::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonSpan::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonSpan::resetImpl()
{
    m_pImpl->reset();
}

bool MonSpan::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const MonSpan*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonSpan::MsgIdParamType MonSpan::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonSpan::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonSpan::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonSpan::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonSpan::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonSpan::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


