// Generated by commsdsl2comms v3.7.0

#include "NavSig.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/NavSig.h"
#include "cc_plugin/field/GnssId.h"
#include "cc_plugin/field/Itow.h"
#include "cc_plugin/field/Res2.h"
#include "cc_plugin/field/Res4.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_itow()
{
    using Field = ublox::message::NavSigFields<>::Itow;
    auto props = cc_plugin::field::createProps_itow(Field::name());
    return props;
    
}

static QVariantMap createProps_version()
{
    using Field = ublox::message::NavSigFields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_numSigs()
{
    using Field = ublox::message::NavSigFields<>::NumSigs;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .readOnly()
            .asMap();
    
}

static QVariantMap createProps_reserved0()
{
    using Field = ublox::message::NavSigFields<>::Reserved0;
    auto props = cc_plugin::field::createProps_res2(Field::name());
    return props;
    
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_gnssId()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::GnssId;
            auto props = cc_plugin::field::createProps_gnssId(Field::name());
            return props;
            
        }
        
        static QVariantMap createProps_svid()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::Svid;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_sigId()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::SigId;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_freqId()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::FreqId;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_prRes()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::PrRes;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .scaledDecimals(1U)
                    .asMap();
            
        }
        
        static QVariantMap createProps_qualityInd()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::QualityInd;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .add("no signal", 0)
                    .add("searching", 1)
                    .add("signal acquired", 2)
                    .add("detected but unsable", 3)
                    .add("code locked", 4)
                    .add("code and carrier locked", 5)
                    .add("code and carrier locked", 6)
                    .add("code and carrier locked", 7)
                    .asMap();
            
        }
        
        static QVariantMap createProps_corrSource()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::CorrSource;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .add("NoCorrections", 0)
                    .add("SBAS", 1)
                    .add("BeiDou", 2)
                    .add("RTCM2", 3)
                    .add("RTCM3_OSR", 4)
                    .add("RTCM3_SSR", 5)
                    .add("QZSS_SLAS", 6)
                    .asMap();
            
        }
        
        static QVariantMap createProps_ionoModel()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::IonoModel;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .add("NoModel", 0)
                    .add("KlobucharGPS", 1)
                    .add("SBAS", 2)
                    .add("KlobucharBeiDou", 3)
                    .add("IonoDelay", 8)
                    .asMap();
            
        }
        
        struct SigFlagsMembers
        {
            static QVariantMap createProps_health()
            {
                using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::SigFlagsMembers::Health;
                return
                    cc::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden()
                        .add("Unknown", 0)
                        .add("Healthy", 1)
                        .add("Unhealthy", 2)
                        .asMap();
                
            }
            
            static QVariantMap createProps_bits()
            {
                using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::SigFlagsMembers::Bits;
                return
                    cc::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden()
                        .add(0U, "prSmoothed")
                        .add(1U, "prUsed")
                        .add(2U, "crUsed")
                        .add(3U, "doUsed")
                        .add(4U, "prCorrUsed")
                        .add(5U, "crCorrUsed")
                        .add(6U, "doCorrUsed")
                        .asMap();
                
            }
            
        };
        
        static QVariantMap createProps_sigFlags()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::SigFlags;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .add(SigFlagsMembers::createProps_health())
                    .add(SigFlagsMembers::createProps_bits())
                    .asMap();
            
        }
        
        static QVariantMap createProps_reserved1()
        {
            using Field = ublox::message::NavSigFields<>::ListMembers::ElementMembers::Reserved1;
            auto props = cc_plugin::field::createProps_res4(Field::name());
            return props;
            
        }
        
    };
    
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::NavSigFields<>::ListMembers::Element;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .add(ElementMembers::createProps_gnssId())
                .add(ElementMembers::createProps_svid())
                .add(ElementMembers::createProps_sigId())
                .add(ElementMembers::createProps_freqId())
                .add(ElementMembers::createProps_prRes())
                .add(ElementMembers::createProps_qualityInd())
                .add(ElementMembers::createProps_corrSource())
                .add(ElementMembers::createProps_ionoModel())
                .add(ElementMembers::createProps_sigFlags())
                .add(ElementMembers::createProps_reserved1())
                .asMap();
        
    }
    
};

static QVariantMap createProps_list()
{
    using Field = ublox::message::NavSigFields<>::List;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(ListMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow());
    props.append(createProps_version());
    props.append(createProps_numSigs());
    props.append(createProps_reserved0());
    props.append(createProps_list());
    return props;
}

} // namespace

class NavSigImpl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::NavSig<ublox::cc_plugin::Message>,
        NavSigImpl
    >
{
public:
    NavSigImpl() = default;
    NavSigImpl(const NavSigImpl&) = delete;
    NavSigImpl(NavSigImpl&&) = delete;
    virtual ~NavSigImpl() = default;
    NavSigImpl& operator=(const NavSigImpl&) = default;
    NavSigImpl& operator=(NavSigImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavSig::NavSig() : m_pImpl(new NavSigImpl) {}
NavSig::~NavSig() = default;

NavSig& NavSig::operator=(const NavSig& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavSig& NavSig::operator=(NavSig&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavSig::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavSig::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavSig::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavSig::resetImpl()
{
    m_pImpl->reset();
}

bool NavSig::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const NavSig*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavSig::MsgIdParamType NavSig::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavSig::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavSig::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavSig::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavSig::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavSig::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


