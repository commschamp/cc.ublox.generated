// Generated by commsdsl2comms v3.7.0

#include "MonHw3.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/MonHw3.h"
#include "cc_plugin/field/Res1.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_version()
{
    using Field = ublox::message::MonHw3Fields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_nPins()
{
    using Field = ublox::message::MonHw3Fields<>::NPins;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_flags()
{
    using Field = ublox::message::MonHw3Fields<>::Flags;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(0U, "rctCalib")
            .add(1U, "safeBoot")
            .add(2U, "xtalAbsent")
            .asMap();
    
}

static QVariantMap createProps_hwVersion()
{
    using Field = ublox::message::MonHw3Fields<>::HwVersion;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_reserved0()
{
    using Field = ublox::message::MonHw3Fields<>::Reserved0;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_pinId()
        {
            using Field = ublox::message::MonHw3Fields<>::ListMembers::ElementMembers::PinId;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        struct PinMaskMembers
        {
            static QVariantMap createProps_bitsLow()
            {
                using Field = ublox::message::MonHw3Fields<>::ListMembers::ElementMembers::PinMaskMembers::BitsLow;
                return
                    cc::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden()
                        .add(0U, "periphPIO")
                        .asMap();
                
            }
            
            static QVariantMap createProps_pinBank()
            {
                using Field = ublox::message::MonHw3Fields<>::ListMembers::ElementMembers::PinMaskMembers::PinBank;
                return
                    cc::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden()
                        .add("A", 0)
                        .add("B", 1)
                        .add("C", 2)
                        .add("D", 3)
                        .add("E", 4)
                        .add("F", 5)
                        .add("G", 6)
                        .add("H", 7)
                        .asMap();
                
            }
            
            static QVariantMap createProps_bitsHigh()
            {
                using Field = ublox::message::MonHw3Fields<>::ListMembers::ElementMembers::PinMaskMembers::BitsHigh;
                return
                    cc::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden()
                        .add(0U, "direction")
                        .add(1U, "value")
                        .add(2U, "vpManager")
                        .add(3U, "pioIrq")
                        .add(4U, "pioPullHigh")
                        .add(5U, "pioPullLow")
                        .asMap();
                
            }
            
        };
        
        static QVariantMap createProps_pinMask()
        {
            using Field = ublox::message::MonHw3Fields<>::ListMembers::ElementMembers::PinMask;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .add(PinMaskMembers::createProps_bitsLow())
                    .add(PinMaskMembers::createProps_pinBank())
                    .add(PinMaskMembers::createProps_bitsHigh())
                    .asMap();
            
        }
        
        static QVariantMap createProps_vP()
        {
            using Field = ublox::message::MonHw3Fields<>::ListMembers::ElementMembers::VP;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_reserved1()
        {
            using Field = ublox::message::MonHw3Fields<>::ListMembers::ElementMembers::Reserved1;
            auto props = cc_plugin::field::createProps_res1(Field::name());
            return props;
            
        }
        
    };
    
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::MonHw3Fields<>::ListMembers::Element;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .add(ElementMembers::createProps_pinId())
                .add(ElementMembers::createProps_pinMask())
                .add(ElementMembers::createProps_vP())
                .add(ElementMembers::createProps_reserved1())
                .asMap();
        
    }
    
};

static QVariantMap createProps_list()
{
    using Field = ublox::message::MonHw3Fields<>::List;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(ListMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version());
    props.append(createProps_nPins());
    props.append(createProps_flags());
    props.append(createProps_hwVersion());
    props.append(createProps_reserved0());
    props.append(createProps_list());
    return props;
}

} // namespace

class MonHw3Impl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::MonHw3<ublox::cc_plugin::Message>,
        MonHw3Impl
    >
{
public:
    MonHw3Impl() = default;
    MonHw3Impl(const MonHw3Impl&) = delete;
    MonHw3Impl(MonHw3Impl&&) = delete;
    virtual ~MonHw3Impl() = default;
    MonHw3Impl& operator=(const MonHw3Impl&) = default;
    MonHw3Impl& operator=(MonHw3Impl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonHw3::MonHw3() : m_pImpl(new MonHw3Impl) {}
MonHw3::~MonHw3() = default;

MonHw3& MonHw3::operator=(const MonHw3& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonHw3& MonHw3::operator=(MonHw3&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* MonHw3::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonHw3::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonHw3::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonHw3::resetImpl()
{
    m_pImpl->reset();
}

bool MonHw3::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const MonHw3*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonHw3::MsgIdParamType MonHw3::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonHw3::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonHw3::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonHw3::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonHw3::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonHw3::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


