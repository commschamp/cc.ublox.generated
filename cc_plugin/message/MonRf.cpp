// Generated by commsdsl2comms v3.7.0

#include "MonRf.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/MonRf.h"
#include "cc_plugin/field/MonAntPower.h"
#include "cc_plugin/field/MonAntStatus.h"
#include "cc_plugin/field/MonJammingState.h"
#include "cc_plugin/field/Res1.h"
#include "cc_plugin/field/Res2.h"
#include "cc_plugin/field/Res3.h"
#include "cc_plugin/field/Res4.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_version()
{
    using Field = ublox::message::MonRfFields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_nBlocks()
{
    using Field = ublox::message::MonRfFields<>::NBlocks;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_reserved0()
{
    using Field = ublox::message::MonRfFields<>::Reserved0;
    auto props = cc_plugin::field::createProps_res2(Field::name());
    return props;
    
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_blockId()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::BlockId;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        struct FlagsMembers
        {
            static QVariantMap createProps_jammingState()
            {
                using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::FlagsMembers::JammingState;
                auto props = cc_plugin::field::createProps_monJammingState(Field::name(), true);
                return props;
                
            }
            
            static QVariantMap createProps_res1()
            {
                using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::FlagsMembers::Res1;
                auto props = cc_plugin::field::createProps_res1(Field::name(), true);
                return props;
                
            }
            
        };
        
        static QVariantMap createProps_flags()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::Flags;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .add(FlagsMembers::createProps_jammingState())
                    .add(FlagsMembers::createProps_res1())
                    .asMap();
            
        }
        
        static QVariantMap createProps_antStatus()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::AntStatus;
            auto props = cc_plugin::field::createProps_monAntStatus(Field::name());
            return props;
            
        }
        
        static QVariantMap createProps_antPower()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::AntPower;
            auto props = cc_plugin::field::createProps_monAntPower(Field::name());
            return props;
            
        }
        
        static QVariantMap createProps_postStatus()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::PostStatus;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_reserved1()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::Reserved1;
            auto props = cc_plugin::field::createProps_res4(Field::name());
            return props;
            
        }
        
        static QVariantMap createProps_noisePerMS()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::NoisePerMS;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_agcCnt()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::AgcCnt;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_jamInd()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::JamInd;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_ofsI()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::OfsI;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_magI()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::MagI;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_ofsQ()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::OfsQ;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_magQ()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::MagQ;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_reserved2()
        {
            using Field = ublox::message::MonRfFields<>::ListMembers::ElementMembers::Reserved2;
            auto props = cc_plugin::field::createProps_res3(Field::name());
            return props;
            
        }
        
    };
    
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::MonRfFields<>::ListMembers::Element;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .add(ElementMembers::createProps_blockId())
                .add(ElementMembers::createProps_flags())
                .add(ElementMembers::createProps_antStatus())
                .add(ElementMembers::createProps_antPower())
                .add(ElementMembers::createProps_postStatus())
                .add(ElementMembers::createProps_reserved1())
                .add(ElementMembers::createProps_noisePerMS())
                .add(ElementMembers::createProps_agcCnt())
                .add(ElementMembers::createProps_jamInd())
                .add(ElementMembers::createProps_ofsI())
                .add(ElementMembers::createProps_magI())
                .add(ElementMembers::createProps_ofsQ())
                .add(ElementMembers::createProps_magQ())
                .add(ElementMembers::createProps_reserved2())
                .asMap();
        
    }
    
};

static QVariantMap createProps_list()
{
    using Field = ublox::message::MonRfFields<>::List;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(ListMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version());
    props.append(createProps_nBlocks());
    props.append(createProps_reserved0());
    props.append(createProps_list());
    return props;
}

} // namespace

class MonRfImpl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::MonRf<ublox::cc_plugin::Message>,
        MonRfImpl
    >
{
public:
    MonRfImpl() = default;
    MonRfImpl(const MonRfImpl&) = delete;
    MonRfImpl(MonRfImpl&&) = delete;
    virtual ~MonRfImpl() = default;
    MonRfImpl& operator=(const MonRfImpl&) = default;
    MonRfImpl& operator=(MonRfImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonRf::MonRf() : m_pImpl(new MonRfImpl) {}
MonRf::~MonRf() = default;

MonRf& MonRf::operator=(const MonRf& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonRf& MonRf::operator=(MonRf&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* MonRf::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonRf::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonRf::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonRf::resetImpl()
{
    m_pImpl->reset();
}

bool MonRf::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const MonRf*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonRf::MsgIdParamType MonRf::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonRf::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonRf::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonRf::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonRf::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonRf::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


