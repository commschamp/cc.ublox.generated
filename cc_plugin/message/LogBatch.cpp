// Generated by commsdsl2comms v3.7.0

#include "LogBatch.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/LogBatch.h"
#include "cc_plugin/field/Day.h"
#include "cc_plugin/field/Dop.h"
#include "cc_plugin/field/GpsFix.h"
#include "cc_plugin/field/HAcc.h"
#include "cc_plugin/field/HMSL.h"
#include "cc_plugin/field/Heading.h"
#include "cc_plugin/field/HeadingAcc.h"
#include "cc_plugin/field/Height.h"
#include "cc_plugin/field/Hour.h"
#include "cc_plugin/field/Itow.h"
#include "cc_plugin/field/Lat.h"
#include "cc_plugin/field/Lon.h"
#include "cc_plugin/field/Min.h"
#include "cc_plugin/field/Month.h"
#include "cc_plugin/field/PsmState.h"
#include "cc_plugin/field/Res1.h"
#include "cc_plugin/field/Res2.h"
#include "cc_plugin/field/Res4.h"
#include "cc_plugin/field/Sec.h"
#include "cc_plugin/field/VAcc.h"
#include "cc_plugin/field/Vel.h"
#include "cc_plugin/field/Year.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_version()
{
    using Field = ublox::message::LogBatchFields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_contentValid()
{
    using Field = ublox::message::LogBatchFields<>::ContentValid;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(0U, "extraPvt")
            .add(1U, "extraOdo")
            .asMap();
    
}

static QVariantMap createProps_msgCount()
{
    using Field = ublox::message::LogBatchFields<>::MsgCount;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_iTOW()
{
    using Field = ublox::message::LogBatchFields<>::ITOW;
    auto props = cc_plugin::field::createProps_itow(Field::name());
    return props;
    
}

static QVariantMap createProps_year()
{
    using Field = ublox::message::LogBatchFields<>::Year;
    auto props = cc_plugin::field::createProps_year(Field::name());
    return props;
    
}

static QVariantMap createProps_month()
{
    using Field = ublox::message::LogBatchFields<>::Month;
    auto props = cc_plugin::field::createProps_month(Field::name());
    return props;
    
}

static QVariantMap createProps_day()
{
    using Field = ublox::message::LogBatchFields<>::Day;
    auto props = cc_plugin::field::createProps_day(Field::name());
    return props;
    
}

static QVariantMap createProps_hour()
{
    using Field = ublox::message::LogBatchFields<>::Hour;
    auto props = cc_plugin::field::createProps_hour(Field::name());
    return props;
    
}

static QVariantMap createProps_min()
{
    using Field = ublox::message::LogBatchFields<>::Min;
    auto props = cc_plugin::field::createProps_min(Field::name());
    return props;
    
}

static QVariantMap createProps_sec()
{
    using Field = ublox::message::LogBatchFields<>::Sec;
    auto props = cc_plugin::field::createProps_sec(Field::name());
    return props;
    
}

static QVariantMap createProps_valid()
{
    using Field = ublox::message::LogBatchFields<>::Valid;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(0U, "validDate")
            .add(1U, "validTime")
            .asMap();
    
}

static QVariantMap createProps_tAcc()
{
    using Field = ublox::message::LogBatchFields<>::TAcc;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_fracSec()
{
    using Field = ublox::message::LogBatchFields<>::FracSec;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_fixType()
{
    using Field = ublox::message::LogBatchFields<>::FixType;
    auto props = cc_plugin::field::createProps_gpsFix(Field::name());
    return props;
    
}

struct FlagsMembers
{
    static QVariantMap createProps_bitsLow()
    {
        using Field = ublox::message::LogBatchFields<>::FlagsMembers::BitsLow;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden()
                .add(0U, "gnssFixOK")
                .add(1U, "diffSoln")
                .asMap();
        
    }
    
    static QVariantMap createProps_psmState()
    {
        using Field = ublox::message::LogBatchFields<>::FlagsMembers::PsmState;
        auto props = cc_plugin::field::createProps_psmState(Field::name(), true);
        return props;
        
    }
    
    static QVariantMap createProps_reserved()
    {
        using Field = ublox::message::LogBatchFields<>::FlagsMembers::Reserved;
        auto props = cc_plugin::field::createProps_res1(Field::name(), true);
        auto extraProps =
            cc::property::field::Common()
                .hidden(true);
        extraProps.setTo(props);
        return props;
        
    }
    
};

static QVariantMap createProps_flags()
{
    using Field = ublox::message::LogBatchFields<>::Flags;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(FlagsMembers::createProps_bitsLow())
            .add(FlagsMembers::createProps_psmState())
            .add(FlagsMembers::createProps_reserved())
            .asMap();
    
}

static QVariantMap createProps_flags2()
{
    using Field = ublox::message::LogBatchFields<>::Flags2;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_numSV()
{
    using Field = ublox::message::LogBatchFields<>::NumSV;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_lon()
{
    using Field = ublox::message::LogBatchFields<>::Lon;
    auto props = cc_plugin::field::createProps_lon(Field::name());
    return props;
    
}

static QVariantMap createProps_lat()
{
    using Field = ublox::message::LogBatchFields<>::Lat;
    auto props = cc_plugin::field::createProps_lat(Field::name());
    return props;
    
}

static QVariantMap createProps_height()
{
    using Field = ublox::message::LogBatchFields<>::Height;
    auto props = cc_plugin::field::createProps_height(Field::name());
    return props;
    
}

static QVariantMap createProps_hMSL()
{
    using Field = ublox::message::LogBatchFields<>::HMSL;
    auto props = cc_plugin::field::createProps_hMSL(Field::name());
    return props;
    
}

static QVariantMap createProps_hAcc()
{
    using Field = ublox::message::LogBatchFields<>::HAcc;
    auto props = cc_plugin::field::createProps_hAcc(Field::name());
    return props;
    
}

static QVariantMap createProps_vAcc()
{
    using Field = ublox::message::LogBatchFields<>::VAcc;
    auto props = cc_plugin::field::createProps_vAcc(Field::name());
    return props;
    
}

static QVariantMap createProps_velN()
{
    using Field = ublox::message::LogBatchFields<>::VelN;
    auto props = cc_plugin::field::createProps_vel(Field::name());
    return props;
    
}

static QVariantMap createProps_velE()
{
    using Field = ublox::message::LogBatchFields<>::VelE;
    auto props = cc_plugin::field::createProps_vel(Field::name());
    return props;
    
}

static QVariantMap createProps_velD()
{
    using Field = ublox::message::LogBatchFields<>::VelD;
    auto props = cc_plugin::field::createProps_vel(Field::name());
    return props;
    
}

static QVariantMap createProps_gSpeed()
{
    using Field = ublox::message::LogBatchFields<>::GSpeed;
    auto props = cc_plugin::field::createProps_vel(Field::name());
    return props;
    
}

static QVariantMap createProps_headMot()
{
    using Field = ublox::message::LogBatchFields<>::HeadMot;
    auto props = cc_plugin::field::createProps_heading(Field::name());
    return props;
    
}

static QVariantMap createProps_sAcc()
{
    using Field = ublox::message::LogBatchFields<>::SAcc;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_headAcc()
{
    using Field = ublox::message::LogBatchFields<>::HeadAcc;
    auto props = cc_plugin::field::createProps_headingAcc(Field::name());
    return props;
    
}

static QVariantMap createProps_pDOP()
{
    using Field = ublox::message::LogBatchFields<>::PDOP;
    auto props = cc_plugin::field::createProps_dop(Field::name());
    return props;
    
}

static QVariantMap createProps_reserved0()
{
    using Field = ublox::message::LogBatchFields<>::Reserved0;
    auto props = cc_plugin::field::createProps_res2(Field::name());
    return props;
    
}

static QVariantMap createProps_distance()
{
    using Field = ublox::message::LogBatchFields<>::Distance;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_totalDistance()
{
    using Field = ublox::message::LogBatchFields<>::TotalDistance;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_totalStd()
{
    using Field = ublox::message::LogBatchFields<>::TotalStd;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_reserved1()
{
    using Field = ublox::message::LogBatchFields<>::Reserved1;
    auto props = cc_plugin::field::createProps_res4(Field::name());
    return props;
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version());
    props.append(createProps_contentValid());
    props.append(createProps_msgCount());
    props.append(createProps_iTOW());
    props.append(createProps_year());
    props.append(createProps_month());
    props.append(createProps_day());
    props.append(createProps_hour());
    props.append(createProps_min());
    props.append(createProps_sec());
    props.append(createProps_valid());
    props.append(createProps_tAcc());
    props.append(createProps_fracSec());
    props.append(createProps_fixType());
    props.append(createProps_flags());
    props.append(createProps_flags2());
    props.append(createProps_numSV());
    props.append(createProps_lon());
    props.append(createProps_lat());
    props.append(createProps_height());
    props.append(createProps_hMSL());
    props.append(createProps_hAcc());
    props.append(createProps_vAcc());
    props.append(createProps_velN());
    props.append(createProps_velE());
    props.append(createProps_velD());
    props.append(createProps_gSpeed());
    props.append(createProps_headMot());
    props.append(createProps_sAcc());
    props.append(createProps_headAcc());
    props.append(createProps_pDOP());
    props.append(createProps_reserved0());
    props.append(createProps_distance());
    props.append(createProps_totalDistance());
    props.append(createProps_totalStd());
    props.append(createProps_reserved1());
    return props;
}

} // namespace

class LogBatchImpl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::LogBatch<ublox::cc_plugin::Message>,
        LogBatchImpl
    >
{
public:
    LogBatchImpl() = default;
    LogBatchImpl(const LogBatchImpl&) = delete;
    LogBatchImpl(LogBatchImpl&&) = delete;
    virtual ~LogBatchImpl() = default;
    LogBatchImpl& operator=(const LogBatchImpl&) = default;
    LogBatchImpl& operator=(LogBatchImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

LogBatch::LogBatch() : m_pImpl(new LogBatchImpl) {}
LogBatch::~LogBatch() = default;

LogBatch& LogBatch::operator=(const LogBatch& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

LogBatch& LogBatch::operator=(LogBatch&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* LogBatch::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& LogBatch::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void LogBatch::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void LogBatch::resetImpl()
{
    m_pImpl->reset();
}

bool LogBatch::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const LogBatch*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

LogBatch::MsgIdParamType LogBatch::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus LogBatch::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus LogBatch::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool LogBatch::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t LogBatch::lengthImpl() const
{
    return m_pImpl->length();
}

bool LogBatch::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


