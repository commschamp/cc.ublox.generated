// Generated by commsdsl2comms v3.6.4

#include "NavSlas.h"

#include "comms_champion/property/field.h"
#include "comms_champion/ProtocolMessageBase.h"
#include "ublox/message/NavSlas.h"
#include "cc_plugin/field/GnssId.h"
#include "cc_plugin/field/Itow.h"
#include "cc_plugin/field/Res3.h"
#include "cc_plugin/field/Res4.h"

namespace cc = comms_champion;

namespace ublox
{

namespace cc_plugin
{

namespace message
{

namespace
{

static QVariantMap createProps_itow()
{
    using Field = ublox::message::NavSlasFields<>::Itow;
    auto props = cc_plugin::field::createProps_itow(Field::name());
    return props;
    
}

static QVariantMap createProps_version()
{
    using Field = ublox::message::NavSlasFields<>::Version;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_reserved0()
{
    using Field = ublox::message::NavSlasFields<>::Reserved0;
    auto props = cc_plugin::field::createProps_res3(Field::name());
    return props;
    
}

static QVariantMap createProps_gmsLon()
{
    using Field = ublox::message::NavSlasFields<>::GmsLon;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(3U)
            .asMap();
    
}

static QVariantMap createProps_gmsLat()
{
    using Field = ublox::message::NavSlasFields<>::GmsLat;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .scaledDecimals(3U)
            .asMap();
    
}

static QVariantMap createProps_gmsCode()
{
    using Field = ublox::message::NavSlasFields<>::GmsCode;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_qzssSvId()
{
    using Field = ublox::message::NavSlasFields<>::QzssSvId;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .asMap();
    
}

static QVariantMap createProps_serviceFlags()
{
    using Field = ublox::message::NavSlasFields<>::ServiceFlags;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(0U, "gmsAvailable")
            .add(1U, "qzssSvAvailable")
            .add(2U, "testMode")
            .asMap();
    
}

static QVariantMap createProps_cnt()
{
    using Field = ublox::message::NavSlasFields<>::Cnt;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .readOnly()
            .asMap();
    
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_gnssId()
        {
            using Field = ublox::message::NavSlasFields<>::ListMembers::ElementMembers::GnssId;
            auto props = cc_plugin::field::createProps_gnssId(Field::name());
            return props;
            
        }
        
        static QVariantMap createProps_svid()
        {
            using Field = ublox::message::NavSlasFields<>::ListMembers::ElementMembers::Svid;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_sigId()
        {
            using Field = ublox::message::NavSlasFields<>::ListMembers::ElementMembers::SigId;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
        static QVariantMap createProps_reserved1()
        {
            using Field = ublox::message::NavSlasFields<>::ListMembers::ElementMembers::Reserved1;
            auto props = cc_plugin::field::createProps_res4(Field::name());
            return props;
            
        }
        
        static QVariantMap createProps_prc()
        {
            using Field = ublox::message::NavSlasFields<>::ListMembers::ElementMembers::Prc;
            return
                cc::property::field::ForField<Field>()
                    .name(Field::name())
                    .asMap();
            
        }
        
    };
    
    static QVariantMap createProps_element()
    {
        using Field = ublox::message::NavSlasFields<>::ListMembers::Element;
        return
            cc::property::field::ForField<Field>()
                .name(Field::name())
                .add(ElementMembers::createProps_gnssId())
                .add(ElementMembers::createProps_svid())
                .add(ElementMembers::createProps_sigId())
                .add(ElementMembers::createProps_reserved1())
                .add(ElementMembers::createProps_prc())
                .asMap();
        
    }
    
};

static QVariantMap createProps_list()
{
    using Field = ublox::message::NavSlasFields<>::List;
    return
        cc::property::field::ForField<Field>()
            .name(Field::name())
            .add(ListMembers::createProps_element())
            .serialisedHidden()
            .appendIndexToElementName()
            .asMap();
    
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow());
    props.append(createProps_version());
    props.append(createProps_reserved0());
    props.append(createProps_gmsLon());
    props.append(createProps_gmsLat());
    props.append(createProps_gmsCode());
    props.append(createProps_qzssSvId());
    props.append(createProps_serviceFlags());
    props.append(createProps_cnt());
    props.append(createProps_list());
    return props;
}

} // namespace

class NavSlasImpl : public
    comms_champion::ProtocolMessageBase<
        ublox::message::NavSlas<ublox::cc_plugin::Message>,
        NavSlasImpl
    >
{
public:
    NavSlasImpl() = default;
    NavSlasImpl(const NavSlasImpl&) = delete;
    NavSlasImpl(NavSlasImpl&&) = delete;
    virtual ~NavSlasImpl() = default;
    NavSlasImpl& operator=(const NavSlasImpl&) = default;
    NavSlasImpl& operator=(NavSlasImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavSlas::NavSlas() : m_pImpl(new NavSlasImpl) {}
NavSlas::~NavSlas() = default;

NavSlas& NavSlas::operator=(const NavSlas& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavSlas& NavSlas::operator=(NavSlas&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavSlas::nameImpl() const
{
    return static_cast<const cc::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavSlas::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavSlas::dispatchImpl(cc::MessageHandler& handler)
{
    static_cast<cc::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavSlas::resetImpl()
{
    m_pImpl->reset();
}

bool NavSlas::assignImpl(const cc::Message& other)
{
    auto* castedOther = dynamic_cast<const NavSlas*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavSlas::MsgIdParamType NavSlas::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavSlas::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavSlas::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavSlas::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavSlas::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavSlas::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_plugin

} // namespace ublox


